/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountStatus = {
  AccountStatusUnspecified: "ACCOUNT_STATUS_UNSPECIFIED",
  AccountStatusActive: "ACCOUNT_STATUS_ACTIVE",
  AccountStatusSuspended: "ACCOUNT_STATUS_SUSPENDED",
  AccountStatusPendingVerification: "ACCOUNT_STATUS_PENDING_VERIFICATION",
} as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountStatus =
  ClosedEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountStatus
  >;

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateRoles = {
  RoleUnspecified: "ROLE_UNSPECIFIED",
  RoleAdmin: "ROLE_ADMIN",
  RoleUser: "ROLE_USER",
  RoleViewer: "ROLE_VIEWER",
  RoleManager: "ROLE_MANAGER",
} as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateRoles = ClosedEnum<
  typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateRoles
>;

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdatePermissions = {
  PermissionUnspecified: "PERMISSION_UNSPECIFIED",
  PermissionRead: "PERMISSION_READ",
  PermissionWrite: "PERMISSION_WRITE",
  PermissionDelete: "PERMISSION_DELETE",
  PermissionManageUsers: "PERMISSION_MANAGE_USERS",
  PermissionManageBilling: "PERMISSION_MANAGE_BILLING",
  PermissionViewAnalytics: "PERMISSION_VIEW_ANALYTICS",
  PermissionManageWorkflows: "PERMISSION_MANAGE_WORKFLOWS",
} as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdatePermissions =
  ClosedEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdatePermissions
  >;

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateTimezone = {
  TimezoneUnspecified: "TIMEZONE_UNSPECIFIED",
  TimezoneUtc: "TIMEZONE_UTC",
  TimezoneEst: "TIMEZONE_EST",
  TimezoneCst: "TIMEZONE_CST",
  TimezoneMst: "TIMEZONE_MST",
  TimezonePst: "TIMEZONE_PST",
  TimezoneGmt: "TIMEZONE_GMT",
  TimezoneCet: "TIMEZONE_CET",
  TimezoneIst: "TIMEZONE_IST",
  TimezoneJst: "TIMEZONE_JST",
  TimezoneAest: "TIMEZONE_AEST",
} as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateTimezone =
  ClosedEnum<typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateTimezone>;

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateStatus = {
  WorkflowStatusUnspecified: "WORKFLOW_STATUS_UNSPECIFIED",
  WorkflowStatusDraft: "WORKFLOW_STATUS_DRAFT",
  WorkflowStatusActive: "WORKFLOW_STATUS_ACTIVE",
  WorkflowStatusPaused: "WORKFLOW_STATUS_PAUSED",
  WorkflowStatusFailed: "WORKFLOW_STATUS_FAILED",
  WorkflowStatusCompleted: "WORKFLOW_STATUS_COMPLETED",
  WorkflowStatusArchived: "WORKFLOW_STATUS_ARCHIVED",
  WorkflowStatusPendingApproval: "WORKFLOW_STATUS_PENDING_APPROVAL",
  WorkflowStatusValidating: "WORKFLOW_STATUS_VALIDATING",
  WorkflowStatusQuotaExceeded: "WORKFLOW_STATUS_QUOTA_EXCEEDED",
  WorkflowStatusWarning: "WORKFLOW_STATUS_WARNING",
} as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateStatus = ClosedEnum<
  typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateStatus
>;

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsStatus = {
  BackgroundJobStatusUnspecified: "BACKGROUND_JOB_STATUS_UNSPECIFIED",
  BackgroundJobStatusQueued: "BACKGROUND_JOB_STATUS_QUEUED",
  BackgroundJobStatusInProgress: "BACKGROUND_JOB_STATUS_IN_PROGRESS",
  BackgroundJobStatusCompleted: "BACKGROUND_JOB_STATUS_COMPLETED",
  BackgroundJobStatusFailed: "BACKGROUND_JOB_STATUS_FAILED",
  BackgroundJobStatusCancelled: "BACKGROUND_JOB_STATUS_CANCELLED",
  BackgroundJobStatusTimedOut: "BACKGROUND_JOB_STATUS_TIMED_OUT",
} as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsStatus =
  ClosedEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsStatus
  >;

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateLang = {
  LanguageUnspecified: "LANGUAGE_UNSPECIFIED",
  LanguageEnglish: "LANGUAGE_ENGLISH",
  LanguageSpanish: "LANGUAGE_SPANISH",
  LanguageFrench: "LANGUAGE_FRENCH",
  LanguageGerman: "LANGUAGE_GERMAN",
  LanguageItalian: "LANGUAGE_ITALIAN",
  LanguagePortuguese: "LANGUAGE_PORTUGUESE",
  LanguageDutch: "LANGUAGE_DUTCH",
  LanguageRussian: "LANGUAGE_RUSSIAN",
  LanguageChinese: "LANGUAGE_CHINESE",
  LanguageJapanese: "LANGUAGE_JAPANESE",
  LanguageKorean: "LANGUAGE_KOREAN",
  LanguageArabic: "LANGUAGE_ARABIC",
  LanguageHindi: "LANGUAGE_HINDI",
  LanguageGreek: "LANGUAGE_GREEK",
  LanguageTurkish: "LANGUAGE_TURKISH",
} as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateLang = ClosedEnum<
  typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateLang
>;

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateDay = {
  DayOfWeekUnspecified: "DAY_OF_WEEK_UNSPECIFIED",
  DayOfWeekMonday: "DAY_OF_WEEK_MONDAY",
  DayOfWeekTuesday: "DAY_OF_WEEK_TUESDAY",
  DayOfWeekWednesday: "DAY_OF_WEEK_WEDNESDAY",
  DayOfWeekThursday: "DAY_OF_WEEK_THURSDAY",
  DayOfWeekFriday: "DAY_OF_WEEK_FRIDAY",
  DayOfWeekSaturday: "DAY_OF_WEEK_SATURDAY",
  DayOfWeekSunday: "DAY_OF_WEEK_SUNDAY",
} as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateDay = ClosedEnum<
  typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateDay
>;

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateRegularHours = {
  id?: string | undefined;
  day?: PutApiLeadScraperMicroserviceApiV1AccountsUpdateDay | undefined;
  openTime?: string | undefined;
  closeTime?: string | undefined;
  closed?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
};

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsDay = {
  DayOfWeekUnspecified: "DAY_OF_WEEK_UNSPECIFIED",
  DayOfWeekMonday: "DAY_OF_WEEK_MONDAY",
  DayOfWeekTuesday: "DAY_OF_WEEK_TUESDAY",
  DayOfWeekWednesday: "DAY_OF_WEEK_WEDNESDAY",
  DayOfWeekThursday: "DAY_OF_WEEK_THURSDAY",
  DayOfWeekFriday: "DAY_OF_WEEK_FRIDAY",
  DayOfWeekSaturday: "DAY_OF_WEEK_SATURDAY",
  DayOfWeekSunday: "DAY_OF_WEEK_SUNDAY",
} as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsDay =
  ClosedEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsDay
  >;

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateSpecialHours = {
  id?: string | undefined;
  day?: PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsDay | undefined;
  openTime?: string | undefined;
  closeTime?: string | undefined;
  closed?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateReviews = {
  id?: string | undefined;
  author?: string | undefined;
  rating?: number | undefined;
  text?: string | undefined;
  time?: Date | undefined;
  language?: string | undefined;
  profilePhotoUrl?: string | undefined;
  reviewCount?: number | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
};

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateRevenueRange = {
  RevenueRangeUnspecified: "REVENUE_RANGE_UNSPECIFIED",
  RevenueRangeUnder100K: "REVENUE_RANGE_UNDER_100K",
  RevenueRange100KTo1M: "REVENUE_RANGE_100K_TO_1M",
  RevenueRange1MTo10M: "REVENUE_RANGE_1M_TO_10M",
  RevenueRange10MTo50M: "REVENUE_RANGE_10M_TO_50M",
  RevenueRangeOver50M: "REVENUE_RANGE_OVER_50M",
} as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateRevenueRange =
  ClosedEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateRevenueRange
  >;

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmployeeBenefits =
  {
    EmployeeBenefitUnspecified: "EMPLOYEE_BENEFIT_UNSPECIFIED",
    EmployeeBenefitHealthInsurance: "EMPLOYEE_BENEFIT_HEALTH_INSURANCE",
    EmployeeBenefitRetirementPlan: "EMPLOYEE_BENEFIT_RETIREMENT_PLAN",
    EmployeeBenefitPaidTimeOff: "EMPLOYEE_BENEFIT_PAID_TIME_OFF",
    EmployeeBenefitRemoteWork: "EMPLOYEE_BENEFIT_REMOTE_WORK",
  } as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmployeeBenefits =
  ClosedEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmployeeBenefits
  >;

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateLeads = {
  id?: string | undefined;
  name?: string | undefined;
  website?: string | undefined;
  phone?: string | undefined;
  address?: string | undefined;
  city?: string | undefined;
  state?: string | undefined;
  country?: string | undefined;
  latitude?: number | undefined;
  longitude?: number | undefined;
  googleRating?: number | undefined;
  reviewCount?: number | undefined;
  industry?: string | undefined;
  employeeCount?: number | undefined;
  estimatedRevenue?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  placeId?: string | undefined;
  googleMapsUrl?: string | undefined;
  businessStatus?: string | undefined;
  regularHours?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateRegularHours>
    | undefined;
  specialHours?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateSpecialHours>
    | undefined;
  photoReferences?: Array<string> | undefined;
  mainPhotoUrl?: string | undefined;
  reviews?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateReviews>
    | undefined;
  types?: Array<string> | undefined;
  amenities?: Array<string> | undefined;
  servesVegetarianFood?: boolean | undefined;
  outdoorSeating?: boolean | undefined;
  paymentMethods?: Array<string> | undefined;
  wheelchairAccessible?: boolean | undefined;
  parkingAvailable?: boolean | undefined;
  socialMedia?: { [k: string]: string } | undefined;
  ratingCategory?: string | undefined;
  rating?: number | undefined;
  count?: number | undefined;
  lastUpdated?: Date | undefined;
  dataSourceVersion?: string | undefined;
  scrapingSessionId?: string | undefined;
  alternatePhones?: Array<string> | undefined;
  contactPersonName?: string | undefined;
  contactPersonTitle?: string | undefined;
  contactEmail?: string | undefined;
  foundedYear?: number | undefined;
  businessType?: string | undefined;
  certifications?: Array<string> | undefined;
  licenseNumber?: string | undefined;
  revenueRange?:
    | PutApiLeadScraperMicroserviceApiV1AccountsUpdateRevenueRange
    | undefined;
  fundingStage?: string | undefined;
  isPublicCompany?: boolean | undefined;
  websiteLoadSpeed?: number | undefined;
  hasSslCertificate?: boolean | undefined;
  cmsUsed?: string | undefined;
  ecommercePlatforms?: Array<string> | undefined;
  timezone?: string | undefined;
  neighborhood?: string | undefined;
  nearbyLandmarks?: Array<string> | undefined;
  transportationAccess?: string | undefined;
  employeeBenefits?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmployeeBenefits>
    | undefined;
  parentCompany?: string | undefined;
  subsidiaries?: Array<string> | undefined;
  isFranchise?: boolean | undefined;
  seoKeywords?: Array<string> | undefined;
  usesGoogleAds?: boolean | undefined;
  googleMyBusinessCategory?: string | undefined;
  naicsCode?: string | undefined;
  sicCode?: string | undefined;
  unspscCode?: string | undefined;
  isGreenCertified?: boolean | undefined;
  energySources?: Array<string> | undefined;
  sustainabilityRating?: string | undefined;
  recentAnnouncements?: Array<string> | undefined;
  lastProductLaunch?: Date | undefined;
  hasLitigationHistory?: boolean | undefined;
  exportControlStatus?: string | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateJobs = {
  id?: string | undefined;
  priority?: number | undefined;
  payloadType?: string | undefined;
  payload?: string | undefined;
  createdAt?: Date | undefined;
  status?:
    | PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsStatus
    | undefined;
  name?: string | undefined;
  keywords?: Array<string> | undefined;
  lang?: PutApiLeadScraperMicroserviceApiV1AccountsUpdateLang | undefined;
  zoom?: number | undefined;
  lat?: string | undefined;
  lon?: string | undefined;
  fastMode?: boolean | undefined;
  radius?: number | undefined;
  depth?: number | undefined;
  email?: boolean | undefined;
  maxTime?: number | undefined;
  proxies?: Array<string> | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  leads?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateLeads>
    | undefined;
  url?: string | undefined;
};

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateOutputFormat = {
  OutputFormatUnspecified: "OUTPUT_FORMAT_UNSPECIFIED",
  OutputFormatJson: "OUTPUT_FORMAT_JSON",
  OutputFormatCsv: "OUTPUT_FORMAT_CSV",
  OutputFormatBigquery: "OUTPUT_FORMAT_BIGQUERY",
  OutputFormatPostgres: "OUTPUT_FORMAT_POSTGRES",
} as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateOutputFormat =
  ClosedEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateOutputFormat
  >;

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflows = {
  id?: string | undefined;
  name?: string | undefined;
  cronExpression?: string | undefined;
  nextRunTime?: Date | undefined;
  lastRunTime?: Date | undefined;
  status?: PutApiLeadScraperMicroserviceApiV1AccountsUpdateStatus | undefined;
  retryCount?: number | undefined;
  maxRetries?: number | undefined;
  alertEmails?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  jobs?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateJobs>
    | undefined;
  geoFencingRadius?: number | undefined;
  geoFencingLat?: number | undefined;
  geoFencingLon?: number | undefined;
  geoFencingZoomMin?: number | undefined;
  geoFencingZoomMax?: number | undefined;
  includeReviews?: boolean | undefined;
  includePhotos?: boolean | undefined;
  includeBusinessHours?: boolean | undefined;
  maxReviewsPerBusiness?: number | undefined;
  outputFormat?:
    | PutApiLeadScraperMicroserviceApiV1AccountsUpdateOutputFormat
    | undefined;
  outputDestination?: string | undefined;
  dataRetention?: string | undefined;
  anonymizePii?: boolean | undefined;
  notificationSlackChannel?: string | undefined;
  notificationEmailGroup?: string | undefined;
  notificationNotifyOnStart?: boolean | undefined;
  notificationNotifyOnComplete?: boolean | undefined;
  notificationNotifyOnFailure?: boolean | undefined;
  contentFilterAllowedCountries?: Array<string> | undefined;
  contentFilterExcludedTypes?: Array<string> | undefined;
  contentFilterMinimumRating?: number | undefined;
  contentFilterMinimumReviews?: number | undefined;
  qosMaxConcurrentRequests?: number | undefined;
  qosMaxRetries?: number | undefined;
  qosRequestTimeout?: string | undefined;
  qosEnableJavascript?: boolean | undefined;
  respectRobotsTxt?: boolean | undefined;
  acceptTermsOfService?: boolean | undefined;
  userAgent?: string | undefined;
  searchTerms?: Array<string> | undefined;
  scheduledEntryId?: string | undefined;
};

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestStatus =
  {
    BackgroundJobStatusUnspecified: "BACKGROUND_JOB_STATUS_UNSPECIFIED",
    BackgroundJobStatusQueued: "BACKGROUND_JOB_STATUS_QUEUED",
    BackgroundJobStatusInProgress: "BACKGROUND_JOB_STATUS_IN_PROGRESS",
    BackgroundJobStatusCompleted: "BACKGROUND_JOB_STATUS_COMPLETED",
    BackgroundJobStatusFailed: "BACKGROUND_JOB_STATUS_FAILED",
    BackgroundJobStatusCancelled: "BACKGROUND_JOB_STATUS_CANCELLED",
    BackgroundJobStatusTimedOut: "BACKGROUND_JOB_STATUS_TIMED_OUT",
  } as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestStatus =
  ClosedEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestStatus
  >;

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLang = {
  LanguageUnspecified: "LANGUAGE_UNSPECIFIED",
  LanguageEnglish: "LANGUAGE_ENGLISH",
  LanguageSpanish: "LANGUAGE_SPANISH",
  LanguageFrench: "LANGUAGE_FRENCH",
  LanguageGerman: "LANGUAGE_GERMAN",
  LanguageItalian: "LANGUAGE_ITALIAN",
  LanguagePortuguese: "LANGUAGE_PORTUGUESE",
  LanguageDutch: "LANGUAGE_DUTCH",
  LanguageRussian: "LANGUAGE_RUSSIAN",
  LanguageChinese: "LANGUAGE_CHINESE",
  LanguageJapanese: "LANGUAGE_JAPANESE",
  LanguageKorean: "LANGUAGE_KOREAN",
  LanguageArabic: "LANGUAGE_ARABIC",
  LanguageHindi: "LANGUAGE_HINDI",
  LanguageGreek: "LANGUAGE_GREEK",
  LanguageTurkish: "LANGUAGE_TURKISH",
} as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLang =
  ClosedEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLang
  >;

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestDay =
  {
    DayOfWeekUnspecified: "DAY_OF_WEEK_UNSPECIFIED",
    DayOfWeekMonday: "DAY_OF_WEEK_MONDAY",
    DayOfWeekTuesday: "DAY_OF_WEEK_TUESDAY",
    DayOfWeekWednesday: "DAY_OF_WEEK_WEDNESDAY",
    DayOfWeekThursday: "DAY_OF_WEEK_THURSDAY",
    DayOfWeekFriday: "DAY_OF_WEEK_FRIDAY",
    DayOfWeekSaturday: "DAY_OF_WEEK_SATURDAY",
    DayOfWeekSunday: "DAY_OF_WEEK_SUNDAY",
  } as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestDay =
  ClosedEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestDay
  >;

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRegularHours =
  {
    id?: string | undefined;
    day?:
      | PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestDay
      | undefined;
    openTime?: string | undefined;
    closeTime?: string | undefined;
    closed?: boolean | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
    deletedAt?: Date | undefined;
  };

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyDay =
  {
    DayOfWeekUnspecified: "DAY_OF_WEEK_UNSPECIFIED",
    DayOfWeekMonday: "DAY_OF_WEEK_MONDAY",
    DayOfWeekTuesday: "DAY_OF_WEEK_TUESDAY",
    DayOfWeekWednesday: "DAY_OF_WEEK_WEDNESDAY",
    DayOfWeekThursday: "DAY_OF_WEEK_THURSDAY",
    DayOfWeekFriday: "DAY_OF_WEEK_FRIDAY",
    DayOfWeekSaturday: "DAY_OF_WEEK_SATURDAY",
    DayOfWeekSunday: "DAY_OF_WEEK_SUNDAY",
  } as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyDay =
  ClosedEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyDay
  >;

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSpecialHours =
  {
    id?: string | undefined;
    day?:
      | PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyDay
      | undefined;
    openTime?: string | undefined;
    closeTime?: string | undefined;
    closed?: boolean | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
    deletedAt?: Date | undefined;
  };

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsReviews = {
  id?: string | undefined;
  author?: string | undefined;
  rating?: number | undefined;
  text?: string | undefined;
  time?: Date | undefined;
  language?: string | undefined;
  profilePhotoUrl?: string | undefined;
  reviewCount?: number | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
};

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRevenueRange =
  {
    RevenueRangeUnspecified: "REVENUE_RANGE_UNSPECIFIED",
    RevenueRangeUnder100K: "REVENUE_RANGE_UNDER_100K",
    RevenueRange100KTo1M: "REVENUE_RANGE_100K_TO_1M",
    RevenueRange1MTo10M: "REVENUE_RANGE_1M_TO_10M",
    RevenueRange10MTo50M: "REVENUE_RANGE_10M_TO_50M",
    RevenueRangeOver50M: "REVENUE_RANGE_OVER_50M",
  } as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRevenueRange =
  ClosedEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRevenueRange
  >;

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsEmployeeBenefits =
  {
    EmployeeBenefitUnspecified: "EMPLOYEE_BENEFIT_UNSPECIFIED",
    EmployeeBenefitHealthInsurance: "EMPLOYEE_BENEFIT_HEALTH_INSURANCE",
    EmployeeBenefitRetirementPlan: "EMPLOYEE_BENEFIT_RETIREMENT_PLAN",
    EmployeeBenefitPaidTimeOff: "EMPLOYEE_BENEFIT_PAID_TIME_OFF",
    EmployeeBenefitRemoteWork: "EMPLOYEE_BENEFIT_REMOTE_WORK",
  } as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsEmployeeBenefits =
  ClosedEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsEmployeeBenefits
  >;

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLeads = {
  id?: string | undefined;
  name?: string | undefined;
  website?: string | undefined;
  phone?: string | undefined;
  address?: string | undefined;
  city?: string | undefined;
  state?: string | undefined;
  country?: string | undefined;
  latitude?: number | undefined;
  longitude?: number | undefined;
  googleRating?: number | undefined;
  reviewCount?: number | undefined;
  industry?: string | undefined;
  employeeCount?: number | undefined;
  estimatedRevenue?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  placeId?: string | undefined;
  googleMapsUrl?: string | undefined;
  businessStatus?: string | undefined;
  regularHours?:
    | Array<
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRegularHours
    >
    | undefined;
  specialHours?:
    | Array<
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSpecialHours
    >
    | undefined;
  photoReferences?: Array<string> | undefined;
  mainPhotoUrl?: string | undefined;
  reviews?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsReviews>
    | undefined;
  types?: Array<string> | undefined;
  amenities?: Array<string> | undefined;
  servesVegetarianFood?: boolean | undefined;
  outdoorSeating?: boolean | undefined;
  paymentMethods?: Array<string> | undefined;
  wheelchairAccessible?: boolean | undefined;
  parkingAvailable?: boolean | undefined;
  socialMedia?: { [k: string]: string } | undefined;
  ratingCategory?: string | undefined;
  rating?: number | undefined;
  count?: number | undefined;
  lastUpdated?: Date | undefined;
  dataSourceVersion?: string | undefined;
  scrapingSessionId?: string | undefined;
  alternatePhones?: Array<string> | undefined;
  contactPersonName?: string | undefined;
  contactPersonTitle?: string | undefined;
  contactEmail?: string | undefined;
  foundedYear?: number | undefined;
  businessType?: string | undefined;
  certifications?: Array<string> | undefined;
  licenseNumber?: string | undefined;
  revenueRange?:
    | PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRevenueRange
    | undefined;
  fundingStage?: string | undefined;
  isPublicCompany?: boolean | undefined;
  websiteLoadSpeed?: number | undefined;
  hasSslCertificate?: boolean | undefined;
  cmsUsed?: string | undefined;
  ecommercePlatforms?: Array<string> | undefined;
  timezone?: string | undefined;
  neighborhood?: string | undefined;
  nearbyLandmarks?: Array<string> | undefined;
  transportationAccess?: string | undefined;
  employeeBenefits?:
    | Array<
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsEmployeeBenefits
    >
    | undefined;
  parentCompany?: string | undefined;
  subsidiaries?: Array<string> | undefined;
  isFranchise?: boolean | undefined;
  seoKeywords?: Array<string> | undefined;
  usesGoogleAds?: boolean | undefined;
  googleMyBusinessCategory?: string | undefined;
  naicsCode?: string | undefined;
  sicCode?: string | undefined;
  unspscCode?: string | undefined;
  isGreenCertified?: boolean | undefined;
  energySources?: Array<string> | undefined;
  sustainabilityRating?: string | undefined;
  recentAnnouncements?: Array<string> | undefined;
  lastProductLaunch?: Date | undefined;
  hasLitigationHistory?: boolean | undefined;
  exportControlStatus?: string | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateScrapingJobs = {
  id?: string | undefined;
  priority?: number | undefined;
  payloadType?: string | undefined;
  payload?: string | undefined;
  createdAt?: Date | undefined;
  status?:
    | PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestStatus
    | undefined;
  name?: string | undefined;
  keywords?: Array<string> | undefined;
  lang?:
    | PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLang
    | undefined;
  zoom?: number | undefined;
  lat?: string | undefined;
  lon?: string | undefined;
  fastMode?: boolean | undefined;
  radius?: number | undefined;
  depth?: number | undefined;
  email?: boolean | undefined;
  maxTime?: number | undefined;
  proxies?: Array<string> | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  leads?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLeads>
    | undefined;
  url?: string | undefined;
};

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyStatus =
  {
    StatusUnspecified: "STATUS_UNSPECIFIED",
    StatusActive: "STATUS_ACTIVE",
    StatusSuspended: "STATUS_SUSPENDED",
    StatusPendingVerification: "STATUS_PENDING_VERIFICATION",
    StatusRevoked: "STATUS_REVOKED",
    StatusExpired: "STATUS_EXPIRED",
    StatusRateLimited: "STATUS_RATE_LIMITED",
    StatusPendingReview: "STATUS_PENDING_REVIEW",
    StatusDeprecated: "STATUS_DEPRECATED",
    StatusMaintenance: "STATUS_MAINTENANCE",
  } as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyStatus =
  ClosedEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyStatus
  >;

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateApiKeys = {
  id?: string | undefined;
  name?: string | undefined;
  keyHash?: string | undefined;
  keyPrefix?: string | undefined;
  scopes?: Array<string> | undefined;
  allowedIps?: Array<string> | undefined;
  allowedDomains?: Array<string> | undefined;
  allowedEnvironments?: Array<string> | undefined;
  isTestKey?: boolean | undefined;
  requestsPerSecond?: number | undefined;
  requestsPerDay?: number | undefined;
  concurrentRequests?: number | undefined;
  monthlyRequestQuota?: string | undefined;
  costPerRequest?: number | undefined;
  billingTier?: string | undefined;
  totalRequests?: string | undefined;
  totalErrors?: string | undefined;
  lastUsedAt?: Date | undefined;
  averageResponseTime?: number | undefined;
  endpointUsageJson?: string | undefined;
  errorRatesJson?: string | undefined;
  recentErrors?: string | undefined;
  successfulRequestsCount?: number | undefined;
  successRate?: number | undefined;
  status?:
    | PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyStatus
    | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  expiresAt?: Date | undefined;
  deletedAt?: Date | undefined;
  lastRotatedAt?: Date | undefined;
  lastSecurityReviewAt?: Date | undefined;
  requiresClientSecret?: boolean | undefined;
  clientSecretHash?: string | undefined;
  enforceHttps?: boolean | undefined;
  enforceSigning?: boolean | undefined;
  allowedSignatureAlgorithms?: Array<string> | undefined;
  enforceMutualTls?: boolean | undefined;
  clientCertificateHash?: string | undefined;
  requireRequestSigning?: boolean | undefined;
  description?: string | undefined;
  metadataJson?: string | undefined;
  tags?: Array<string> | undefined;
  apiVersion?: string | undefined;
  supportedFeatures?: Array<string> | undefined;
  documentationUrl?: string | undefined;
  supportContact?: string | undefined;
  logAllRequests?: boolean | undefined;
  lastRotationReason?: string | undefined;
  lastRotationDate?: Date | undefined;
  rotationFrequencyDays?: number | undefined;
  complianceStandards?: Array<string> | undefined;
  requiresAuditLogging?: boolean | undefined;
  dataResidency?: string | undefined;
  approvedIntegrations?: Array<string> | undefined;
  alertEmails?: Array<string> | undefined;
  webhookUrl?: string | undefined;
  alertOnQuotaThreshold?: boolean | undefined;
  quotaAlertThreshold?: number | undefined;
  alertOnErrorSpike?: boolean | undefined;
  errorAlertThreshold?: number | undefined;
  monitoringIntegrations?: Array<string> | undefined;
  encrypted?: boolean | undefined;
  dataClassification?: string | undefined;
  maxUses?: number | undefined;
  rateLimit?: number | undefined;
};

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateTriggerEvents = {
  TriggerEventUnspecified: "TRIGGER_EVENT_UNSPECIFIED",
  TriggerEventJobStarted: "TRIGGER_EVENT_JOB_STARTED",
  TriggerEventJobCompleted: "TRIGGER_EVENT_JOB_COMPLETED",
  TriggerEventJobFailed: "TRIGGER_EVENT_JOB_FAILED",
  TriggerEventLeadFound: "TRIGGER_EVENT_LEAD_FOUND",
  TriggerEventQuotaExceeded: "TRIGGER_EVENT_QUOTA_EXCEEDED",
  TriggerEventErrorThresholdReached: "TRIGGER_EVENT_ERROR_THRESHOLD_REACHED",
  TriggerEventRateLimitReached: "TRIGGER_EVENT_RATE_LIMIT_REACHED",
  TriggerEventDataValidationFailed: "TRIGGER_EVENT_DATA_VALIDATION_FAILED",
  TriggerEventNewProxyNeeded: "TRIGGER_EVENT_NEW_PROXY_NEEDED",
  TriggerEventScheduledMaintenance: "TRIGGER_EVENT_SCHEDULED_MAINTENANCE",
} as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateTriggerEvents =
  ClosedEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateTriggerEvents
  >;

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateIncludedFields = {
  IncludedFieldUnspecified: "INCLUDED_FIELD_UNSPECIFIED",
  IncludedFieldName: "INCLUDED_FIELD_NAME",
  IncludedFieldWebsite: "INCLUDED_FIELD_WEBSITE",
  IncludedFieldPhone: "INCLUDED_FIELD_PHONE",
  IncludedFieldAddress: "INCLUDED_FIELD_ADDRESS",
  IncludedFieldLocation: "INCLUDED_FIELD_LOCATION",
  IncludedFieldCoordinates: "INCLUDED_FIELD_COORDINATES",
  IncludedFieldGoogleRating: "INCLUDED_FIELD_GOOGLE_RATING",
  IncludedFieldReviewCount: "INCLUDED_FIELD_REVIEW_COUNT",
  IncludedFieldReviews: "INCLUDED_FIELD_REVIEWS",
  IncludedFieldBusinessHours: "INCLUDED_FIELD_BUSINESS_HOURS",
  IncludedFieldBusinessStatus: "INCLUDED_FIELD_BUSINESS_STATUS",
  IncludedFieldPlaceId: "INCLUDED_FIELD_PLACE_ID",
  IncludedFieldGoogleMapsUrl: "INCLUDED_FIELD_GOOGLE_MAPS_URL",
  IncludedFieldPhotos: "INCLUDED_FIELD_PHOTOS",
  IncludedFieldMainPhoto: "INCLUDED_FIELD_MAIN_PHOTO",
  IncludedFieldBusinessTypes: "INCLUDED_FIELD_BUSINESS_TYPES",
  IncludedFieldAmenities: "INCLUDED_FIELD_AMENITIES",
  IncludedFieldPaymentMethods: "INCLUDED_FIELD_PAYMENT_METHODS",
  IncludedFieldSocialProfiles: "INCLUDED_FIELD_SOCIAL_PROFILES",
  IncludedFieldEmployeeCount: "INCLUDED_FIELD_EMPLOYEE_COUNT",
  IncludedFieldRevenueInfo: "INCLUDED_FIELD_REVENUE_INFO",
  IncludedFieldFoundedYear: "INCLUDED_FIELD_FOUNDED_YEAR",
  IncludedFieldCertifications: "INCLUDED_FIELD_CERTIFICATIONS",
  IncludedFieldNaicsCode: "INCLUDED_FIELD_NAICS_CODE",
  IncludedFieldSicCode: "INCLUDED_FIELD_SIC_CODE",
  IncludedFieldScrapingMetadata: "INCLUDED_FIELD_SCRAPING_METADATA",
  IncludedFieldComplianceInfo: "INCLUDED_FIELD_COMPLIANCE_INFO",
  IncludedFieldAlternatePhones: "INCLUDED_FIELD_ALTERNATE_PHONES",
  IncludedFieldContactPerson: "INCLUDED_FIELD_CONTACT_PERSON",
  IncludedFieldContactEmail: "INCLUDED_FIELD_CONTACT_EMAIL",
} as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateIncludedFields =
  ClosedEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateIncludedFields
  >;

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdatePayloadFormat = {
  PayloadFormatUnspecified: "PAYLOAD_FORMAT_UNSPECIFIED",
  PayloadFormatJson: "PAYLOAD_FORMAT_JSON",
  PayloadFormatXml: "PAYLOAD_FORMAT_XML",
  PayloadFormatFormData: "PAYLOAD_FORMAT_FORM_DATA",
  PayloadFormatProtobuf: "PAYLOAD_FORMAT_PROTOBUF",
  PayloadFormatYaml: "PAYLOAD_FORMAT_YAML",
} as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdatePayloadFormat =
  ClosedEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdatePayloadFormat
  >;

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateMetadata = {};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateWebhooks = {
  id?: string | undefined;
  url?: string | undefined;
  authType?: string | undefined;
  authToken?: string | undefined;
  customHeaders?: { [k: string]: string } | undefined;
  maxRetries?: number | undefined;
  retryInterval?: string | undefined;
  triggerEvents?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateTriggerEvents>
    | undefined;
  includedFields?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateIncludedFields>
    | undefined;
  includeFullResults?: boolean | undefined;
  payloadFormat?:
    | PutApiLeadScraperMicroserviceApiV1AccountsUpdatePayloadFormat
    | undefined;
  verifySsl?: boolean | undefined;
  signingSecret?: string | undefined;
  rateLimit?: number | undefined;
  rateLimitInterval?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  lastTriggeredAt?: Date | undefined;
  successfulCalls?: number | undefined;
  failedCalls?: number | undefined;
  metadata?:
    | PutApiLeadScraperMicroserviceApiV1AccountsUpdateMetadata
    | undefined;
  webhookName?: string | undefined;
};

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaceType = {
  WorkspaceTypeUnspecified: "WORKSPACE_TYPE_UNSPECIFIED",
  WorkspaceTypePersonal: "WORKSPACE_TYPE_PERSONAL",
  WorkspaceTypeTeam: "WORKSPACE_TYPE_TEAM",
  WorkspaceTypeEnterprise: "WORKSPACE_TYPE_ENTERPRISE",
} as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaceType =
  ClosedEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaceType
  >;

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaces = {
  id?: string | undefined;
  name?: string | undefined;
  industry?: string | undefined;
  domain?: string | undefined;
  gdprCompliant?: boolean | undefined;
  hipaaCompliant?: boolean | undefined;
  soc2Compliant?: boolean | undefined;
  storageQuota?: string | undefined;
  usedStorage?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  workflows?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflows>
    | undefined;
  jobsRunThisMonth?: number | undefined;
  workspaceJobLimit?: number | undefined;
  dailyJobQuota?: number | undefined;
  activeScrapers?: number | undefined;
  totalLeadsCollected?: number | undefined;
  lastJobRun?: Date | undefined;
  scrapingJobs?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateScrapingJobs>
    | undefined;
  apiKeys?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateApiKeys>
    | undefined;
  webhooks?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateWebhooks>
    | undefined;
  workspaceType?:
    | PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaceType
    | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  tags?: Array<string> | undefined;
  maxTeamMembers?: number | undefined;
  currentTeamMembers?: number | undefined;
  allowGuestAccess?: boolean | undefined;
  allowedEmailDomains?: Array<string> | undefined;
  exportFormats?: Array<string> | undefined;
  exportSchedule?: string | undefined;
  exportDestinations?: Array<string> | undefined;
  exportDestinationConfig?: { [k: string]: string } | undefined;
  compressExports?: boolean | undefined;
  compressionFormat?: string | undefined;
  salesforceEnabled?: boolean | undefined;
  salesforceConfig?: string | undefined;
  hubspotEnabled?: boolean | undefined;
  hubspotConfig?: string | undefined;
  zapierEnabled?: boolean | undefined;
  zapierWebhook?: string | undefined;
  activeIntegrations?: Array<string> | undefined;
  integrationSettings?: { [k: string]: string } | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateSettings = {
  id?: string | undefined;
  emailNotifications?: boolean | undefined;
  slackNotifications?: boolean | undefined;
  defaultDataRetention?: string | undefined;
  autoPurgeEnabled?: boolean | undefined;
  require2fa?: boolean | undefined;
  sessionTimeout?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccount = {
  id?: string | undefined;
  authPlatformUserId?: string | undefined;
  email?: string | undefined;
  deletedAt?: Date | undefined;
  createdAt?: Date | undefined;
  accountStatus?:
    | PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountStatus
    | undefined;
  roles?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateRoles>
    | undefined;
  permissions?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdatePermissions>
    | undefined;
  mfaEnabled?: boolean | undefined;
  lastLoginAt?: Date | undefined;
  timezone?:
    | PutApiLeadScraperMicroserviceApiV1AccountsUpdateTimezone
    | undefined;
  totalJobsRun?: number | undefined;
  monthlyJobLimit?: number | undefined;
  concurrentJobLimit?: number | undefined;
  workspaces?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaces>
    | undefined;
  settings?:
    | PutApiLeadScraperMicroserviceApiV1AccountsUpdateSettings
    | undefined;
};

export type Payload = {
  account?: PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccount | undefined;
  organizationId?: string | undefined;
  tenantId?: string | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateRequestBody = {
  payload?: Payload | undefined;
};

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceLevel = {
  ComplianceLevelUnspecified: "COMPLIANCE_LEVEL_UNSPECIFIED",
  ComplianceLevelNone: "COMPLIANCE_LEVEL_NONE",
  ComplianceLevelBasic: "COMPLIANCE_LEVEL_BASIC",
  ComplianceLevelAdvanced: "COMPLIANCE_LEVEL_ADVANCED",
  ComplianceLevelEnterprise: "COMPLIANCE_LEVEL_ENTERPRISE",
} as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceLevel =
  ClosedEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceLevel
  >;

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmbeddings = {
  id?: string | undefined;
  embeddings?: Array<number> | undefined;
  modelVersion?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseVersions =
  {
    id?: string | undefined;
    fileId?: string | undefined;
    versionNumber?: number | undefined;
    s3Key?: string | undefined;
    size?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    createdAt?: Date | undefined;
  };

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateComments = {
  id?: string | undefined;
  authorId?: string | undefined;
  content?: string | undefined;
  startPosition?: number | undefined;
  endPosition?: number | undefined;
  resolved?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSharing = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateSnapshots = {
  id?: string | undefined;
  fileId?: string | undefined;
  snapshotHash?: string | undefined;
  content?: string | undefined;
  authorId?: string | undefined;
  reason?: string | undefined;
  createdAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateFiles = {
  id?: string | undefined;
  name?: string | undefined;
  size?: string | undefined;
  s3Key?: string | undefined;
  s3BucketName?: string | undefined;
  isDeleted?: boolean | undefined;
  version?: number | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  embeddings?:
    | PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmbeddings
    | undefined;
  versions?:
    | Array<
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseVersions
    >
    | undefined;
  comments?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateComments>
    | undefined;
  sharing?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSharing>
    | undefined;
  snapshots?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateSnapshots>
    | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateFolders = {
  id?: string | undefined;
  name?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  isDeleted?: boolean | undefined;
  parentFolderId?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  files?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateFiles>
    | undefined;
};

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplateType = {
  TemplateTypeUnspecified: "TEMPLATE_TYPE_UNSPECIFIED",
  TemplateTypeStandard: "TEMPLATE_TYPE_STANDARD",
  TemplateTypeSmart: "TEMPLATE_TYPE_SMART",
  TemplateTypeAdaptive: "TEMPLATE_TYPE_ADAPTIVE",
  TemplateTypeAiGenerated: "TEMPLATE_TYPE_AI_GENERATED",
} as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplateType =
  ClosedEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplateType
  >;

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsVersions = {
  id?: string | undefined;
  templateId?: string | undefined;
  version?: string | undefined;
  baseContent?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  authorId?: string | undefined;
  changeDescription?: string | undefined;
  createdAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateVariables = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  variableType?: string | undefined;
  defaultValue?: string | undefined;
  isRequired?: boolean | undefined;
  validationRules?: string | undefined;
  dataSource?: string | undefined;
  aiExtractionRules?: string | undefined;
  alternatives?: Array<string> | undefined;
  templateId?: string | undefined;
};

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseStatus =
  {
    DocumentStatusUnspecified: "DOCUMENT_STATUS_UNSPECIFIED",
    DocumentStatusDraft: "DOCUMENT_STATUS_DRAFT",
    DocumentStatusInReview: "DOCUMENT_STATUS_IN_REVIEW",
    DocumentStatusApproved: "DOCUMENT_STATUS_APPROVED",
    DocumentStatusRejected: "DOCUMENT_STATUS_REJECTED",
    DocumentStatusExpired: "DOCUMENT_STATUS_EXPIRED",
    DocumentStatusArchived: "DOCUMENT_STATUS_ARCHIVED",
  } as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseStatus =
  ClosedEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseStatus
  >;

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Status =
  {
    SignatureStatusUnspecified: "SIGNATURE_STATUS_UNSPECIFIED",
    SignatureStatusPending: "SIGNATURE_STATUS_PENDING",
    SignatureStatusSigned: "SIGNATURE_STATUS_SIGNED",
    SignatureStatusRejected: "SIGNATURE_STATUS_REJECTED",
    SignatureStatusExpired: "SIGNATURE_STATUS_EXPIRED",
    SignatureStatusRevoked: "SIGNATURE_STATUS_REVOKED",
  } as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Status =
  ClosedEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Status
  >;

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureBlocks = {
  id?: string | undefined;
  requestId?: string | undefined;
  blockType?: string | undefined;
  pageNumber?: number | undefined;
  xPosition?: number | undefined;
  yPosition?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
  isRequired?: boolean | undefined;
  signatureData?: string | undefined;
  signedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflow = {
  id?: string | undefined;
  requestId?: string | undefined;
  signingOrder?: Array<string> | undefined;
  currentSigner?: string | undefined;
  workflowStatus?: string | undefined;
  parallelSigning?: boolean | undefined;
  requireAllSignatures?: boolean | undefined;
  deadline?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureRequests =
  {
    id?: string | undefined;
    status?:
      | PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Status
      | undefined;
    signerEmail?: string | undefined;
    signerName?: string | undefined;
    role?: string | undefined;
    authenticationMethod?: string | undefined;
    expiresAt?: Date | undefined;
    requiresMfa?: boolean | undefined;
    signatureType?: string | undefined;
    reminderSchedule?: Array<string> | undefined;
    documentId?: string | undefined;
    signatureBlocks?:
      | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureBlocks>
      | undefined;
    workflow?:
      | PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflow
      | undefined;
  };

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAiAssistance = {
  id?: string | undefined;
  documentId?: string | undefined;
  interactionType?: string | undefined;
  userQuery?: string | undefined;
  aiResponse?: string | undefined;
  context?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateRounds = {
  id?: string | undefined;
  historyId?: string | undefined;
  roundNumber?: number | undefined;
  proposerId?: string | undefined;
  proposalContent?: string | undefined;
  responseContent?: string | undefined;
  status?: string | undefined;
  createdAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateNegotiation = {
  id?: string | undefined;
  documentId?: string | undefined;
  rounds?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateRounds>
    | undefined;
  currentStatus?: string | undefined;
  startedAt?: Date | undefined;
  lastUpdated?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateMerges = {
  id?: string | undefined;
  branchId?: string | undefined;
  sourceBranch?: string | undefined;
  targetBranch?: string | undefined;
  mergeStatus?: string | undefined;
  mergeStrategy?: string | undefined;
  conflicts?: Array<string> | undefined;
  mergerId?: string | undefined;
  createdAt?: Date | undefined;
  completedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdatePolicy = {
  id?: string | undefined;
  branchId?: string | undefined;
  requiredApprovers?: Array<string> | undefined;
  minimumApprovals?: number | undefined;
  enforceLinearHistory?: boolean | undefined;
  allowForcePush?: boolean | undefined;
  protectedPaths?: Array<string> | undefined;
  mergeRules?: { [k: string]: string } | undefined;
  automatedChecks?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateMergeRequests = {
  id?: string | undefined;
  sourceBranchId?: string | undefined;
  targetBranchId?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  authorId?: string | undefined;
  reviewers?: Array<string> | undefined;
  status?: string | undefined;
  labels?: Array<string> | undefined;
  hasConflicts?: boolean | undefined;
  automatedCheckResults?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateBranches = {
  id?: string | undefined;
  name?: string | undefined;
  baseVersionHash?: string | undefined;
  currentHeadHash?: string | undefined;
  purpose?: string | undefined;
  status?: string | undefined;
  reviewers?: Array<string> | undefined;
  branchMetadata?: { [k: string]: string } | undefined;
  isLocked?: boolean | undefined;
  lastUpdated?: Date | undefined;
  merges?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateMerges>
    | undefined;
  policy?: PutApiLeadScraperMicroserviceApiV1AccountsUpdatePolicy | undefined;
  mergeRequests?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateMergeRequests>
    | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateChanges = {
  id?: string | undefined;
  versionId?: string | undefined;
  changeType?: string | undefined;
  contentBefore?: string | undefined;
  contentAfter?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateSummaries = {
  id?: string | undefined;
  versionId?: string | undefined;
  summaryType?: string | undefined;
  content?: string | undefined;
  targetAudience?: string | undefined;
  keyPoints?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Versions =
  {
    id?: string | undefined;
    versionHash?: string | undefined;
    parentHash?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    branchName?: string | undefined;
    metadata?: { [k: string]: string } | undefined;
    tags?: Array<string> | undefined;
    isApproved?: boolean | undefined;
    approvalChain?: string | undefined;
    createdAt?: Date | undefined;
    branches?:
      | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateBranches>
      | undefined;
    changes?:
      | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateChanges>
      | undefined;
    summaries?:
      | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateSummaries>
      | undefined;
  };

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstances = {
  id?: string | undefined;
  templateId?: string | undefined;
  status?:
    | PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseStatus
    | undefined;
  fieldValues?: { [k: string]: string } | undefined;
  signers?: Array<string> | undefined;
  language?: string | undefined;
  isCompleted?: boolean | undefined;
  dueDate?: Date | undefined;
  generatedContent?: string | undefined;
  attachments?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  signatureRequests?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureRequests>
    | undefined;
  aiAssistance?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateAiAssistance>
    | undefined;
  negotiation?:
    | PutApiLeadScraperMicroserviceApiV1AccountsUpdateNegotiation
    | undefined;
  versions?:
    | Array<
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Versions
    >
    | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateExplanations = {
  id?: string | undefined;
  templateId?: string | undefined;
  sectionIdentifier?: string | undefined;
  explanationText?: string | undefined;
  complexityLevel?: string | undefined;
  relatedTerms?: Array<string> | undefined;
  legalReferences?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateRiskAssessments = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  riskType?: string | undefined;
  riskScore?: number | undefined;
  assessmentDetails?: string | undefined;
  mitigationSuggestions?: Array<string> | undefined;
  assessorId?: string | undefined;
  createdAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceChecks = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  complianceStandard?: string | undefined;
  checkResult?: string | undefined;
  violations?: Array<string> | undefined;
  remediationSteps?: string | undefined;
  checkDate?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateIntelligence = {
  id?: string | undefined;
  contractType?: string | undefined;
  riskScores?: { [k: string]: number } | undefined;
  detectedClauses?: { [k: string]: string } | undefined;
  keyObligations?: Array<string> | undefined;
  complianceScores?: { [k: string]: number } | undefined;
  jurisdiction?: string | undefined;
  governingLaws?: Array<string> | undefined;
  semanticAnalysis?: { [k: string]: string } | undefined;
  analysisDate?: Date | undefined;
  riskAssessments?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateRiskAssessments>
    | undefined;
  complianceChecks?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceChecks>
    | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplates = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  industryType?: string | undefined;
  documentType?: string | undefined;
  baseContent?: string | undefined;
  isAdaptive?: boolean | undefined;
  metadata?: { [k: string]: string } | undefined;
  supportedLanguages?: Array<string> | undefined;
  requiredDataFields?: Array<string> | undefined;
  version?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  templateType?:
    | PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplateType
    | undefined;
  content?: string | undefined;
  detectedVariables?: Array<string> | undefined;
  variableMappings?: { [k: string]: string } | undefined;
  isContextAware?: boolean | undefined;
  supportedContexts?: Array<string> | undefined;
  formattingRules?: { [k: string]: string } | undefined;
  conditionalSections?: Array<string> | undefined;
  versions?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsVersions>
    | undefined;
  variables?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateVariables>
    | undefined;
  instances?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstances>
    | undefined;
  explanations?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateExplanations>
    | undefined;
  intelligence?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateIntelligence>
    | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateSharing = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateActivities = {
  id?: string | undefined;
  activityType?: string | undefined;
  userId?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateCompliance = {
  id?: string | undefined;
  complianceType?: string | undefined;
  status?: string | undefined;
  certificationId?: string | undefined;
  validUntil?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateCategory = {
  AppCategoryUnspecified: "APP_CATEGORY_UNSPECIFIED",
  AppCategoryContractAutomation: "APP_CATEGORY_CONTRACT_AUTOMATION",
  AppCategoryContractAnalysis: "APP_CATEGORY_CONTRACT_ANALYSIS",
  AppCategoryIntegration: "APP_CATEGORY_INTEGRATION",
  AppCategoryAiPowered: "APP_CATEGORY_AI_POWERED",
  AppCategoryWorkflow: "APP_CATEGORY_WORKFLOW",
  AppCategoryCompliance: "APP_CATEGORY_COMPLIANCE",
} as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateCategory =
  ClosedEnum<typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateCategory>;

export const PutApiLeadScraperMicroserviceApiV1AccountsUpdatePricingModel = {
  PricingModelUnspecified: "PRICING_MODEL_UNSPECIFIED",
  PricingModelFree: "PRICING_MODEL_FREE",
  PricingModelSubscription: "PRICING_MODEL_SUBSCRIPTION",
  PricingModelUsageBased: "PRICING_MODEL_USAGE_BASED",
  PricingModelEnterprise: "PRICING_MODEL_ENTERPRISE",
} as const;
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdatePricingModel =
  ClosedEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdatePricingModel
  >;

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateVersions = {
  id?: string | undefined;
  appId?: string | undefined;
  versionNumber?: string | undefined;
  changelog?: string | undefined;
  requirements?: { [k: string]: string } | undefined;
  isPublic?: boolean | undefined;
  releaseDate?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstallations = {
  id?: string | undefined;
  appId?: string | undefined;
  workspaceId?: string | undefined;
  versionInstalled?: string | undefined;
  configuration?: { [k: string]: string } | undefined;
  installationStatus?: string | undefined;
  installedAt?: Date | undefined;
  lastUsed?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAnalytics = {
  id?: string | undefined;
  appId?: string | undefined;
  metricName?: string | undefined;
  metricValue?: number | undefined;
  dimensions?: { [k: string]: string } | undefined;
  recordedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseReviews =
  {
    id?: string | undefined;
    appId?: string | undefined;
    reviewerId?: string | undefined;
    rating?: number | undefined;
    reviewText?: string | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
  };

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateInfo = {
  id?: string | undefined;
  appId?: string | undefined;
  supportedLanguages?: Array<string> | undefined;
  sdkFeatures?: Array<string> | undefined;
  testCoverage?: { [k: string]: number } | undefined;
  securityScans?: Array<string> | undefined;
  performanceMetrics?: { [k: string]: string } | undefined;
  developmentStatus?: string | undefined;
  knownIssues?: Array<string> | undefined;
  roadmapUrl?: string | undefined;
  lastSecurityAudit?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWebhooks = {
  id?: string | undefined;
  appId?: string | undefined;
  url?: string | undefined;
  subscribedEvents?: Array<string> | undefined;
  secretKey?: string | undefined;
  retryCount?: number | undefined;
  timeoutSeconds?: number | undefined;
  isActive?: boolean | undefined;
  headers?: { [k: string]: string } | undefined;
  lastTriggered?: Date | undefined;
  createdAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsPermissions =
  {
    id?: string | undefined;
    appId?: string | undefined;
    scope?: string | undefined;
    description?: string | undefined;
    isRequired?: boolean | undefined;
    accessLevels?: Array<string> | undefined;
    constraints?: { [k: string]: string } | undefined;
    requiresApproval?: boolean | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
  };

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstalledApps = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  developerId?: string | undefined;
  category?:
    | PutApiLeadScraperMicroserviceApiV1AccountsUpdateCategory
    | undefined;
  supportedContractTypes?: Array<string> | undefined;
  features?: Array<string> | undefined;
  pricingModel?:
    | PutApiLeadScraperMicroserviceApiV1AccountsUpdatePricingModel
    | undefined;
  pricingTiers?: { [k: string]: number } | undefined;
  supportedIntegrations?: Array<string> | undefined;
  isVerified?: boolean | undefined;
  rating?: number | undefined;
  installationCount?: number | undefined;
  requiredPermissions?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  documentationUrl?: string | undefined;
  supportEmail?: string | undefined;
  screenshots?: Array<string> | undefined;
  privacyPolicyUrl?: string | undefined;
  termsUrl?: string | undefined;
  publishedAt?: Date | undefined;
  lastUpdated?: Date | undefined;
  versions?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateVersions>
    | undefined;
  installations?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstallations>
    | undefined;
  analytics?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateAnalytics>
    | undefined;
  reviews?:
    | Array<
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseReviews
    >
    | undefined;
  info?: PutApiLeadScraperMicroserviceApiV1AccountsUpdateInfo | undefined;
  webhooks?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWebhooks>
    | undefined;
  permissions?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsPermissions>
    | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWorkspaces =
  {
    id?: string | undefined;
    name?: string | undefined;
    uniqueIdentifier?: string | undefined;
    s3BucketName?: string | undefined;
    s3FolderPath?: string | undefined;
    storageQuota?: string | undefined;
    usedStorage?: string | undefined;
    allowPublicSharing?: boolean | undefined;
    requireApproval?: boolean | undefined;
    gdprCompliant?: boolean | undefined;
    hipaaCompliant?: boolean | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
    deletedAt?: Date | undefined;
    folders?:
      | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateFolders>
      | undefined;
    templates?:
      | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplates>
      | undefined;
    sharing?:
      | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateSharing>
      | undefined;
    activities?:
      | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateActivities>
      | undefined;
    compliance?:
      | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateCompliance>
      | undefined;
    installedApps?:
      | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstalledApps>
      | undefined;
  };

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateDataProfiles = {
  id?: string | undefined;
  name?: string | undefined;
  profileType?: string | undefined;
  dataFields?: { [k: string]: string } | undefined;
  isDefault?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsAccount = {
  id?: string | undefined;
  auth0UserId?: string | undefined;
  email?: string | undefined;
  baseDirectory?: string | undefined;
  bucketName?: string | undefined;
  region?: string | undefined;
  orgId?: string | undefined;
  tenantId?: string | undefined;
  roles?: Array<string> | undefined;
  permissions?: Array<string> | undefined;
  mfaEnabled?: boolean | undefined;
  complianceLevel?:
    | PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceLevel
    | undefined;
  preferences?: { [k: string]: string } | undefined;
  apiKeys?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  workspaces?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWorkspaces>
    | undefined;
  dataProfiles?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateDataProfiles>
    | undefined;
};

/**
 * Updates specified fields of an existing account
 */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateResponseBody = {
  account?:
    | PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsAccount
    | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountStatus
  > = z.nativeEnum(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountStatus,
  );

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountStatus
  > =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountStatus$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountStatus$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountStatus$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountStatus$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountStatus$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateRoles$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateRoles
  > = z.nativeEnum(PutApiLeadScraperMicroserviceApiV1AccountsUpdateRoles);

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateRoles$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateRoles
  > = PutApiLeadScraperMicroserviceApiV1AccountsUpdateRoles$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateRoles$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateRoles$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRoles$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateRoles$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRoles$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdatePermissions$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdatePermissions
  > = z.nativeEnum(PutApiLeadScraperMicroserviceApiV1AccountsUpdatePermissions);

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdatePermissions$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdatePermissions
  > = PutApiLeadScraperMicroserviceApiV1AccountsUpdatePermissions$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdatePermissions$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdatePermissions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdatePermissions$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdatePermissions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdatePermissions$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateTimezone$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateTimezone
  > = z.nativeEnum(PutApiLeadScraperMicroserviceApiV1AccountsUpdateTimezone);

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateTimezone$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateTimezone
  > = PutApiLeadScraperMicroserviceApiV1AccountsUpdateTimezone$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateTimezone$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateTimezone$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateTimezone$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateTimezone$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateTimezone$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateStatus
  > = z.nativeEnum(PutApiLeadScraperMicroserviceApiV1AccountsUpdateStatus);

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateStatus
  > = PutApiLeadScraperMicroserviceApiV1AccountsUpdateStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateStatus$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateStatus$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateStatus$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateStatus$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateStatus$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsStatus
  > = z.nativeEnum(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsStatus,
  );

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsStatus
  > =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsStatus$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsStatus$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsStatus$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsStatus$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsStatus$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateLang$inboundSchema:
  z.ZodNativeEnum<typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateLang> =
    z.nativeEnum(PutApiLeadScraperMicroserviceApiV1AccountsUpdateLang);

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateLang$outboundSchema:
  z.ZodNativeEnum<typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateLang> =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateLang$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateLang$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateLang$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateLang$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateLang$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateLang$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateDay$inboundSchema:
  z.ZodNativeEnum<typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateDay> =
    z.nativeEnum(PutApiLeadScraperMicroserviceApiV1AccountsUpdateDay);

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateDay$outboundSchema:
  z.ZodNativeEnum<typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateDay> =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateDay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateDay$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateDay$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateDay$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateDay$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateDay$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateRegularHours$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRegularHours,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    day: PutApiLeadScraperMicroserviceApiV1AccountsUpdateDay$inboundSchema
      .default("DAY_OF_WEEK_UNSPECIFIED"),
    openTime: z.string().optional(),
    closeTime: z.string().optional(),
    closed: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateRegularHours$Outbound =
  {
    id?: string | undefined;
    day: string;
    openTime?: string | undefined;
    closeTime?: string | undefined;
    closed?: boolean | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
    deletedAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateRegularHours$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRegularHours$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRegularHours
  > = z.object({
    id: z.string().optional(),
    day: PutApiLeadScraperMicroserviceApiV1AccountsUpdateDay$outboundSchema
      .default("DAY_OF_WEEK_UNSPECIFIED"),
    openTime: z.string().optional(),
    closeTime: z.string().optional(),
    closed: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateRegularHours$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateRegularHours$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRegularHours$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateRegularHours$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRegularHours$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateRegularHours$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRegularHours$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateRegularHoursToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateRegularHours:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRegularHours,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRegularHours$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateRegularHours),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateRegularHoursFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateRegularHours,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateRegularHours$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateRegularHours' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsDay$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsDay
  > = z.nativeEnum(PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsDay);

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsDay$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsDay
  > = PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsDay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsDay$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsDay$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsDay$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsDay$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsDay$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateSpecialHours$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSpecialHours,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    day:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsDay$inboundSchema
        .default("DAY_OF_WEEK_UNSPECIFIED"),
    openTime: z.string().optional(),
    closeTime: z.string().optional(),
    closed: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateSpecialHours$Outbound =
  {
    id?: string | undefined;
    day: string;
    openTime?: string | undefined;
    closeTime?: string | undefined;
    closed?: boolean | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
    deletedAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateSpecialHours$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSpecialHours$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSpecialHours
  > = z.object({
    id: z.string().optional(),
    day:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsDay$outboundSchema
        .default("DAY_OF_WEEK_UNSPECIFIED"),
    openTime: z.string().optional(),
    closeTime: z.string().optional(),
    closed: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateSpecialHours$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateSpecialHours$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSpecialHours$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateSpecialHours$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSpecialHours$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateSpecialHours$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSpecialHours$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateSpecialHoursToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateSpecialHours:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSpecialHours,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSpecialHours$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateSpecialHours),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateSpecialHoursFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateSpecialHours,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateSpecialHours$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateSpecialHours' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateReviews$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateReviews,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    author: z.string().optional(),
    rating: z.number().optional(),
    text: z.string().optional(),
    time: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    language: z.string().optional(),
    profilePhotoUrl: z.string().optional(),
    reviewCount: z.number().int().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateReviews$Outbound = {
  id?: string | undefined;
  author?: string | undefined;
  rating?: number | undefined;
  text?: string | undefined;
  time?: string | undefined;
  language?: string | undefined;
  profilePhotoUrl?: string | undefined;
  reviewCount?: number | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateReviews$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateReviews$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateReviews
  > = z.object({
    id: z.string().optional(),
    author: z.string().optional(),
    rating: z.number().optional(),
    text: z.string().optional(),
    time: z.date().transform(v => v.toISOString()).optional(),
    language: z.string().optional(),
    profilePhotoUrl: z.string().optional(),
    reviewCount: z.number().int().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateReviews$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateReviews$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateReviews$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateReviews$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateReviews$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateReviews$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateReviews$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateReviewsToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateReviews:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateReviews,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateReviews$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateReviews),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateReviewsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateReviews,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateReviews$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateReviews' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateRevenueRange$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateRevenueRange
  > = z.nativeEnum(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRevenueRange,
  );

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateRevenueRange$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateRevenueRange
  > =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRevenueRange$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateRevenueRange$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateRevenueRange$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRevenueRange$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateRevenueRange$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRevenueRange$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmployeeBenefits$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmployeeBenefits
  > = z.nativeEnum(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmployeeBenefits,
  );

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmployeeBenefits$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmployeeBenefits
  > =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmployeeBenefits$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmployeeBenefits$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmployeeBenefits$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmployeeBenefits$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmployeeBenefits$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmployeeBenefits$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateLeads$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateLeads,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    website: z.string().optional(),
    phone: z.string().optional(),
    address: z.string().optional(),
    city: z.string().optional(),
    state: z.string().optional(),
    country: z.string().optional(),
    latitude: z.number().optional(),
    longitude: z.number().optional(),
    googleRating: z.number().optional(),
    reviewCount: z.number().int().optional(),
    industry: z.string().optional(),
    employeeCount: z.number().int().optional(),
    estimatedRevenue: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    placeId: z.string().optional(),
    googleMapsUrl: z.string().optional(),
    businessStatus: z.string().optional(),
    regularHours: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateRegularHours$inboundSchema
      ),
    ).optional(),
    specialHours: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateSpecialHours$inboundSchema
      ),
    ).optional(),
    photoReferences: z.array(z.string()).optional(),
    mainPhotoUrl: z.string().optional(),
    reviews: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateReviews$inboundSchema
      ),
    ).optional(),
    types: z.array(z.string()).optional(),
    amenities: z.array(z.string()).optional(),
    servesVegetarianFood: z.boolean().optional(),
    outdoorSeating: z.boolean().optional(),
    paymentMethods: z.array(z.string()).optional(),
    wheelchairAccessible: z.boolean().optional(),
    parkingAvailable: z.boolean().optional(),
    socialMedia: z.record(z.string()).optional(),
    ratingCategory: z.string().optional(),
    rating: z.number().optional(),
    count: z.number().int().optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    dataSourceVersion: z.string().optional(),
    scrapingSessionId: z.string().optional(),
    alternatePhones: z.array(z.string()).optional(),
    contactPersonName: z.string().optional(),
    contactPersonTitle: z.string().optional(),
    contactEmail: z.string().optional(),
    foundedYear: z.number().int().optional(),
    businessType: z.string().optional(),
    certifications: z.array(z.string()).optional(),
    licenseNumber: z.string().optional(),
    revenueRange:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateRevenueRange$inboundSchema
        .default("REVENUE_RANGE_UNSPECIFIED"),
    fundingStage: z.string().optional(),
    isPublicCompany: z.boolean().optional(),
    websiteLoadSpeed: z.number().optional(),
    hasSslCertificate: z.boolean().optional(),
    cmsUsed: z.string().optional(),
    ecommercePlatforms: z.array(z.string()).optional(),
    timezone: z.string().optional(),
    neighborhood: z.string().optional(),
    nearbyLandmarks: z.array(z.string()).optional(),
    transportationAccess: z.string().optional(),
    employeeBenefits: z.array(
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmployeeBenefits$inboundSchema,
    ).optional(),
    parentCompany: z.string().optional(),
    subsidiaries: z.array(z.string()).optional(),
    isFranchise: z.boolean().optional(),
    seoKeywords: z.array(z.string()).optional(),
    usesGoogleAds: z.boolean().optional(),
    googleMyBusinessCategory: z.string().optional(),
    naicsCode: z.string().optional(),
    sicCode: z.string().optional(),
    unspscCode: z.string().optional(),
    isGreenCertified: z.boolean().optional(),
    energySources: z.array(z.string()).optional(),
    sustainabilityRating: z.string().optional(),
    recentAnnouncements: z.array(z.string()).optional(),
    lastProductLaunch: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    hasLitigationHistory: z.boolean().optional(),
    exportControlStatus: z.string().optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateLeads$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  website?: string | undefined;
  phone?: string | undefined;
  address?: string | undefined;
  city?: string | undefined;
  state?: string | undefined;
  country?: string | undefined;
  latitude?: number | undefined;
  longitude?: number | undefined;
  googleRating?: number | undefined;
  reviewCount?: number | undefined;
  industry?: string | undefined;
  employeeCount?: number | undefined;
  estimatedRevenue?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  placeId?: string | undefined;
  googleMapsUrl?: string | undefined;
  businessStatus?: string | undefined;
  regularHours?:
    | Array<
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateRegularHours$Outbound
    >
    | undefined;
  specialHours?:
    | Array<
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateSpecialHours$Outbound
    >
    | undefined;
  photoReferences?: Array<string> | undefined;
  mainPhotoUrl?: string | undefined;
  reviews?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateReviews$Outbound>
    | undefined;
  types?: Array<string> | undefined;
  amenities?: Array<string> | undefined;
  servesVegetarianFood?: boolean | undefined;
  outdoorSeating?: boolean | undefined;
  paymentMethods?: Array<string> | undefined;
  wheelchairAccessible?: boolean | undefined;
  parkingAvailable?: boolean | undefined;
  socialMedia?: { [k: string]: string } | undefined;
  ratingCategory?: string | undefined;
  rating?: number | undefined;
  count?: number | undefined;
  lastUpdated?: string | undefined;
  dataSourceVersion?: string | undefined;
  scrapingSessionId?: string | undefined;
  alternatePhones?: Array<string> | undefined;
  contactPersonName?: string | undefined;
  contactPersonTitle?: string | undefined;
  contactEmail?: string | undefined;
  foundedYear?: number | undefined;
  businessType?: string | undefined;
  certifications?: Array<string> | undefined;
  licenseNumber?: string | undefined;
  revenueRange: string;
  fundingStage?: string | undefined;
  isPublicCompany?: boolean | undefined;
  websiteLoadSpeed?: number | undefined;
  hasSslCertificate?: boolean | undefined;
  cmsUsed?: string | undefined;
  ecommercePlatforms?: Array<string> | undefined;
  timezone?: string | undefined;
  neighborhood?: string | undefined;
  nearbyLandmarks?: Array<string> | undefined;
  transportationAccess?: string | undefined;
  employeeBenefits?: Array<string> | undefined;
  parentCompany?: string | undefined;
  subsidiaries?: Array<string> | undefined;
  isFranchise?: boolean | undefined;
  seoKeywords?: Array<string> | undefined;
  usesGoogleAds?: boolean | undefined;
  googleMyBusinessCategory?: string | undefined;
  naicsCode?: string | undefined;
  sicCode?: string | undefined;
  unspscCode?: string | undefined;
  isGreenCertified?: boolean | undefined;
  energySources?: Array<string> | undefined;
  sustainabilityRating?: string | undefined;
  recentAnnouncements?: Array<string> | undefined;
  lastProductLaunch?: string | undefined;
  hasLitigationHistory?: boolean | undefined;
  exportControlStatus?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateLeads$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateLeads$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateLeads
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    website: z.string().optional(),
    phone: z.string().optional(),
    address: z.string().optional(),
    city: z.string().optional(),
    state: z.string().optional(),
    country: z.string().optional(),
    latitude: z.number().optional(),
    longitude: z.number().optional(),
    googleRating: z.number().optional(),
    reviewCount: z.number().int().optional(),
    industry: z.string().optional(),
    employeeCount: z.number().int().optional(),
    estimatedRevenue: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    placeId: z.string().optional(),
    googleMapsUrl: z.string().optional(),
    businessStatus: z.string().optional(),
    regularHours: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateRegularHours$outboundSchema
      ),
    ).optional(),
    specialHours: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateSpecialHours$outboundSchema
      ),
    ).optional(),
    photoReferences: z.array(z.string()).optional(),
    mainPhotoUrl: z.string().optional(),
    reviews: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateReviews$outboundSchema
      ),
    ).optional(),
    types: z.array(z.string()).optional(),
    amenities: z.array(z.string()).optional(),
    servesVegetarianFood: z.boolean().optional(),
    outdoorSeating: z.boolean().optional(),
    paymentMethods: z.array(z.string()).optional(),
    wheelchairAccessible: z.boolean().optional(),
    parkingAvailable: z.boolean().optional(),
    socialMedia: z.record(z.string()).optional(),
    ratingCategory: z.string().optional(),
    rating: z.number().optional(),
    count: z.number().int().optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
    dataSourceVersion: z.string().optional(),
    scrapingSessionId: z.string().optional(),
    alternatePhones: z.array(z.string()).optional(),
    contactPersonName: z.string().optional(),
    contactPersonTitle: z.string().optional(),
    contactEmail: z.string().optional(),
    foundedYear: z.number().int().optional(),
    businessType: z.string().optional(),
    certifications: z.array(z.string()).optional(),
    licenseNumber: z.string().optional(),
    revenueRange:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateRevenueRange$outboundSchema
        .default("REVENUE_RANGE_UNSPECIFIED"),
    fundingStage: z.string().optional(),
    isPublicCompany: z.boolean().optional(),
    websiteLoadSpeed: z.number().optional(),
    hasSslCertificate: z.boolean().optional(),
    cmsUsed: z.string().optional(),
    ecommercePlatforms: z.array(z.string()).optional(),
    timezone: z.string().optional(),
    neighborhood: z.string().optional(),
    nearbyLandmarks: z.array(z.string()).optional(),
    transportationAccess: z.string().optional(),
    employeeBenefits: z.array(
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmployeeBenefits$outboundSchema,
    ).optional(),
    parentCompany: z.string().optional(),
    subsidiaries: z.array(z.string()).optional(),
    isFranchise: z.boolean().optional(),
    seoKeywords: z.array(z.string()).optional(),
    usesGoogleAds: z.boolean().optional(),
    googleMyBusinessCategory: z.string().optional(),
    naicsCode: z.string().optional(),
    sicCode: z.string().optional(),
    unspscCode: z.string().optional(),
    isGreenCertified: z.boolean().optional(),
    energySources: z.array(z.string()).optional(),
    sustainabilityRating: z.string().optional(),
    recentAnnouncements: z.array(z.string()).optional(),
    lastProductLaunch: z.date().transform(v => v.toISOString()).optional(),
    hasLitigationHistory: z.boolean().optional(),
    exportControlStatus: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateLeads$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateLeads$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateLeads$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateLeads$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateLeads$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateLeads$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateLeads$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateLeadsToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateLeads:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateLeads,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateLeads$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1AccountsUpdateLeads,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateLeadsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateLeads,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateLeads$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateLeads' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateJobs$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateJobs,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    priority: z.number().int().optional(),
    payloadType: z.string().optional(),
    payload: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    status:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsStatus$inboundSchema
        .default("BACKGROUND_JOB_STATUS_UNSPECIFIED"),
    name: z.string().optional(),
    keywords: z.array(z.string()).optional(),
    lang: PutApiLeadScraperMicroserviceApiV1AccountsUpdateLang$inboundSchema
      .default("LANGUAGE_UNSPECIFIED"),
    zoom: z.number().int().optional(),
    lat: z.string().optional(),
    lon: z.string().optional(),
    fastMode: z.boolean().optional(),
    radius: z.number().int().optional(),
    depth: z.number().int().optional(),
    email: z.boolean().optional(),
    maxTime: z.number().int().optional(),
    proxies: z.array(z.string()).optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    leads: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateLeads$inboundSchema
      ),
    ).optional(),
    url: z.string().optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateJobs$Outbound = {
  id?: string | undefined;
  priority?: number | undefined;
  payloadType?: string | undefined;
  payload?: string | undefined;
  createdAt?: string | undefined;
  status: string;
  name?: string | undefined;
  keywords?: Array<string> | undefined;
  lang: string;
  zoom?: number | undefined;
  lat?: string | undefined;
  lon?: string | undefined;
  fastMode?: boolean | undefined;
  radius?: number | undefined;
  depth?: number | undefined;
  email?: boolean | undefined;
  maxTime?: number | undefined;
  proxies?: Array<string> | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  leads?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateLeads$Outbound>
    | undefined;
  url?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateJobs$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateJobs$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateJobs
  > = z.object({
    id: z.string().optional(),
    priority: z.number().int().optional(),
    payloadType: z.string().optional(),
    payload: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    status:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsStatus$outboundSchema
        .default("BACKGROUND_JOB_STATUS_UNSPECIFIED"),
    name: z.string().optional(),
    keywords: z.array(z.string()).optional(),
    lang: PutApiLeadScraperMicroserviceApiV1AccountsUpdateLang$outboundSchema
      .default("LANGUAGE_UNSPECIFIED"),
    zoom: z.number().int().optional(),
    lat: z.string().optional(),
    lon: z.string().optional(),
    fastMode: z.boolean().optional(),
    radius: z.number().int().optional(),
    depth: z.number().int().optional(),
    email: z.boolean().optional(),
    maxTime: z.number().int().optional(),
    proxies: z.array(z.string()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    leads: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateLeads$outboundSchema
      ),
    ).optional(),
    url: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateJobs$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateJobs$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateJobs$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateJobs$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateJobs$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateJobs$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateJobs$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateJobsToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateJobs:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateJobs,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateJobs$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1AccountsUpdateJobs,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateJobsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateJobs,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateJobs$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateJobs' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateOutputFormat$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateOutputFormat
  > = z.nativeEnum(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateOutputFormat,
  );

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateOutputFormat$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateOutputFormat
  > =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateOutputFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateOutputFormat$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateOutputFormat$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateOutputFormat$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateOutputFormat$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateOutputFormat$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflows$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflows,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    cronExpression: z.string().optional(),
    nextRunTime: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    lastRunTime: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    status: PutApiLeadScraperMicroserviceApiV1AccountsUpdateStatus$inboundSchema
      .default("WORKFLOW_STATUS_UNSPECIFIED"),
    retryCount: z.number().int().optional(),
    maxRetries: z.number().int().optional(),
    alertEmails: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    jobs: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateJobs$inboundSchema
      ),
    ).optional(),
    geoFencingRadius: z.number().optional(),
    geoFencingLat: z.number().optional(),
    geoFencingLon: z.number().optional(),
    geoFencingZoomMin: z.number().int().optional(),
    geoFencingZoomMax: z.number().int().optional(),
    includeReviews: z.boolean().optional(),
    includePhotos: z.boolean().optional(),
    includeBusinessHours: z.boolean().optional(),
    maxReviewsPerBusiness: z.number().int().optional(),
    outputFormat:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateOutputFormat$inboundSchema
        .default("OUTPUT_FORMAT_UNSPECIFIED"),
    outputDestination: z.string().optional(),
    dataRetention: z.string().optional(),
    anonymizePii: z.boolean().optional(),
    notificationSlackChannel: z.string().optional(),
    notificationEmailGroup: z.string().optional(),
    notificationNotifyOnStart: z.boolean().optional(),
    notificationNotifyOnComplete: z.boolean().optional(),
    notificationNotifyOnFailure: z.boolean().optional(),
    contentFilterAllowedCountries: z.array(z.string()).optional(),
    contentFilterExcludedTypes: z.array(z.string()).optional(),
    contentFilterMinimumRating: z.number().optional(),
    contentFilterMinimumReviews: z.number().int().optional(),
    qosMaxConcurrentRequests: z.number().int().optional(),
    qosMaxRetries: z.number().int().optional(),
    qosRequestTimeout: z.string().optional(),
    qosEnableJavascript: z.boolean().optional(),
    respectRobotsTxt: z.boolean().optional(),
    acceptTermsOfService: z.boolean().optional(),
    userAgent: z.string().optional(),
    searchTerms: z.array(z.string()).optional(),
    scheduledEntryId: z.string().optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflows$Outbound =
  {
    id?: string | undefined;
    name?: string | undefined;
    cronExpression?: string | undefined;
    nextRunTime?: string | undefined;
    lastRunTime?: string | undefined;
    status: string;
    retryCount?: number | undefined;
    maxRetries?: number | undefined;
    alertEmails?: string | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
    deletedAt?: string | undefined;
    jobs?:
      | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateJobs$Outbound>
      | undefined;
    geoFencingRadius?: number | undefined;
    geoFencingLat?: number | undefined;
    geoFencingLon?: number | undefined;
    geoFencingZoomMin?: number | undefined;
    geoFencingZoomMax?: number | undefined;
    includeReviews?: boolean | undefined;
    includePhotos?: boolean | undefined;
    includeBusinessHours?: boolean | undefined;
    maxReviewsPerBusiness?: number | undefined;
    outputFormat: string;
    outputDestination?: string | undefined;
    dataRetention?: string | undefined;
    anonymizePii?: boolean | undefined;
    notificationSlackChannel?: string | undefined;
    notificationEmailGroup?: string | undefined;
    notificationNotifyOnStart?: boolean | undefined;
    notificationNotifyOnComplete?: boolean | undefined;
    notificationNotifyOnFailure?: boolean | undefined;
    contentFilterAllowedCountries?: Array<string> | undefined;
    contentFilterExcludedTypes?: Array<string> | undefined;
    contentFilterMinimumRating?: number | undefined;
    contentFilterMinimumReviews?: number | undefined;
    qosMaxConcurrentRequests?: number | undefined;
    qosMaxRetries?: number | undefined;
    qosRequestTimeout?: string | undefined;
    qosEnableJavascript?: boolean | undefined;
    respectRobotsTxt?: boolean | undefined;
    acceptTermsOfService?: boolean | undefined;
    userAgent?: string | undefined;
    searchTerms?: Array<string> | undefined;
    scheduledEntryId?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflows$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflows$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflows
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    cronExpression: z.string().optional(),
    nextRunTime: z.date().transform(v => v.toISOString()).optional(),
    lastRunTime: z.date().transform(v => v.toISOString()).optional(),
    status:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateStatus$outboundSchema
        .default("WORKFLOW_STATUS_UNSPECIFIED"),
    retryCount: z.number().int().optional(),
    maxRetries: z.number().int().optional(),
    alertEmails: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    jobs: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateJobs$outboundSchema
      ),
    ).optional(),
    geoFencingRadius: z.number().optional(),
    geoFencingLat: z.number().optional(),
    geoFencingLon: z.number().optional(),
    geoFencingZoomMin: z.number().int().optional(),
    geoFencingZoomMax: z.number().int().optional(),
    includeReviews: z.boolean().optional(),
    includePhotos: z.boolean().optional(),
    includeBusinessHours: z.boolean().optional(),
    maxReviewsPerBusiness: z.number().int().optional(),
    outputFormat:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateOutputFormat$outboundSchema
        .default("OUTPUT_FORMAT_UNSPECIFIED"),
    outputDestination: z.string().optional(),
    dataRetention: z.string().optional(),
    anonymizePii: z.boolean().optional(),
    notificationSlackChannel: z.string().optional(),
    notificationEmailGroup: z.string().optional(),
    notificationNotifyOnStart: z.boolean().optional(),
    notificationNotifyOnComplete: z.boolean().optional(),
    notificationNotifyOnFailure: z.boolean().optional(),
    contentFilterAllowedCountries: z.array(z.string()).optional(),
    contentFilterExcludedTypes: z.array(z.string()).optional(),
    contentFilterMinimumRating: z.number().optional(),
    contentFilterMinimumReviews: z.number().int().optional(),
    qosMaxConcurrentRequests: z.number().int().optional(),
    qosMaxRetries: z.number().int().optional(),
    qosRequestTimeout: z.string().optional(),
    qosEnableJavascript: z.boolean().optional(),
    respectRobotsTxt: z.boolean().optional(),
    acceptTermsOfService: z.boolean().optional(),
    userAgent: z.string().optional(),
    searchTerms: z.array(z.string()).optional(),
    scheduledEntryId: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflows$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflows$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflows$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflows$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflows$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflows$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflows$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflowsToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflows:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflows,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflows$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflows),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflowsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflows,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflows$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflows' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestStatus
  > = z.nativeEnum(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestStatus,
  );

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestStatus
  > =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestStatus$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestStatus$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestStatus$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestStatus$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestStatus$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLang$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLang
  > = z.nativeEnum(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLang,
  );

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLang$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLang
  > =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLang$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLang$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLang$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLang$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLang$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLang$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestDay$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestDay
  > = z.nativeEnum(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestDay,
  );

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestDay$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestDay
  > =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestDay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestDay$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestDay$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestDay$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestDay$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestDay$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRegularHours$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRegularHours,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    day:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestDay$inboundSchema
        .default("DAY_OF_WEEK_UNSPECIFIED"),
    openTime: z.string().optional(),
    closeTime: z.string().optional(),
    closed: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRegularHours$Outbound =
  {
    id?: string | undefined;
    day: string;
    openTime?: string | undefined;
    closeTime?: string | undefined;
    closed?: boolean | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
    deletedAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRegularHours$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRegularHours$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRegularHours
  > = z.object({
    id: z.string().optional(),
    day:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestDay$outboundSchema
        .default("DAY_OF_WEEK_UNSPECIFIED"),
    openTime: z.string().optional(),
    closeTime: z.string().optional(),
    closed: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRegularHours$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRegularHours$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRegularHours$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRegularHours$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRegularHours$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRegularHours$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRegularHours$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRegularHoursToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRegularHours:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRegularHours,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRegularHours$outboundSchema
      .parse(
        putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRegularHours,
      ),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRegularHoursFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRegularHours,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRegularHours$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRegularHours' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyDay$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyDay
  > = z.nativeEnum(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyDay,
  );

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyDay$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyDay
  > =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyDay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyDay$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyDay$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyDay$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyDay$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyDay$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSpecialHours$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSpecialHours,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    day:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyDay$inboundSchema
        .default("DAY_OF_WEEK_UNSPECIFIED"),
    openTime: z.string().optional(),
    closeTime: z.string().optional(),
    closed: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSpecialHours$Outbound =
  {
    id?: string | undefined;
    day: string;
    openTime?: string | undefined;
    closeTime?: string | undefined;
    closed?: boolean | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
    deletedAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSpecialHours$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSpecialHours$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSpecialHours
  > = z.object({
    id: z.string().optional(),
    day:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyDay$outboundSchema
        .default("DAY_OF_WEEK_UNSPECIFIED"),
    openTime: z.string().optional(),
    closeTime: z.string().optional(),
    closed: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSpecialHours$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSpecialHours$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSpecialHours$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSpecialHours$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSpecialHours$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSpecialHours$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSpecialHours$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSpecialHoursToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSpecialHours:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSpecialHours,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSpecialHours$outboundSchema
      .parse(
        putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSpecialHours,
      ),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSpecialHoursFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSpecialHours,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSpecialHours$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSpecialHours' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsReviews$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsReviews,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    author: z.string().optional(),
    rating: z.number().optional(),
    text: z.string().optional(),
    time: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    language: z.string().optional(),
    profilePhotoUrl: z.string().optional(),
    reviewCount: z.number().int().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsReviews$Outbound =
  {
    id?: string | undefined;
    author?: string | undefined;
    rating?: number | undefined;
    text?: string | undefined;
    time?: string | undefined;
    language?: string | undefined;
    profilePhotoUrl?: string | undefined;
    reviewCount?: number | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
    deletedAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsReviews$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsReviews$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsReviews
  > = z.object({
    id: z.string().optional(),
    author: z.string().optional(),
    rating: z.number().optional(),
    text: z.string().optional(),
    time: z.date().transform(v => v.toISOString()).optional(),
    language: z.string().optional(),
    profilePhotoUrl: z.string().optional(),
    reviewCount: z.number().int().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsReviews$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsReviews$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsReviews$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsReviews$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsReviews$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsReviews$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsReviews$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsReviewsToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsReviews:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsReviews,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsReviews$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsReviews),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsReviewsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsReviews,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsReviews$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsReviews' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRevenueRange$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRevenueRange
  > = z.nativeEnum(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRevenueRange,
  );

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRevenueRange$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRevenueRange
  > =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRevenueRange$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRevenueRange$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRevenueRange$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRevenueRange$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRevenueRange$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRevenueRange$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsEmployeeBenefits$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsEmployeeBenefits
  > = z.nativeEnum(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsEmployeeBenefits,
  );

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsEmployeeBenefits$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsEmployeeBenefits
  > =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsEmployeeBenefits$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsEmployeeBenefits$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsEmployeeBenefits$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsEmployeeBenefits$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsEmployeeBenefits$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsEmployeeBenefits$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLeads$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLeads,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    website: z.string().optional(),
    phone: z.string().optional(),
    address: z.string().optional(),
    city: z.string().optional(),
    state: z.string().optional(),
    country: z.string().optional(),
    latitude: z.number().optional(),
    longitude: z.number().optional(),
    googleRating: z.number().optional(),
    reviewCount: z.number().int().optional(),
    industry: z.string().optional(),
    employeeCount: z.number().int().optional(),
    estimatedRevenue: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    placeId: z.string().optional(),
    googleMapsUrl: z.string().optional(),
    businessStatus: z.string().optional(),
    regularHours: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRegularHours$inboundSchema
      ),
    ).optional(),
    specialHours: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSpecialHours$inboundSchema
      ),
    ).optional(),
    photoReferences: z.array(z.string()).optional(),
    mainPhotoUrl: z.string().optional(),
    reviews: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsReviews$inboundSchema
      ),
    ).optional(),
    types: z.array(z.string()).optional(),
    amenities: z.array(z.string()).optional(),
    servesVegetarianFood: z.boolean().optional(),
    outdoorSeating: z.boolean().optional(),
    paymentMethods: z.array(z.string()).optional(),
    wheelchairAccessible: z.boolean().optional(),
    parkingAvailable: z.boolean().optional(),
    socialMedia: z.record(z.string()).optional(),
    ratingCategory: z.string().optional(),
    rating: z.number().optional(),
    count: z.number().int().optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    dataSourceVersion: z.string().optional(),
    scrapingSessionId: z.string().optional(),
    alternatePhones: z.array(z.string()).optional(),
    contactPersonName: z.string().optional(),
    contactPersonTitle: z.string().optional(),
    contactEmail: z.string().optional(),
    foundedYear: z.number().int().optional(),
    businessType: z.string().optional(),
    certifications: z.array(z.string()).optional(),
    licenseNumber: z.string().optional(),
    revenueRange:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRevenueRange$inboundSchema
        .default("REVENUE_RANGE_UNSPECIFIED"),
    fundingStage: z.string().optional(),
    isPublicCompany: z.boolean().optional(),
    websiteLoadSpeed: z.number().optional(),
    hasSslCertificate: z.boolean().optional(),
    cmsUsed: z.string().optional(),
    ecommercePlatforms: z.array(z.string()).optional(),
    timezone: z.string().optional(),
    neighborhood: z.string().optional(),
    nearbyLandmarks: z.array(z.string()).optional(),
    transportationAccess: z.string().optional(),
    employeeBenefits: z.array(
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsEmployeeBenefits$inboundSchema,
    ).optional(),
    parentCompany: z.string().optional(),
    subsidiaries: z.array(z.string()).optional(),
    isFranchise: z.boolean().optional(),
    seoKeywords: z.array(z.string()).optional(),
    usesGoogleAds: z.boolean().optional(),
    googleMyBusinessCategory: z.string().optional(),
    naicsCode: z.string().optional(),
    sicCode: z.string().optional(),
    unspscCode: z.string().optional(),
    isGreenCertified: z.boolean().optional(),
    energySources: z.array(z.string()).optional(),
    sustainabilityRating: z.string().optional(),
    recentAnnouncements: z.array(z.string()).optional(),
    lastProductLaunch: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    hasLitigationHistory: z.boolean().optional(),
    exportControlStatus: z.string().optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLeads$Outbound =
  {
    id?: string | undefined;
    name?: string | undefined;
    website?: string | undefined;
    phone?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    country?: string | undefined;
    latitude?: number | undefined;
    longitude?: number | undefined;
    googleRating?: number | undefined;
    reviewCount?: number | undefined;
    industry?: string | undefined;
    employeeCount?: number | undefined;
    estimatedRevenue?: string | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
    deletedAt?: string | undefined;
    placeId?: string | undefined;
    googleMapsUrl?: string | undefined;
    businessStatus?: string | undefined;
    regularHours?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRegularHours$Outbound
      >
      | undefined;
    specialHours?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSpecialHours$Outbound
      >
      | undefined;
    photoReferences?: Array<string> | undefined;
    mainPhotoUrl?: string | undefined;
    reviews?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsReviews$Outbound
      >
      | undefined;
    types?: Array<string> | undefined;
    amenities?: Array<string> | undefined;
    servesVegetarianFood?: boolean | undefined;
    outdoorSeating?: boolean | undefined;
    paymentMethods?: Array<string> | undefined;
    wheelchairAccessible?: boolean | undefined;
    parkingAvailable?: boolean | undefined;
    socialMedia?: { [k: string]: string } | undefined;
    ratingCategory?: string | undefined;
    rating?: number | undefined;
    count?: number | undefined;
    lastUpdated?: string | undefined;
    dataSourceVersion?: string | undefined;
    scrapingSessionId?: string | undefined;
    alternatePhones?: Array<string> | undefined;
    contactPersonName?: string | undefined;
    contactPersonTitle?: string | undefined;
    contactEmail?: string | undefined;
    foundedYear?: number | undefined;
    businessType?: string | undefined;
    certifications?: Array<string> | undefined;
    licenseNumber?: string | undefined;
    revenueRange: string;
    fundingStage?: string | undefined;
    isPublicCompany?: boolean | undefined;
    websiteLoadSpeed?: number | undefined;
    hasSslCertificate?: boolean | undefined;
    cmsUsed?: string | undefined;
    ecommercePlatforms?: Array<string> | undefined;
    timezone?: string | undefined;
    neighborhood?: string | undefined;
    nearbyLandmarks?: Array<string> | undefined;
    transportationAccess?: string | undefined;
    employeeBenefits?: Array<string> | undefined;
    parentCompany?: string | undefined;
    subsidiaries?: Array<string> | undefined;
    isFranchise?: boolean | undefined;
    seoKeywords?: Array<string> | undefined;
    usesGoogleAds?: boolean | undefined;
    googleMyBusinessCategory?: string | undefined;
    naicsCode?: string | undefined;
    sicCode?: string | undefined;
    unspscCode?: string | undefined;
    isGreenCertified?: boolean | undefined;
    energySources?: Array<string> | undefined;
    sustainabilityRating?: string | undefined;
    recentAnnouncements?: Array<string> | undefined;
    lastProductLaunch?: string | undefined;
    hasLitigationHistory?: boolean | undefined;
    exportControlStatus?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLeads$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLeads$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLeads
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    website: z.string().optional(),
    phone: z.string().optional(),
    address: z.string().optional(),
    city: z.string().optional(),
    state: z.string().optional(),
    country: z.string().optional(),
    latitude: z.number().optional(),
    longitude: z.number().optional(),
    googleRating: z.number().optional(),
    reviewCount: z.number().int().optional(),
    industry: z.string().optional(),
    employeeCount: z.number().int().optional(),
    estimatedRevenue: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    placeId: z.string().optional(),
    googleMapsUrl: z.string().optional(),
    businessStatus: z.string().optional(),
    regularHours: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRegularHours$outboundSchema
      ),
    ).optional(),
    specialHours: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSpecialHours$outboundSchema
      ),
    ).optional(),
    photoReferences: z.array(z.string()).optional(),
    mainPhotoUrl: z.string().optional(),
    reviews: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsReviews$outboundSchema
      ),
    ).optional(),
    types: z.array(z.string()).optional(),
    amenities: z.array(z.string()).optional(),
    servesVegetarianFood: z.boolean().optional(),
    outdoorSeating: z.boolean().optional(),
    paymentMethods: z.array(z.string()).optional(),
    wheelchairAccessible: z.boolean().optional(),
    parkingAvailable: z.boolean().optional(),
    socialMedia: z.record(z.string()).optional(),
    ratingCategory: z.string().optional(),
    rating: z.number().optional(),
    count: z.number().int().optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
    dataSourceVersion: z.string().optional(),
    scrapingSessionId: z.string().optional(),
    alternatePhones: z.array(z.string()).optional(),
    contactPersonName: z.string().optional(),
    contactPersonTitle: z.string().optional(),
    contactEmail: z.string().optional(),
    foundedYear: z.number().int().optional(),
    businessType: z.string().optional(),
    certifications: z.array(z.string()).optional(),
    licenseNumber: z.string().optional(),
    revenueRange:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRevenueRange$outboundSchema
        .default("REVENUE_RANGE_UNSPECIFIED"),
    fundingStage: z.string().optional(),
    isPublicCompany: z.boolean().optional(),
    websiteLoadSpeed: z.number().optional(),
    hasSslCertificate: z.boolean().optional(),
    cmsUsed: z.string().optional(),
    ecommercePlatforms: z.array(z.string()).optional(),
    timezone: z.string().optional(),
    neighborhood: z.string().optional(),
    nearbyLandmarks: z.array(z.string()).optional(),
    transportationAccess: z.string().optional(),
    employeeBenefits: z.array(
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsEmployeeBenefits$outboundSchema,
    ).optional(),
    parentCompany: z.string().optional(),
    subsidiaries: z.array(z.string()).optional(),
    isFranchise: z.boolean().optional(),
    seoKeywords: z.array(z.string()).optional(),
    usesGoogleAds: z.boolean().optional(),
    googleMyBusinessCategory: z.string().optional(),
    naicsCode: z.string().optional(),
    sicCode: z.string().optional(),
    unspscCode: z.string().optional(),
    isGreenCertified: z.boolean().optional(),
    energySources: z.array(z.string()).optional(),
    sustainabilityRating: z.string().optional(),
    recentAnnouncements: z.array(z.string()).optional(),
    lastProductLaunch: z.date().transform(v => v.toISOString()).optional(),
    hasLitigationHistory: z.boolean().optional(),
    exportControlStatus: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLeads$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLeads$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLeads$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLeads$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLeads$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLeads$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLeads$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLeadsToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLeads:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLeads,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLeads$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLeads),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLeadsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLeads,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLeads$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLeads' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateScrapingJobs$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateScrapingJobs,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    priority: z.number().int().optional(),
    payloadType: z.string().optional(),
    payload: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    status:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestStatus$inboundSchema
        .default("BACKGROUND_JOB_STATUS_UNSPECIFIED"),
    name: z.string().optional(),
    keywords: z.array(z.string()).optional(),
    lang:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLang$inboundSchema
        .default("LANGUAGE_UNSPECIFIED"),
    zoom: z.number().int().optional(),
    lat: z.string().optional(),
    lon: z.string().optional(),
    fastMode: z.boolean().optional(),
    radius: z.number().int().optional(),
    depth: z.number().int().optional(),
    email: z.boolean().optional(),
    maxTime: z.number().int().optional(),
    proxies: z.array(z.string()).optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    leads: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLeads$inboundSchema
      ),
    ).optional(),
    url: z.string().optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateScrapingJobs$Outbound =
  {
    id?: string | undefined;
    priority?: number | undefined;
    payloadType?: string | undefined;
    payload?: string | undefined;
    createdAt?: string | undefined;
    status: string;
    name?: string | undefined;
    keywords?: Array<string> | undefined;
    lang: string;
    zoom?: number | undefined;
    lat?: string | undefined;
    lon?: string | undefined;
    fastMode?: boolean | undefined;
    radius?: number | undefined;
    depth?: number | undefined;
    email?: boolean | undefined;
    maxTime?: number | undefined;
    proxies?: Array<string> | undefined;
    updatedAt?: string | undefined;
    deletedAt?: string | undefined;
    leads?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLeads$Outbound
      >
      | undefined;
    url?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateScrapingJobs$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateScrapingJobs$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateScrapingJobs
  > = z.object({
    id: z.string().optional(),
    priority: z.number().int().optional(),
    payloadType: z.string().optional(),
    payload: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    status:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestStatus$outboundSchema
        .default("BACKGROUND_JOB_STATUS_UNSPECIFIED"),
    name: z.string().optional(),
    keywords: z.array(z.string()).optional(),
    lang:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLang$outboundSchema
        .default("LANGUAGE_UNSPECIFIED"),
    zoom: z.number().int().optional(),
    lat: z.string().optional(),
    lon: z.string().optional(),
    fastMode: z.boolean().optional(),
    radius: z.number().int().optional(),
    depth: z.number().int().optional(),
    email: z.boolean().optional(),
    maxTime: z.number().int().optional(),
    proxies: z.array(z.string()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    leads: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsLeads$outboundSchema
      ),
    ).optional(),
    url: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateScrapingJobs$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateScrapingJobs$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateScrapingJobs$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateScrapingJobs$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateScrapingJobs$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateScrapingJobs$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateScrapingJobs$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateScrapingJobsToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateScrapingJobs:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateScrapingJobs,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateScrapingJobs$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateScrapingJobs),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateScrapingJobsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateScrapingJobs,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateScrapingJobs$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateScrapingJobs' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyStatus
  > = z.nativeEnum(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyStatus,
  );

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyStatus
  > =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyStatus$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyStatus$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyStatus$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyStatus$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyStatus$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateApiKeys$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateApiKeys,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    keyHash: z.string().optional(),
    keyPrefix: z.string().optional(),
    scopes: z.array(z.string()).optional(),
    allowedIps: z.array(z.string()).optional(),
    allowedDomains: z.array(z.string()).optional(),
    allowedEnvironments: z.array(z.string()).optional(),
    isTestKey: z.boolean().optional(),
    requestsPerSecond: z.number().int().optional(),
    requestsPerDay: z.number().int().optional(),
    concurrentRequests: z.number().int().optional(),
    monthlyRequestQuota: z.string().optional(),
    costPerRequest: z.number().optional(),
    billingTier: z.string().optional(),
    totalRequests: z.string().optional(),
    totalErrors: z.string().optional(),
    lastUsedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    averageResponseTime: z.number().optional(),
    endpointUsageJson: z.string().optional(),
    errorRatesJson: z.string().optional(),
    recentErrors: z.string().optional(),
    successfulRequestsCount: z.number().int().optional(),
    successRate: z.number().optional(),
    status:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyStatus$inboundSchema
        .default("STATUS_UNSPECIFIED"),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    lastRotatedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    lastSecurityReviewAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    requiresClientSecret: z.boolean().optional(),
    clientSecretHash: z.string().optional(),
    enforceHttps: z.boolean().optional(),
    enforceSigning: z.boolean().optional(),
    allowedSignatureAlgorithms: z.array(z.string()).optional(),
    enforceMutualTls: z.boolean().optional(),
    clientCertificateHash: z.string().optional(),
    requireRequestSigning: z.boolean().optional(),
    description: z.string().optional(),
    metadataJson: z.string().optional(),
    tags: z.array(z.string()).optional(),
    apiVersion: z.string().optional(),
    supportedFeatures: z.array(z.string()).optional(),
    documentationUrl: z.string().optional(),
    supportContact: z.string().optional(),
    logAllRequests: z.boolean().optional(),
    lastRotationReason: z.string().optional(),
    lastRotationDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    rotationFrequencyDays: z.number().int().optional(),
    complianceStandards: z.array(z.string()).optional(),
    requiresAuditLogging: z.boolean().optional(),
    dataResidency: z.string().optional(),
    approvedIntegrations: z.array(z.string()).optional(),
    alertEmails: z.array(z.string()).optional(),
    webhookUrl: z.string().optional(),
    alertOnQuotaThreshold: z.boolean().optional(),
    quotaAlertThreshold: z.number().optional(),
    alertOnErrorSpike: z.boolean().optional(),
    errorAlertThreshold: z.number().optional(),
    monitoringIntegrations: z.array(z.string()).optional(),
    encrypted: z.boolean().optional(),
    dataClassification: z.string().optional(),
    maxUses: z.number().int().optional(),
    rateLimit: z.number().int().optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateApiKeys$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  keyHash?: string | undefined;
  keyPrefix?: string | undefined;
  scopes?: Array<string> | undefined;
  allowedIps?: Array<string> | undefined;
  allowedDomains?: Array<string> | undefined;
  allowedEnvironments?: Array<string> | undefined;
  isTestKey?: boolean | undefined;
  requestsPerSecond?: number | undefined;
  requestsPerDay?: number | undefined;
  concurrentRequests?: number | undefined;
  monthlyRequestQuota?: string | undefined;
  costPerRequest?: number | undefined;
  billingTier?: string | undefined;
  totalRequests?: string | undefined;
  totalErrors?: string | undefined;
  lastUsedAt?: string | undefined;
  averageResponseTime?: number | undefined;
  endpointUsageJson?: string | undefined;
  errorRatesJson?: string | undefined;
  recentErrors?: string | undefined;
  successfulRequestsCount?: number | undefined;
  successRate?: number | undefined;
  status: string;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  expiresAt?: string | undefined;
  deletedAt?: string | undefined;
  lastRotatedAt?: string | undefined;
  lastSecurityReviewAt?: string | undefined;
  requiresClientSecret?: boolean | undefined;
  clientSecretHash?: string | undefined;
  enforceHttps?: boolean | undefined;
  enforceSigning?: boolean | undefined;
  allowedSignatureAlgorithms?: Array<string> | undefined;
  enforceMutualTls?: boolean | undefined;
  clientCertificateHash?: string | undefined;
  requireRequestSigning?: boolean | undefined;
  description?: string | undefined;
  metadataJson?: string | undefined;
  tags?: Array<string> | undefined;
  apiVersion?: string | undefined;
  supportedFeatures?: Array<string> | undefined;
  documentationUrl?: string | undefined;
  supportContact?: string | undefined;
  logAllRequests?: boolean | undefined;
  lastRotationReason?: string | undefined;
  lastRotationDate?: string | undefined;
  rotationFrequencyDays?: number | undefined;
  complianceStandards?: Array<string> | undefined;
  requiresAuditLogging?: boolean | undefined;
  dataResidency?: string | undefined;
  approvedIntegrations?: Array<string> | undefined;
  alertEmails?: Array<string> | undefined;
  webhookUrl?: string | undefined;
  alertOnQuotaThreshold?: boolean | undefined;
  quotaAlertThreshold?: number | undefined;
  alertOnErrorSpike?: boolean | undefined;
  errorAlertThreshold?: number | undefined;
  monitoringIntegrations?: Array<string> | undefined;
  encrypted?: boolean | undefined;
  dataClassification?: string | undefined;
  maxUses?: number | undefined;
  rateLimit?: number | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateApiKeys$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateApiKeys$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateApiKeys
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    keyHash: z.string().optional(),
    keyPrefix: z.string().optional(),
    scopes: z.array(z.string()).optional(),
    allowedIps: z.array(z.string()).optional(),
    allowedDomains: z.array(z.string()).optional(),
    allowedEnvironments: z.array(z.string()).optional(),
    isTestKey: z.boolean().optional(),
    requestsPerSecond: z.number().int().optional(),
    requestsPerDay: z.number().int().optional(),
    concurrentRequests: z.number().int().optional(),
    monthlyRequestQuota: z.string().optional(),
    costPerRequest: z.number().optional(),
    billingTier: z.string().optional(),
    totalRequests: z.string().optional(),
    totalErrors: z.string().optional(),
    lastUsedAt: z.date().transform(v => v.toISOString()).optional(),
    averageResponseTime: z.number().optional(),
    endpointUsageJson: z.string().optional(),
    errorRatesJson: z.string().optional(),
    recentErrors: z.string().optional(),
    successfulRequestsCount: z.number().int().optional(),
    successRate: z.number().optional(),
    status:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsRequestRequestBodyStatus$outboundSchema
        .default("STATUS_UNSPECIFIED"),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    lastRotatedAt: z.date().transform(v => v.toISOString()).optional(),
    lastSecurityReviewAt: z.date().transform(v => v.toISOString()).optional(),
    requiresClientSecret: z.boolean().optional(),
    clientSecretHash: z.string().optional(),
    enforceHttps: z.boolean().optional(),
    enforceSigning: z.boolean().optional(),
    allowedSignatureAlgorithms: z.array(z.string()).optional(),
    enforceMutualTls: z.boolean().optional(),
    clientCertificateHash: z.string().optional(),
    requireRequestSigning: z.boolean().optional(),
    description: z.string().optional(),
    metadataJson: z.string().optional(),
    tags: z.array(z.string()).optional(),
    apiVersion: z.string().optional(),
    supportedFeatures: z.array(z.string()).optional(),
    documentationUrl: z.string().optional(),
    supportContact: z.string().optional(),
    logAllRequests: z.boolean().optional(),
    lastRotationReason: z.string().optional(),
    lastRotationDate: z.date().transform(v => v.toISOString()).optional(),
    rotationFrequencyDays: z.number().int().optional(),
    complianceStandards: z.array(z.string()).optional(),
    requiresAuditLogging: z.boolean().optional(),
    dataResidency: z.string().optional(),
    approvedIntegrations: z.array(z.string()).optional(),
    alertEmails: z.array(z.string()).optional(),
    webhookUrl: z.string().optional(),
    alertOnQuotaThreshold: z.boolean().optional(),
    quotaAlertThreshold: z.number().optional(),
    alertOnErrorSpike: z.boolean().optional(),
    errorAlertThreshold: z.number().optional(),
    monitoringIntegrations: z.array(z.string()).optional(),
    encrypted: z.boolean().optional(),
    dataClassification: z.string().optional(),
    maxUses: z.number().int().optional(),
    rateLimit: z.number().int().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateApiKeys$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateApiKeys$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateApiKeys$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateApiKeys$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateApiKeys$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateApiKeys$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateApiKeys$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateApiKeysToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateApiKeys:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateApiKeys,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateApiKeys$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateApiKeys),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateApiKeysFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateApiKeys,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateApiKeys$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateApiKeys' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateTriggerEvents$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateTriggerEvents
  > = z.nativeEnum(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateTriggerEvents,
  );

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateTriggerEvents$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateTriggerEvents
  > =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateTriggerEvents$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateTriggerEvents$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateTriggerEvents$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateTriggerEvents$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateTriggerEvents$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateTriggerEvents$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateIncludedFields$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateIncludedFields
  > = z.nativeEnum(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateIncludedFields,
  );

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateIncludedFields$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateIncludedFields
  > =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateIncludedFields$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateIncludedFields$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateIncludedFields$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateIncludedFields$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateIncludedFields$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateIncludedFields$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdatePayloadFormat$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdatePayloadFormat
  > = z.nativeEnum(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdatePayloadFormat,
  );

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdatePayloadFormat$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdatePayloadFormat
  > =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdatePayloadFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdatePayloadFormat$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdatePayloadFormat$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdatePayloadFormat$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdatePayloadFormat$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdatePayloadFormat$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateMetadata$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateMetadata,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateMetadata$Outbound =
  {};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateMetadata$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateMetadata$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateMetadata
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateMetadata$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateMetadata$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateMetadata$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateMetadata$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateMetadata$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateMetadata$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateMetadata$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateMetadataToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateMetadata:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateMetadata,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateMetadata$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateMetadata),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateMetadata$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateMetadata' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateWebhooks$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWebhooks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    url: z.string().optional(),
    authType: z.string().optional(),
    authToken: z.string().optional(),
    customHeaders: z.record(z.string()).optional(),
    maxRetries: z.number().int().optional(),
    retryInterval: z.string().optional(),
    triggerEvents: z.array(
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateTriggerEvents$inboundSchema,
    ).optional(),
    includedFields: z.array(
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateIncludedFields$inboundSchema,
    ).optional(),
    includeFullResults: z.boolean().optional(),
    payloadFormat:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdatePayloadFormat$inboundSchema
        .default("PAYLOAD_FORMAT_UNSPECIFIED"),
    verifySsl: z.boolean().optional(),
    signingSecret: z.string().optional(),
    rateLimit: z.number().int().optional(),
    rateLimitInterval: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    lastTriggeredAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    successfulCalls: z.number().int().optional(),
    failedCalls: z.number().int().optional(),
    metadata: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateMetadata$inboundSchema
    ).optional(),
    webhookName: z.string().optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateWebhooks$Outbound =
  {
    id?: string | undefined;
    url?: string | undefined;
    authType?: string | undefined;
    authToken?: string | undefined;
    customHeaders?: { [k: string]: string } | undefined;
    maxRetries?: number | undefined;
    retryInterval?: string | undefined;
    triggerEvents?: Array<string> | undefined;
    includedFields?: Array<string> | undefined;
    includeFullResults?: boolean | undefined;
    payloadFormat: string;
    verifySsl?: boolean | undefined;
    signingSecret?: string | undefined;
    rateLimit?: number | undefined;
    rateLimitInterval?: string | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
    lastTriggeredAt?: string | undefined;
    successfulCalls?: number | undefined;
    failedCalls?: number | undefined;
    metadata?:
      | PutApiLeadScraperMicroserviceApiV1AccountsUpdateMetadata$Outbound
      | undefined;
    webhookName?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateWebhooks$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWebhooks$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWebhooks
  > = z.object({
    id: z.string().optional(),
    url: z.string().optional(),
    authType: z.string().optional(),
    authToken: z.string().optional(),
    customHeaders: z.record(z.string()).optional(),
    maxRetries: z.number().int().optional(),
    retryInterval: z.string().optional(),
    triggerEvents: z.array(
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateTriggerEvents$outboundSchema,
    ).optional(),
    includedFields: z.array(
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateIncludedFields$outboundSchema,
    ).optional(),
    includeFullResults: z.boolean().optional(),
    payloadFormat:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdatePayloadFormat$outboundSchema
        .default("PAYLOAD_FORMAT_UNSPECIFIED"),
    verifySsl: z.boolean().optional(),
    signingSecret: z.string().optional(),
    rateLimit: z.number().int().optional(),
    rateLimitInterval: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    lastTriggeredAt: z.date().transform(v => v.toISOString()).optional(),
    successfulCalls: z.number().int().optional(),
    failedCalls: z.number().int().optional(),
    metadata: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateMetadata$outboundSchema
    ).optional(),
    webhookName: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateWebhooks$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateWebhooks$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWebhooks$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateWebhooks$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWebhooks$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateWebhooks$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWebhooks$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateWebhooksToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateWebhooks:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWebhooks,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWebhooks$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateWebhooks),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateWebhooksFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateWebhooks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateWebhooks$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateWebhooks' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaceType$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaceType
  > = z.nativeEnum(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaceType,
  );

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaceType$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaceType
  > =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaceType$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaceType$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaceType$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaceType$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaceType$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaces$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaces,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    industry: z.string().optional(),
    domain: z.string().optional(),
    gdprCompliant: z.boolean().optional(),
    hipaaCompliant: z.boolean().optional(),
    soc2Compliant: z.boolean().optional(),
    storageQuota: z.string().optional(),
    usedStorage: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    workflows: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflows$inboundSchema
      ),
    ).optional(),
    jobsRunThisMonth: z.number().int().optional(),
    workspaceJobLimit: z.number().int().optional(),
    dailyJobQuota: z.number().int().optional(),
    activeScrapers: z.number().int().optional(),
    totalLeadsCollected: z.number().int().optional(),
    lastJobRun: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    scrapingJobs: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateScrapingJobs$inboundSchema
      ),
    ).optional(),
    apiKeys: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateApiKeys$inboundSchema
      ),
    ).optional(),
    webhooks: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateWebhooks$inboundSchema
      ),
    ).optional(),
    workspaceType:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaceType$inboundSchema
        .default("WORKSPACE_TYPE_UNSPECIFIED"),
    description: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    maxTeamMembers: z.number().int().optional(),
    currentTeamMembers: z.number().int().optional(),
    allowGuestAccess: z.boolean().optional(),
    allowedEmailDomains: z.array(z.string()).optional(),
    exportFormats: z.array(z.string()).optional(),
    exportSchedule: z.string().optional(),
    exportDestinations: z.array(z.string()).optional(),
    exportDestinationConfig: z.record(z.string()).optional(),
    compressExports: z.boolean().optional(),
    compressionFormat: z.string().optional(),
    salesforceEnabled: z.boolean().optional(),
    salesforceConfig: z.string().optional(),
    hubspotEnabled: z.boolean().optional(),
    hubspotConfig: z.string().optional(),
    zapierEnabled: z.boolean().optional(),
    zapierWebhook: z.string().optional(),
    activeIntegrations: z.array(z.string()).optional(),
    integrationSettings: z.record(z.string()).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaces$Outbound =
  {
    id?: string | undefined;
    name?: string | undefined;
    industry?: string | undefined;
    domain?: string | undefined;
    gdprCompliant?: boolean | undefined;
    hipaaCompliant?: boolean | undefined;
    soc2Compliant?: boolean | undefined;
    storageQuota?: string | undefined;
    usedStorage?: string | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
    deletedAt?: string | undefined;
    workflows?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflows$Outbound
      >
      | undefined;
    jobsRunThisMonth?: number | undefined;
    workspaceJobLimit?: number | undefined;
    dailyJobQuota?: number | undefined;
    activeScrapers?: number | undefined;
    totalLeadsCollected?: number | undefined;
    lastJobRun?: string | undefined;
    scrapingJobs?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateScrapingJobs$Outbound
      >
      | undefined;
    apiKeys?:
      | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateApiKeys$Outbound>
      | undefined;
    webhooks?:
      | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateWebhooks$Outbound>
      | undefined;
    workspaceType: string;
    description?: string | undefined;
    metadata?: { [k: string]: string } | undefined;
    tags?: Array<string> | undefined;
    maxTeamMembers?: number | undefined;
    currentTeamMembers?: number | undefined;
    allowGuestAccess?: boolean | undefined;
    allowedEmailDomains?: Array<string> | undefined;
    exportFormats?: Array<string> | undefined;
    exportSchedule?: string | undefined;
    exportDestinations?: Array<string> | undefined;
    exportDestinationConfig?: { [k: string]: string } | undefined;
    compressExports?: boolean | undefined;
    compressionFormat?: string | undefined;
    salesforceEnabled?: boolean | undefined;
    salesforceConfig?: string | undefined;
    hubspotEnabled?: boolean | undefined;
    hubspotConfig?: string | undefined;
    zapierEnabled?: boolean | undefined;
    zapierWebhook?: string | undefined;
    activeIntegrations?: Array<string> | undefined;
    integrationSettings?: { [k: string]: string } | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaces$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaces$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaces
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    industry: z.string().optional(),
    domain: z.string().optional(),
    gdprCompliant: z.boolean().optional(),
    hipaaCompliant: z.boolean().optional(),
    soc2Compliant: z.boolean().optional(),
    storageQuota: z.string().optional(),
    usedStorage: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    workflows: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflows$outboundSchema
      ),
    ).optional(),
    jobsRunThisMonth: z.number().int().optional(),
    workspaceJobLimit: z.number().int().optional(),
    dailyJobQuota: z.number().int().optional(),
    activeScrapers: z.number().int().optional(),
    totalLeadsCollected: z.number().int().optional(),
    lastJobRun: z.date().transform(v => v.toISOString()).optional(),
    scrapingJobs: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateScrapingJobs$outboundSchema
      ),
    ).optional(),
    apiKeys: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateApiKeys$outboundSchema
      ),
    ).optional(),
    webhooks: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateWebhooks$outboundSchema
      ),
    ).optional(),
    workspaceType:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaceType$outboundSchema
        .default("WORKSPACE_TYPE_UNSPECIFIED"),
    description: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    maxTeamMembers: z.number().int().optional(),
    currentTeamMembers: z.number().int().optional(),
    allowGuestAccess: z.boolean().optional(),
    allowedEmailDomains: z.array(z.string()).optional(),
    exportFormats: z.array(z.string()).optional(),
    exportSchedule: z.string().optional(),
    exportDestinations: z.array(z.string()).optional(),
    exportDestinationConfig: z.record(z.string()).optional(),
    compressExports: z.boolean().optional(),
    compressionFormat: z.string().optional(),
    salesforceEnabled: z.boolean().optional(),
    salesforceConfig: z.string().optional(),
    hubspotEnabled: z.boolean().optional(),
    hubspotConfig: z.string().optional(),
    zapierEnabled: z.boolean().optional(),
    zapierWebhook: z.string().optional(),
    activeIntegrations: z.array(z.string()).optional(),
    integrationSettings: z.record(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaces$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaces$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaces$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaces$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaces$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaces$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaces$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspacesToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaces:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaces,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaces$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaces),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspacesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaces,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaces$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaces' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateSettings$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSettings,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    emailNotifications: z.boolean().optional(),
    slackNotifications: z.boolean().optional(),
    defaultDataRetention: z.string().optional(),
    autoPurgeEnabled: z.boolean().optional(),
    require2fa: z.boolean().optional(),
    sessionTimeout: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateSettings$Outbound =
  {
    id?: string | undefined;
    emailNotifications?: boolean | undefined;
    slackNotifications?: boolean | undefined;
    defaultDataRetention?: string | undefined;
    autoPurgeEnabled?: boolean | undefined;
    require2fa?: boolean | undefined;
    sessionTimeout?: string | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
    deletedAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateSettings$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSettings$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSettings
  > = z.object({
    id: z.string().optional(),
    emailNotifications: z.boolean().optional(),
    slackNotifications: z.boolean().optional(),
    defaultDataRetention: z.string().optional(),
    autoPurgeEnabled: z.boolean().optional(),
    require2fa: z.boolean().optional(),
    sessionTimeout: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateSettings$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateSettings$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSettings$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateSettings$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSettings$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateSettings$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSettings$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateSettingsToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateSettings:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSettings,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSettings$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateSettings),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateSettingsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateSettings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateSettings$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateSettings' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccount$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccount,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    authPlatformUserId: z.string().optional(),
    email: z.string().optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    accountStatus:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountStatus$inboundSchema
        .default("ACCOUNT_STATUS_UNSPECIFIED"),
    roles: z.array(
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateRoles$inboundSchema,
    ).optional(),
    permissions: z.array(
      PutApiLeadScraperMicroserviceApiV1AccountsUpdatePermissions$inboundSchema,
    ).optional(),
    mfaEnabled: z.boolean().optional(),
    lastLoginAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    timezone:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateTimezone$inboundSchema
        .default("TIMEZONE_UNSPECIFIED"),
    totalJobsRun: z.number().int().optional(),
    monthlyJobLimit: z.number().int().optional(),
    concurrentJobLimit: z.number().int().optional(),
    workspaces: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaces$inboundSchema
      ),
    ).optional(),
    settings: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateSettings$inboundSchema
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccount$Outbound = {
  id?: string | undefined;
  authPlatformUserId?: string | undefined;
  email?: string | undefined;
  deletedAt?: string | undefined;
  createdAt?: string | undefined;
  accountStatus: string;
  roles?: Array<string> | undefined;
  permissions?: Array<string> | undefined;
  mfaEnabled?: boolean | undefined;
  lastLoginAt?: string | undefined;
  timezone: string;
  totalJobsRun?: number | undefined;
  monthlyJobLimit?: number | undefined;
  concurrentJobLimit?: number | undefined;
  workspaces?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaces$Outbound>
    | undefined;
  settings?:
    | PutApiLeadScraperMicroserviceApiV1AccountsUpdateSettings$Outbound
    | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccount$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccount$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccount
  > = z.object({
    id: z.string().optional(),
    authPlatformUserId: z.string().optional(),
    email: z.string().optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    accountStatus:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountStatus$outboundSchema
        .default("ACCOUNT_STATUS_UNSPECIFIED"),
    roles: z.array(
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateRoles$outboundSchema,
    ).optional(),
    permissions: z.array(
      PutApiLeadScraperMicroserviceApiV1AccountsUpdatePermissions$outboundSchema,
    ).optional(),
    mfaEnabled: z.boolean().optional(),
    lastLoginAt: z.date().transform(v => v.toISOString()).optional(),
    timezone:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateTimezone$outboundSchema
        .default("TIMEZONE_UNSPECIFIED"),
    totalJobsRun: z.number().int().optional(),
    monthlyJobLimit: z.number().int().optional(),
    concurrentJobLimit: z.number().int().optional(),
    workspaces: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkspaces$outboundSchema
      ),
    ).optional(),
    settings: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateSettings$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccount$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccount$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccount$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccount$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccount$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccount$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccount$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateAccount:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccount,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccount$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateAccount),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccount$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccount' from JSON`,
  );
}

/** @internal */
export const Payload$inboundSchema: z.ZodType<Payload, z.ZodTypeDef, unknown> =
  z.object({
    account: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccount$inboundSchema
    ).optional(),
    organizationId: z.string().optional(),
    tenantId: z.string().optional(),
  });

/** @internal */
export type Payload$Outbound = {
  account?:
    | PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccount$Outbound
    | undefined;
  organizationId?: string | undefined;
  tenantId?: string | undefined;
};

/** @internal */
export const Payload$outboundSchema: z.ZodType<
  Payload$Outbound,
  z.ZodTypeDef,
  Payload
> = z.object({
  account: z.lazy(() =>
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccount$outboundSchema
  ).optional(),
  organizationId: z.string().optional(),
  tenantId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Payload$ {
  /** @deprecated use `Payload$inboundSchema` instead. */
  export const inboundSchema = Payload$inboundSchema;
  /** @deprecated use `Payload$outboundSchema` instead. */
  export const outboundSchema = Payload$outboundSchema;
  /** @deprecated use `Payload$Outbound` instead. */
  export type Outbound = Payload$Outbound;
}

export function payloadToJSON(payload: Payload): string {
  return JSON.stringify(Payload$outboundSchema.parse(payload));
}

export function payloadFromJSON(
  jsonString: string,
): SafeParseResult<Payload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Payload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Payload' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateRequestBody$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    payload: z.lazy(() => Payload$inboundSchema).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateRequestBody$Outbound =
  {
    payload?: Payload$Outbound | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateRequestBody$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRequestBody$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRequestBody
  > = z.object({
    payload: z.lazy(() => Payload$outboundSchema).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateRequestBody$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRequestBody$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRequestBody$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateRequestBody$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRequestBody$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateRequestBodyToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateRequestBody:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRequestBody,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRequestBody$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateRequestBody),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateRequestBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateRequestBody' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceLevel$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceLevel
  > = z.nativeEnum(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceLevel,
  );

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceLevel$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceLevel
  > =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceLevel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceLevel$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceLevel$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceLevel$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceLevel$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceLevel$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmbeddings$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmbeddings,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    embeddings: z.array(z.number()).optional(),
    modelVersion: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmbeddings$Outbound =
  {
    id?: string | undefined;
    embeddings?: Array<number> | undefined;
    modelVersion?: string | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmbeddings$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmbeddings$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmbeddings
  > = z.object({
    id: z.string().optional(),
    embeddings: z.array(z.number()).optional(),
    modelVersion: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmbeddings$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmbeddings$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmbeddings$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmbeddings$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmbeddings$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmbeddings$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmbeddings$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateEmbeddingsToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateEmbeddings:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmbeddings,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmbeddings$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateEmbeddings),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateEmbeddingsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmbeddings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmbeddings$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmbeddings' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseVersions$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    versionNumber: z.number().int().optional(),
    s3Key: z.string().optional(),
    size: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseVersions$Outbound =
  {
    id?: string | undefined;
    fileId?: string | undefined;
    versionNumber?: number | undefined;
    s3Key?: string | undefined;
    size?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    createdAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseVersions$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseVersions$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseVersions
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    versionNumber: z.number().int().optional(),
    s3Key: z.string().optional(),
    size: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseVersions$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseVersions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseVersions$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseVersions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseVersions$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseVersions$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseVersions$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseVersionsToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseVersions:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseVersions,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseVersions$outboundSchema
      .parse(
        putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseVersions,
      ),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseVersions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseVersions' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateComments$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateComments,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    authorId: z.string().optional(),
    content: z.string().optional(),
    startPosition: z.number().int().optional(),
    endPosition: z.number().int().optional(),
    resolved: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateComments$Outbound =
  {
    id?: string | undefined;
    authorId?: string | undefined;
    content?: string | undefined;
    startPosition?: number | undefined;
    endPosition?: number | undefined;
    resolved?: boolean | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateComments$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateComments$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateComments
  > = z.object({
    id: z.string().optional(),
    authorId: z.string().optional(),
    content: z.string().optional(),
    startPosition: z.number().int().optional(),
    endPosition: z.number().int().optional(),
    resolved: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateComments$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateComments$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateComments$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateComments$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateComments$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateComments$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateComments$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateCommentsToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateComments:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateComments,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateComments$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateComments),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateCommentsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateComments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateComments$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateComments' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSharing$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSharing,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSharing$Outbound =
  {
    id?: string | undefined;
    sharedWithEmail?: string | undefined;
    permissionLevel?: string | undefined;
    expiresAt?: string | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSharing$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSharing$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSharing
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSharing$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSharing$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSharing$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSharing$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSharing$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSharing$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSharing$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSharingToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSharing:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSharing,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSharing$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSharing),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSharingFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSharing,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSharing$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSharing' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateSnapshots$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSnapshots,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    snapshotHash: z.string().optional(),
    content: z.string().optional(),
    authorId: z.string().optional(),
    reason: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateSnapshots$Outbound =
  {
    id?: string | undefined;
    fileId?: string | undefined;
    snapshotHash?: string | undefined;
    content?: string | undefined;
    authorId?: string | undefined;
    reason?: string | undefined;
    createdAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateSnapshots$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSnapshots$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSnapshots
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    snapshotHash: z.string().optional(),
    content: z.string().optional(),
    authorId: z.string().optional(),
    reason: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateSnapshots$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateSnapshots$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSnapshots$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateSnapshots$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSnapshots$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateSnapshots$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSnapshots$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateSnapshotsToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateSnapshots:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSnapshots,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSnapshots$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateSnapshots),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateSnapshotsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateSnapshots,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateSnapshots$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateSnapshots' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateFiles$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateFiles,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    size: z.string().optional(),
    s3Key: z.string().optional(),
    s3BucketName: z.string().optional(),
    isDeleted: z.boolean().optional(),
    version: z.number().int().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    embeddings: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmbeddings$inboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseVersions$inboundSchema
      ),
    ).optional(),
    comments: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateComments$inboundSchema
      ),
    ).optional(),
    sharing: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSharing$inboundSchema
      ),
    ).optional(),
    snapshots: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateSnapshots$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateFiles$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  size?: string | undefined;
  s3Key?: string | undefined;
  s3BucketName?: string | undefined;
  isDeleted?: boolean | undefined;
  version?: number | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  embeddings?:
    | PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmbeddings$Outbound
    | undefined;
  versions?:
    | Array<
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseVersions$Outbound
    >
    | undefined;
  comments?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateComments$Outbound>
    | undefined;
  sharing?:
    | Array<
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSharing$Outbound
    >
    | undefined;
  snapshots?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateSnapshots$Outbound>
    | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateFiles$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateFiles$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateFiles
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    size: z.string().optional(),
    s3Key: z.string().optional(),
    s3BucketName: z.string().optional(),
    isDeleted: z.boolean().optional(),
    version: z.number().int().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    embeddings: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateEmbeddings$outboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseVersions$outboundSchema
      ),
    ).optional(),
    comments: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateComments$outboundSchema
      ),
    ).optional(),
    sharing: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsSharing$outboundSchema
      ),
    ).optional(),
    snapshots: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateSnapshots$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateFiles$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateFiles$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateFiles$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateFiles$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateFiles$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateFiles$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateFiles$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateFilesToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateFiles:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateFiles,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateFiles$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1AccountsUpdateFiles,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateFilesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateFiles,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateFiles$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateFiles' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateFolders$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateFolders,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    isDeleted: z.boolean().optional(),
    parentFolderId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    files: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateFiles$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateFolders$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  isDeleted?: boolean | undefined;
  parentFolderId?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  files?:
    | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateFiles$Outbound>
    | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateFolders$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateFolders$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateFolders
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    isDeleted: z.boolean().optional(),
    parentFolderId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    files: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateFiles$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateFolders$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateFolders$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateFolders$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateFolders$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateFolders$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateFolders$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateFolders$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateFoldersToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateFolders:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateFolders,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateFolders$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateFolders),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateFoldersFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateFolders,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateFolders$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateFolders' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplateType$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplateType
  > = z.nativeEnum(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplateType,
  );

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplateType$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplateType
  > =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplateType$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplateType$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplateType$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplateType$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplateType$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsVersions$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    version: z.string().optional(),
    baseContent: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    authorId: z.string().optional(),
    changeDescription: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsVersions$Outbound =
  {
    id?: string | undefined;
    templateId?: string | undefined;
    version?: string | undefined;
    baseContent?: string | undefined;
    metadata?: { [k: string]: string } | undefined;
    authorId?: string | undefined;
    changeDescription?: string | undefined;
    createdAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsVersions$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsVersions$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsVersions
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    version: z.string().optional(),
    baseContent: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    authorId: z.string().optional(),
    changeDescription: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsVersions$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsVersions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsVersions$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsVersions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsVersions$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsVersions$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsVersions$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsVersionsToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsVersions:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsVersions,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsVersions$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsVersions),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsVersions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsVersions' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateVariables$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateVariables,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    variableType: z.string().optional(),
    defaultValue: z.string().optional(),
    isRequired: z.boolean().optional(),
    validationRules: z.string().optional(),
    dataSource: z.string().optional(),
    aiExtractionRules: z.string().optional(),
    alternatives: z.array(z.string()).optional(),
    templateId: z.string().optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateVariables$Outbound =
  {
    id?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    variableType?: string | undefined;
    defaultValue?: string | undefined;
    isRequired?: boolean | undefined;
    validationRules?: string | undefined;
    dataSource?: string | undefined;
    aiExtractionRules?: string | undefined;
    alternatives?: Array<string> | undefined;
    templateId?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateVariables$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateVariables$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateVariables
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    variableType: z.string().optional(),
    defaultValue: z.string().optional(),
    isRequired: z.boolean().optional(),
    validationRules: z.string().optional(),
    dataSource: z.string().optional(),
    aiExtractionRules: z.string().optional(),
    alternatives: z.array(z.string()).optional(),
    templateId: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateVariables$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateVariables$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateVariables$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateVariables$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateVariables$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateVariables$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateVariables$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateVariablesToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateVariables:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateVariables,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateVariables$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateVariables),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateVariablesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateVariables,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateVariables$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateVariables' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseStatus
  > = z.nativeEnum(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseStatus,
  );

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseStatus
  > =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseStatus$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseStatus$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseStatus$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Status$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Status
  > = z.nativeEnum(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Status,
  );

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Status$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Status
  > =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Status$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Status$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Status$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Status$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Status$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureBlocks$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureBlocks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    blockType: z.string().optional(),
    pageNumber: z.number().int().optional(),
    xPosition: z.number().optional(),
    yPosition: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    isRequired: z.boolean().optional(),
    signatureData: z.string().optional(),
    signedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureBlocks$Outbound =
  {
    id?: string | undefined;
    requestId?: string | undefined;
    blockType?: string | undefined;
    pageNumber?: number | undefined;
    xPosition?: number | undefined;
    yPosition?: number | undefined;
    width?: number | undefined;
    height?: number | undefined;
    isRequired?: boolean | undefined;
    signatureData?: string | undefined;
    signedAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureBlocks$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureBlocks$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureBlocks
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    blockType: z.string().optional(),
    pageNumber: z.number().int().optional(),
    xPosition: z.number().optional(),
    yPosition: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    isRequired: z.boolean().optional(),
    signatureData: z.string().optional(),
    signedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureBlocks$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureBlocks$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureBlocks$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureBlocks$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureBlocks$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureBlocks$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureBlocks$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureBlocksToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureBlocks:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureBlocks,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureBlocks$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureBlocks),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureBlocksFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureBlocks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureBlocks$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureBlocks' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflow$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflow,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    signingOrder: z.array(z.string()).optional(),
    currentSigner: z.string().optional(),
    workflowStatus: z.string().optional(),
    parallelSigning: z.boolean().optional(),
    requireAllSignatures: z.boolean().optional(),
    deadline: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflow$Outbound =
  {
    id?: string | undefined;
    requestId?: string | undefined;
    signingOrder?: Array<string> | undefined;
    currentSigner?: string | undefined;
    workflowStatus?: string | undefined;
    parallelSigning?: boolean | undefined;
    requireAllSignatures?: boolean | undefined;
    deadline?: string | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflow$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflow$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflow
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    signingOrder: z.array(z.string()).optional(),
    currentSigner: z.string().optional(),
    workflowStatus: z.string().optional(),
    parallelSigning: z.boolean().optional(),
    requireAllSignatures: z.boolean().optional(),
    deadline: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflow$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflow$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflow$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflow$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflow$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflow$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflow$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflowToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflow:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflow,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflow$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflow),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflowFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflow,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflow$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflow' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureRequests$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureRequests,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    status:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Status$inboundSchema
        .default("SIGNATURE_STATUS_UNSPECIFIED"),
    signerEmail: z.string().optional(),
    signerName: z.string().optional(),
    role: z.string().optional(),
    authenticationMethod: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    requiresMfa: z.boolean().optional(),
    signatureType: z.string().optional(),
    reminderSchedule: z.array(z.string()).optional(),
    documentId: z.string().optional(),
    signatureBlocks: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureBlocks$inboundSchema
      ),
    ).optional(),
    workflow: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflow$inboundSchema
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureRequests$Outbound =
  {
    id?: string | undefined;
    status: string;
    signerEmail?: string | undefined;
    signerName?: string | undefined;
    role?: string | undefined;
    authenticationMethod?: string | undefined;
    expiresAt?: string | undefined;
    requiresMfa?: boolean | undefined;
    signatureType?: string | undefined;
    reminderSchedule?: Array<string> | undefined;
    documentId?: string | undefined;
    signatureBlocks?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureBlocks$Outbound
      >
      | undefined;
    workflow?:
      | PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflow$Outbound
      | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureRequests$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureRequests$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureRequests
  > = z.object({
    id: z.string().optional(),
    status:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Status$outboundSchema
        .default("SIGNATURE_STATUS_UNSPECIFIED"),
    signerEmail: z.string().optional(),
    signerName: z.string().optional(),
    role: z.string().optional(),
    authenticationMethod: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    requiresMfa: z.boolean().optional(),
    signatureType: z.string().optional(),
    reminderSchedule: z.array(z.string()).optional(),
    documentId: z.string().optional(),
    signatureBlocks: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureBlocks$outboundSchema
      ),
    ).optional(),
    workflow: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateWorkflow$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureRequests$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureRequests$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureRequests$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureRequests$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureRequests$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureRequests$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureRequests$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureRequestsToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureRequests:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureRequests,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureRequests$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureRequests),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureRequestsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureRequests,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureRequests$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureRequests' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAiAssistance$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAiAssistance,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    interactionType: z.string().optional(),
    userQuery: z.string().optional(),
    aiResponse: z.string().optional(),
    context: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAiAssistance$Outbound =
  {
    id?: string | undefined;
    documentId?: string | undefined;
    interactionType?: string | undefined;
    userQuery?: string | undefined;
    aiResponse?: string | undefined;
    context?: { [k: string]: string } | undefined;
    createdAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAiAssistance$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAiAssistance$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAiAssistance
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    interactionType: z.string().optional(),
    userQuery: z.string().optional(),
    aiResponse: z.string().optional(),
    context: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateAiAssistance$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAiAssistance$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAiAssistance$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAiAssistance$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAiAssistance$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAiAssistance$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAiAssistance$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAiAssistanceToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateAiAssistance:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAiAssistance,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAiAssistance$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateAiAssistance),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAiAssistanceFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateAiAssistance,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAiAssistance$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateAiAssistance' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateRounds$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRounds,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    historyId: z.string().optional(),
    roundNumber: z.number().int().optional(),
    proposerId: z.string().optional(),
    proposalContent: z.string().optional(),
    responseContent: z.string().optional(),
    status: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateRounds$Outbound = {
  id?: string | undefined;
  historyId?: string | undefined;
  roundNumber?: number | undefined;
  proposerId?: string | undefined;
  proposalContent?: string | undefined;
  responseContent?: string | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateRounds$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRounds$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRounds
  > = z.object({
    id: z.string().optional(),
    historyId: z.string().optional(),
    roundNumber: z.number().int().optional(),
    proposerId: z.string().optional(),
    proposalContent: z.string().optional(),
    responseContent: z.string().optional(),
    status: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateRounds$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateRounds$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRounds$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateRounds$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRounds$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateRounds$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRounds$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateRoundsToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateRounds:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRounds,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRounds$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1AccountsUpdateRounds,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateRoundsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateRounds,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateRounds$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateRounds' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateNegotiation$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateNegotiation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    rounds: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateRounds$inboundSchema
      ),
    ).optional(),
    currentStatus: z.string().optional(),
    startedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateNegotiation$Outbound =
  {
    id?: string | undefined;
    documentId?: string | undefined;
    rounds?:
      | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateRounds$Outbound>
      | undefined;
    currentStatus?: string | undefined;
    startedAt?: string | undefined;
    lastUpdated?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateNegotiation$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateNegotiation$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateNegotiation
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    rounds: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateRounds$outboundSchema
      ),
    ).optional(),
    currentStatus: z.string().optional(),
    startedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateNegotiation$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateNegotiation$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateNegotiation$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateNegotiation$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateNegotiation$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateNegotiation$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateNegotiation$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateNegotiationToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateNegotiation:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateNegotiation,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateNegotiation$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateNegotiation),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateNegotiationFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateNegotiation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateNegotiation$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateNegotiation' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateMerges$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateMerges,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    sourceBranch: z.string().optional(),
    targetBranch: z.string().optional(),
    mergeStatus: z.string().optional(),
    mergeStrategy: z.string().optional(),
    conflicts: z.array(z.string()).optional(),
    mergerId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    completedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateMerges$Outbound = {
  id?: string | undefined;
  branchId?: string | undefined;
  sourceBranch?: string | undefined;
  targetBranch?: string | undefined;
  mergeStatus?: string | undefined;
  mergeStrategy?: string | undefined;
  conflicts?: Array<string> | undefined;
  mergerId?: string | undefined;
  createdAt?: string | undefined;
  completedAt?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateMerges$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateMerges$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateMerges
  > = z.object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    sourceBranch: z.string().optional(),
    targetBranch: z.string().optional(),
    mergeStatus: z.string().optional(),
    mergeStrategy: z.string().optional(),
    conflicts: z.array(z.string()).optional(),
    mergerId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    completedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateMerges$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateMerges$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateMerges$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateMerges$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateMerges$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateMerges$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateMerges$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateMergesToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateMerges:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateMerges,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateMerges$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1AccountsUpdateMerges,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateMergesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateMerges,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateMerges$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateMerges' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdatePolicy$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdatePolicy,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    requiredApprovers: z.array(z.string()).optional(),
    minimumApprovals: z.number().int().optional(),
    enforceLinearHistory: z.boolean().optional(),
    allowForcePush: z.boolean().optional(),
    protectedPaths: z.array(z.string()).optional(),
    mergeRules: z.record(z.string()).optional(),
    automatedChecks: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdatePolicy$Outbound = {
  id?: string | undefined;
  branchId?: string | undefined;
  requiredApprovers?: Array<string> | undefined;
  minimumApprovals?: number | undefined;
  enforceLinearHistory?: boolean | undefined;
  allowForcePush?: boolean | undefined;
  protectedPaths?: Array<string> | undefined;
  mergeRules?: { [k: string]: string } | undefined;
  automatedChecks?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdatePolicy$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdatePolicy$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdatePolicy
  > = z.object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    requiredApprovers: z.array(z.string()).optional(),
    minimumApprovals: z.number().int().optional(),
    enforceLinearHistory: z.boolean().optional(),
    allowForcePush: z.boolean().optional(),
    protectedPaths: z.array(z.string()).optional(),
    mergeRules: z.record(z.string()).optional(),
    automatedChecks: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdatePolicy$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdatePolicy$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdatePolicy$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdatePolicy$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdatePolicy$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdatePolicy$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdatePolicy$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdatePolicyToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdatePolicy:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdatePolicy,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdatePolicy$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1AccountsUpdatePolicy,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdatePolicyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdatePolicy,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdatePolicy$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdatePolicy' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateMergeRequests$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateMergeRequests,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sourceBranchId: z.string().optional(),
    targetBranchId: z.string().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    authorId: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    status: z.string().optional(),
    labels: z.array(z.string()).optional(),
    hasConflicts: z.boolean().optional(),
    automatedCheckResults: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateMergeRequests$Outbound =
  {
    id?: string | undefined;
    sourceBranchId?: string | undefined;
    targetBranchId?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    authorId?: string | undefined;
    reviewers?: Array<string> | undefined;
    status?: string | undefined;
    labels?: Array<string> | undefined;
    hasConflicts?: boolean | undefined;
    automatedCheckResults?: Array<string> | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateMergeRequests$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateMergeRequests$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateMergeRequests
  > = z.object({
    id: z.string().optional(),
    sourceBranchId: z.string().optional(),
    targetBranchId: z.string().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    authorId: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    status: z.string().optional(),
    labels: z.array(z.string()).optional(),
    hasConflicts: z.boolean().optional(),
    automatedCheckResults: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateMergeRequests$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateMergeRequests$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateMergeRequests$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateMergeRequests$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateMergeRequests$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateMergeRequests$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateMergeRequests$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateMergeRequestsToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateMergeRequests:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateMergeRequests,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateMergeRequests$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateMergeRequests),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateMergeRequestsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateMergeRequests,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateMergeRequests$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateMergeRequests' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateBranches$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateBranches,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    baseVersionHash: z.string().optional(),
    currentHeadHash: z.string().optional(),
    purpose: z.string().optional(),
    status: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    branchMetadata: z.record(z.string()).optional(),
    isLocked: z.boolean().optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    merges: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateMerges$inboundSchema
      ),
    ).optional(),
    policy: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdatePolicy$inboundSchema
    ).optional(),
    mergeRequests: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateMergeRequests$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateBranches$Outbound =
  {
    id?: string | undefined;
    name?: string | undefined;
    baseVersionHash?: string | undefined;
    currentHeadHash?: string | undefined;
    purpose?: string | undefined;
    status?: string | undefined;
    reviewers?: Array<string> | undefined;
    branchMetadata?: { [k: string]: string } | undefined;
    isLocked?: boolean | undefined;
    lastUpdated?: string | undefined;
    merges?:
      | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateMerges$Outbound>
      | undefined;
    policy?:
      | PutApiLeadScraperMicroserviceApiV1AccountsUpdatePolicy$Outbound
      | undefined;
    mergeRequests?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateMergeRequests$Outbound
      >
      | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateBranches$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateBranches$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateBranches
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    baseVersionHash: z.string().optional(),
    currentHeadHash: z.string().optional(),
    purpose: z.string().optional(),
    status: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    branchMetadata: z.record(z.string()).optional(),
    isLocked: z.boolean().optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
    merges: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateMerges$outboundSchema
      ),
    ).optional(),
    policy: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdatePolicy$outboundSchema
    ).optional(),
    mergeRequests: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateMergeRequests$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateBranches$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateBranches$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateBranches$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateBranches$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateBranches$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateBranches$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateBranches$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateBranchesToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateBranches:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateBranches,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateBranches$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateBranches),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateBranchesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateBranches,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateBranches$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateBranches' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateChanges$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateChanges,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    changeType: z.string().optional(),
    contentBefore: z.string().optional(),
    contentAfter: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateChanges$Outbound = {
  id?: string | undefined;
  versionId?: string | undefined;
  changeType?: string | undefined;
  contentBefore?: string | undefined;
  contentAfter?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateChanges$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateChanges$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateChanges
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    changeType: z.string().optional(),
    contentBefore: z.string().optional(),
    contentAfter: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateChanges$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateChanges$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateChanges$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateChanges$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateChanges$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateChanges$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateChanges$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateChangesToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateChanges:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateChanges,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateChanges$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateChanges),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateChangesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateChanges,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateChanges$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateChanges' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateSummaries$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSummaries,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    summaryType: z.string().optional(),
    content: z.string().optional(),
    targetAudience: z.string().optional(),
    keyPoints: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateSummaries$Outbound =
  {
    id?: string | undefined;
    versionId?: string | undefined;
    summaryType?: string | undefined;
    content?: string | undefined;
    targetAudience?: string | undefined;
    keyPoints?: Array<string> | undefined;
    metadata?: { [k: string]: string } | undefined;
    createdAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateSummaries$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSummaries$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSummaries
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    summaryType: z.string().optional(),
    content: z.string().optional(),
    targetAudience: z.string().optional(),
    keyPoints: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateSummaries$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateSummaries$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSummaries$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateSummaries$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSummaries$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateSummaries$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSummaries$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateSummariesToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateSummaries:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSummaries,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSummaries$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateSummaries),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateSummariesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateSummaries,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateSummaries$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateSummaries' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Versions$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Versions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionHash: z.string().optional(),
    parentHash: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    branchName: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    isApproved: z.boolean().optional(),
    approvalChain: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    branches: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateBranches$inboundSchema
      ),
    ).optional(),
    changes: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateChanges$inboundSchema
      ),
    ).optional(),
    summaries: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateSummaries$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Versions$Outbound =
  {
    id?: string | undefined;
    versionHash?: string | undefined;
    parentHash?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    branchName?: string | undefined;
    metadata?: { [k: string]: string } | undefined;
    tags?: Array<string> | undefined;
    isApproved?: boolean | undefined;
    approvalChain?: string | undefined;
    createdAt?: string | undefined;
    branches?:
      | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateBranches$Outbound>
      | undefined;
    changes?:
      | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateChanges$Outbound>
      | undefined;
    summaries?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateSummaries$Outbound
      >
      | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Versions$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Versions$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Versions
  > = z.object({
    id: z.string().optional(),
    versionHash: z.string().optional(),
    parentHash: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    branchName: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    isApproved: z.boolean().optional(),
    approvalChain: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    branches: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateBranches$outboundSchema
      ),
    ).optional(),
    changes: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateChanges$outboundSchema
      ),
    ).optional(),
    summaries: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateSummaries$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Versions$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Versions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Versions$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Versions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Versions$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Versions$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Versions$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200VersionsToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Versions:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Versions,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Versions$outboundSchema
      .parse(
        putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Versions,
      ),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200VersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Versions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Versions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Versions' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstances$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstances,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    status:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseStatus$inboundSchema
        .default("DOCUMENT_STATUS_UNSPECIFIED"),
    fieldValues: z.record(z.string()).optional(),
    signers: z.array(z.string()).optional(),
    language: z.string().optional(),
    isCompleted: z.boolean().optional(),
    dueDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    generatedContent: z.string().optional(),
    attachments: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    signatureRequests: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureRequests$inboundSchema
      ),
    ).optional(),
    aiAssistance: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAiAssistance$inboundSchema
      ),
    ).optional(),
    negotiation: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateNegotiation$inboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Versions$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstances$Outbound =
  {
    id?: string | undefined;
    templateId?: string | undefined;
    status: string;
    fieldValues?: { [k: string]: string } | undefined;
    signers?: Array<string> | undefined;
    language?: string | undefined;
    isCompleted?: boolean | undefined;
    dueDate?: string | undefined;
    generatedContent?: string | undefined;
    attachments?: Array<string> | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
    signatureRequests?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureRequests$Outbound
      >
      | undefined;
    aiAssistance?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAiAssistance$Outbound
      >
      | undefined;
    negotiation?:
      | PutApiLeadScraperMicroserviceApiV1AccountsUpdateNegotiation$Outbound
      | undefined;
    versions?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Versions$Outbound
      >
      | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstances$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstances$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstances
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    status:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseStatus$outboundSchema
        .default("DOCUMENT_STATUS_UNSPECIFIED"),
    fieldValues: z.record(z.string()).optional(),
    signers: z.array(z.string()).optional(),
    language: z.string().optional(),
    isCompleted: z.boolean().optional(),
    dueDate: z.date().transform(v => v.toISOString()).optional(),
    generatedContent: z.string().optional(),
    attachments: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    signatureRequests: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateSignatureRequests$outboundSchema
      ),
    ).optional(),
    aiAssistance: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAiAssistance$outboundSchema
      ),
    ).optional(),
    negotiation: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateNegotiation$outboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponse200Versions$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstances$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstances$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstances$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstances$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstances$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstances$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstances$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateInstancesToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateInstances:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstances,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstances$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateInstances),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateInstancesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstances,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstances$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstances' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateExplanations$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateExplanations,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    sectionIdentifier: z.string().optional(),
    explanationText: z.string().optional(),
    complexityLevel: z.string().optional(),
    relatedTerms: z.array(z.string()).optional(),
    legalReferences: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateExplanations$Outbound =
  {
    id?: string | undefined;
    templateId?: string | undefined;
    sectionIdentifier?: string | undefined;
    explanationText?: string | undefined;
    complexityLevel?: string | undefined;
    relatedTerms?: Array<string> | undefined;
    legalReferences?: Array<string> | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateExplanations$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateExplanations$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateExplanations
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    sectionIdentifier: z.string().optional(),
    explanationText: z.string().optional(),
    complexityLevel: z.string().optional(),
    relatedTerms: z.array(z.string()).optional(),
    legalReferences: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateExplanations$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateExplanations$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateExplanations$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateExplanations$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateExplanations$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateExplanations$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateExplanations$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateExplanationsToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateExplanations:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateExplanations,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateExplanations$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateExplanations),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateExplanationsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateExplanations,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateExplanations$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateExplanations' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateRiskAssessments$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRiskAssessments,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    riskType: z.string().optional(),
    riskScore: z.number().optional(),
    assessmentDetails: z.string().optional(),
    mitigationSuggestions: z.array(z.string()).optional(),
    assessorId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateRiskAssessments$Outbound =
  {
    id?: string | undefined;
    intelligenceId?: string | undefined;
    riskType?: string | undefined;
    riskScore?: number | undefined;
    assessmentDetails?: string | undefined;
    mitigationSuggestions?: Array<string> | undefined;
    assessorId?: string | undefined;
    createdAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateRiskAssessments$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRiskAssessments$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRiskAssessments
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    riskType: z.string().optional(),
    riskScore: z.number().optional(),
    assessmentDetails: z.string().optional(),
    mitigationSuggestions: z.array(z.string()).optional(),
    assessorId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateRiskAssessments$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateRiskAssessments$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRiskAssessments$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateRiskAssessments$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRiskAssessments$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateRiskAssessments$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRiskAssessments$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateRiskAssessmentsToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateRiskAssessments:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRiskAssessments,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateRiskAssessments$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateRiskAssessments),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateRiskAssessmentsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateRiskAssessments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateRiskAssessments$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateRiskAssessments' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceChecks$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceChecks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    complianceStandard: z.string().optional(),
    checkResult: z.string().optional(),
    violations: z.array(z.string()).optional(),
    remediationSteps: z.string().optional(),
    checkDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceChecks$Outbound =
  {
    id?: string | undefined;
    intelligenceId?: string | undefined;
    complianceStandard?: string | undefined;
    checkResult?: string | undefined;
    violations?: Array<string> | undefined;
    remediationSteps?: string | undefined;
    checkDate?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceChecks$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceChecks$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceChecks
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    complianceStandard: z.string().optional(),
    checkResult: z.string().optional(),
    violations: z.array(z.string()).optional(),
    remediationSteps: z.string().optional(),
    checkDate: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceChecks$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceChecks$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceChecks$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceChecks$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceChecks$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceChecks$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceChecks$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceChecksToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceChecks:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceChecks,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceChecks$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceChecks),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceChecksFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceChecks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceChecks$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceChecks' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateIntelligence$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateIntelligence,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    contractType: z.string().optional(),
    riskScores: z.record(z.number()).optional(),
    detectedClauses: z.record(z.string()).optional(),
    keyObligations: z.array(z.string()).optional(),
    complianceScores: z.record(z.number()).optional(),
    jurisdiction: z.string().optional(),
    governingLaws: z.array(z.string()).optional(),
    semanticAnalysis: z.record(z.string()).optional(),
    analysisDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    riskAssessments: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateRiskAssessments$inboundSchema
      ),
    ).optional(),
    complianceChecks: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceChecks$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateIntelligence$Outbound =
  {
    id?: string | undefined;
    contractType?: string | undefined;
    riskScores?: { [k: string]: number } | undefined;
    detectedClauses?: { [k: string]: string } | undefined;
    keyObligations?: Array<string> | undefined;
    complianceScores?: { [k: string]: number } | undefined;
    jurisdiction?: string | undefined;
    governingLaws?: Array<string> | undefined;
    semanticAnalysis?: { [k: string]: string } | undefined;
    analysisDate?: string | undefined;
    riskAssessments?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateRiskAssessments$Outbound
      >
      | undefined;
    complianceChecks?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceChecks$Outbound
      >
      | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateIntelligence$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateIntelligence$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateIntelligence
  > = z.object({
    id: z.string().optional(),
    contractType: z.string().optional(),
    riskScores: z.record(z.number()).optional(),
    detectedClauses: z.record(z.string()).optional(),
    keyObligations: z.array(z.string()).optional(),
    complianceScores: z.record(z.number()).optional(),
    jurisdiction: z.string().optional(),
    governingLaws: z.array(z.string()).optional(),
    semanticAnalysis: z.record(z.string()).optional(),
    analysisDate: z.date().transform(v => v.toISOString()).optional(),
    riskAssessments: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateRiskAssessments$outboundSchema
      ),
    ).optional(),
    complianceChecks: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceChecks$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateIntelligence$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateIntelligence$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateIntelligence$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateIntelligence$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateIntelligence$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateIntelligence$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateIntelligence$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateIntelligenceToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateIntelligence:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateIntelligence,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateIntelligence$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateIntelligence),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateIntelligenceFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateIntelligence,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateIntelligence$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateIntelligence' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplates$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplates,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    industryType: z.string().optional(),
    documentType: z.string().optional(),
    baseContent: z.string().optional(),
    isAdaptive: z.boolean().optional(),
    metadata: z.record(z.string()).optional(),
    supportedLanguages: z.array(z.string()).optional(),
    requiredDataFields: z.array(z.string()).optional(),
    version: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    templateType:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplateType$inboundSchema
        .default("TEMPLATE_TYPE_UNSPECIFIED"),
    content: z.string().optional(),
    detectedVariables: z.array(z.string()).optional(),
    variableMappings: z.record(z.string()).optional(),
    isContextAware: z.boolean().optional(),
    supportedContexts: z.array(z.string()).optional(),
    formattingRules: z.record(z.string()).optional(),
    conditionalSections: z.array(z.string()).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsVersions$inboundSchema
      ),
    ).optional(),
    variables: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateVariables$inboundSchema
      ),
    ).optional(),
    instances: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstances$inboundSchema
      ),
    ).optional(),
    explanations: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateExplanations$inboundSchema
      ),
    ).optional(),
    intelligence: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateIntelligence$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplates$Outbound =
  {
    id?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    industryType?: string | undefined;
    documentType?: string | undefined;
    baseContent?: string | undefined;
    isAdaptive?: boolean | undefined;
    metadata?: { [k: string]: string } | undefined;
    supportedLanguages?: Array<string> | undefined;
    requiredDataFields?: Array<string> | undefined;
    version?: string | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
    templateType: string;
    content?: string | undefined;
    detectedVariables?: Array<string> | undefined;
    variableMappings?: { [k: string]: string } | undefined;
    isContextAware?: boolean | undefined;
    supportedContexts?: Array<string> | undefined;
    formattingRules?: { [k: string]: string } | undefined;
    conditionalSections?: Array<string> | undefined;
    versions?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsVersions$Outbound
      >
      | undefined;
    variables?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateVariables$Outbound
      >
      | undefined;
    instances?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstances$Outbound
      >
      | undefined;
    explanations?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateExplanations$Outbound
      >
      | undefined;
    intelligence?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateIntelligence$Outbound
      >
      | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplates$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplates$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplates
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    industryType: z.string().optional(),
    documentType: z.string().optional(),
    baseContent: z.string().optional(),
    isAdaptive: z.boolean().optional(),
    metadata: z.record(z.string()).optional(),
    supportedLanguages: z.array(z.string()).optional(),
    requiredDataFields: z.array(z.string()).optional(),
    version: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    templateType:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplateType$outboundSchema
        .default("TEMPLATE_TYPE_UNSPECIFIED"),
    content: z.string().optional(),
    detectedVariables: z.array(z.string()).optional(),
    variableMappings: z.record(z.string()).optional(),
    isContextAware: z.boolean().optional(),
    supportedContexts: z.array(z.string()).optional(),
    formattingRules: z.record(z.string()).optional(),
    conditionalSections: z.array(z.string()).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsVersions$outboundSchema
      ),
    ).optional(),
    variables: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateVariables$outboundSchema
      ),
    ).optional(),
    instances: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstances$outboundSchema
      ),
    ).optional(),
    explanations: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateExplanations$outboundSchema
      ),
    ).optional(),
    intelligence: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateIntelligence$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplates$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplates$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplates$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplates$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplates$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplates$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplates$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateTemplatesToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateTemplates:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplates,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplates$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateTemplates),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateTemplatesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplates,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplates$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplates' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateSharing$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSharing,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateSharing$Outbound = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateSharing$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSharing$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSharing
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateSharing$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateSharing$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSharing$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateSharing$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSharing$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateSharing$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSharing$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateSharingToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateSharing:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSharing,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateSharing$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateSharing),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateSharingFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateSharing,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateSharing$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateSharing' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateActivities$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateActivities,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    activityType: z.string().optional(),
    userId: z.string().optional(),
    description: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateActivities$Outbound =
  {
    id?: string | undefined;
    activityType?: string | undefined;
    userId?: string | undefined;
    description?: string | undefined;
    metadata?: { [k: string]: string } | undefined;
    createdAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateActivities$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateActivities$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateActivities
  > = z.object({
    id: z.string().optional(),
    activityType: z.string().optional(),
    userId: z.string().optional(),
    description: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateActivities$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateActivities$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateActivities$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateActivities$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateActivities$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateActivities$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateActivities$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateActivitiesToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateActivities:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateActivities,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateActivities$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateActivities),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateActivitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateActivities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateActivities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateActivities' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateCompliance$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateCompliance,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    complianceType: z.string().optional(),
    status: z.string().optional(),
    certificationId: z.string().optional(),
    validUntil: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateCompliance$Outbound =
  {
    id?: string | undefined;
    complianceType?: string | undefined;
    status?: string | undefined;
    certificationId?: string | undefined;
    validUntil?: string | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateCompliance$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateCompliance$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateCompliance
  > = z.object({
    id: z.string().optional(),
    complianceType: z.string().optional(),
    status: z.string().optional(),
    certificationId: z.string().optional(),
    validUntil: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateCompliance$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateCompliance$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateCompliance$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateCompliance$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateCompliance$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateCompliance$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateCompliance$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateCompliance:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateCompliance,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateCompliance$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateCompliance),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateCompliance,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateCompliance$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateCompliance' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateCategory$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateCategory
  > = z.nativeEnum(PutApiLeadScraperMicroserviceApiV1AccountsUpdateCategory);

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateCategory$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdateCategory
  > = PutApiLeadScraperMicroserviceApiV1AccountsUpdateCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateCategory$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateCategory$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateCategory$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateCategory$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateCategory$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdatePricingModel$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdatePricingModel
  > = z.nativeEnum(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdatePricingModel,
  );

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdatePricingModel$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1AccountsUpdatePricingModel
  > =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdatePricingModel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdatePricingModel$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdatePricingModel$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdatePricingModel$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdatePricingModel$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdatePricingModel$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateVersions$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    versionNumber: z.string().optional(),
    changelog: z.string().optional(),
    requirements: z.record(z.string()).optional(),
    isPublic: z.boolean().optional(),
    releaseDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateVersions$Outbound =
  {
    id?: string | undefined;
    appId?: string | undefined;
    versionNumber?: string | undefined;
    changelog?: string | undefined;
    requirements?: { [k: string]: string } | undefined;
    isPublic?: boolean | undefined;
    releaseDate?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateVersions$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateVersions$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateVersions
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    versionNumber: z.string().optional(),
    changelog: z.string().optional(),
    requirements: z.record(z.string()).optional(),
    isPublic: z.boolean().optional(),
    releaseDate: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateVersions$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateVersions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateVersions$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateVersions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateVersions$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateVersions$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateVersions$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateVersionsToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateVersions:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateVersions,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateVersions$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateVersions),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateVersions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateVersions' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstallations$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstallations,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    workspaceId: z.string().optional(),
    versionInstalled: z.string().optional(),
    configuration: z.record(z.string()).optional(),
    installationStatus: z.string().optional(),
    installedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    lastUsed: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstallations$Outbound =
  {
    id?: string | undefined;
    appId?: string | undefined;
    workspaceId?: string | undefined;
    versionInstalled?: string | undefined;
    configuration?: { [k: string]: string } | undefined;
    installationStatus?: string | undefined;
    installedAt?: string | undefined;
    lastUsed?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstallations$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstallations$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstallations
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    workspaceId: z.string().optional(),
    versionInstalled: z.string().optional(),
    configuration: z.record(z.string()).optional(),
    installationStatus: z.string().optional(),
    installedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUsed: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstallations$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstallations$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstallations$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstallations$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstallations$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstallations$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstallations$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateInstallationsToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateInstallations:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstallations,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstallations$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateInstallations),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateInstallationsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstallations,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstallations$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstallations' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAnalytics$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAnalytics,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    metricName: z.string().optional(),
    metricValue: z.number().optional(),
    dimensions: z.record(z.string()).optional(),
    recordedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAnalytics$Outbound =
  {
    id?: string | undefined;
    appId?: string | undefined;
    metricName?: string | undefined;
    metricValue?: number | undefined;
    dimensions?: { [k: string]: string } | undefined;
    recordedAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAnalytics$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAnalytics$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAnalytics
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    metricName: z.string().optional(),
    metricValue: z.number().optional(),
    dimensions: z.record(z.string()).optional(),
    recordedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateAnalytics$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAnalytics$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAnalytics$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAnalytics$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAnalytics$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAnalytics$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAnalytics$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAnalyticsToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateAnalytics:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAnalytics,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAnalytics$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateAnalytics),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateAnalytics,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAnalytics$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateAnalytics' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseReviews$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseReviews,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    reviewerId: z.string().optional(),
    rating: z.number().optional(),
    reviewText: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseReviews$Outbound =
  {
    id?: string | undefined;
    appId?: string | undefined;
    reviewerId?: string | undefined;
    rating?: number | undefined;
    reviewText?: string | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseReviews$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseReviews$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseReviews
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    reviewerId: z.string().optional(),
    rating: z.number().optional(),
    reviewText: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseReviews$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseReviews$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseReviews$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseReviews$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseReviews$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseReviews$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseReviews$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseReviewsToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseReviews:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseReviews,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseReviews$outboundSchema
      .parse(
        putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseReviews,
      ),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseReviewsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseReviews,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseReviews$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseReviews' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateInfo$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInfo,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    supportedLanguages: z.array(z.string()).optional(),
    sdkFeatures: z.array(z.string()).optional(),
    testCoverage: z.record(z.number()).optional(),
    securityScans: z.array(z.string()).optional(),
    performanceMetrics: z.record(z.string()).optional(),
    developmentStatus: z.string().optional(),
    knownIssues: z.array(z.string()).optional(),
    roadmapUrl: z.string().optional(),
    lastSecurityAudit: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateInfo$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  supportedLanguages?: Array<string> | undefined;
  sdkFeatures?: Array<string> | undefined;
  testCoverage?: { [k: string]: number } | undefined;
  securityScans?: Array<string> | undefined;
  performanceMetrics?: { [k: string]: string } | undefined;
  developmentStatus?: string | undefined;
  knownIssues?: Array<string> | undefined;
  roadmapUrl?: string | undefined;
  lastSecurityAudit?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateInfo$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInfo$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInfo
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    supportedLanguages: z.array(z.string()).optional(),
    sdkFeatures: z.array(z.string()).optional(),
    testCoverage: z.record(z.number()).optional(),
    securityScans: z.array(z.string()).optional(),
    performanceMetrics: z.record(z.string()).optional(),
    developmentStatus: z.string().optional(),
    knownIssues: z.array(z.string()).optional(),
    roadmapUrl: z.string().optional(),
    lastSecurityAudit: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateInfo$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateInfo$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInfo$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateInfo$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInfo$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateInfo$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInfo$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateInfoToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateInfo:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInfo,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInfo$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1AccountsUpdateInfo,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateInfoFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateInfo,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateInfo$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateInfo' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWebhooks$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWebhooks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    url: z.string().optional(),
    subscribedEvents: z.array(z.string()).optional(),
    secretKey: z.string().optional(),
    retryCount: z.number().int().optional(),
    timeoutSeconds: z.number().int().optional(),
    isActive: z.boolean().optional(),
    headers: z.record(z.string()).optional(),
    lastTriggered: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWebhooks$Outbound =
  {
    id?: string | undefined;
    appId?: string | undefined;
    url?: string | undefined;
    subscribedEvents?: Array<string> | undefined;
    secretKey?: string | undefined;
    retryCount?: number | undefined;
    timeoutSeconds?: number | undefined;
    isActive?: boolean | undefined;
    headers?: { [k: string]: string } | undefined;
    lastTriggered?: string | undefined;
    createdAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWebhooks$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWebhooks$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWebhooks
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    url: z.string().optional(),
    subscribedEvents: z.array(z.string()).optional(),
    secretKey: z.string().optional(),
    retryCount: z.number().int().optional(),
    timeoutSeconds: z.number().int().optional(),
    isActive: z.boolean().optional(),
    headers: z.record(z.string()).optional(),
    lastTriggered: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWebhooks$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWebhooks$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWebhooks$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWebhooks$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWebhooks$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWebhooks$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWebhooks$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWebhooksToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWebhooks:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWebhooks,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWebhooks$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWebhooks),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWebhooksFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWebhooks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWebhooks$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWebhooks' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsPermissions$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsPermissions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    scope: z.string().optional(),
    description: z.string().optional(),
    isRequired: z.boolean().optional(),
    accessLevels: z.array(z.string()).optional(),
    constraints: z.record(z.string()).optional(),
    requiresApproval: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsPermissions$Outbound =
  {
    id?: string | undefined;
    appId?: string | undefined;
    scope?: string | undefined;
    description?: string | undefined;
    isRequired?: boolean | undefined;
    accessLevels?: Array<string> | undefined;
    constraints?: { [k: string]: string } | undefined;
    requiresApproval?: boolean | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsPermissions$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsPermissions$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsPermissions
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    scope: z.string().optional(),
    description: z.string().optional(),
    isRequired: z.boolean().optional(),
    accessLevels: z.array(z.string()).optional(),
    constraints: z.record(z.string()).optional(),
    requiresApproval: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsPermissions$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsPermissions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsPermissions$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsPermissions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsPermissions$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsPermissions$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsPermissions$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsPermissionsToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsPermissions:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsPermissions,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsPermissions$outboundSchema
      .parse(
        putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsPermissions,
      ),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsPermissionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsPermissions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsPermissions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsPermissions' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstalledApps$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstalledApps,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    developerId: z.string().optional(),
    category:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateCategory$inboundSchema
        .default("APP_CATEGORY_UNSPECIFIED"),
    supportedContractTypes: z.array(z.string()).optional(),
    features: z.array(z.string()).optional(),
    pricingModel:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdatePricingModel$inboundSchema
        .default("PRICING_MODEL_UNSPECIFIED"),
    pricingTiers: z.record(z.number()).optional(),
    supportedIntegrations: z.array(z.string()).optional(),
    isVerified: z.boolean().optional(),
    rating: z.number().optional(),
    installationCount: z.number().int().optional(),
    requiredPermissions: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    documentationUrl: z.string().optional(),
    supportEmail: z.string().optional(),
    screenshots: z.array(z.string()).optional(),
    privacyPolicyUrl: z.string().optional(),
    termsUrl: z.string().optional(),
    publishedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateVersions$inboundSchema
      ),
    ).optional(),
    installations: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstallations$inboundSchema
      ),
    ).optional(),
    analytics: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAnalytics$inboundSchema
      ),
    ).optional(),
    reviews: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseReviews$inboundSchema
      ),
    ).optional(),
    info: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateInfo$inboundSchema
    ).optional(),
    webhooks: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWebhooks$inboundSchema
      ),
    ).optional(),
    permissions: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsPermissions$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstalledApps$Outbound =
  {
    id?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    developerId?: string | undefined;
    category: string;
    supportedContractTypes?: Array<string> | undefined;
    features?: Array<string> | undefined;
    pricingModel: string;
    pricingTiers?: { [k: string]: number } | undefined;
    supportedIntegrations?: Array<string> | undefined;
    isVerified?: boolean | undefined;
    rating?: number | undefined;
    installationCount?: number | undefined;
    requiredPermissions?: Array<string> | undefined;
    metadata?: { [k: string]: string } | undefined;
    documentationUrl?: string | undefined;
    supportEmail?: string | undefined;
    screenshots?: Array<string> | undefined;
    privacyPolicyUrl?: string | undefined;
    termsUrl?: string | undefined;
    publishedAt?: string | undefined;
    lastUpdated?: string | undefined;
    versions?:
      | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateVersions$Outbound>
      | undefined;
    installations?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstallations$Outbound
      >
      | undefined;
    analytics?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAnalytics$Outbound
      >
      | undefined;
    reviews?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseReviews$Outbound
      >
      | undefined;
    info?:
      | PutApiLeadScraperMicroserviceApiV1AccountsUpdateInfo$Outbound
      | undefined;
    webhooks?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWebhooks$Outbound
      >
      | undefined;
    permissions?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsPermissions$Outbound
      >
      | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstalledApps$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstalledApps$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstalledApps
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    developerId: z.string().optional(),
    category:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateCategory$outboundSchema
        .default("APP_CATEGORY_UNSPECIFIED"),
    supportedContractTypes: z.array(z.string()).optional(),
    features: z.array(z.string()).optional(),
    pricingModel:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdatePricingModel$outboundSchema
        .default("PRICING_MODEL_UNSPECIFIED"),
    pricingTiers: z.record(z.number()).optional(),
    supportedIntegrations: z.array(z.string()).optional(),
    isVerified: z.boolean().optional(),
    rating: z.number().optional(),
    installationCount: z.number().int().optional(),
    requiredPermissions: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    documentationUrl: z.string().optional(),
    supportEmail: z.string().optional(),
    screenshots: z.array(z.string()).optional(),
    privacyPolicyUrl: z.string().optional(),
    termsUrl: z.string().optional(),
    publishedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateVersions$outboundSchema
      ),
    ).optional(),
    installations: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstallations$outboundSchema
      ),
    ).optional(),
    analytics: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAnalytics$outboundSchema
      ),
    ).optional(),
    reviews: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsResponseReviews$outboundSchema
      ),
    ).optional(),
    info: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateInfo$outboundSchema
    ).optional(),
    webhooks: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWebhooks$outboundSchema
      ),
    ).optional(),
    permissions: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsPermissions$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstalledApps$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstalledApps$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstalledApps$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstalledApps$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstalledApps$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstalledApps$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstalledApps$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateInstalledAppsToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateInstalledApps:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstalledApps,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstalledApps$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateInstalledApps),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateInstalledAppsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstalledApps,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstalledApps$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstalledApps' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWorkspaces$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWorkspaces,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    uniqueIdentifier: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    storageQuota: z.string().optional(),
    usedStorage: z.string().optional(),
    allowPublicSharing: z.boolean().optional(),
    requireApproval: z.boolean().optional(),
    gdprCompliant: z.boolean().optional(),
    hipaaCompliant: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    folders: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateFolders$inboundSchema
      ),
    ).optional(),
    templates: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplates$inboundSchema
      ),
    ).optional(),
    sharing: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateSharing$inboundSchema
      ),
    ).optional(),
    activities: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateActivities$inboundSchema
      ),
    ).optional(),
    compliance: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateCompliance$inboundSchema
      ),
    ).optional(),
    installedApps: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstalledApps$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWorkspaces$Outbound =
  {
    id?: string | undefined;
    name?: string | undefined;
    uniqueIdentifier?: string | undefined;
    s3BucketName?: string | undefined;
    s3FolderPath?: string | undefined;
    storageQuota?: string | undefined;
    usedStorage?: string | undefined;
    allowPublicSharing?: boolean | undefined;
    requireApproval?: boolean | undefined;
    gdprCompliant?: boolean | undefined;
    hipaaCompliant?: boolean | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
    deletedAt?: string | undefined;
    folders?:
      | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateFolders$Outbound>
      | undefined;
    templates?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplates$Outbound
      >
      | undefined;
    sharing?:
      | Array<PutApiLeadScraperMicroserviceApiV1AccountsUpdateSharing$Outbound>
      | undefined;
    activities?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateActivities$Outbound
      >
      | undefined;
    compliance?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateCompliance$Outbound
      >
      | undefined;
    installedApps?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstalledApps$Outbound
      >
      | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWorkspaces$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWorkspaces$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWorkspaces
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    uniqueIdentifier: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    storageQuota: z.string().optional(),
    usedStorage: z.string().optional(),
    allowPublicSharing: z.boolean().optional(),
    requireApproval: z.boolean().optional(),
    gdprCompliant: z.boolean().optional(),
    hipaaCompliant: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    folders: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateFolders$outboundSchema
      ),
    ).optional(),
    templates: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateTemplates$outboundSchema
      ),
    ).optional(),
    sharing: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateSharing$outboundSchema
      ),
    ).optional(),
    activities: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateActivities$outboundSchema
      ),
    ).optional(),
    compliance: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateCompliance$outboundSchema
      ),
    ).optional(),
    installedApps: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateInstalledApps$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWorkspaces$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWorkspaces$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWorkspaces$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWorkspaces$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWorkspaces$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWorkspaces$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWorkspaces$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWorkspacesToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWorkspaces:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWorkspaces,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWorkspaces$outboundSchema
      .parse(
        putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWorkspaces,
      ),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWorkspacesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWorkspaces,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWorkspaces$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWorkspaces' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateDataProfiles$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateDataProfiles,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    profileType: z.string().optional(),
    dataFields: z.record(z.string()).optional(),
    isDefault: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateDataProfiles$Outbound =
  {
    id?: string | undefined;
    name?: string | undefined;
    profileType?: string | undefined;
    dataFields?: { [k: string]: string } | undefined;
    isDefault?: boolean | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateDataProfiles$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateDataProfiles$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateDataProfiles
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    profileType: z.string().optional(),
    dataFields: z.record(z.string()).optional(),
    isDefault: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateDataProfiles$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateDataProfiles$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateDataProfiles$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateDataProfiles$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateDataProfiles$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateDataProfiles$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateDataProfiles$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateDataProfilesToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateDataProfiles:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateDataProfiles,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateDataProfiles$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateDataProfiles),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateDataProfilesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateDataProfiles,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateDataProfiles$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateDataProfiles' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsAccount$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsAccount,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    auth0UserId: z.string().optional(),
    email: z.string().optional(),
    baseDirectory: z.string().optional(),
    bucketName: z.string().optional(),
    region: z.string().optional(),
    orgId: z.string().optional(),
    tenantId: z.string().optional(),
    roles: z.array(z.string()).optional(),
    permissions: z.array(z.string()).optional(),
    mfaEnabled: z.boolean().optional(),
    complianceLevel:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceLevel$inboundSchema
        .default("COMPLIANCE_LEVEL_UNSPECIFIED"),
    preferences: z.record(z.string()).optional(),
    apiKeys: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    workspaces: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWorkspaces$inboundSchema
      ),
    ).optional(),
    dataProfiles: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateDataProfiles$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsAccount$Outbound =
  {
    id?: string | undefined;
    auth0UserId?: string | undefined;
    email?: string | undefined;
    baseDirectory?: string | undefined;
    bucketName?: string | undefined;
    region?: string | undefined;
    orgId?: string | undefined;
    tenantId?: string | undefined;
    roles?: Array<string> | undefined;
    permissions?: Array<string> | undefined;
    mfaEnabled?: boolean | undefined;
    complianceLevel: string;
    preferences?: { [k: string]: string } | undefined;
    apiKeys?: Array<string> | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
    deletedAt?: string | undefined;
    workspaces?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWorkspaces$Outbound
      >
      | undefined;
    dataProfiles?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateDataProfiles$Outbound
      >
      | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsAccount$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsAccount$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsAccount
  > = z.object({
    id: z.string().optional(),
    auth0UserId: z.string().optional(),
    email: z.string().optional(),
    baseDirectory: z.string().optional(),
    bucketName: z.string().optional(),
    region: z.string().optional(),
    orgId: z.string().optional(),
    tenantId: z.string().optional(),
    roles: z.array(z.string()).optional(),
    permissions: z.array(z.string()).optional(),
    mfaEnabled: z.boolean().optional(),
    complianceLevel:
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateComplianceLevel$outboundSchema
        .default("COMPLIANCE_LEVEL_UNSPECIFIED"),
    preferences: z.record(z.string()).optional(),
    apiKeys: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    workspaces: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsWorkspaces$outboundSchema
      ),
    ).optional(),
    dataProfiles: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1AccountsUpdateDataProfiles$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsAccount$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsAccount$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsAccount$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsAccount$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsAccount$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsAccount$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsAccount$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsAccountToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsAccount:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsAccount,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsAccount$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsAccount),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsAccountFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsAccount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsAccount$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsAccount' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateResponseBody$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    account: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsAccount$inboundSchema
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsUpdateResponseBody$Outbound =
  {
    account?:
      | PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsAccount$Outbound
      | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsUpdateResponseBody$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateResponseBody$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateResponseBody
  > = z.object({
    account: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateAccountsAccount$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsUpdateResponseBody$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateResponseBody$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateResponseBody$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsUpdateResponseBody$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateResponseBody$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateResponseBodyToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsUpdateResponseBody:
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateResponseBody,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsUpdateResponseBody$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsUpdateResponseBody),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsUpdateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsUpdateResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsUpdateResponseBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsUpdateResponseBody' from JSON`,
  );
}
