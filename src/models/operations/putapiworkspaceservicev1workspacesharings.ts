/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutApiWorkspaceServiceV1WorkspaceSharingsSharing = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspaceSharingsRequestBody = {
  sharing?: PutApiWorkspaceServiceV1WorkspaceSharingsSharing | undefined;
};

export type PutApiWorkspaceServiceV1WorkspaceSharingsWorkspaceSharingsSharing =
  {
    id?: string | undefined;
    sharedWithEmail?: string | undefined;
    permissionLevel?: string | undefined;
    expiresAt?: Date | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
  };

export type PutApiWorkspaceServiceV1WorkspaceSharingsResponseBody = {
  sharing?:
    | PutApiWorkspaceServiceV1WorkspaceSharingsWorkspaceSharingsSharing
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspaceSharingsSharing$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspaceSharingsSharing,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspaceSharingsSharing$Outbound = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspaceSharingsSharing$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspaceSharingsSharing$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspaceSharingsSharing
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspaceSharingsSharing$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspaceSharingsSharing$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspaceSharingsSharing$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspaceSharingsSharing$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspaceSharingsSharing$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspaceSharingsSharing$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspaceSharingsSharing$Outbound;
}

export function putApiWorkspaceServiceV1WorkspaceSharingsSharingToJSON(
  putApiWorkspaceServiceV1WorkspaceSharingsSharing:
    PutApiWorkspaceServiceV1WorkspaceSharingsSharing,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspaceSharingsSharing$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspaceSharingsSharing,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspaceSharingsSharingFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspaceSharingsSharing,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspaceSharingsSharing$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspaceSharingsSharing' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspaceSharingsRequestBody$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspaceSharingsRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    sharing: z.lazy(() =>
      PutApiWorkspaceServiceV1WorkspaceSharingsSharing$inboundSchema
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspaceSharingsRequestBody$Outbound = {
  sharing?:
    | PutApiWorkspaceServiceV1WorkspaceSharingsSharing$Outbound
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspaceSharingsRequestBody$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspaceSharingsRequestBody$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspaceSharingsRequestBody
  > = z.object({
    sharing: z.lazy(() =>
      PutApiWorkspaceServiceV1WorkspaceSharingsSharing$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspaceSharingsRequestBody$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspaceSharingsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspaceSharingsRequestBody$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspaceSharingsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspaceSharingsRequestBody$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspaceSharingsRequestBody$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspaceSharingsRequestBody$Outbound;
}

export function putApiWorkspaceServiceV1WorkspaceSharingsRequestBodyToJSON(
  putApiWorkspaceServiceV1WorkspaceSharingsRequestBody:
    PutApiWorkspaceServiceV1WorkspaceSharingsRequestBody,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspaceSharingsRequestBody$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspaceSharingsRequestBody,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspaceSharingsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspaceSharingsRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspaceSharingsRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspaceSharingsRequestBody' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspaceSharingsWorkspaceSharingsSharing$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspaceSharingsWorkspaceSharingsSharing,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspaceSharingsWorkspaceSharingsSharing$Outbound =
  {
    id?: string | undefined;
    sharedWithEmail?: string | undefined;
    permissionLevel?: string | undefined;
    expiresAt?: string | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
  };

/** @internal */
export const PutApiWorkspaceServiceV1WorkspaceSharingsWorkspaceSharingsSharing$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspaceSharingsWorkspaceSharingsSharing$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspaceSharingsWorkspaceSharingsSharing
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspaceSharingsWorkspaceSharingsSharing$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspaceSharingsWorkspaceSharingsSharing$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspaceSharingsWorkspaceSharingsSharing$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspaceSharingsWorkspaceSharingsSharing$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspaceSharingsWorkspaceSharingsSharing$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspaceSharingsWorkspaceSharingsSharing$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspaceSharingsWorkspaceSharingsSharing$Outbound;
}

export function putApiWorkspaceServiceV1WorkspaceSharingsWorkspaceSharingsSharingToJSON(
  putApiWorkspaceServiceV1WorkspaceSharingsWorkspaceSharingsSharing:
    PutApiWorkspaceServiceV1WorkspaceSharingsWorkspaceSharingsSharing,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspaceSharingsWorkspaceSharingsSharing$outboundSchema
      .parse(putApiWorkspaceServiceV1WorkspaceSharingsWorkspaceSharingsSharing),
  );
}

export function putApiWorkspaceServiceV1WorkspaceSharingsWorkspaceSharingsSharingFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspaceSharingsWorkspaceSharingsSharing,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspaceSharingsWorkspaceSharingsSharing$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspaceSharingsWorkspaceSharingsSharing' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspaceSharingsResponseBody$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspaceSharingsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    sharing: z.lazy(() =>
      PutApiWorkspaceServiceV1WorkspaceSharingsWorkspaceSharingsSharing$inboundSchema
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspaceSharingsResponseBody$Outbound = {
  sharing?:
    | PutApiWorkspaceServiceV1WorkspaceSharingsWorkspaceSharingsSharing$Outbound
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspaceSharingsResponseBody$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspaceSharingsResponseBody$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspaceSharingsResponseBody
  > = z.object({
    sharing: z.lazy(() =>
      PutApiWorkspaceServiceV1WorkspaceSharingsWorkspaceSharingsSharing$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspaceSharingsResponseBody$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspaceSharingsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspaceSharingsResponseBody$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspaceSharingsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspaceSharingsResponseBody$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspaceSharingsResponseBody$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspaceSharingsResponseBody$Outbound;
}

export function putApiWorkspaceServiceV1WorkspaceSharingsResponseBodyToJSON(
  putApiWorkspaceServiceV1WorkspaceSharingsResponseBody:
    PutApiWorkspaceServiceV1WorkspaceSharingsResponseBody,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspaceSharingsResponseBody$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspaceSharingsResponseBody,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspaceSharingsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspaceSharingsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspaceSharingsResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspaceSharingsResponseBody' from JSON`,
  );
}
