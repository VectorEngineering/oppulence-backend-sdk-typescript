/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiWorkspaceServiceV1WorkspacesIdRequest = {
  id: string;
};

export type GetApiWorkspaceServiceV1WorkspacesIdEmbeddings = {
  id?: string | undefined;
  embeddings?: Array<number> | undefined;
  modelVersion?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponse200Versions =
  {
    id?: string | undefined;
    fileId?: string | undefined;
    versionNumber?: number | undefined;
    s3Key?: string | undefined;
    size?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    createdAt?: Date | undefined;
  };

export type GetApiWorkspaceServiceV1WorkspacesIdComments = {
  id?: string | undefined;
  authorId?: string | undefined;
  content?: string | undefined;
  startPosition?: number | undefined;
  endPosition?: number | undefined;
  resolved?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdWorkspacesSharing = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdSnapshots = {
  id?: string | undefined;
  fileId?: string | undefined;
  snapshotHash?: string | undefined;
  content?: string | undefined;
  authorId?: string | undefined;
  reason?: string | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdFiles = {
  id?: string | undefined;
  name?: string | undefined;
  size?: string | undefined;
  s3Key?: string | undefined;
  s3BucketName?: string | undefined;
  isDeleted?: boolean | undefined;
  version?: number | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  embeddings?: GetApiWorkspaceServiceV1WorkspacesIdEmbeddings | undefined;
  versions?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponse200Versions>
    | undefined;
  comments?: Array<GetApiWorkspaceServiceV1WorkspacesIdComments> | undefined;
  sharing?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdWorkspacesSharing>
    | undefined;
  snapshots?: Array<GetApiWorkspaceServiceV1WorkspacesIdSnapshots> | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdFolders = {
  id?: string | undefined;
  name?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  isDeleted?: boolean | undefined;
  parentFolderId?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  files?: Array<GetApiWorkspaceServiceV1WorkspacesIdFiles> | undefined;
};

export const GetApiWorkspaceServiceV1WorkspacesIdTemplateType = {
  TemplateTypeUnspecified: "TEMPLATE_TYPE_UNSPECIFIED",
  TemplateTypeStandard: "TEMPLATE_TYPE_STANDARD",
  TemplateTypeSmart: "TEMPLATE_TYPE_SMART",
  TemplateTypeAdaptive: "TEMPLATE_TYPE_ADAPTIVE",
  TemplateTypeAiGenerated: "TEMPLATE_TYPE_AI_GENERATED",
} as const;
export type GetApiWorkspaceServiceV1WorkspacesIdTemplateType = ClosedEnum<
  typeof GetApiWorkspaceServiceV1WorkspacesIdTemplateType
>;

export type GetApiWorkspaceServiceV1WorkspacesIdVersions = {
  id?: string | undefined;
  templateId?: string | undefined;
  version?: string | undefined;
  baseContent?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  authorId?: string | undefined;
  changeDescription?: string | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdVariables = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  variableType?: string | undefined;
  defaultValue?: string | undefined;
  isRequired?: boolean | undefined;
  validationRules?: string | undefined;
  dataSource?: string | undefined;
  aiExtractionRules?: string | undefined;
  alternatives?: Array<string> | undefined;
  templateId?: string | undefined;
};

export const GetApiWorkspaceServiceV1WorkspacesIdStatus = {
  DocumentStatusUnspecified: "DOCUMENT_STATUS_UNSPECIFIED",
  DocumentStatusDraft: "DOCUMENT_STATUS_DRAFT",
  DocumentStatusInReview: "DOCUMENT_STATUS_IN_REVIEW",
  DocumentStatusApproved: "DOCUMENT_STATUS_APPROVED",
  DocumentStatusRejected: "DOCUMENT_STATUS_REJECTED",
  DocumentStatusExpired: "DOCUMENT_STATUS_EXPIRED",
  DocumentStatusArchived: "DOCUMENT_STATUS_ARCHIVED",
} as const;
export type GetApiWorkspaceServiceV1WorkspacesIdStatus = ClosedEnum<
  typeof GetApiWorkspaceServiceV1WorkspacesIdStatus
>;

export const GetApiWorkspaceServiceV1WorkspacesIdWorkspacesStatus = {
  SignatureStatusUnspecified: "SIGNATURE_STATUS_UNSPECIFIED",
  SignatureStatusPending: "SIGNATURE_STATUS_PENDING",
  SignatureStatusSigned: "SIGNATURE_STATUS_SIGNED",
  SignatureStatusRejected: "SIGNATURE_STATUS_REJECTED",
  SignatureStatusExpired: "SIGNATURE_STATUS_EXPIRED",
  SignatureStatusRevoked: "SIGNATURE_STATUS_REVOKED",
} as const;
export type GetApiWorkspaceServiceV1WorkspacesIdWorkspacesStatus = ClosedEnum<
  typeof GetApiWorkspaceServiceV1WorkspacesIdWorkspacesStatus
>;

export type GetApiWorkspaceServiceV1WorkspacesIdSignatureBlocks = {
  id?: string | undefined;
  requestId?: string | undefined;
  blockType?: string | undefined;
  pageNumber?: number | undefined;
  xPosition?: number | undefined;
  yPosition?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
  isRequired?: boolean | undefined;
  signatureData?: string | undefined;
  signedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdWorkflow = {
  id?: string | undefined;
  requestId?: string | undefined;
  signingOrder?: Array<string> | undefined;
  currentSigner?: string | undefined;
  workflowStatus?: string | undefined;
  parallelSigning?: boolean | undefined;
  requireAllSignatures?: boolean | undefined;
  deadline?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdSignatureRequests = {
  id?: string | undefined;
  status?: GetApiWorkspaceServiceV1WorkspacesIdWorkspacesStatus | undefined;
  signerEmail?: string | undefined;
  signerName?: string | undefined;
  role?: string | undefined;
  authenticationMethod?: string | undefined;
  expiresAt?: Date | undefined;
  requiresMfa?: boolean | undefined;
  signatureType?: string | undefined;
  reminderSchedule?: Array<string> | undefined;
  documentId?: string | undefined;
  signatureBlocks?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdSignatureBlocks>
    | undefined;
  workflow?: GetApiWorkspaceServiceV1WorkspacesIdWorkflow | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdAiAssistance = {
  id?: string | undefined;
  documentId?: string | undefined;
  interactionType?: string | undefined;
  userQuery?: string | undefined;
  aiResponse?: string | undefined;
  context?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdRounds = {
  id?: string | undefined;
  historyId?: string | undefined;
  roundNumber?: number | undefined;
  proposerId?: string | undefined;
  proposalContent?: string | undefined;
  responseContent?: string | undefined;
  status?: string | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdNegotiation = {
  id?: string | undefined;
  documentId?: string | undefined;
  rounds?: Array<GetApiWorkspaceServiceV1WorkspacesIdRounds> | undefined;
  currentStatus?: string | undefined;
  startedAt?: Date | undefined;
  lastUpdated?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdMerges = {
  id?: string | undefined;
  branchId?: string | undefined;
  sourceBranch?: string | undefined;
  targetBranch?: string | undefined;
  mergeStatus?: string | undefined;
  mergeStrategy?: string | undefined;
  conflicts?: Array<string> | undefined;
  mergerId?: string | undefined;
  createdAt?: Date | undefined;
  completedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdPolicy = {
  id?: string | undefined;
  branchId?: string | undefined;
  requiredApprovers?: Array<string> | undefined;
  minimumApprovals?: number | undefined;
  enforceLinearHistory?: boolean | undefined;
  allowForcePush?: boolean | undefined;
  protectedPaths?: Array<string> | undefined;
  mergeRules?: { [k: string]: string } | undefined;
  automatedChecks?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdMergeRequests = {
  id?: string | undefined;
  sourceBranchId?: string | undefined;
  targetBranchId?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  authorId?: string | undefined;
  reviewers?: Array<string> | undefined;
  status?: string | undefined;
  labels?: Array<string> | undefined;
  hasConflicts?: boolean | undefined;
  automatedCheckResults?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdBranches = {
  id?: string | undefined;
  name?: string | undefined;
  baseVersionHash?: string | undefined;
  currentHeadHash?: string | undefined;
  purpose?: string | undefined;
  status?: string | undefined;
  reviewers?: Array<string> | undefined;
  branchMetadata?: { [k: string]: string } | undefined;
  isLocked?: boolean | undefined;
  lastUpdated?: Date | undefined;
  merges?: Array<GetApiWorkspaceServiceV1WorkspacesIdMerges> | undefined;
  policy?: GetApiWorkspaceServiceV1WorkspacesIdPolicy | undefined;
  mergeRequests?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdMergeRequests>
    | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdChanges = {
  id?: string | undefined;
  versionId?: string | undefined;
  changeType?: string | undefined;
  contentBefore?: string | undefined;
  contentAfter?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdSummaries = {
  id?: string | undefined;
  versionId?: string | undefined;
  summaryType?: string | undefined;
  content?: string | undefined;
  targetAudience?: string | undefined;
  keyPoints?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponseVersions = {
  id?: string | undefined;
  versionHash?: string | undefined;
  parentHash?: string | undefined;
  commitMessage?: string | undefined;
  authorId?: string | undefined;
  branchName?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  tags?: Array<string> | undefined;
  isApproved?: boolean | undefined;
  approvalChain?: string | undefined;
  createdAt?: Date | undefined;
  branches?: Array<GetApiWorkspaceServiceV1WorkspacesIdBranches> | undefined;
  changes?: Array<GetApiWorkspaceServiceV1WorkspacesIdChanges> | undefined;
  summaries?: Array<GetApiWorkspaceServiceV1WorkspacesIdSummaries> | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdInstances = {
  id?: string | undefined;
  templateId?: string | undefined;
  status?: GetApiWorkspaceServiceV1WorkspacesIdStatus | undefined;
  fieldValues?: { [k: string]: string } | undefined;
  signers?: Array<string> | undefined;
  language?: string | undefined;
  isCompleted?: boolean | undefined;
  dueDate?: Date | undefined;
  generatedContent?: string | undefined;
  attachments?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  signatureRequests?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdSignatureRequests>
    | undefined;
  aiAssistance?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdAiAssistance>
    | undefined;
  negotiation?: GetApiWorkspaceServiceV1WorkspacesIdNegotiation | undefined;
  versions?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponseVersions>
    | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdExplanations = {
  id?: string | undefined;
  templateId?: string | undefined;
  sectionIdentifier?: string | undefined;
  explanationText?: string | undefined;
  complexityLevel?: string | undefined;
  relatedTerms?: Array<string> | undefined;
  legalReferences?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdRiskAssessments = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  riskType?: string | undefined;
  riskScore?: number | undefined;
  assessmentDetails?: string | undefined;
  mitigationSuggestions?: Array<string> | undefined;
  assessorId?: string | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdComplianceChecks = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  complianceStandard?: string | undefined;
  checkResult?: string | undefined;
  violations?: Array<string> | undefined;
  remediationSteps?: string | undefined;
  checkDate?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdIntelligence = {
  id?: string | undefined;
  contractType?: string | undefined;
  riskScores?: { [k: string]: number } | undefined;
  detectedClauses?: { [k: string]: string } | undefined;
  keyObligations?: Array<string> | undefined;
  complianceScores?: { [k: string]: number } | undefined;
  jurisdiction?: string | undefined;
  governingLaws?: Array<string> | undefined;
  semanticAnalysis?: { [k: string]: string } | undefined;
  analysisDate?: Date | undefined;
  riskAssessments?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdRiskAssessments>
    | undefined;
  complianceChecks?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdComplianceChecks>
    | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdTemplates = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  industryType?: string | undefined;
  documentType?: string | undefined;
  baseContent?: string | undefined;
  isAdaptive?: boolean | undefined;
  metadata?: { [k: string]: string } | undefined;
  supportedLanguages?: Array<string> | undefined;
  requiredDataFields?: Array<string> | undefined;
  version?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  templateType?: GetApiWorkspaceServiceV1WorkspacesIdTemplateType | undefined;
  content?: string | undefined;
  detectedVariables?: Array<string> | undefined;
  variableMappings?: { [k: string]: string } | undefined;
  isContextAware?: boolean | undefined;
  supportedContexts?: Array<string> | undefined;
  formattingRules?: { [k: string]: string } | undefined;
  conditionalSections?: Array<string> | undefined;
  versions?: Array<GetApiWorkspaceServiceV1WorkspacesIdVersions> | undefined;
  variables?: Array<GetApiWorkspaceServiceV1WorkspacesIdVariables> | undefined;
  instances?: Array<GetApiWorkspaceServiceV1WorkspacesIdInstances> | undefined;
  explanations?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdExplanations>
    | undefined;
  intelligence?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdIntelligence>
    | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdSharing = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdActivities = {
  id?: string | undefined;
  activityType?: string | undefined;
  userId?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdCompliance = {
  id?: string | undefined;
  complianceType?: string | undefined;
  status?: string | undefined;
  certificationId?: string | undefined;
  validUntil?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export const GetApiWorkspaceServiceV1WorkspacesIdCategory = {
  AppCategoryUnspecified: "APP_CATEGORY_UNSPECIFIED",
  AppCategoryContractAutomation: "APP_CATEGORY_CONTRACT_AUTOMATION",
  AppCategoryContractAnalysis: "APP_CATEGORY_CONTRACT_ANALYSIS",
  AppCategoryIntegration: "APP_CATEGORY_INTEGRATION",
  AppCategoryAiPowered: "APP_CATEGORY_AI_POWERED",
  AppCategoryWorkflow: "APP_CATEGORY_WORKFLOW",
  AppCategoryCompliance: "APP_CATEGORY_COMPLIANCE",
} as const;
export type GetApiWorkspaceServiceV1WorkspacesIdCategory = ClosedEnum<
  typeof GetApiWorkspaceServiceV1WorkspacesIdCategory
>;

export const GetApiWorkspaceServiceV1WorkspacesIdPricingModel = {
  PricingModelUnspecified: "PRICING_MODEL_UNSPECIFIED",
  PricingModelFree: "PRICING_MODEL_FREE",
  PricingModelSubscription: "PRICING_MODEL_SUBSCRIPTION",
  PricingModelUsageBased: "PRICING_MODEL_USAGE_BASED",
  PricingModelEnterprise: "PRICING_MODEL_ENTERPRISE",
} as const;
export type GetApiWorkspaceServiceV1WorkspacesIdPricingModel = ClosedEnum<
  typeof GetApiWorkspaceServiceV1WorkspacesIdPricingModel
>;

export type GetApiWorkspaceServiceV1WorkspacesIdWorkspacesVersions = {
  id?: string | undefined;
  appId?: string | undefined;
  versionNumber?: string | undefined;
  changelog?: string | undefined;
  requirements?: { [k: string]: string } | undefined;
  isPublic?: boolean | undefined;
  releaseDate?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdInstallations = {
  id?: string | undefined;
  appId?: string | undefined;
  workspaceId?: string | undefined;
  versionInstalled?: string | undefined;
  configuration?: { [k: string]: string } | undefined;
  installationStatus?: string | undefined;
  installedAt?: Date | undefined;
  lastUsed?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdAnalytics = {
  id?: string | undefined;
  appId?: string | undefined;
  metricName?: string | undefined;
  metricValue?: number | undefined;
  dimensions?: { [k: string]: string } | undefined;
  recordedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdReviews = {
  id?: string | undefined;
  appId?: string | undefined;
  reviewerId?: string | undefined;
  rating?: number | undefined;
  reviewText?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdInfo = {
  id?: string | undefined;
  appId?: string | undefined;
  supportedLanguages?: Array<string> | undefined;
  sdkFeatures?: Array<string> | undefined;
  testCoverage?: { [k: string]: number } | undefined;
  securityScans?: Array<string> | undefined;
  performanceMetrics?: { [k: string]: string } | undefined;
  developmentStatus?: string | undefined;
  knownIssues?: Array<string> | undefined;
  roadmapUrl?: string | undefined;
  lastSecurityAudit?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdWebhooks = {
  id?: string | undefined;
  appId?: string | undefined;
  url?: string | undefined;
  subscribedEvents?: Array<string> | undefined;
  secretKey?: string | undefined;
  retryCount?: number | undefined;
  timeoutSeconds?: number | undefined;
  isActive?: boolean | undefined;
  headers?: { [k: string]: string } | undefined;
  lastTriggered?: Date | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdPermissions = {
  id?: string | undefined;
  appId?: string | undefined;
  scope?: string | undefined;
  description?: string | undefined;
  isRequired?: boolean | undefined;
  accessLevels?: Array<string> | undefined;
  constraints?: { [k: string]: string } | undefined;
  requiresApproval?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdInstalledApps = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  developerId?: string | undefined;
  category?: GetApiWorkspaceServiceV1WorkspacesIdCategory | undefined;
  supportedContractTypes?: Array<string> | undefined;
  features?: Array<string> | undefined;
  pricingModel?: GetApiWorkspaceServiceV1WorkspacesIdPricingModel | undefined;
  pricingTiers?: { [k: string]: number } | undefined;
  supportedIntegrations?: Array<string> | undefined;
  isVerified?: boolean | undefined;
  rating?: number | undefined;
  installationCount?: number | undefined;
  requiredPermissions?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  documentationUrl?: string | undefined;
  supportEmail?: string | undefined;
  screenshots?: Array<string> | undefined;
  privacyPolicyUrl?: string | undefined;
  termsUrl?: string | undefined;
  publishedAt?: Date | undefined;
  lastUpdated?: Date | undefined;
  versions?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdWorkspacesVersions>
    | undefined;
  installations?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdInstallations>
    | undefined;
  analytics?: Array<GetApiWorkspaceServiceV1WorkspacesIdAnalytics> | undefined;
  reviews?: Array<GetApiWorkspaceServiceV1WorkspacesIdReviews> | undefined;
  info?: GetApiWorkspaceServiceV1WorkspacesIdInfo | undefined;
  webhooks?: Array<GetApiWorkspaceServiceV1WorkspacesIdWebhooks> | undefined;
  permissions?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdPermissions>
    | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdWorkspace = {
  id?: string | undefined;
  name?: string | undefined;
  uniqueIdentifier?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  storageQuota?: string | undefined;
  usedStorage?: string | undefined;
  allowPublicSharing?: boolean | undefined;
  requireApproval?: boolean | undefined;
  gdprCompliant?: boolean | undefined;
  hipaaCompliant?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  folders?: Array<GetApiWorkspaceServiceV1WorkspacesIdFolders> | undefined;
  templates?: Array<GetApiWorkspaceServiceV1WorkspacesIdTemplates> | undefined;
  sharing?: Array<GetApiWorkspaceServiceV1WorkspacesIdSharing> | undefined;
  activities?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdActivities>
    | undefined;
  compliance?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdCompliance>
    | undefined;
  installedApps?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdInstalledApps>
    | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdData = {
  workspace?: GetApiWorkspaceServiceV1WorkspacesIdWorkspace | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesIdResponseBody = {
  data: GetApiWorkspaceServiceV1WorkspacesIdData;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdRequest$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdRequest$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdRequest$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdRequest
  > = z.object({
    id: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdRequest$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdRequest$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdRequest$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdRequest$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesIdRequest$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdRequestToJSON(
  getApiWorkspaceServiceV1WorkspacesIdRequest:
    GetApiWorkspaceServiceV1WorkspacesIdRequest,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdRequest$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdRequest,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdRequest' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdEmbeddings$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdEmbeddings,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    embeddings: z.array(z.number()).optional(),
    modelVersion: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdEmbeddings$Outbound = {
  id?: string | undefined;
  embeddings?: Array<number> | undefined;
  modelVersion?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdEmbeddings$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdEmbeddings$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdEmbeddings
  > = z.object({
    id: z.string().optional(),
    embeddings: z.array(z.number()).optional(),
    modelVersion: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdEmbeddings$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdEmbeddings$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdEmbeddings$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdEmbeddings$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdEmbeddings$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdEmbeddings$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesIdEmbeddings$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdEmbeddingsToJSON(
  getApiWorkspaceServiceV1WorkspacesIdEmbeddings:
    GetApiWorkspaceServiceV1WorkspacesIdEmbeddings,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdEmbeddings$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdEmbeddings,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdEmbeddingsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdEmbeddings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdEmbeddings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdEmbeddings' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponse200Versions$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponse200Versions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    versionNumber: z.number().int().optional(),
    s3Key: z.string().optional(),
    size: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponse200Versions$Outbound =
  {
    id?: string | undefined;
    fileId?: string | undefined;
    versionNumber?: number | undefined;
    s3Key?: string | undefined;
    size?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    createdAt?: string | undefined;
  };

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponse200Versions$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponse200Versions$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponse200Versions
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    versionNumber: z.number().int().optional(),
    s3Key: z.string().optional(),
    size: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponse200Versions$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponse200Versions$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponse200Versions$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponse200Versions$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponse200Versions$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponse200Versions$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponse200Versions$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdWorkspacesResponse200VersionsToJSON(
  getApiWorkspaceServiceV1WorkspacesIdWorkspacesResponse200Versions:
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponse200Versions,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponse200Versions$outboundSchema
      .parse(getApiWorkspaceServiceV1WorkspacesIdWorkspacesResponse200Versions),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdWorkspacesResponse200VersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponse200Versions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponse200Versions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponse200Versions' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdComments$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdComments,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    authorId: z.string().optional(),
    content: z.string().optional(),
    startPosition: z.number().int().optional(),
    endPosition: z.number().int().optional(),
    resolved: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdComments$Outbound = {
  id?: string | undefined;
  authorId?: string | undefined;
  content?: string | undefined;
  startPosition?: number | undefined;
  endPosition?: number | undefined;
  resolved?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdComments$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdComments$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdComments
  > = z.object({
    id: z.string().optional(),
    authorId: z.string().optional(),
    content: z.string().optional(),
    startPosition: z.number().int().optional(),
    endPosition: z.number().int().optional(),
    resolved: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdComments$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdComments$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdComments$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdComments$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdComments$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdComments$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesIdComments$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdCommentsToJSON(
  getApiWorkspaceServiceV1WorkspacesIdComments:
    GetApiWorkspaceServiceV1WorkspacesIdComments,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdComments$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdComments,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdCommentsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdComments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdComments$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdComments' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdWorkspacesSharing$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesSharing,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdWorkspacesSharing$Outbound = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdWorkspacesSharing$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesSharing$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesSharing
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdWorkspacesSharing$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdWorkspacesSharing$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesSharing$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdWorkspacesSharing$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesSharing$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdWorkspacesSharing$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesSharing$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdWorkspacesSharingToJSON(
  getApiWorkspaceServiceV1WorkspacesIdWorkspacesSharing:
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesSharing,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesSharing$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdWorkspacesSharing,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdWorkspacesSharingFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdWorkspacesSharing,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdWorkspacesSharing$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdWorkspacesSharing' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdSnapshots$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdSnapshots,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    snapshotHash: z.string().optional(),
    content: z.string().optional(),
    authorId: z.string().optional(),
    reason: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdSnapshots$Outbound = {
  id?: string | undefined;
  fileId?: string | undefined;
  snapshotHash?: string | undefined;
  content?: string | undefined;
  authorId?: string | undefined;
  reason?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdSnapshots$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdSnapshots$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdSnapshots
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    snapshotHash: z.string().optional(),
    content: z.string().optional(),
    authorId: z.string().optional(),
    reason: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdSnapshots$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdSnapshots$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdSnapshots$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdSnapshots$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdSnapshots$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdSnapshots$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesIdSnapshots$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdSnapshotsToJSON(
  getApiWorkspaceServiceV1WorkspacesIdSnapshots:
    GetApiWorkspaceServiceV1WorkspacesIdSnapshots,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdSnapshots$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdSnapshots,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdSnapshotsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdSnapshots,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdSnapshots$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdSnapshots' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdFiles$inboundSchema: z.ZodType<
  GetApiWorkspaceServiceV1WorkspacesIdFiles,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  size: z.string().optional(),
  s3Key: z.string().optional(),
  s3BucketName: z.string().optional(),
  isDeleted: z.boolean().optional(),
  version: z.number().int().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  embeddings: z.lazy(() =>
    GetApiWorkspaceServiceV1WorkspacesIdEmbeddings$inboundSchema
  ).optional(),
  versions: z.array(
    z.lazy(() =>
      GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponse200Versions$inboundSchema
    ),
  ).optional(),
  comments: z.array(
    z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdComments$inboundSchema),
  ).optional(),
  sharing: z.array(
    z.lazy(() =>
      GetApiWorkspaceServiceV1WorkspacesIdWorkspacesSharing$inboundSchema
    ),
  ).optional(),
  snapshots: z.array(
    z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdSnapshots$inboundSchema),
  ).optional(),
});

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdFiles$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  size?: string | undefined;
  s3Key?: string | undefined;
  s3BucketName?: string | undefined;
  isDeleted?: boolean | undefined;
  version?: number | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  embeddings?:
    | GetApiWorkspaceServiceV1WorkspacesIdEmbeddings$Outbound
    | undefined;
  versions?:
    | Array<
      GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponse200Versions$Outbound
    >
    | undefined;
  comments?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdComments$Outbound>
    | undefined;
  sharing?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdWorkspacesSharing$Outbound>
    | undefined;
  snapshots?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdSnapshots$Outbound>
    | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdFiles$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdFiles$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdFiles
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    size: z.string().optional(),
    s3Key: z.string().optional(),
    s3BucketName: z.string().optional(),
    isDeleted: z.boolean().optional(),
    version: z.number().int().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    embeddings: z.lazy(() =>
      GetApiWorkspaceServiceV1WorkspacesIdEmbeddings$outboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponse200Versions$outboundSchema
      ),
    ).optional(),
    comments: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdComments$outboundSchema),
    ).optional(),
    sharing: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdWorkspacesSharing$outboundSchema
      ),
    ).optional(),
    snapshots: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdSnapshots$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdFiles$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdFiles$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdFiles$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdFiles$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdFiles$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdFiles$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesIdFiles$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdFilesToJSON(
  getApiWorkspaceServiceV1WorkspacesIdFiles:
    GetApiWorkspaceServiceV1WorkspacesIdFiles,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdFiles$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdFiles,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdFilesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdFiles,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdFiles$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdFiles' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdFolders$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdFolders,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    isDeleted: z.boolean().optional(),
    parentFolderId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    files: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdFiles$inboundSchema),
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdFolders$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  isDeleted?: boolean | undefined;
  parentFolderId?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  files?: Array<GetApiWorkspaceServiceV1WorkspacesIdFiles$Outbound> | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdFolders$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdFolders$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdFolders
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    isDeleted: z.boolean().optional(),
    parentFolderId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    files: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdFiles$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdFolders$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdFolders$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdFolders$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdFolders$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdFolders$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdFolders$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesIdFolders$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdFoldersToJSON(
  getApiWorkspaceServiceV1WorkspacesIdFolders:
    GetApiWorkspaceServiceV1WorkspacesIdFolders,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdFolders$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdFolders,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdFoldersFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdFolders,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdFolders$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdFolders' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdTemplateType$inboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1WorkspacesIdTemplateType> = z
    .nativeEnum(GetApiWorkspaceServiceV1WorkspacesIdTemplateType);

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdTemplateType$outboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1WorkspacesIdTemplateType> =
    GetApiWorkspaceServiceV1WorkspacesIdTemplateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdTemplateType$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdTemplateType$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdTemplateType$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdTemplateType$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdTemplateType$outboundSchema;
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdVersions$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    version: z.string().optional(),
    baseContent: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    authorId: z.string().optional(),
    changeDescription: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdVersions$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  version?: string | undefined;
  baseContent?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  authorId?: string | undefined;
  changeDescription?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdVersions$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdVersions$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdVersions
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    version: z.string().optional(),
    baseContent: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    authorId: z.string().optional(),
    changeDescription: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdVersions$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdVersions$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdVersions$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdVersions$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdVersions$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdVersions$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesIdVersions$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdVersionsToJSON(
  getApiWorkspaceServiceV1WorkspacesIdVersions:
    GetApiWorkspaceServiceV1WorkspacesIdVersions,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdVersions$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdVersions,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdVersions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdVersions' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdVariables$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdVariables,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    variableType: z.string().optional(),
    defaultValue: z.string().optional(),
    isRequired: z.boolean().optional(),
    validationRules: z.string().optional(),
    dataSource: z.string().optional(),
    aiExtractionRules: z.string().optional(),
    alternatives: z.array(z.string()).optional(),
    templateId: z.string().optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdVariables$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  variableType?: string | undefined;
  defaultValue?: string | undefined;
  isRequired?: boolean | undefined;
  validationRules?: string | undefined;
  dataSource?: string | undefined;
  aiExtractionRules?: string | undefined;
  alternatives?: Array<string> | undefined;
  templateId?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdVariables$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdVariables$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdVariables
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    variableType: z.string().optional(),
    defaultValue: z.string().optional(),
    isRequired: z.boolean().optional(),
    validationRules: z.string().optional(),
    dataSource: z.string().optional(),
    aiExtractionRules: z.string().optional(),
    alternatives: z.array(z.string()).optional(),
    templateId: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdVariables$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdVariables$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdVariables$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdVariables$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdVariables$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdVariables$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesIdVariables$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdVariablesToJSON(
  getApiWorkspaceServiceV1WorkspacesIdVariables:
    GetApiWorkspaceServiceV1WorkspacesIdVariables,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdVariables$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdVariables,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdVariablesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdVariables,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdVariables$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdVariables' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdStatus$inboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1WorkspacesIdStatus> = z
    .nativeEnum(GetApiWorkspaceServiceV1WorkspacesIdStatus);

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdStatus$outboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1WorkspacesIdStatus> =
    GetApiWorkspaceServiceV1WorkspacesIdStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdStatus$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdStatus$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdStatus$outboundSchema;
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdWorkspacesStatus$inboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1WorkspacesIdWorkspacesStatus> =
    z.nativeEnum(GetApiWorkspaceServiceV1WorkspacesIdWorkspacesStatus);

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdWorkspacesStatus$outboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1WorkspacesIdWorkspacesStatus> =
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdWorkspacesStatus$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdWorkspacesStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesStatus$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdWorkspacesStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesStatus$outboundSchema;
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdSignatureBlocks$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdSignatureBlocks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    blockType: z.string().optional(),
    pageNumber: z.number().int().optional(),
    xPosition: z.number().optional(),
    yPosition: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    isRequired: z.boolean().optional(),
    signatureData: z.string().optional(),
    signedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdSignatureBlocks$Outbound = {
  id?: string | undefined;
  requestId?: string | undefined;
  blockType?: string | undefined;
  pageNumber?: number | undefined;
  xPosition?: number | undefined;
  yPosition?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
  isRequired?: boolean | undefined;
  signatureData?: string | undefined;
  signedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdSignatureBlocks$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdSignatureBlocks$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdSignatureBlocks
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    blockType: z.string().optional(),
    pageNumber: z.number().int().optional(),
    xPosition: z.number().optional(),
    yPosition: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    isRequired: z.boolean().optional(),
    signatureData: z.string().optional(),
    signedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdSignatureBlocks$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdSignatureBlocks$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdSignatureBlocks$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdSignatureBlocks$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdSignatureBlocks$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdSignatureBlocks$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesIdSignatureBlocks$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdSignatureBlocksToJSON(
  getApiWorkspaceServiceV1WorkspacesIdSignatureBlocks:
    GetApiWorkspaceServiceV1WorkspacesIdSignatureBlocks,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdSignatureBlocks$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdSignatureBlocks,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdSignatureBlocksFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdSignatureBlocks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdSignatureBlocks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdSignatureBlocks' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdWorkflow$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdWorkflow,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    signingOrder: z.array(z.string()).optional(),
    currentSigner: z.string().optional(),
    workflowStatus: z.string().optional(),
    parallelSigning: z.boolean().optional(),
    requireAllSignatures: z.boolean().optional(),
    deadline: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdWorkflow$Outbound = {
  id?: string | undefined;
  requestId?: string | undefined;
  signingOrder?: Array<string> | undefined;
  currentSigner?: string | undefined;
  workflowStatus?: string | undefined;
  parallelSigning?: boolean | undefined;
  requireAllSignatures?: boolean | undefined;
  deadline?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdWorkflow$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdWorkflow$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdWorkflow
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    signingOrder: z.array(z.string()).optional(),
    currentSigner: z.string().optional(),
    workflowStatus: z.string().optional(),
    parallelSigning: z.boolean().optional(),
    requireAllSignatures: z.boolean().optional(),
    deadline: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdWorkflow$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdWorkflow$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdWorkflow$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdWorkflow$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdWorkflow$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdWorkflow$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesIdWorkflow$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdWorkflowToJSON(
  getApiWorkspaceServiceV1WorkspacesIdWorkflow:
    GetApiWorkspaceServiceV1WorkspacesIdWorkflow,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdWorkflow$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdWorkflow,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdWorkflowFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdWorkflow,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdWorkflow$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdWorkflow' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdSignatureRequests$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdSignatureRequests,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    status: GetApiWorkspaceServiceV1WorkspacesIdWorkspacesStatus$inboundSchema
      .default("SIGNATURE_STATUS_UNSPECIFIED"),
    signerEmail: z.string().optional(),
    signerName: z.string().optional(),
    role: z.string().optional(),
    authenticationMethod: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    requiresMfa: z.boolean().optional(),
    signatureType: z.string().optional(),
    reminderSchedule: z.array(z.string()).optional(),
    documentId: z.string().optional(),
    signatureBlocks: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdSignatureBlocks$inboundSchema
      ),
    ).optional(),
    workflow: z.lazy(() =>
      GetApiWorkspaceServiceV1WorkspacesIdWorkflow$inboundSchema
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdSignatureRequests$Outbound = {
  id?: string | undefined;
  status: string;
  signerEmail?: string | undefined;
  signerName?: string | undefined;
  role?: string | undefined;
  authenticationMethod?: string | undefined;
  expiresAt?: string | undefined;
  requiresMfa?: boolean | undefined;
  signatureType?: string | undefined;
  reminderSchedule?: Array<string> | undefined;
  documentId?: string | undefined;
  signatureBlocks?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdSignatureBlocks$Outbound>
    | undefined;
  workflow?: GetApiWorkspaceServiceV1WorkspacesIdWorkflow$Outbound | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdSignatureRequests$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdSignatureRequests$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdSignatureRequests
  > = z.object({
    id: z.string().optional(),
    status: GetApiWorkspaceServiceV1WorkspacesIdWorkspacesStatus$outboundSchema
      .default("SIGNATURE_STATUS_UNSPECIFIED"),
    signerEmail: z.string().optional(),
    signerName: z.string().optional(),
    role: z.string().optional(),
    authenticationMethod: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    requiresMfa: z.boolean().optional(),
    signatureType: z.string().optional(),
    reminderSchedule: z.array(z.string()).optional(),
    documentId: z.string().optional(),
    signatureBlocks: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdSignatureBlocks$outboundSchema
      ),
    ).optional(),
    workflow: z.lazy(() =>
      GetApiWorkspaceServiceV1WorkspacesIdWorkflow$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdSignatureRequests$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdSignatureRequests$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdSignatureRequests$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdSignatureRequests$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdSignatureRequests$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdSignatureRequests$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesIdSignatureRequests$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdSignatureRequestsToJSON(
  getApiWorkspaceServiceV1WorkspacesIdSignatureRequests:
    GetApiWorkspaceServiceV1WorkspacesIdSignatureRequests,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdSignatureRequests$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdSignatureRequests,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdSignatureRequestsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdSignatureRequests,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdSignatureRequests$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdSignatureRequests' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdAiAssistance$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdAiAssistance,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    interactionType: z.string().optional(),
    userQuery: z.string().optional(),
    aiResponse: z.string().optional(),
    context: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdAiAssistance$Outbound = {
  id?: string | undefined;
  documentId?: string | undefined;
  interactionType?: string | undefined;
  userQuery?: string | undefined;
  aiResponse?: string | undefined;
  context?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdAiAssistance$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdAiAssistance$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdAiAssistance
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    interactionType: z.string().optional(),
    userQuery: z.string().optional(),
    aiResponse: z.string().optional(),
    context: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdAiAssistance$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdAiAssistance$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdAiAssistance$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdAiAssistance$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdAiAssistance$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdAiAssistance$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesIdAiAssistance$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdAiAssistanceToJSON(
  getApiWorkspaceServiceV1WorkspacesIdAiAssistance:
    GetApiWorkspaceServiceV1WorkspacesIdAiAssistance,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdAiAssistance$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdAiAssistance,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdAiAssistanceFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdAiAssistance,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdAiAssistance$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdAiAssistance' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdRounds$inboundSchema:
  z.ZodType<GetApiWorkspaceServiceV1WorkspacesIdRounds, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      historyId: z.string().optional(),
      roundNumber: z.number().int().optional(),
      proposerId: z.string().optional(),
      proposalContent: z.string().optional(),
      responseContent: z.string().optional(),
      status: z.string().optional(),
      createdAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
    });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdRounds$Outbound = {
  id?: string | undefined;
  historyId?: string | undefined;
  roundNumber?: number | undefined;
  proposerId?: string | undefined;
  proposalContent?: string | undefined;
  responseContent?: string | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdRounds$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdRounds$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdRounds
  > = z.object({
    id: z.string().optional(),
    historyId: z.string().optional(),
    roundNumber: z.number().int().optional(),
    proposerId: z.string().optional(),
    proposalContent: z.string().optional(),
    responseContent: z.string().optional(),
    status: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdRounds$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdRounds$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdRounds$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdRounds$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdRounds$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdRounds$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesIdRounds$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdRoundsToJSON(
  getApiWorkspaceServiceV1WorkspacesIdRounds:
    GetApiWorkspaceServiceV1WorkspacesIdRounds,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdRounds$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdRounds,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdRoundsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdRounds,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdRounds$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdRounds' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdNegotiation$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdNegotiation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    rounds: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdRounds$inboundSchema),
    ).optional(),
    currentStatus: z.string().optional(),
    startedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdNegotiation$Outbound = {
  id?: string | undefined;
  documentId?: string | undefined;
  rounds?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdRounds$Outbound>
    | undefined;
  currentStatus?: string | undefined;
  startedAt?: string | undefined;
  lastUpdated?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdNegotiation$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdNegotiation$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdNegotiation
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    rounds: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdRounds$outboundSchema),
    ).optional(),
    currentStatus: z.string().optional(),
    startedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdNegotiation$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdNegotiation$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdNegotiation$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdNegotiation$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdNegotiation$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdNegotiation$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesIdNegotiation$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdNegotiationToJSON(
  getApiWorkspaceServiceV1WorkspacesIdNegotiation:
    GetApiWorkspaceServiceV1WorkspacesIdNegotiation,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdNegotiation$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdNegotiation,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdNegotiationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdNegotiation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdNegotiation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdNegotiation' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdMerges$inboundSchema:
  z.ZodType<GetApiWorkspaceServiceV1WorkspacesIdMerges, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      branchId: z.string().optional(),
      sourceBranch: z.string().optional(),
      targetBranch: z.string().optional(),
      mergeStatus: z.string().optional(),
      mergeStrategy: z.string().optional(),
      conflicts: z.array(z.string()).optional(),
      mergerId: z.string().optional(),
      createdAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      completedAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
    });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdMerges$Outbound = {
  id?: string | undefined;
  branchId?: string | undefined;
  sourceBranch?: string | undefined;
  targetBranch?: string | undefined;
  mergeStatus?: string | undefined;
  mergeStrategy?: string | undefined;
  conflicts?: Array<string> | undefined;
  mergerId?: string | undefined;
  createdAt?: string | undefined;
  completedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdMerges$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdMerges$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdMerges
  > = z.object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    sourceBranch: z.string().optional(),
    targetBranch: z.string().optional(),
    mergeStatus: z.string().optional(),
    mergeStrategy: z.string().optional(),
    conflicts: z.array(z.string()).optional(),
    mergerId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    completedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdMerges$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdMerges$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdMerges$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdMerges$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdMerges$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdMerges$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesIdMerges$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdMergesToJSON(
  getApiWorkspaceServiceV1WorkspacesIdMerges:
    GetApiWorkspaceServiceV1WorkspacesIdMerges,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdMerges$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdMerges,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdMergesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdMerges,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdMerges$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdMerges' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdPolicy$inboundSchema:
  z.ZodType<GetApiWorkspaceServiceV1WorkspacesIdPolicy, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      branchId: z.string().optional(),
      requiredApprovers: z.array(z.string()).optional(),
      minimumApprovals: z.number().int().optional(),
      enforceLinearHistory: z.boolean().optional(),
      allowForcePush: z.boolean().optional(),
      protectedPaths: z.array(z.string()).optional(),
      mergeRules: z.record(z.string()).optional(),
      automatedChecks: z.array(z.string()).optional(),
      createdAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      updatedAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
    });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdPolicy$Outbound = {
  id?: string | undefined;
  branchId?: string | undefined;
  requiredApprovers?: Array<string> | undefined;
  minimumApprovals?: number | undefined;
  enforceLinearHistory?: boolean | undefined;
  allowForcePush?: boolean | undefined;
  protectedPaths?: Array<string> | undefined;
  mergeRules?: { [k: string]: string } | undefined;
  automatedChecks?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdPolicy$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdPolicy$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdPolicy
  > = z.object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    requiredApprovers: z.array(z.string()).optional(),
    minimumApprovals: z.number().int().optional(),
    enforceLinearHistory: z.boolean().optional(),
    allowForcePush: z.boolean().optional(),
    protectedPaths: z.array(z.string()).optional(),
    mergeRules: z.record(z.string()).optional(),
    automatedChecks: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdPolicy$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdPolicy$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdPolicy$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdPolicy$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdPolicy$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdPolicy$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesIdPolicy$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdPolicyToJSON(
  getApiWorkspaceServiceV1WorkspacesIdPolicy:
    GetApiWorkspaceServiceV1WorkspacesIdPolicy,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdPolicy$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdPolicy,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdPolicyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdPolicy,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdPolicy$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdPolicy' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdMergeRequests$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdMergeRequests,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sourceBranchId: z.string().optional(),
    targetBranchId: z.string().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    authorId: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    status: z.string().optional(),
    labels: z.array(z.string()).optional(),
    hasConflicts: z.boolean().optional(),
    automatedCheckResults: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdMergeRequests$Outbound = {
  id?: string | undefined;
  sourceBranchId?: string | undefined;
  targetBranchId?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  authorId?: string | undefined;
  reviewers?: Array<string> | undefined;
  status?: string | undefined;
  labels?: Array<string> | undefined;
  hasConflicts?: boolean | undefined;
  automatedCheckResults?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdMergeRequests$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdMergeRequests$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdMergeRequests
  > = z.object({
    id: z.string().optional(),
    sourceBranchId: z.string().optional(),
    targetBranchId: z.string().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    authorId: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    status: z.string().optional(),
    labels: z.array(z.string()).optional(),
    hasConflicts: z.boolean().optional(),
    automatedCheckResults: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdMergeRequests$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdMergeRequests$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdMergeRequests$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdMergeRequests$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdMergeRequests$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdMergeRequests$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesIdMergeRequests$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdMergeRequestsToJSON(
  getApiWorkspaceServiceV1WorkspacesIdMergeRequests:
    GetApiWorkspaceServiceV1WorkspacesIdMergeRequests,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdMergeRequests$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdMergeRequests,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdMergeRequestsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdMergeRequests,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdMergeRequests$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdMergeRequests' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdBranches$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdBranches,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    baseVersionHash: z.string().optional(),
    currentHeadHash: z.string().optional(),
    purpose: z.string().optional(),
    status: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    branchMetadata: z.record(z.string()).optional(),
    isLocked: z.boolean().optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    merges: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdMerges$inboundSchema),
    ).optional(),
    policy: z.lazy(() =>
      GetApiWorkspaceServiceV1WorkspacesIdPolicy$inboundSchema
    ).optional(),
    mergeRequests: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdMergeRequests$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdBranches$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  baseVersionHash?: string | undefined;
  currentHeadHash?: string | undefined;
  purpose?: string | undefined;
  status?: string | undefined;
  reviewers?: Array<string> | undefined;
  branchMetadata?: { [k: string]: string } | undefined;
  isLocked?: boolean | undefined;
  lastUpdated?: string | undefined;
  merges?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdMerges$Outbound>
    | undefined;
  policy?: GetApiWorkspaceServiceV1WorkspacesIdPolicy$Outbound | undefined;
  mergeRequests?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdMergeRequests$Outbound>
    | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdBranches$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdBranches$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdBranches
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    baseVersionHash: z.string().optional(),
    currentHeadHash: z.string().optional(),
    purpose: z.string().optional(),
    status: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    branchMetadata: z.record(z.string()).optional(),
    isLocked: z.boolean().optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
    merges: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdMerges$outboundSchema),
    ).optional(),
    policy: z.lazy(() =>
      GetApiWorkspaceServiceV1WorkspacesIdPolicy$outboundSchema
    ).optional(),
    mergeRequests: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdMergeRequests$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdBranches$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdBranches$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdBranches$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdBranches$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdBranches$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdBranches$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesIdBranches$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdBranchesToJSON(
  getApiWorkspaceServiceV1WorkspacesIdBranches:
    GetApiWorkspaceServiceV1WorkspacesIdBranches,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdBranches$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdBranches,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdBranchesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdBranches,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdBranches$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdBranches' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdChanges$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdChanges,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    changeType: z.string().optional(),
    contentBefore: z.string().optional(),
    contentAfter: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdChanges$Outbound = {
  id?: string | undefined;
  versionId?: string | undefined;
  changeType?: string | undefined;
  contentBefore?: string | undefined;
  contentAfter?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdChanges$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdChanges$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdChanges
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    changeType: z.string().optional(),
    contentBefore: z.string().optional(),
    contentAfter: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdChanges$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdChanges$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdChanges$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdChanges$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdChanges$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdChanges$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesIdChanges$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdChangesToJSON(
  getApiWorkspaceServiceV1WorkspacesIdChanges:
    GetApiWorkspaceServiceV1WorkspacesIdChanges,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdChanges$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdChanges,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdChangesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdChanges,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdChanges$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdChanges' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdSummaries$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdSummaries,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    summaryType: z.string().optional(),
    content: z.string().optional(),
    targetAudience: z.string().optional(),
    keyPoints: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdSummaries$Outbound = {
  id?: string | undefined;
  versionId?: string | undefined;
  summaryType?: string | undefined;
  content?: string | undefined;
  targetAudience?: string | undefined;
  keyPoints?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdSummaries$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdSummaries$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdSummaries
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    summaryType: z.string().optional(),
    content: z.string().optional(),
    targetAudience: z.string().optional(),
    keyPoints: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdSummaries$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdSummaries$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdSummaries$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdSummaries$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdSummaries$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdSummaries$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesIdSummaries$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdSummariesToJSON(
  getApiWorkspaceServiceV1WorkspacesIdSummaries:
    GetApiWorkspaceServiceV1WorkspacesIdSummaries,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdSummaries$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdSummaries,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdSummariesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdSummaries,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdSummaries$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdSummaries' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponseVersions$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponseVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionHash: z.string().optional(),
    parentHash: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    branchName: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    isApproved: z.boolean().optional(),
    approvalChain: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    branches: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdBranches$inboundSchema),
    ).optional(),
    changes: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdChanges$inboundSchema),
    ).optional(),
    summaries: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdSummaries$inboundSchema),
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponseVersions$Outbound =
  {
    id?: string | undefined;
    versionHash?: string | undefined;
    parentHash?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    branchName?: string | undefined;
    metadata?: { [k: string]: string } | undefined;
    tags?: Array<string> | undefined;
    isApproved?: boolean | undefined;
    approvalChain?: string | undefined;
    createdAt?: string | undefined;
    branches?:
      | Array<GetApiWorkspaceServiceV1WorkspacesIdBranches$Outbound>
      | undefined;
    changes?:
      | Array<GetApiWorkspaceServiceV1WorkspacesIdChanges$Outbound>
      | undefined;
    summaries?:
      | Array<GetApiWorkspaceServiceV1WorkspacesIdSummaries$Outbound>
      | undefined;
  };

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponseVersions$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponseVersions$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponseVersions
  > = z.object({
    id: z.string().optional(),
    versionHash: z.string().optional(),
    parentHash: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    branchName: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    isApproved: z.boolean().optional(),
    approvalChain: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    branches: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdBranches$outboundSchema),
    ).optional(),
    changes: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdChanges$outboundSchema),
    ).optional(),
    summaries: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdSummaries$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponseVersions$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponseVersions$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponseVersions$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponseVersions$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponseVersions$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponseVersions$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponseVersions$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdWorkspacesResponseVersionsToJSON(
  getApiWorkspaceServiceV1WorkspacesIdWorkspacesResponseVersions:
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponseVersions,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponseVersions$outboundSchema
      .parse(getApiWorkspaceServiceV1WorkspacesIdWorkspacesResponseVersions),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdWorkspacesResponseVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponseVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponseVersions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponseVersions' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdInstances$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdInstances,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    status: GetApiWorkspaceServiceV1WorkspacesIdStatus$inboundSchema.default(
      "DOCUMENT_STATUS_UNSPECIFIED",
    ),
    fieldValues: z.record(z.string()).optional(),
    signers: z.array(z.string()).optional(),
    language: z.string().optional(),
    isCompleted: z.boolean().optional(),
    dueDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    generatedContent: z.string().optional(),
    attachments: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    signatureRequests: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdSignatureRequests$inboundSchema
      ),
    ).optional(),
    aiAssistance: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdAiAssistance$inboundSchema
      ),
    ).optional(),
    negotiation: z.lazy(() =>
      GetApiWorkspaceServiceV1WorkspacesIdNegotiation$inboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponseVersions$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdInstances$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  status: string;
  fieldValues?: { [k: string]: string } | undefined;
  signers?: Array<string> | undefined;
  language?: string | undefined;
  isCompleted?: boolean | undefined;
  dueDate?: string | undefined;
  generatedContent?: string | undefined;
  attachments?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  signatureRequests?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdSignatureRequests$Outbound>
    | undefined;
  aiAssistance?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdAiAssistance$Outbound>
    | undefined;
  negotiation?:
    | GetApiWorkspaceServiceV1WorkspacesIdNegotiation$Outbound
    | undefined;
  versions?:
    | Array<
      GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponseVersions$Outbound
    >
    | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdInstances$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdInstances$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdInstances
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    status: GetApiWorkspaceServiceV1WorkspacesIdStatus$outboundSchema.default(
      "DOCUMENT_STATUS_UNSPECIFIED",
    ),
    fieldValues: z.record(z.string()).optional(),
    signers: z.array(z.string()).optional(),
    language: z.string().optional(),
    isCompleted: z.boolean().optional(),
    dueDate: z.date().transform(v => v.toISOString()).optional(),
    generatedContent: z.string().optional(),
    attachments: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    signatureRequests: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdSignatureRequests$outboundSchema
      ),
    ).optional(),
    aiAssistance: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdAiAssistance$outboundSchema
      ),
    ).optional(),
    negotiation: z.lazy(() =>
      GetApiWorkspaceServiceV1WorkspacesIdNegotiation$outboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdWorkspacesResponseVersions$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdInstances$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdInstances$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdInstances$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdInstances$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdInstances$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdInstances$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesIdInstances$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdInstancesToJSON(
  getApiWorkspaceServiceV1WorkspacesIdInstances:
    GetApiWorkspaceServiceV1WorkspacesIdInstances,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdInstances$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdInstances,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdInstancesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdInstances,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdInstances$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdInstances' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdExplanations$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdExplanations,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    sectionIdentifier: z.string().optional(),
    explanationText: z.string().optional(),
    complexityLevel: z.string().optional(),
    relatedTerms: z.array(z.string()).optional(),
    legalReferences: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdExplanations$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  sectionIdentifier?: string | undefined;
  explanationText?: string | undefined;
  complexityLevel?: string | undefined;
  relatedTerms?: Array<string> | undefined;
  legalReferences?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdExplanations$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdExplanations$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdExplanations
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    sectionIdentifier: z.string().optional(),
    explanationText: z.string().optional(),
    complexityLevel: z.string().optional(),
    relatedTerms: z.array(z.string()).optional(),
    legalReferences: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdExplanations$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdExplanations$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdExplanations$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdExplanations$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdExplanations$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdExplanations$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesIdExplanations$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdExplanationsToJSON(
  getApiWorkspaceServiceV1WorkspacesIdExplanations:
    GetApiWorkspaceServiceV1WorkspacesIdExplanations,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdExplanations$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdExplanations,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdExplanationsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdExplanations,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdExplanations$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdExplanations' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdRiskAssessments$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdRiskAssessments,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    riskType: z.string().optional(),
    riskScore: z.number().optional(),
    assessmentDetails: z.string().optional(),
    mitigationSuggestions: z.array(z.string()).optional(),
    assessorId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdRiskAssessments$Outbound = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  riskType?: string | undefined;
  riskScore?: number | undefined;
  assessmentDetails?: string | undefined;
  mitigationSuggestions?: Array<string> | undefined;
  assessorId?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdRiskAssessments$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdRiskAssessments$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdRiskAssessments
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    riskType: z.string().optional(),
    riskScore: z.number().optional(),
    assessmentDetails: z.string().optional(),
    mitigationSuggestions: z.array(z.string()).optional(),
    assessorId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdRiskAssessments$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdRiskAssessments$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdRiskAssessments$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdRiskAssessments$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdRiskAssessments$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdRiskAssessments$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesIdRiskAssessments$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdRiskAssessmentsToJSON(
  getApiWorkspaceServiceV1WorkspacesIdRiskAssessments:
    GetApiWorkspaceServiceV1WorkspacesIdRiskAssessments,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdRiskAssessments$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdRiskAssessments,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdRiskAssessmentsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdRiskAssessments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdRiskAssessments$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdRiskAssessments' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdComplianceChecks$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdComplianceChecks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    complianceStandard: z.string().optional(),
    checkResult: z.string().optional(),
    violations: z.array(z.string()).optional(),
    remediationSteps: z.string().optional(),
    checkDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdComplianceChecks$Outbound = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  complianceStandard?: string | undefined;
  checkResult?: string | undefined;
  violations?: Array<string> | undefined;
  remediationSteps?: string | undefined;
  checkDate?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdComplianceChecks$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdComplianceChecks$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdComplianceChecks
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    complianceStandard: z.string().optional(),
    checkResult: z.string().optional(),
    violations: z.array(z.string()).optional(),
    remediationSteps: z.string().optional(),
    checkDate: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdComplianceChecks$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdComplianceChecks$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdComplianceChecks$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdComplianceChecks$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdComplianceChecks$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdComplianceChecks$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesIdComplianceChecks$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdComplianceChecksToJSON(
  getApiWorkspaceServiceV1WorkspacesIdComplianceChecks:
    GetApiWorkspaceServiceV1WorkspacesIdComplianceChecks,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdComplianceChecks$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdComplianceChecks,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdComplianceChecksFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdComplianceChecks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdComplianceChecks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdComplianceChecks' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdIntelligence$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdIntelligence,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    contractType: z.string().optional(),
    riskScores: z.record(z.number()).optional(),
    detectedClauses: z.record(z.string()).optional(),
    keyObligations: z.array(z.string()).optional(),
    complianceScores: z.record(z.number()).optional(),
    jurisdiction: z.string().optional(),
    governingLaws: z.array(z.string()).optional(),
    semanticAnalysis: z.record(z.string()).optional(),
    analysisDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    riskAssessments: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdRiskAssessments$inboundSchema
      ),
    ).optional(),
    complianceChecks: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdComplianceChecks$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdIntelligence$Outbound = {
  id?: string | undefined;
  contractType?: string | undefined;
  riskScores?: { [k: string]: number } | undefined;
  detectedClauses?: { [k: string]: string } | undefined;
  keyObligations?: Array<string> | undefined;
  complianceScores?: { [k: string]: number } | undefined;
  jurisdiction?: string | undefined;
  governingLaws?: Array<string> | undefined;
  semanticAnalysis?: { [k: string]: string } | undefined;
  analysisDate?: string | undefined;
  riskAssessments?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdRiskAssessments$Outbound>
    | undefined;
  complianceChecks?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdComplianceChecks$Outbound>
    | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdIntelligence$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdIntelligence$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdIntelligence
  > = z.object({
    id: z.string().optional(),
    contractType: z.string().optional(),
    riskScores: z.record(z.number()).optional(),
    detectedClauses: z.record(z.string()).optional(),
    keyObligations: z.array(z.string()).optional(),
    complianceScores: z.record(z.number()).optional(),
    jurisdiction: z.string().optional(),
    governingLaws: z.array(z.string()).optional(),
    semanticAnalysis: z.record(z.string()).optional(),
    analysisDate: z.date().transform(v => v.toISOString()).optional(),
    riskAssessments: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdRiskAssessments$outboundSchema
      ),
    ).optional(),
    complianceChecks: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdComplianceChecks$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdIntelligence$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdIntelligence$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdIntelligence$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdIntelligence$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdIntelligence$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdIntelligence$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesIdIntelligence$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdIntelligenceToJSON(
  getApiWorkspaceServiceV1WorkspacesIdIntelligence:
    GetApiWorkspaceServiceV1WorkspacesIdIntelligence,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdIntelligence$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdIntelligence,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdIntelligenceFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdIntelligence,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdIntelligence$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdIntelligence' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdTemplates$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdTemplates,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    industryType: z.string().optional(),
    documentType: z.string().optional(),
    baseContent: z.string().optional(),
    isAdaptive: z.boolean().optional(),
    metadata: z.record(z.string()).optional(),
    supportedLanguages: z.array(z.string()).optional(),
    requiredDataFields: z.array(z.string()).optional(),
    version: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    templateType: GetApiWorkspaceServiceV1WorkspacesIdTemplateType$inboundSchema
      .default("TEMPLATE_TYPE_UNSPECIFIED"),
    content: z.string().optional(),
    detectedVariables: z.array(z.string()).optional(),
    variableMappings: z.record(z.string()).optional(),
    isContextAware: z.boolean().optional(),
    supportedContexts: z.array(z.string()).optional(),
    formattingRules: z.record(z.string()).optional(),
    conditionalSections: z.array(z.string()).optional(),
    versions: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdVersions$inboundSchema),
    ).optional(),
    variables: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdVariables$inboundSchema),
    ).optional(),
    instances: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdInstances$inboundSchema),
    ).optional(),
    explanations: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdExplanations$inboundSchema
      ),
    ).optional(),
    intelligence: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdIntelligence$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdTemplates$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  industryType?: string | undefined;
  documentType?: string | undefined;
  baseContent?: string | undefined;
  isAdaptive?: boolean | undefined;
  metadata?: { [k: string]: string } | undefined;
  supportedLanguages?: Array<string> | undefined;
  requiredDataFields?: Array<string> | undefined;
  version?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  templateType: string;
  content?: string | undefined;
  detectedVariables?: Array<string> | undefined;
  variableMappings?: { [k: string]: string } | undefined;
  isContextAware?: boolean | undefined;
  supportedContexts?: Array<string> | undefined;
  formattingRules?: { [k: string]: string } | undefined;
  conditionalSections?: Array<string> | undefined;
  versions?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdVersions$Outbound>
    | undefined;
  variables?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdVariables$Outbound>
    | undefined;
  instances?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdInstances$Outbound>
    | undefined;
  explanations?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdExplanations$Outbound>
    | undefined;
  intelligence?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdIntelligence$Outbound>
    | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdTemplates$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdTemplates$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdTemplates
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    industryType: z.string().optional(),
    documentType: z.string().optional(),
    baseContent: z.string().optional(),
    isAdaptive: z.boolean().optional(),
    metadata: z.record(z.string()).optional(),
    supportedLanguages: z.array(z.string()).optional(),
    requiredDataFields: z.array(z.string()).optional(),
    version: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    templateType:
      GetApiWorkspaceServiceV1WorkspacesIdTemplateType$outboundSchema.default(
        "TEMPLATE_TYPE_UNSPECIFIED",
      ),
    content: z.string().optional(),
    detectedVariables: z.array(z.string()).optional(),
    variableMappings: z.record(z.string()).optional(),
    isContextAware: z.boolean().optional(),
    supportedContexts: z.array(z.string()).optional(),
    formattingRules: z.record(z.string()).optional(),
    conditionalSections: z.array(z.string()).optional(),
    versions: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdVersions$outboundSchema),
    ).optional(),
    variables: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdVariables$outboundSchema
      ),
    ).optional(),
    instances: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdInstances$outboundSchema
      ),
    ).optional(),
    explanations: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdExplanations$outboundSchema
      ),
    ).optional(),
    intelligence: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdIntelligence$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdTemplates$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdTemplates$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdTemplates$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdTemplates$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdTemplates$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdTemplates$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesIdTemplates$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdTemplatesToJSON(
  getApiWorkspaceServiceV1WorkspacesIdTemplates:
    GetApiWorkspaceServiceV1WorkspacesIdTemplates,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdTemplates$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdTemplates,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdTemplatesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdTemplates,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdTemplates$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdTemplates' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdSharing$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdSharing,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdSharing$Outbound = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdSharing$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdSharing$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdSharing
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdSharing$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdSharing$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdSharing$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdSharing$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdSharing$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdSharing$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesIdSharing$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdSharingToJSON(
  getApiWorkspaceServiceV1WorkspacesIdSharing:
    GetApiWorkspaceServiceV1WorkspacesIdSharing,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdSharing$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdSharing,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdSharingFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdSharing,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdSharing$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdSharing' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdActivities$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdActivities,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    activityType: z.string().optional(),
    userId: z.string().optional(),
    description: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdActivities$Outbound = {
  id?: string | undefined;
  activityType?: string | undefined;
  userId?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdActivities$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdActivities$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdActivities
  > = z.object({
    id: z.string().optional(),
    activityType: z.string().optional(),
    userId: z.string().optional(),
    description: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdActivities$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdActivities$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdActivities$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdActivities$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdActivities$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdActivities$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesIdActivities$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdActivitiesToJSON(
  getApiWorkspaceServiceV1WorkspacesIdActivities:
    GetApiWorkspaceServiceV1WorkspacesIdActivities,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdActivities$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdActivities,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdActivitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdActivities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdActivities$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdActivities' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdCompliance$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdCompliance,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    complianceType: z.string().optional(),
    status: z.string().optional(),
    certificationId: z.string().optional(),
    validUntil: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdCompliance$Outbound = {
  id?: string | undefined;
  complianceType?: string | undefined;
  status?: string | undefined;
  certificationId?: string | undefined;
  validUntil?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdCompliance$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdCompliance$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdCompliance
  > = z.object({
    id: z.string().optional(),
    complianceType: z.string().optional(),
    status: z.string().optional(),
    certificationId: z.string().optional(),
    validUntil: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdCompliance$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdCompliance$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdCompliance$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdCompliance$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdCompliance$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdCompliance$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesIdCompliance$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdComplianceToJSON(
  getApiWorkspaceServiceV1WorkspacesIdCompliance:
    GetApiWorkspaceServiceV1WorkspacesIdCompliance,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdCompliance$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdCompliance,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdComplianceFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdCompliance,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdCompliance$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdCompliance' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdCategory$inboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1WorkspacesIdCategory> = z
    .nativeEnum(GetApiWorkspaceServiceV1WorkspacesIdCategory);

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdCategory$outboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1WorkspacesIdCategory> =
    GetApiWorkspaceServiceV1WorkspacesIdCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdCategory$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdCategory$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdCategory$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdCategory$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdCategory$outboundSchema;
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdPricingModel$inboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1WorkspacesIdPricingModel> = z
    .nativeEnum(GetApiWorkspaceServiceV1WorkspacesIdPricingModel);

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdPricingModel$outboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1WorkspacesIdPricingModel> =
    GetApiWorkspaceServiceV1WorkspacesIdPricingModel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdPricingModel$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdPricingModel$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdPricingModel$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdPricingModel$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdPricingModel$outboundSchema;
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdWorkspacesVersions$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    versionNumber: z.string().optional(),
    changelog: z.string().optional(),
    requirements: z.record(z.string()).optional(),
    isPublic: z.boolean().optional(),
    releaseDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdWorkspacesVersions$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  versionNumber?: string | undefined;
  changelog?: string | undefined;
  requirements?: { [k: string]: string } | undefined;
  isPublic?: boolean | undefined;
  releaseDate?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdWorkspacesVersions$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesVersions$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesVersions
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    versionNumber: z.string().optional(),
    changelog: z.string().optional(),
    requirements: z.record(z.string()).optional(),
    isPublic: z.boolean().optional(),
    releaseDate: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdWorkspacesVersions$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdWorkspacesVersions$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesVersions$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdWorkspacesVersions$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesVersions$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdWorkspacesVersions$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesVersions$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdWorkspacesVersionsToJSON(
  getApiWorkspaceServiceV1WorkspacesIdWorkspacesVersions:
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesVersions,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdWorkspacesVersions$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdWorkspacesVersions,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdWorkspacesVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdWorkspacesVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdWorkspacesVersions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdWorkspacesVersions' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdInstallations$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdInstallations,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    workspaceId: z.string().optional(),
    versionInstalled: z.string().optional(),
    configuration: z.record(z.string()).optional(),
    installationStatus: z.string().optional(),
    installedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    lastUsed: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdInstallations$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  workspaceId?: string | undefined;
  versionInstalled?: string | undefined;
  configuration?: { [k: string]: string } | undefined;
  installationStatus?: string | undefined;
  installedAt?: string | undefined;
  lastUsed?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdInstallations$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdInstallations$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdInstallations
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    workspaceId: z.string().optional(),
    versionInstalled: z.string().optional(),
    configuration: z.record(z.string()).optional(),
    installationStatus: z.string().optional(),
    installedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUsed: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdInstallations$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdInstallations$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdInstallations$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdInstallations$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdInstallations$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdInstallations$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesIdInstallations$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdInstallationsToJSON(
  getApiWorkspaceServiceV1WorkspacesIdInstallations:
    GetApiWorkspaceServiceV1WorkspacesIdInstallations,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdInstallations$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdInstallations,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdInstallationsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdInstallations,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdInstallations$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdInstallations' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdAnalytics$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdAnalytics,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    metricName: z.string().optional(),
    metricValue: z.number().optional(),
    dimensions: z.record(z.string()).optional(),
    recordedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdAnalytics$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  metricName?: string | undefined;
  metricValue?: number | undefined;
  dimensions?: { [k: string]: string } | undefined;
  recordedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdAnalytics$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdAnalytics$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdAnalytics
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    metricName: z.string().optional(),
    metricValue: z.number().optional(),
    dimensions: z.record(z.string()).optional(),
    recordedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdAnalytics$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdAnalytics$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdAnalytics$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdAnalytics$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdAnalytics$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdAnalytics$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesIdAnalytics$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdAnalyticsToJSON(
  getApiWorkspaceServiceV1WorkspacesIdAnalytics:
    GetApiWorkspaceServiceV1WorkspacesIdAnalytics,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdAnalytics$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdAnalytics,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdAnalytics,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdAnalytics$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdAnalytics' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdReviews$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdReviews,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    reviewerId: z.string().optional(),
    rating: z.number().optional(),
    reviewText: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdReviews$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  reviewerId?: string | undefined;
  rating?: number | undefined;
  reviewText?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdReviews$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdReviews$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdReviews
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    reviewerId: z.string().optional(),
    rating: z.number().optional(),
    reviewText: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdReviews$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdReviews$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdReviews$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdReviews$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdReviews$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdReviews$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesIdReviews$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdReviewsToJSON(
  getApiWorkspaceServiceV1WorkspacesIdReviews:
    GetApiWorkspaceServiceV1WorkspacesIdReviews,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdReviews$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdReviews,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdReviewsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdReviews,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdReviews$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdReviews' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdInfo$inboundSchema: z.ZodType<
  GetApiWorkspaceServiceV1WorkspacesIdInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  appId: z.string().optional(),
  supportedLanguages: z.array(z.string()).optional(),
  sdkFeatures: z.array(z.string()).optional(),
  testCoverage: z.record(z.number()).optional(),
  securityScans: z.array(z.string()).optional(),
  performanceMetrics: z.record(z.string()).optional(),
  developmentStatus: z.string().optional(),
  knownIssues: z.array(z.string()).optional(),
  roadmapUrl: z.string().optional(),
  lastSecurityAudit: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdInfo$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  supportedLanguages?: Array<string> | undefined;
  sdkFeatures?: Array<string> | undefined;
  testCoverage?: { [k: string]: number } | undefined;
  securityScans?: Array<string> | undefined;
  performanceMetrics?: { [k: string]: string } | undefined;
  developmentStatus?: string | undefined;
  knownIssues?: Array<string> | undefined;
  roadmapUrl?: string | undefined;
  lastSecurityAudit?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdInfo$outboundSchema: z.ZodType<
  GetApiWorkspaceServiceV1WorkspacesIdInfo$Outbound,
  z.ZodTypeDef,
  GetApiWorkspaceServiceV1WorkspacesIdInfo
> = z.object({
  id: z.string().optional(),
  appId: z.string().optional(),
  supportedLanguages: z.array(z.string()).optional(),
  sdkFeatures: z.array(z.string()).optional(),
  testCoverage: z.record(z.number()).optional(),
  securityScans: z.array(z.string()).optional(),
  performanceMetrics: z.record(z.string()).optional(),
  developmentStatus: z.string().optional(),
  knownIssues: z.array(z.string()).optional(),
  roadmapUrl: z.string().optional(),
  lastSecurityAudit: z.date().transform(v => v.toISOString()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdInfo$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdInfo$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdInfo$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdInfo$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdInfo$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdInfo$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesIdInfo$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdInfoToJSON(
  getApiWorkspaceServiceV1WorkspacesIdInfo:
    GetApiWorkspaceServiceV1WorkspacesIdInfo,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdInfo$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdInfo,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdInfoFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdInfo,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdInfo$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdInfo' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdWebhooks$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdWebhooks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    url: z.string().optional(),
    subscribedEvents: z.array(z.string()).optional(),
    secretKey: z.string().optional(),
    retryCount: z.number().int().optional(),
    timeoutSeconds: z.number().int().optional(),
    isActive: z.boolean().optional(),
    headers: z.record(z.string()).optional(),
    lastTriggered: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdWebhooks$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  url?: string | undefined;
  subscribedEvents?: Array<string> | undefined;
  secretKey?: string | undefined;
  retryCount?: number | undefined;
  timeoutSeconds?: number | undefined;
  isActive?: boolean | undefined;
  headers?: { [k: string]: string } | undefined;
  lastTriggered?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdWebhooks$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdWebhooks$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdWebhooks
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    url: z.string().optional(),
    subscribedEvents: z.array(z.string()).optional(),
    secretKey: z.string().optional(),
    retryCount: z.number().int().optional(),
    timeoutSeconds: z.number().int().optional(),
    isActive: z.boolean().optional(),
    headers: z.record(z.string()).optional(),
    lastTriggered: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdWebhooks$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdWebhooks$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdWebhooks$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdWebhooks$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdWebhooks$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdWebhooks$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesIdWebhooks$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdWebhooksToJSON(
  getApiWorkspaceServiceV1WorkspacesIdWebhooks:
    GetApiWorkspaceServiceV1WorkspacesIdWebhooks,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdWebhooks$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdWebhooks,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdWebhooksFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdWebhooks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdWebhooks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdWebhooks' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdPermissions$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdPermissions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    scope: z.string().optional(),
    description: z.string().optional(),
    isRequired: z.boolean().optional(),
    accessLevels: z.array(z.string()).optional(),
    constraints: z.record(z.string()).optional(),
    requiresApproval: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdPermissions$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  scope?: string | undefined;
  description?: string | undefined;
  isRequired?: boolean | undefined;
  accessLevels?: Array<string> | undefined;
  constraints?: { [k: string]: string } | undefined;
  requiresApproval?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdPermissions$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdPermissions$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdPermissions
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    scope: z.string().optional(),
    description: z.string().optional(),
    isRequired: z.boolean().optional(),
    accessLevels: z.array(z.string()).optional(),
    constraints: z.record(z.string()).optional(),
    requiresApproval: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdPermissions$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdPermissions$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdPermissions$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdPermissions$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdPermissions$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdPermissions$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesIdPermissions$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdPermissionsToJSON(
  getApiWorkspaceServiceV1WorkspacesIdPermissions:
    GetApiWorkspaceServiceV1WorkspacesIdPermissions,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdPermissions$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdPermissions,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdPermissionsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdPermissions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdPermissions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdPermissions' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdInstalledApps$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdInstalledApps,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    developerId: z.string().optional(),
    category: GetApiWorkspaceServiceV1WorkspacesIdCategory$inboundSchema
      .default("APP_CATEGORY_UNSPECIFIED"),
    supportedContractTypes: z.array(z.string()).optional(),
    features: z.array(z.string()).optional(),
    pricingModel: GetApiWorkspaceServiceV1WorkspacesIdPricingModel$inboundSchema
      .default("PRICING_MODEL_UNSPECIFIED"),
    pricingTiers: z.record(z.number()).optional(),
    supportedIntegrations: z.array(z.string()).optional(),
    isVerified: z.boolean().optional(),
    rating: z.number().optional(),
    installationCount: z.number().int().optional(),
    requiredPermissions: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    documentationUrl: z.string().optional(),
    supportEmail: z.string().optional(),
    screenshots: z.array(z.string()).optional(),
    privacyPolicyUrl: z.string().optional(),
    termsUrl: z.string().optional(),
    publishedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdWorkspacesVersions$inboundSchema
      ),
    ).optional(),
    installations: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdInstallations$inboundSchema
      ),
    ).optional(),
    analytics: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdAnalytics$inboundSchema),
    ).optional(),
    reviews: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdReviews$inboundSchema),
    ).optional(),
    info: z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdInfo$inboundSchema)
      .optional(),
    webhooks: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdWebhooks$inboundSchema),
    ).optional(),
    permissions: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdPermissions$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdInstalledApps$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  developerId?: string | undefined;
  category: string;
  supportedContractTypes?: Array<string> | undefined;
  features?: Array<string> | undefined;
  pricingModel: string;
  pricingTiers?: { [k: string]: number } | undefined;
  supportedIntegrations?: Array<string> | undefined;
  isVerified?: boolean | undefined;
  rating?: number | undefined;
  installationCount?: number | undefined;
  requiredPermissions?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  documentationUrl?: string | undefined;
  supportEmail?: string | undefined;
  screenshots?: Array<string> | undefined;
  privacyPolicyUrl?: string | undefined;
  termsUrl?: string | undefined;
  publishedAt?: string | undefined;
  lastUpdated?: string | undefined;
  versions?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdWorkspacesVersions$Outbound>
    | undefined;
  installations?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdInstallations$Outbound>
    | undefined;
  analytics?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdAnalytics$Outbound>
    | undefined;
  reviews?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdReviews$Outbound>
    | undefined;
  info?: GetApiWorkspaceServiceV1WorkspacesIdInfo$Outbound | undefined;
  webhooks?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdWebhooks$Outbound>
    | undefined;
  permissions?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdPermissions$Outbound>
    | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdInstalledApps$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdInstalledApps$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdInstalledApps
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    developerId: z.string().optional(),
    category: GetApiWorkspaceServiceV1WorkspacesIdCategory$outboundSchema
      .default("APP_CATEGORY_UNSPECIFIED"),
    supportedContractTypes: z.array(z.string()).optional(),
    features: z.array(z.string()).optional(),
    pricingModel:
      GetApiWorkspaceServiceV1WorkspacesIdPricingModel$outboundSchema.default(
        "PRICING_MODEL_UNSPECIFIED",
      ),
    pricingTiers: z.record(z.number()).optional(),
    supportedIntegrations: z.array(z.string()).optional(),
    isVerified: z.boolean().optional(),
    rating: z.number().optional(),
    installationCount: z.number().int().optional(),
    requiredPermissions: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    documentationUrl: z.string().optional(),
    supportEmail: z.string().optional(),
    screenshots: z.array(z.string()).optional(),
    privacyPolicyUrl: z.string().optional(),
    termsUrl: z.string().optional(),
    publishedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
    versions: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdWorkspacesVersions$outboundSchema
      ),
    ).optional(),
    installations: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdInstallations$outboundSchema
      ),
    ).optional(),
    analytics: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdAnalytics$outboundSchema
      ),
    ).optional(),
    reviews: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdReviews$outboundSchema),
    ).optional(),
    info: z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdInfo$outboundSchema)
      .optional(),
    webhooks: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdWebhooks$outboundSchema),
    ).optional(),
    permissions: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdPermissions$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdInstalledApps$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdInstalledApps$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdInstalledApps$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdInstalledApps$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdInstalledApps$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdInstalledApps$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesIdInstalledApps$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdInstalledAppsToJSON(
  getApiWorkspaceServiceV1WorkspacesIdInstalledApps:
    GetApiWorkspaceServiceV1WorkspacesIdInstalledApps,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdInstalledApps$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdInstalledApps,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdInstalledAppsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdInstalledApps,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdInstalledApps$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdInstalledApps' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdWorkspace$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdWorkspace,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    uniqueIdentifier: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    storageQuota: z.string().optional(),
    usedStorage: z.string().optional(),
    allowPublicSharing: z.boolean().optional(),
    requireApproval: z.boolean().optional(),
    gdprCompliant: z.boolean().optional(),
    hipaaCompliant: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    folders: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdFolders$inboundSchema),
    ).optional(),
    templates: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdTemplates$inboundSchema),
    ).optional(),
    sharing: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdSharing$inboundSchema),
    ).optional(),
    activities: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdActivities$inboundSchema
      ),
    ).optional(),
    compliance: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdCompliance$inboundSchema
      ),
    ).optional(),
    installedApps: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdInstalledApps$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdWorkspace$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  uniqueIdentifier?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  storageQuota?: string | undefined;
  usedStorage?: string | undefined;
  allowPublicSharing?: boolean | undefined;
  requireApproval?: boolean | undefined;
  gdprCompliant?: boolean | undefined;
  hipaaCompliant?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  folders?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdFolders$Outbound>
    | undefined;
  templates?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdTemplates$Outbound>
    | undefined;
  sharing?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdSharing$Outbound>
    | undefined;
  activities?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdActivities$Outbound>
    | undefined;
  compliance?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdCompliance$Outbound>
    | undefined;
  installedApps?:
    | Array<GetApiWorkspaceServiceV1WorkspacesIdInstalledApps$Outbound>
    | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdWorkspace$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdWorkspace$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdWorkspace
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    uniqueIdentifier: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    storageQuota: z.string().optional(),
    usedStorage: z.string().optional(),
    allowPublicSharing: z.boolean().optional(),
    requireApproval: z.boolean().optional(),
    gdprCompliant: z.boolean().optional(),
    hipaaCompliant: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    folders: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdFolders$outboundSchema),
    ).optional(),
    templates: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdTemplates$outboundSchema
      ),
    ).optional(),
    sharing: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdSharing$outboundSchema),
    ).optional(),
    activities: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdActivities$outboundSchema
      ),
    ).optional(),
    compliance: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdCompliance$outboundSchema
      ),
    ).optional(),
    installedApps: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesIdInstalledApps$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdWorkspace$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdWorkspace$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdWorkspace$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdWorkspace$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdWorkspace$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdWorkspace$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesIdWorkspace$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdWorkspaceToJSON(
  getApiWorkspaceServiceV1WorkspacesIdWorkspace:
    GetApiWorkspaceServiceV1WorkspacesIdWorkspace,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdWorkspace$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdWorkspace,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdWorkspaceFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdWorkspace,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdWorkspace$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdWorkspace' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdData$inboundSchema: z.ZodType<
  GetApiWorkspaceServiceV1WorkspacesIdData,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspace: z.lazy(() =>
    GetApiWorkspaceServiceV1WorkspacesIdWorkspace$inboundSchema
  ).optional(),
});

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdData$Outbound = {
  workspace?:
    | GetApiWorkspaceServiceV1WorkspacesIdWorkspace$Outbound
    | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdData$outboundSchema: z.ZodType<
  GetApiWorkspaceServiceV1WorkspacesIdData$Outbound,
  z.ZodTypeDef,
  GetApiWorkspaceServiceV1WorkspacesIdData
> = z.object({
  workspace: z.lazy(() =>
    GetApiWorkspaceServiceV1WorkspacesIdWorkspace$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdData$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdData$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdData$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdData$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdData$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdData$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesIdData$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdDataToJSON(
  getApiWorkspaceServiceV1WorkspacesIdData:
    GetApiWorkspaceServiceV1WorkspacesIdData,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdData$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdData,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdDataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdData' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdResponseBody$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdData$inboundSchema),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesIdResponseBody$Outbound = {
  data: GetApiWorkspaceServiceV1WorkspacesIdData$Outbound;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesIdResponseBody$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesIdResponseBody$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesIdResponseBody
  > = z.object({
    data: z.lazy(() => GetApiWorkspaceServiceV1WorkspacesIdData$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesIdResponseBody$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdResponseBody$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesIdResponseBody$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesIdResponseBody$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesIdResponseBody$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesIdResponseBodyToJSON(
  getApiWorkspaceServiceV1WorkspacesIdResponseBody:
    GetApiWorkspaceServiceV1WorkspacesIdResponseBody,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesIdResponseBody$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesIdResponseBody,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesIdResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesIdResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesIdResponseBody' from JSON`,
  );
}
