/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiLeadScraperMicroserviceApiV1LeadsRequest = {
  /**
   * Context identifiers
   */
  organizationId?: string | undefined;
  workspaceId?: string | undefined;
  tenantId?: string | undefined;
  accountId?: string | undefined;
  /**
   * Pagination
   */
  pageSize?: number | undefined;
  pageNumber?: number | undefined;
};

export const GetApiLeadScraperMicroserviceApiV1LeadsDay = {
  DayOfWeekUnspecified: "DAY_OF_WEEK_UNSPECIFIED",
  DayOfWeekMonday: "DAY_OF_WEEK_MONDAY",
  DayOfWeekTuesday: "DAY_OF_WEEK_TUESDAY",
  DayOfWeekWednesday: "DAY_OF_WEEK_WEDNESDAY",
  DayOfWeekThursday: "DAY_OF_WEEK_THURSDAY",
  DayOfWeekFriday: "DAY_OF_WEEK_FRIDAY",
  DayOfWeekSaturday: "DAY_OF_WEEK_SATURDAY",
  DayOfWeekSunday: "DAY_OF_WEEK_SUNDAY",
} as const;
export type GetApiLeadScraperMicroserviceApiV1LeadsDay = ClosedEnum<
  typeof GetApiLeadScraperMicroserviceApiV1LeadsDay
>;

export type GetApiLeadScraperMicroserviceApiV1LeadsRegularHours = {
  id?: string | undefined;
  day?: GetApiLeadScraperMicroserviceApiV1LeadsDay | undefined;
  openTime?: string | undefined;
  closeTime?: string | undefined;
  closed?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
};

export const GetApiLeadScraperMicroserviceApiV1LeadsLeadsDay = {
  DayOfWeekUnspecified: "DAY_OF_WEEK_UNSPECIFIED",
  DayOfWeekMonday: "DAY_OF_WEEK_MONDAY",
  DayOfWeekTuesday: "DAY_OF_WEEK_TUESDAY",
  DayOfWeekWednesday: "DAY_OF_WEEK_WEDNESDAY",
  DayOfWeekThursday: "DAY_OF_WEEK_THURSDAY",
  DayOfWeekFriday: "DAY_OF_WEEK_FRIDAY",
  DayOfWeekSaturday: "DAY_OF_WEEK_SATURDAY",
  DayOfWeekSunday: "DAY_OF_WEEK_SUNDAY",
} as const;
export type GetApiLeadScraperMicroserviceApiV1LeadsLeadsDay = ClosedEnum<
  typeof GetApiLeadScraperMicroserviceApiV1LeadsLeadsDay
>;

export type GetApiLeadScraperMicroserviceApiV1LeadsSpecialHours = {
  id?: string | undefined;
  day?: GetApiLeadScraperMicroserviceApiV1LeadsLeadsDay | undefined;
  openTime?: string | undefined;
  closeTime?: string | undefined;
  closed?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1LeadsReviews = {
  id?: string | undefined;
  author?: string | undefined;
  rating?: number | undefined;
  text?: string | undefined;
  time?: Date | undefined;
  language?: string | undefined;
  profilePhotoUrl?: string | undefined;
  reviewCount?: number | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
};

export const GetApiLeadScraperMicroserviceApiV1LeadsRevenueRange = {
  RevenueRangeUnspecified: "REVENUE_RANGE_UNSPECIFIED",
  RevenueRangeUnder100K: "REVENUE_RANGE_UNDER_100K",
  RevenueRange100KTo1M: "REVENUE_RANGE_100K_TO_1M",
  RevenueRange1MTo10M: "REVENUE_RANGE_1M_TO_10M",
  RevenueRange10MTo50M: "REVENUE_RANGE_10M_TO_50M",
  RevenueRangeOver50M: "REVENUE_RANGE_OVER_50M",
} as const;
export type GetApiLeadScraperMicroserviceApiV1LeadsRevenueRange = ClosedEnum<
  typeof GetApiLeadScraperMicroserviceApiV1LeadsRevenueRange
>;

export const GetApiLeadScraperMicroserviceApiV1LeadsEmployeeBenefits = {
  EmployeeBenefitUnspecified: "EMPLOYEE_BENEFIT_UNSPECIFIED",
  EmployeeBenefitHealthInsurance: "EMPLOYEE_BENEFIT_HEALTH_INSURANCE",
  EmployeeBenefitRetirementPlan: "EMPLOYEE_BENEFIT_RETIREMENT_PLAN",
  EmployeeBenefitPaidTimeOff: "EMPLOYEE_BENEFIT_PAID_TIME_OFF",
  EmployeeBenefitRemoteWork: "EMPLOYEE_BENEFIT_REMOTE_WORK",
} as const;
export type GetApiLeadScraperMicroserviceApiV1LeadsEmployeeBenefits =
  ClosedEnum<typeof GetApiLeadScraperMicroserviceApiV1LeadsEmployeeBenefits>;

export type GetApiLeadScraperMicroserviceApiV1LeadsLeads = {
  id?: string | undefined;
  name?: string | undefined;
  website?: string | undefined;
  phone?: string | undefined;
  address?: string | undefined;
  city?: string | undefined;
  state?: string | undefined;
  country?: string | undefined;
  latitude?: number | undefined;
  longitude?: number | undefined;
  googleRating?: number | undefined;
  reviewCount?: number | undefined;
  industry?: string | undefined;
  employeeCount?: number | undefined;
  estimatedRevenue?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  placeId?: string | undefined;
  googleMapsUrl?: string | undefined;
  businessStatus?: string | undefined;
  regularHours?:
    | Array<GetApiLeadScraperMicroserviceApiV1LeadsRegularHours>
    | undefined;
  specialHours?:
    | Array<GetApiLeadScraperMicroserviceApiV1LeadsSpecialHours>
    | undefined;
  photoReferences?: Array<string> | undefined;
  mainPhotoUrl?: string | undefined;
  reviews?: Array<GetApiLeadScraperMicroserviceApiV1LeadsReviews> | undefined;
  types?: Array<string> | undefined;
  amenities?: Array<string> | undefined;
  servesVegetarianFood?: boolean | undefined;
  outdoorSeating?: boolean | undefined;
  paymentMethods?: Array<string> | undefined;
  wheelchairAccessible?: boolean | undefined;
  parkingAvailable?: boolean | undefined;
  socialMedia?: { [k: string]: string } | undefined;
  ratingCategory?: string | undefined;
  rating?: number | undefined;
  count?: number | undefined;
  lastUpdated?: Date | undefined;
  dataSourceVersion?: string | undefined;
  scrapingSessionId?: string | undefined;
  alternatePhones?: Array<string> | undefined;
  contactPersonName?: string | undefined;
  contactPersonTitle?: string | undefined;
  contactEmail?: string | undefined;
  foundedYear?: number | undefined;
  businessType?: string | undefined;
  certifications?: Array<string> | undefined;
  licenseNumber?: string | undefined;
  revenueRange?:
    | GetApiLeadScraperMicroserviceApiV1LeadsRevenueRange
    | undefined;
  fundingStage?: string | undefined;
  isPublicCompany?: boolean | undefined;
  websiteLoadSpeed?: number | undefined;
  hasSslCertificate?: boolean | undefined;
  cmsUsed?: string | undefined;
  ecommercePlatforms?: Array<string> | undefined;
  timezone?: string | undefined;
  neighborhood?: string | undefined;
  nearbyLandmarks?: Array<string> | undefined;
  transportationAccess?: string | undefined;
  employeeBenefits?:
    | Array<GetApiLeadScraperMicroserviceApiV1LeadsEmployeeBenefits>
    | undefined;
  parentCompany?: string | undefined;
  subsidiaries?: Array<string> | undefined;
  isFranchise?: boolean | undefined;
  seoKeywords?: Array<string> | undefined;
  usesGoogleAds?: boolean | undefined;
  googleMyBusinessCategory?: string | undefined;
  naicsCode?: string | undefined;
  sicCode?: string | undefined;
  unspscCode?: string | undefined;
  isGreenCertified?: boolean | undefined;
  energySources?: Array<string> | undefined;
  sustainabilityRating?: string | undefined;
  recentAnnouncements?: Array<string> | undefined;
  lastProductLaunch?: Date | undefined;
  hasLitigationHistory?: boolean | undefined;
  exportControlStatus?: string | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1LeadsData = {
  leads?: Array<GetApiLeadScraperMicroserviceApiV1LeadsLeads> | undefined;
  totalCount?: number | undefined;
  nextPageNumber?: number | undefined;
};

/**
 * Retrieves a paginated list of leads with comprehensive filtering options
 */
export type GetApiLeadScraperMicroserviceApiV1LeadsResponseBody = {
  data: GetApiLeadScraperMicroserviceApiV1LeadsData;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1LeadsRequest$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1LeadsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    organizationId: z.string().optional(),
    workspaceId: z.string().optional(),
    tenantId: z.string().optional(),
    accountId: z.string().optional(),
    pageSize: z.number().optional(),
    pageNumber: z.number().optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1LeadsRequest$Outbound = {
  organizationId?: string | undefined;
  workspaceId?: string | undefined;
  tenantId?: string | undefined;
  accountId?: string | undefined;
  pageSize?: number | undefined;
  pageNumber?: number | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1LeadsRequest$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1LeadsRequest$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1LeadsRequest
  > = z.object({
    organizationId: z.string().optional(),
    workspaceId: z.string().optional(),
    tenantId: z.string().optional(),
    accountId: z.string().optional(),
    pageSize: z.number().optional(),
    pageNumber: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1LeadsRequest$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1LeadsRequest$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1LeadsRequest$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsRequest$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1LeadsRequest$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1LeadsRequestToJSON(
  getApiLeadScraperMicroserviceApiV1LeadsRequest:
    GetApiLeadScraperMicroserviceApiV1LeadsRequest,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1LeadsRequest$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1LeadsRequest,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1LeadsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1LeadsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1LeadsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1LeadsRequest' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1LeadsDay$inboundSchema:
  z.ZodNativeEnum<typeof GetApiLeadScraperMicroserviceApiV1LeadsDay> = z
    .nativeEnum(GetApiLeadScraperMicroserviceApiV1LeadsDay);

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1LeadsDay$outboundSchema:
  z.ZodNativeEnum<typeof GetApiLeadScraperMicroserviceApiV1LeadsDay> =
    GetApiLeadScraperMicroserviceApiV1LeadsDay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1LeadsDay$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsDay$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1LeadsDay$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsDay$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1LeadsDay$outboundSchema;
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1LeadsRegularHours$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1LeadsRegularHours,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    day: GetApiLeadScraperMicroserviceApiV1LeadsDay$inboundSchema.default(
      "DAY_OF_WEEK_UNSPECIFIED",
    ),
    openTime: z.string().optional(),
    closeTime: z.string().optional(),
    closed: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1LeadsRegularHours$Outbound = {
  id?: string | undefined;
  day: string;
  openTime?: string | undefined;
  closeTime?: string | undefined;
  closed?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1LeadsRegularHours$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1LeadsRegularHours$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1LeadsRegularHours
  > = z.object({
    id: z.string().optional(),
    day: GetApiLeadScraperMicroserviceApiV1LeadsDay$outboundSchema.default(
      "DAY_OF_WEEK_UNSPECIFIED",
    ),
    openTime: z.string().optional(),
    closeTime: z.string().optional(),
    closed: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1LeadsRegularHours$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsRegularHours$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1LeadsRegularHours$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsRegularHours$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1LeadsRegularHours$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsRegularHours$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1LeadsRegularHours$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1LeadsRegularHoursToJSON(
  getApiLeadScraperMicroserviceApiV1LeadsRegularHours:
    GetApiLeadScraperMicroserviceApiV1LeadsRegularHours,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1LeadsRegularHours$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1LeadsRegularHours,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1LeadsRegularHoursFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1LeadsRegularHours,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1LeadsRegularHours$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1LeadsRegularHours' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1LeadsLeadsDay$inboundSchema:
  z.ZodNativeEnum<typeof GetApiLeadScraperMicroserviceApiV1LeadsLeadsDay> = z
    .nativeEnum(GetApiLeadScraperMicroserviceApiV1LeadsLeadsDay);

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1LeadsLeadsDay$outboundSchema:
  z.ZodNativeEnum<typeof GetApiLeadScraperMicroserviceApiV1LeadsLeadsDay> =
    GetApiLeadScraperMicroserviceApiV1LeadsLeadsDay$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1LeadsLeadsDay$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsLeadsDay$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1LeadsLeadsDay$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsLeadsDay$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1LeadsLeadsDay$outboundSchema;
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1LeadsSpecialHours$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1LeadsSpecialHours,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    day: GetApiLeadScraperMicroserviceApiV1LeadsLeadsDay$inboundSchema.default(
      "DAY_OF_WEEK_UNSPECIFIED",
    ),
    openTime: z.string().optional(),
    closeTime: z.string().optional(),
    closed: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1LeadsSpecialHours$Outbound = {
  id?: string | undefined;
  day: string;
  openTime?: string | undefined;
  closeTime?: string | undefined;
  closed?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1LeadsSpecialHours$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1LeadsSpecialHours$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1LeadsSpecialHours
  > = z.object({
    id: z.string().optional(),
    day: GetApiLeadScraperMicroserviceApiV1LeadsLeadsDay$outboundSchema.default(
      "DAY_OF_WEEK_UNSPECIFIED",
    ),
    openTime: z.string().optional(),
    closeTime: z.string().optional(),
    closed: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1LeadsSpecialHours$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsSpecialHours$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1LeadsSpecialHours$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsSpecialHours$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1LeadsSpecialHours$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsSpecialHours$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1LeadsSpecialHours$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1LeadsSpecialHoursToJSON(
  getApiLeadScraperMicroserviceApiV1LeadsSpecialHours:
    GetApiLeadScraperMicroserviceApiV1LeadsSpecialHours,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1LeadsSpecialHours$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1LeadsSpecialHours,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1LeadsSpecialHoursFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1LeadsSpecialHours,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1LeadsSpecialHours$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1LeadsSpecialHours' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1LeadsReviews$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1LeadsReviews,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    author: z.string().optional(),
    rating: z.number().optional(),
    text: z.string().optional(),
    time: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    language: z.string().optional(),
    profilePhotoUrl: z.string().optional(),
    reviewCount: z.number().int().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1LeadsReviews$Outbound = {
  id?: string | undefined;
  author?: string | undefined;
  rating?: number | undefined;
  text?: string | undefined;
  time?: string | undefined;
  language?: string | undefined;
  profilePhotoUrl?: string | undefined;
  reviewCount?: number | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1LeadsReviews$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1LeadsReviews$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1LeadsReviews
  > = z.object({
    id: z.string().optional(),
    author: z.string().optional(),
    rating: z.number().optional(),
    text: z.string().optional(),
    time: z.date().transform(v => v.toISOString()).optional(),
    language: z.string().optional(),
    profilePhotoUrl: z.string().optional(),
    reviewCount: z.number().int().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1LeadsReviews$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsReviews$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1LeadsReviews$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsReviews$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1LeadsReviews$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsReviews$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1LeadsReviews$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1LeadsReviewsToJSON(
  getApiLeadScraperMicroserviceApiV1LeadsReviews:
    GetApiLeadScraperMicroserviceApiV1LeadsReviews,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1LeadsReviews$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1LeadsReviews,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1LeadsReviewsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1LeadsReviews,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1LeadsReviews$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1LeadsReviews' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1LeadsRevenueRange$inboundSchema:
  z.ZodNativeEnum<typeof GetApiLeadScraperMicroserviceApiV1LeadsRevenueRange> =
    z.nativeEnum(GetApiLeadScraperMicroserviceApiV1LeadsRevenueRange);

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1LeadsRevenueRange$outboundSchema:
  z.ZodNativeEnum<typeof GetApiLeadScraperMicroserviceApiV1LeadsRevenueRange> =
    GetApiLeadScraperMicroserviceApiV1LeadsRevenueRange$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1LeadsRevenueRange$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsRevenueRange$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1LeadsRevenueRange$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsRevenueRange$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1LeadsRevenueRange$outboundSchema;
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1LeadsEmployeeBenefits$inboundSchema:
  z.ZodNativeEnum<
    typeof GetApiLeadScraperMicroserviceApiV1LeadsEmployeeBenefits
  > = z.nativeEnum(GetApiLeadScraperMicroserviceApiV1LeadsEmployeeBenefits);

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1LeadsEmployeeBenefits$outboundSchema:
  z.ZodNativeEnum<
    typeof GetApiLeadScraperMicroserviceApiV1LeadsEmployeeBenefits
  > = GetApiLeadScraperMicroserviceApiV1LeadsEmployeeBenefits$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1LeadsEmployeeBenefits$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsEmployeeBenefits$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1LeadsEmployeeBenefits$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsEmployeeBenefits$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1LeadsEmployeeBenefits$outboundSchema;
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1LeadsLeads$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1LeadsLeads,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    website: z.string().optional(),
    phone: z.string().optional(),
    address: z.string().optional(),
    city: z.string().optional(),
    state: z.string().optional(),
    country: z.string().optional(),
    latitude: z.number().optional(),
    longitude: z.number().optional(),
    googleRating: z.number().optional(),
    reviewCount: z.number().int().optional(),
    industry: z.string().optional(),
    employeeCount: z.number().int().optional(),
    estimatedRevenue: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    placeId: z.string().optional(),
    googleMapsUrl: z.string().optional(),
    businessStatus: z.string().optional(),
    regularHours: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1LeadsRegularHours$inboundSchema
      ),
    ).optional(),
    specialHours: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1LeadsSpecialHours$inboundSchema
      ),
    ).optional(),
    photoReferences: z.array(z.string()).optional(),
    mainPhotoUrl: z.string().optional(),
    reviews: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1LeadsReviews$inboundSchema
      ),
    ).optional(),
    types: z.array(z.string()).optional(),
    amenities: z.array(z.string()).optional(),
    servesVegetarianFood: z.boolean().optional(),
    outdoorSeating: z.boolean().optional(),
    paymentMethods: z.array(z.string()).optional(),
    wheelchairAccessible: z.boolean().optional(),
    parkingAvailable: z.boolean().optional(),
    socialMedia: z.record(z.string()).optional(),
    ratingCategory: z.string().optional(),
    rating: z.number().optional(),
    count: z.number().int().optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    dataSourceVersion: z.string().optional(),
    scrapingSessionId: z.string().optional(),
    alternatePhones: z.array(z.string()).optional(),
    contactPersonName: z.string().optional(),
    contactPersonTitle: z.string().optional(),
    contactEmail: z.string().optional(),
    foundedYear: z.number().int().optional(),
    businessType: z.string().optional(),
    certifications: z.array(z.string()).optional(),
    licenseNumber: z.string().optional(),
    revenueRange:
      GetApiLeadScraperMicroserviceApiV1LeadsRevenueRange$inboundSchema.default(
        "REVENUE_RANGE_UNSPECIFIED",
      ),
    fundingStage: z.string().optional(),
    isPublicCompany: z.boolean().optional(),
    websiteLoadSpeed: z.number().optional(),
    hasSslCertificate: z.boolean().optional(),
    cmsUsed: z.string().optional(),
    ecommercePlatforms: z.array(z.string()).optional(),
    timezone: z.string().optional(),
    neighborhood: z.string().optional(),
    nearbyLandmarks: z.array(z.string()).optional(),
    transportationAccess: z.string().optional(),
    employeeBenefits: z.array(
      GetApiLeadScraperMicroserviceApiV1LeadsEmployeeBenefits$inboundSchema,
    ).optional(),
    parentCompany: z.string().optional(),
    subsidiaries: z.array(z.string()).optional(),
    isFranchise: z.boolean().optional(),
    seoKeywords: z.array(z.string()).optional(),
    usesGoogleAds: z.boolean().optional(),
    googleMyBusinessCategory: z.string().optional(),
    naicsCode: z.string().optional(),
    sicCode: z.string().optional(),
    unspscCode: z.string().optional(),
    isGreenCertified: z.boolean().optional(),
    energySources: z.array(z.string()).optional(),
    sustainabilityRating: z.string().optional(),
    recentAnnouncements: z.array(z.string()).optional(),
    lastProductLaunch: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    hasLitigationHistory: z.boolean().optional(),
    exportControlStatus: z.string().optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1LeadsLeads$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  website?: string | undefined;
  phone?: string | undefined;
  address?: string | undefined;
  city?: string | undefined;
  state?: string | undefined;
  country?: string | undefined;
  latitude?: number | undefined;
  longitude?: number | undefined;
  googleRating?: number | undefined;
  reviewCount?: number | undefined;
  industry?: string | undefined;
  employeeCount?: number | undefined;
  estimatedRevenue?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  placeId?: string | undefined;
  googleMapsUrl?: string | undefined;
  businessStatus?: string | undefined;
  regularHours?:
    | Array<GetApiLeadScraperMicroserviceApiV1LeadsRegularHours$Outbound>
    | undefined;
  specialHours?:
    | Array<GetApiLeadScraperMicroserviceApiV1LeadsSpecialHours$Outbound>
    | undefined;
  photoReferences?: Array<string> | undefined;
  mainPhotoUrl?: string | undefined;
  reviews?:
    | Array<GetApiLeadScraperMicroserviceApiV1LeadsReviews$Outbound>
    | undefined;
  types?: Array<string> | undefined;
  amenities?: Array<string> | undefined;
  servesVegetarianFood?: boolean | undefined;
  outdoorSeating?: boolean | undefined;
  paymentMethods?: Array<string> | undefined;
  wheelchairAccessible?: boolean | undefined;
  parkingAvailable?: boolean | undefined;
  socialMedia?: { [k: string]: string } | undefined;
  ratingCategory?: string | undefined;
  rating?: number | undefined;
  count?: number | undefined;
  lastUpdated?: string | undefined;
  dataSourceVersion?: string | undefined;
  scrapingSessionId?: string | undefined;
  alternatePhones?: Array<string> | undefined;
  contactPersonName?: string | undefined;
  contactPersonTitle?: string | undefined;
  contactEmail?: string | undefined;
  foundedYear?: number | undefined;
  businessType?: string | undefined;
  certifications?: Array<string> | undefined;
  licenseNumber?: string | undefined;
  revenueRange: string;
  fundingStage?: string | undefined;
  isPublicCompany?: boolean | undefined;
  websiteLoadSpeed?: number | undefined;
  hasSslCertificate?: boolean | undefined;
  cmsUsed?: string | undefined;
  ecommercePlatforms?: Array<string> | undefined;
  timezone?: string | undefined;
  neighborhood?: string | undefined;
  nearbyLandmarks?: Array<string> | undefined;
  transportationAccess?: string | undefined;
  employeeBenefits?: Array<string> | undefined;
  parentCompany?: string | undefined;
  subsidiaries?: Array<string> | undefined;
  isFranchise?: boolean | undefined;
  seoKeywords?: Array<string> | undefined;
  usesGoogleAds?: boolean | undefined;
  googleMyBusinessCategory?: string | undefined;
  naicsCode?: string | undefined;
  sicCode?: string | undefined;
  unspscCode?: string | undefined;
  isGreenCertified?: boolean | undefined;
  energySources?: Array<string> | undefined;
  sustainabilityRating?: string | undefined;
  recentAnnouncements?: Array<string> | undefined;
  lastProductLaunch?: string | undefined;
  hasLitigationHistory?: boolean | undefined;
  exportControlStatus?: string | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1LeadsLeads$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1LeadsLeads$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1LeadsLeads
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    website: z.string().optional(),
    phone: z.string().optional(),
    address: z.string().optional(),
    city: z.string().optional(),
    state: z.string().optional(),
    country: z.string().optional(),
    latitude: z.number().optional(),
    longitude: z.number().optional(),
    googleRating: z.number().optional(),
    reviewCount: z.number().int().optional(),
    industry: z.string().optional(),
    employeeCount: z.number().int().optional(),
    estimatedRevenue: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    placeId: z.string().optional(),
    googleMapsUrl: z.string().optional(),
    businessStatus: z.string().optional(),
    regularHours: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1LeadsRegularHours$outboundSchema
      ),
    ).optional(),
    specialHours: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1LeadsSpecialHours$outboundSchema
      ),
    ).optional(),
    photoReferences: z.array(z.string()).optional(),
    mainPhotoUrl: z.string().optional(),
    reviews: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1LeadsReviews$outboundSchema
      ),
    ).optional(),
    types: z.array(z.string()).optional(),
    amenities: z.array(z.string()).optional(),
    servesVegetarianFood: z.boolean().optional(),
    outdoorSeating: z.boolean().optional(),
    paymentMethods: z.array(z.string()).optional(),
    wheelchairAccessible: z.boolean().optional(),
    parkingAvailable: z.boolean().optional(),
    socialMedia: z.record(z.string()).optional(),
    ratingCategory: z.string().optional(),
    rating: z.number().optional(),
    count: z.number().int().optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
    dataSourceVersion: z.string().optional(),
    scrapingSessionId: z.string().optional(),
    alternatePhones: z.array(z.string()).optional(),
    contactPersonName: z.string().optional(),
    contactPersonTitle: z.string().optional(),
    contactEmail: z.string().optional(),
    foundedYear: z.number().int().optional(),
    businessType: z.string().optional(),
    certifications: z.array(z.string()).optional(),
    licenseNumber: z.string().optional(),
    revenueRange:
      GetApiLeadScraperMicroserviceApiV1LeadsRevenueRange$outboundSchema
        .default("REVENUE_RANGE_UNSPECIFIED"),
    fundingStage: z.string().optional(),
    isPublicCompany: z.boolean().optional(),
    websiteLoadSpeed: z.number().optional(),
    hasSslCertificate: z.boolean().optional(),
    cmsUsed: z.string().optional(),
    ecommercePlatforms: z.array(z.string()).optional(),
    timezone: z.string().optional(),
    neighborhood: z.string().optional(),
    nearbyLandmarks: z.array(z.string()).optional(),
    transportationAccess: z.string().optional(),
    employeeBenefits: z.array(
      GetApiLeadScraperMicroserviceApiV1LeadsEmployeeBenefits$outboundSchema,
    ).optional(),
    parentCompany: z.string().optional(),
    subsidiaries: z.array(z.string()).optional(),
    isFranchise: z.boolean().optional(),
    seoKeywords: z.array(z.string()).optional(),
    usesGoogleAds: z.boolean().optional(),
    googleMyBusinessCategory: z.string().optional(),
    naicsCode: z.string().optional(),
    sicCode: z.string().optional(),
    unspscCode: z.string().optional(),
    isGreenCertified: z.boolean().optional(),
    energySources: z.array(z.string()).optional(),
    sustainabilityRating: z.string().optional(),
    recentAnnouncements: z.array(z.string()).optional(),
    lastProductLaunch: z.date().transform(v => v.toISOString()).optional(),
    hasLitigationHistory: z.boolean().optional(),
    exportControlStatus: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1LeadsLeads$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsLeads$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1LeadsLeads$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsLeads$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1LeadsLeads$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsLeads$Outbound` instead. */
  export type Outbound = GetApiLeadScraperMicroserviceApiV1LeadsLeads$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1LeadsLeadsToJSON(
  getApiLeadScraperMicroserviceApiV1LeadsLeads:
    GetApiLeadScraperMicroserviceApiV1LeadsLeads,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1LeadsLeads$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1LeadsLeads,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1LeadsLeadsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1LeadsLeads,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1LeadsLeads$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1LeadsLeads' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1LeadsData$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1LeadsData,
    z.ZodTypeDef,
    unknown
  > = z.object({
    leads: z.array(
      z.lazy(() => GetApiLeadScraperMicroserviceApiV1LeadsLeads$inboundSchema),
    ).optional(),
    totalCount: z.number().int().optional(),
    nextPageNumber: z.number().int().optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1LeadsData$Outbound = {
  leads?:
    | Array<GetApiLeadScraperMicroserviceApiV1LeadsLeads$Outbound>
    | undefined;
  totalCount?: number | undefined;
  nextPageNumber?: number | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1LeadsData$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1LeadsData$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1LeadsData
  > = z.object({
    leads: z.array(
      z.lazy(() => GetApiLeadScraperMicroserviceApiV1LeadsLeads$outboundSchema),
    ).optional(),
    totalCount: z.number().int().optional(),
    nextPageNumber: z.number().int().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1LeadsData$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsData$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1LeadsData$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsData$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1LeadsData$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsData$Outbound` instead. */
  export type Outbound = GetApiLeadScraperMicroserviceApiV1LeadsData$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1LeadsDataToJSON(
  getApiLeadScraperMicroserviceApiV1LeadsData:
    GetApiLeadScraperMicroserviceApiV1LeadsData,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1LeadsData$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1LeadsData,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1LeadsDataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1LeadsData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1LeadsData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1LeadsData' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1LeadsResponseBody$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1LeadsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.lazy(() =>
      GetApiLeadScraperMicroserviceApiV1LeadsData$inboundSchema
    ),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1LeadsResponseBody$Outbound = {
  data: GetApiLeadScraperMicroserviceApiV1LeadsData$Outbound;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1LeadsResponseBody$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1LeadsResponseBody$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1LeadsResponseBody
  > = z.object({
    data: z.lazy(() =>
      GetApiLeadScraperMicroserviceApiV1LeadsData$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1LeadsResponseBody$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1LeadsResponseBody$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1LeadsResponseBody$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1LeadsResponseBody$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1LeadsResponseBody$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1LeadsResponseBodyToJSON(
  getApiLeadScraperMicroserviceApiV1LeadsResponseBody:
    GetApiLeadScraperMicroserviceApiV1LeadsResponseBody,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1LeadsResponseBody$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1LeadsResponseBody,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1LeadsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1LeadsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1LeadsResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1LeadsResponseBody' from JSON`,
  );
}
