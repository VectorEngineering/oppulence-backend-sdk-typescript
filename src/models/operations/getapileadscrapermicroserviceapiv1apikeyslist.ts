/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiLeadScraperMicroserviceApiV1ApiKeysListRequest = {
  organizationId?: string | undefined;
  tenantId?: string | undefined;
  accountId?: string | undefined;
  workspaceId?: string | undefined;
  pageSize?: number | undefined;
  pageNumber?: number | undefined;
  status?: string | undefined;
  search?: string | undefined;
};

export const GetApiLeadScraperMicroserviceApiV1ApiKeysListStatus = {
  StatusUnspecified: "STATUS_UNSPECIFIED",
  StatusActive: "STATUS_ACTIVE",
  StatusSuspended: "STATUS_SUSPENDED",
  StatusPendingVerification: "STATUS_PENDING_VERIFICATION",
  StatusRevoked: "STATUS_REVOKED",
  StatusExpired: "STATUS_EXPIRED",
  StatusRateLimited: "STATUS_RATE_LIMITED",
  StatusPendingReview: "STATUS_PENDING_REVIEW",
  StatusDeprecated: "STATUS_DEPRECATED",
  StatusMaintenance: "STATUS_MAINTENANCE",
} as const;
export type GetApiLeadScraperMicroserviceApiV1ApiKeysListStatus = ClosedEnum<
  typeof GetApiLeadScraperMicroserviceApiV1ApiKeysListStatus
>;

export type GetApiLeadScraperMicroserviceApiV1ApiKeysListApiKeys = {
  id?: string | undefined;
  name?: string | undefined;
  keyHash?: string | undefined;
  keyPrefix?: string | undefined;
  scopes?: Array<string> | undefined;
  allowedIps?: Array<string> | undefined;
  allowedDomains?: Array<string> | undefined;
  allowedEnvironments?: Array<string> | undefined;
  isTestKey?: boolean | undefined;
  requestsPerSecond?: number | undefined;
  requestsPerDay?: number | undefined;
  concurrentRequests?: number | undefined;
  monthlyRequestQuota?: string | undefined;
  costPerRequest?: number | undefined;
  billingTier?: string | undefined;
  totalRequests?: string | undefined;
  totalErrors?: string | undefined;
  lastUsedAt?: Date | undefined;
  averageResponseTime?: number | undefined;
  endpointUsageJson?: string | undefined;
  errorRatesJson?: string | undefined;
  recentErrors?: string | undefined;
  successfulRequestsCount?: number | undefined;
  successRate?: number | undefined;
  status?: GetApiLeadScraperMicroserviceApiV1ApiKeysListStatus | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  expiresAt?: Date | undefined;
  deletedAt?: Date | undefined;
  lastRotatedAt?: Date | undefined;
  lastSecurityReviewAt?: Date | undefined;
  requiresClientSecret?: boolean | undefined;
  clientSecretHash?: string | undefined;
  enforceHttps?: boolean | undefined;
  enforceSigning?: boolean | undefined;
  allowedSignatureAlgorithms?: Array<string> | undefined;
  enforceMutualTls?: boolean | undefined;
  clientCertificateHash?: string | undefined;
  requireRequestSigning?: boolean | undefined;
  description?: string | undefined;
  metadataJson?: string | undefined;
  tags?: Array<string> | undefined;
  apiVersion?: string | undefined;
  supportedFeatures?: Array<string> | undefined;
  documentationUrl?: string | undefined;
  supportContact?: string | undefined;
  logAllRequests?: boolean | undefined;
  lastRotationReason?: string | undefined;
  lastRotationDate?: Date | undefined;
  rotationFrequencyDays?: number | undefined;
  complianceStandards?: Array<string> | undefined;
  requiresAuditLogging?: boolean | undefined;
  dataResidency?: string | undefined;
  approvedIntegrations?: Array<string> | undefined;
  alertEmails?: Array<string> | undefined;
  webhookUrl?: string | undefined;
  alertOnQuotaThreshold?: boolean | undefined;
  quotaAlertThreshold?: number | undefined;
  alertOnErrorSpike?: boolean | undefined;
  errorAlertThreshold?: number | undefined;
  monitoringIntegrations?: Array<string> | undefined;
  encrypted?: boolean | undefined;
  dataClassification?: string | undefined;
  maxUses?: number | undefined;
  rateLimit?: number | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1ApiKeysListData = {
  apiKeys?:
    | Array<GetApiLeadScraperMicroserviceApiV1ApiKeysListApiKeys>
    | undefined;
  nextPageNumber?: number | undefined;
  totalCount?: number | undefined;
};

/**
 * Retrieves a list of API keys with optional filtering
 */
export type GetApiLeadScraperMicroserviceApiV1ApiKeysListResponseBody = {
  data: GetApiLeadScraperMicroserviceApiV1ApiKeysListData;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1ApiKeysListRequest$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1ApiKeysListRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    organizationId: z.string().optional(),
    tenantId: z.string().optional(),
    accountId: z.string().optional(),
    workspaceId: z.string().optional(),
    pageSize: z.number().optional(),
    pageNumber: z.number().optional(),
    status: z.string().optional(),
    search: z.string().optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1ApiKeysListRequest$Outbound = {
  organizationId?: string | undefined;
  tenantId?: string | undefined;
  accountId?: string | undefined;
  workspaceId?: string | undefined;
  pageSize?: number | undefined;
  pageNumber?: number | undefined;
  status?: string | undefined;
  search?: string | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1ApiKeysListRequest$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1ApiKeysListRequest$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1ApiKeysListRequest
  > = z.object({
    organizationId: z.string().optional(),
    tenantId: z.string().optional(),
    accountId: z.string().optional(),
    workspaceId: z.string().optional(),
    pageSize: z.number().optional(),
    pageNumber: z.number().optional(),
    status: z.string().optional(),
    search: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1ApiKeysListRequest$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1ApiKeysListRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1ApiKeysListRequest$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1ApiKeysListRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1ApiKeysListRequest$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1ApiKeysListRequest$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1ApiKeysListRequest$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1ApiKeysListRequestToJSON(
  getApiLeadScraperMicroserviceApiV1ApiKeysListRequest:
    GetApiLeadScraperMicroserviceApiV1ApiKeysListRequest,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1ApiKeysListRequest$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1ApiKeysListRequest,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1ApiKeysListRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1ApiKeysListRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1ApiKeysListRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1ApiKeysListRequest' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1ApiKeysListStatus$inboundSchema:
  z.ZodNativeEnum<typeof GetApiLeadScraperMicroserviceApiV1ApiKeysListStatus> =
    z.nativeEnum(GetApiLeadScraperMicroserviceApiV1ApiKeysListStatus);

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1ApiKeysListStatus$outboundSchema:
  z.ZodNativeEnum<typeof GetApiLeadScraperMicroserviceApiV1ApiKeysListStatus> =
    GetApiLeadScraperMicroserviceApiV1ApiKeysListStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1ApiKeysListStatus$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1ApiKeysListStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1ApiKeysListStatus$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1ApiKeysListStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1ApiKeysListStatus$outboundSchema;
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1ApiKeysListApiKeys$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1ApiKeysListApiKeys,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    keyHash: z.string().optional(),
    keyPrefix: z.string().optional(),
    scopes: z.array(z.string()).optional(),
    allowedIps: z.array(z.string()).optional(),
    allowedDomains: z.array(z.string()).optional(),
    allowedEnvironments: z.array(z.string()).optional(),
    isTestKey: z.boolean().optional(),
    requestsPerSecond: z.number().int().optional(),
    requestsPerDay: z.number().int().optional(),
    concurrentRequests: z.number().int().optional(),
    monthlyRequestQuota: z.string().optional(),
    costPerRequest: z.number().optional(),
    billingTier: z.string().optional(),
    totalRequests: z.string().optional(),
    totalErrors: z.string().optional(),
    lastUsedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    averageResponseTime: z.number().optional(),
    endpointUsageJson: z.string().optional(),
    errorRatesJson: z.string().optional(),
    recentErrors: z.string().optional(),
    successfulRequestsCount: z.number().int().optional(),
    successRate: z.number().optional(),
    status: GetApiLeadScraperMicroserviceApiV1ApiKeysListStatus$inboundSchema
      .default("STATUS_UNSPECIFIED"),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    lastRotatedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    lastSecurityReviewAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    requiresClientSecret: z.boolean().optional(),
    clientSecretHash: z.string().optional(),
    enforceHttps: z.boolean().optional(),
    enforceSigning: z.boolean().optional(),
    allowedSignatureAlgorithms: z.array(z.string()).optional(),
    enforceMutualTls: z.boolean().optional(),
    clientCertificateHash: z.string().optional(),
    requireRequestSigning: z.boolean().optional(),
    description: z.string().optional(),
    metadataJson: z.string().optional(),
    tags: z.array(z.string()).optional(),
    apiVersion: z.string().optional(),
    supportedFeatures: z.array(z.string()).optional(),
    documentationUrl: z.string().optional(),
    supportContact: z.string().optional(),
    logAllRequests: z.boolean().optional(),
    lastRotationReason: z.string().optional(),
    lastRotationDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    rotationFrequencyDays: z.number().int().optional(),
    complianceStandards: z.array(z.string()).optional(),
    requiresAuditLogging: z.boolean().optional(),
    dataResidency: z.string().optional(),
    approvedIntegrations: z.array(z.string()).optional(),
    alertEmails: z.array(z.string()).optional(),
    webhookUrl: z.string().optional(),
    alertOnQuotaThreshold: z.boolean().optional(),
    quotaAlertThreshold: z.number().optional(),
    alertOnErrorSpike: z.boolean().optional(),
    errorAlertThreshold: z.number().optional(),
    monitoringIntegrations: z.array(z.string()).optional(),
    encrypted: z.boolean().optional(),
    dataClassification: z.string().optional(),
    maxUses: z.number().int().optional(),
    rateLimit: z.number().int().optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1ApiKeysListApiKeys$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  keyHash?: string | undefined;
  keyPrefix?: string | undefined;
  scopes?: Array<string> | undefined;
  allowedIps?: Array<string> | undefined;
  allowedDomains?: Array<string> | undefined;
  allowedEnvironments?: Array<string> | undefined;
  isTestKey?: boolean | undefined;
  requestsPerSecond?: number | undefined;
  requestsPerDay?: number | undefined;
  concurrentRequests?: number | undefined;
  monthlyRequestQuota?: string | undefined;
  costPerRequest?: number | undefined;
  billingTier?: string | undefined;
  totalRequests?: string | undefined;
  totalErrors?: string | undefined;
  lastUsedAt?: string | undefined;
  averageResponseTime?: number | undefined;
  endpointUsageJson?: string | undefined;
  errorRatesJson?: string | undefined;
  recentErrors?: string | undefined;
  successfulRequestsCount?: number | undefined;
  successRate?: number | undefined;
  status: string;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  expiresAt?: string | undefined;
  deletedAt?: string | undefined;
  lastRotatedAt?: string | undefined;
  lastSecurityReviewAt?: string | undefined;
  requiresClientSecret?: boolean | undefined;
  clientSecretHash?: string | undefined;
  enforceHttps?: boolean | undefined;
  enforceSigning?: boolean | undefined;
  allowedSignatureAlgorithms?: Array<string> | undefined;
  enforceMutualTls?: boolean | undefined;
  clientCertificateHash?: string | undefined;
  requireRequestSigning?: boolean | undefined;
  description?: string | undefined;
  metadataJson?: string | undefined;
  tags?: Array<string> | undefined;
  apiVersion?: string | undefined;
  supportedFeatures?: Array<string> | undefined;
  documentationUrl?: string | undefined;
  supportContact?: string | undefined;
  logAllRequests?: boolean | undefined;
  lastRotationReason?: string | undefined;
  lastRotationDate?: string | undefined;
  rotationFrequencyDays?: number | undefined;
  complianceStandards?: Array<string> | undefined;
  requiresAuditLogging?: boolean | undefined;
  dataResidency?: string | undefined;
  approvedIntegrations?: Array<string> | undefined;
  alertEmails?: Array<string> | undefined;
  webhookUrl?: string | undefined;
  alertOnQuotaThreshold?: boolean | undefined;
  quotaAlertThreshold?: number | undefined;
  alertOnErrorSpike?: boolean | undefined;
  errorAlertThreshold?: number | undefined;
  monitoringIntegrations?: Array<string> | undefined;
  encrypted?: boolean | undefined;
  dataClassification?: string | undefined;
  maxUses?: number | undefined;
  rateLimit?: number | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1ApiKeysListApiKeys$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1ApiKeysListApiKeys$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1ApiKeysListApiKeys
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    keyHash: z.string().optional(),
    keyPrefix: z.string().optional(),
    scopes: z.array(z.string()).optional(),
    allowedIps: z.array(z.string()).optional(),
    allowedDomains: z.array(z.string()).optional(),
    allowedEnvironments: z.array(z.string()).optional(),
    isTestKey: z.boolean().optional(),
    requestsPerSecond: z.number().int().optional(),
    requestsPerDay: z.number().int().optional(),
    concurrentRequests: z.number().int().optional(),
    monthlyRequestQuota: z.string().optional(),
    costPerRequest: z.number().optional(),
    billingTier: z.string().optional(),
    totalRequests: z.string().optional(),
    totalErrors: z.string().optional(),
    lastUsedAt: z.date().transform(v => v.toISOString()).optional(),
    averageResponseTime: z.number().optional(),
    endpointUsageJson: z.string().optional(),
    errorRatesJson: z.string().optional(),
    recentErrors: z.string().optional(),
    successfulRequestsCount: z.number().int().optional(),
    successRate: z.number().optional(),
    status: GetApiLeadScraperMicroserviceApiV1ApiKeysListStatus$outboundSchema
      .default("STATUS_UNSPECIFIED"),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    lastRotatedAt: z.date().transform(v => v.toISOString()).optional(),
    lastSecurityReviewAt: z.date().transform(v => v.toISOString()).optional(),
    requiresClientSecret: z.boolean().optional(),
    clientSecretHash: z.string().optional(),
    enforceHttps: z.boolean().optional(),
    enforceSigning: z.boolean().optional(),
    allowedSignatureAlgorithms: z.array(z.string()).optional(),
    enforceMutualTls: z.boolean().optional(),
    clientCertificateHash: z.string().optional(),
    requireRequestSigning: z.boolean().optional(),
    description: z.string().optional(),
    metadataJson: z.string().optional(),
    tags: z.array(z.string()).optional(),
    apiVersion: z.string().optional(),
    supportedFeatures: z.array(z.string()).optional(),
    documentationUrl: z.string().optional(),
    supportContact: z.string().optional(),
    logAllRequests: z.boolean().optional(),
    lastRotationReason: z.string().optional(),
    lastRotationDate: z.date().transform(v => v.toISOString()).optional(),
    rotationFrequencyDays: z.number().int().optional(),
    complianceStandards: z.array(z.string()).optional(),
    requiresAuditLogging: z.boolean().optional(),
    dataResidency: z.string().optional(),
    approvedIntegrations: z.array(z.string()).optional(),
    alertEmails: z.array(z.string()).optional(),
    webhookUrl: z.string().optional(),
    alertOnQuotaThreshold: z.boolean().optional(),
    quotaAlertThreshold: z.number().optional(),
    alertOnErrorSpike: z.boolean().optional(),
    errorAlertThreshold: z.number().optional(),
    monitoringIntegrations: z.array(z.string()).optional(),
    encrypted: z.boolean().optional(),
    dataClassification: z.string().optional(),
    maxUses: z.number().int().optional(),
    rateLimit: z.number().int().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1ApiKeysListApiKeys$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1ApiKeysListApiKeys$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1ApiKeysListApiKeys$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1ApiKeysListApiKeys$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1ApiKeysListApiKeys$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1ApiKeysListApiKeys$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1ApiKeysListApiKeys$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1ApiKeysListApiKeysToJSON(
  getApiLeadScraperMicroserviceApiV1ApiKeysListApiKeys:
    GetApiLeadScraperMicroserviceApiV1ApiKeysListApiKeys,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1ApiKeysListApiKeys$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1ApiKeysListApiKeys,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1ApiKeysListApiKeysFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1ApiKeysListApiKeys,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1ApiKeysListApiKeys$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1ApiKeysListApiKeys' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1ApiKeysListData$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1ApiKeysListData,
    z.ZodTypeDef,
    unknown
  > = z.object({
    apiKeys: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1ApiKeysListApiKeys$inboundSchema
      ),
    ).optional(),
    nextPageNumber: z.number().int().optional(),
    totalCount: z.number().int().optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1ApiKeysListData$Outbound = {
  apiKeys?:
    | Array<GetApiLeadScraperMicroserviceApiV1ApiKeysListApiKeys$Outbound>
    | undefined;
  nextPageNumber?: number | undefined;
  totalCount?: number | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1ApiKeysListData$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1ApiKeysListData$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1ApiKeysListData
  > = z.object({
    apiKeys: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1ApiKeysListApiKeys$outboundSchema
      ),
    ).optional(),
    nextPageNumber: z.number().int().optional(),
    totalCount: z.number().int().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1ApiKeysListData$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1ApiKeysListData$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1ApiKeysListData$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1ApiKeysListData$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1ApiKeysListData$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1ApiKeysListData$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1ApiKeysListData$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1ApiKeysListDataToJSON(
  getApiLeadScraperMicroserviceApiV1ApiKeysListData:
    GetApiLeadScraperMicroserviceApiV1ApiKeysListData,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1ApiKeysListData$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1ApiKeysListData,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1ApiKeysListDataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1ApiKeysListData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1ApiKeysListData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1ApiKeysListData' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1ApiKeysListResponseBody$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1ApiKeysListResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.lazy(() =>
      GetApiLeadScraperMicroserviceApiV1ApiKeysListData$inboundSchema
    ),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1ApiKeysListResponseBody$Outbound =
  {
    data: GetApiLeadScraperMicroserviceApiV1ApiKeysListData$Outbound;
  };

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1ApiKeysListResponseBody$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1ApiKeysListResponseBody$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1ApiKeysListResponseBody
  > = z.object({
    data: z.lazy(() =>
      GetApiLeadScraperMicroserviceApiV1ApiKeysListData$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1ApiKeysListResponseBody$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1ApiKeysListResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1ApiKeysListResponseBody$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1ApiKeysListResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1ApiKeysListResponseBody$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1ApiKeysListResponseBody$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1ApiKeysListResponseBody$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1ApiKeysListResponseBodyToJSON(
  getApiLeadScraperMicroserviceApiV1ApiKeysListResponseBody:
    GetApiLeadScraperMicroserviceApiV1ApiKeysListResponseBody,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1ApiKeysListResponseBody$outboundSchema
      .parse(getApiLeadScraperMicroserviceApiV1ApiKeysListResponseBody),
  );
}

export function getApiLeadScraperMicroserviceApiV1ApiKeysListResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1ApiKeysListResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1ApiKeysListResponseBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1ApiKeysListResponseBody' from JSON`,
  );
}
