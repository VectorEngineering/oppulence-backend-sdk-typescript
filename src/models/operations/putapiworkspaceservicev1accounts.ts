/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PutApiWorkspaceServiceV1AccountsComplianceLevel = {
  ComplianceLevelUnspecified: "COMPLIANCE_LEVEL_UNSPECIFIED",
  ComplianceLevelNone: "COMPLIANCE_LEVEL_NONE",
  ComplianceLevelBasic: "COMPLIANCE_LEVEL_BASIC",
  ComplianceLevelAdvanced: "COMPLIANCE_LEVEL_ADVANCED",
  ComplianceLevelEnterprise: "COMPLIANCE_LEVEL_ENTERPRISE",
} as const;
export type PutApiWorkspaceServiceV1AccountsComplianceLevel = ClosedEnum<
  typeof PutApiWorkspaceServiceV1AccountsComplianceLevel
>;

export type PutApiWorkspaceServiceV1AccountsEmbeddings = {
  id?: string | undefined;
  embeddings?: Array<number> | undefined;
  modelVersion?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsVersions = {
  id?: string | undefined;
  fileId?: string | undefined;
  versionNumber?: number | undefined;
  s3Key?: string | undefined;
  size?: string | undefined;
  commitMessage?: string | undefined;
  authorId?: string | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsComments = {
  id?: string | undefined;
  authorId?: string | undefined;
  content?: string | undefined;
  startPosition?: number | undefined;
  endPosition?: number | undefined;
  resolved?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsSharing = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsSnapshots = {
  id?: string | undefined;
  fileId?: string | undefined;
  snapshotHash?: string | undefined;
  content?: string | undefined;
  authorId?: string | undefined;
  reason?: string | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsFiles = {
  id?: string | undefined;
  name?: string | undefined;
  size?: string | undefined;
  s3Key?: string | undefined;
  s3BucketName?: string | undefined;
  isDeleted?: boolean | undefined;
  version?: number | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  embeddings?: PutApiWorkspaceServiceV1AccountsEmbeddings | undefined;
  versions?: Array<PutApiWorkspaceServiceV1AccountsVersions> | undefined;
  comments?: Array<PutApiWorkspaceServiceV1AccountsComments> | undefined;
  sharing?: Array<PutApiWorkspaceServiceV1AccountsSharing> | undefined;
  snapshots?: Array<PutApiWorkspaceServiceV1AccountsSnapshots> | undefined;
};

export type PutApiWorkspaceServiceV1AccountsFolders = {
  id?: string | undefined;
  name?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  isDeleted?: boolean | undefined;
  parentFolderId?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  files?: Array<PutApiWorkspaceServiceV1AccountsFiles> | undefined;
};

export const PutApiWorkspaceServiceV1AccountsTemplateType = {
  TemplateTypeUnspecified: "TEMPLATE_TYPE_UNSPECIFIED",
  TemplateTypeStandard: "TEMPLATE_TYPE_STANDARD",
  TemplateTypeSmart: "TEMPLATE_TYPE_SMART",
  TemplateTypeAdaptive: "TEMPLATE_TYPE_ADAPTIVE",
  TemplateTypeAiGenerated: "TEMPLATE_TYPE_AI_GENERATED",
} as const;
export type PutApiWorkspaceServiceV1AccountsTemplateType = ClosedEnum<
  typeof PutApiWorkspaceServiceV1AccountsTemplateType
>;

export type PutApiWorkspaceServiceV1AccountsAccountsVersions = {
  id?: string | undefined;
  templateId?: string | undefined;
  version?: string | undefined;
  baseContent?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  authorId?: string | undefined;
  changeDescription?: string | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsVariables = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  variableType?: string | undefined;
  defaultValue?: string | undefined;
  isRequired?: boolean | undefined;
  validationRules?: string | undefined;
  dataSource?: string | undefined;
  aiExtractionRules?: string | undefined;
  alternatives?: Array<string> | undefined;
  templateId?: string | undefined;
};

export const PutApiWorkspaceServiceV1AccountsStatus = {
  DocumentStatusUnspecified: "DOCUMENT_STATUS_UNSPECIFIED",
  DocumentStatusDraft: "DOCUMENT_STATUS_DRAFT",
  DocumentStatusInReview: "DOCUMENT_STATUS_IN_REVIEW",
  DocumentStatusApproved: "DOCUMENT_STATUS_APPROVED",
  DocumentStatusRejected: "DOCUMENT_STATUS_REJECTED",
  DocumentStatusExpired: "DOCUMENT_STATUS_EXPIRED",
  DocumentStatusArchived: "DOCUMENT_STATUS_ARCHIVED",
} as const;
export type PutApiWorkspaceServiceV1AccountsStatus = ClosedEnum<
  typeof PutApiWorkspaceServiceV1AccountsStatus
>;

export const PutApiWorkspaceServiceV1AccountsAccountsStatus = {
  SignatureStatusUnspecified: "SIGNATURE_STATUS_UNSPECIFIED",
  SignatureStatusPending: "SIGNATURE_STATUS_PENDING",
  SignatureStatusSigned: "SIGNATURE_STATUS_SIGNED",
  SignatureStatusRejected: "SIGNATURE_STATUS_REJECTED",
  SignatureStatusExpired: "SIGNATURE_STATUS_EXPIRED",
  SignatureStatusRevoked: "SIGNATURE_STATUS_REVOKED",
} as const;
export type PutApiWorkspaceServiceV1AccountsAccountsStatus = ClosedEnum<
  typeof PutApiWorkspaceServiceV1AccountsAccountsStatus
>;

export type PutApiWorkspaceServiceV1AccountsSignatureBlocks = {
  id?: string | undefined;
  requestId?: string | undefined;
  blockType?: string | undefined;
  pageNumber?: number | undefined;
  xPosition?: number | undefined;
  yPosition?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
  isRequired?: boolean | undefined;
  signatureData?: string | undefined;
  signedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsWorkflow = {
  id?: string | undefined;
  requestId?: string | undefined;
  signingOrder?: Array<string> | undefined;
  currentSigner?: string | undefined;
  workflowStatus?: string | undefined;
  parallelSigning?: boolean | undefined;
  requireAllSignatures?: boolean | undefined;
  deadline?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsSignatureRequests = {
  id?: string | undefined;
  status?: PutApiWorkspaceServiceV1AccountsAccountsStatus | undefined;
  signerEmail?: string | undefined;
  signerName?: string | undefined;
  role?: string | undefined;
  authenticationMethod?: string | undefined;
  expiresAt?: Date | undefined;
  requiresMfa?: boolean | undefined;
  signatureType?: string | undefined;
  reminderSchedule?: Array<string> | undefined;
  documentId?: string | undefined;
  signatureBlocks?:
    | Array<PutApiWorkspaceServiceV1AccountsSignatureBlocks>
    | undefined;
  workflow?: PutApiWorkspaceServiceV1AccountsWorkflow | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAiAssistance = {
  id?: string | undefined;
  documentId?: string | undefined;
  interactionType?: string | undefined;
  userQuery?: string | undefined;
  aiResponse?: string | undefined;
  context?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsRounds = {
  id?: string | undefined;
  historyId?: string | undefined;
  roundNumber?: number | undefined;
  proposerId?: string | undefined;
  proposalContent?: string | undefined;
  responseContent?: string | undefined;
  status?: string | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsNegotiation = {
  id?: string | undefined;
  documentId?: string | undefined;
  rounds?: Array<PutApiWorkspaceServiceV1AccountsRounds> | undefined;
  currentStatus?: string | undefined;
  startedAt?: Date | undefined;
  lastUpdated?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsMerges = {
  id?: string | undefined;
  branchId?: string | undefined;
  sourceBranch?: string | undefined;
  targetBranch?: string | undefined;
  mergeStatus?: string | undefined;
  mergeStrategy?: string | undefined;
  conflicts?: Array<string> | undefined;
  mergerId?: string | undefined;
  createdAt?: Date | undefined;
  completedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsPolicy = {
  id?: string | undefined;
  branchId?: string | undefined;
  requiredApprovers?: Array<string> | undefined;
  minimumApprovals?: number | undefined;
  enforceLinearHistory?: boolean | undefined;
  allowForcePush?: boolean | undefined;
  protectedPaths?: Array<string> | undefined;
  mergeRules?: { [k: string]: string } | undefined;
  automatedChecks?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsMergeRequests = {
  id?: string | undefined;
  sourceBranchId?: string | undefined;
  targetBranchId?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  authorId?: string | undefined;
  reviewers?: Array<string> | undefined;
  status?: string | undefined;
  labels?: Array<string> | undefined;
  hasConflicts?: boolean | undefined;
  automatedCheckResults?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsBranches = {
  id?: string | undefined;
  name?: string | undefined;
  baseVersionHash?: string | undefined;
  currentHeadHash?: string | undefined;
  purpose?: string | undefined;
  status?: string | undefined;
  reviewers?: Array<string> | undefined;
  branchMetadata?: { [k: string]: string } | undefined;
  isLocked?: boolean | undefined;
  lastUpdated?: Date | undefined;
  merges?: Array<PutApiWorkspaceServiceV1AccountsMerges> | undefined;
  policy?: PutApiWorkspaceServiceV1AccountsPolicy | undefined;
  mergeRequests?:
    | Array<PutApiWorkspaceServiceV1AccountsMergeRequests>
    | undefined;
};

export type PutApiWorkspaceServiceV1AccountsChanges = {
  id?: string | undefined;
  versionId?: string | undefined;
  changeType?: string | undefined;
  contentBefore?: string | undefined;
  contentAfter?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsSummaries = {
  id?: string | undefined;
  versionId?: string | undefined;
  summaryType?: string | undefined;
  content?: string | undefined;
  targetAudience?: string | undefined;
  keyPoints?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsRequestVersions = {
  id?: string | undefined;
  versionHash?: string | undefined;
  parentHash?: string | undefined;
  commitMessage?: string | undefined;
  authorId?: string | undefined;
  branchName?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  tags?: Array<string> | undefined;
  isApproved?: boolean | undefined;
  approvalChain?: string | undefined;
  createdAt?: Date | undefined;
  branches?: Array<PutApiWorkspaceServiceV1AccountsBranches> | undefined;
  changes?: Array<PutApiWorkspaceServiceV1AccountsChanges> | undefined;
  summaries?: Array<PutApiWorkspaceServiceV1AccountsSummaries> | undefined;
};

export type PutApiWorkspaceServiceV1AccountsInstances = {
  id?: string | undefined;
  templateId?: string | undefined;
  status?: PutApiWorkspaceServiceV1AccountsStatus | undefined;
  fieldValues?: { [k: string]: string } | undefined;
  signers?: Array<string> | undefined;
  language?: string | undefined;
  isCompleted?: boolean | undefined;
  dueDate?: Date | undefined;
  generatedContent?: string | undefined;
  attachments?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  signatureRequests?:
    | Array<PutApiWorkspaceServiceV1AccountsSignatureRequests>
    | undefined;
  aiAssistance?:
    | Array<PutApiWorkspaceServiceV1AccountsAiAssistance>
    | undefined;
  negotiation?: PutApiWorkspaceServiceV1AccountsNegotiation | undefined;
  versions?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsRequestVersions>
    | undefined;
};

export type PutApiWorkspaceServiceV1AccountsExplanations = {
  id?: string | undefined;
  templateId?: string | undefined;
  sectionIdentifier?: string | undefined;
  explanationText?: string | undefined;
  complexityLevel?: string | undefined;
  relatedTerms?: Array<string> | undefined;
  legalReferences?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsRiskAssessments = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  riskType?: string | undefined;
  riskScore?: number | undefined;
  assessmentDetails?: string | undefined;
  mitigationSuggestions?: Array<string> | undefined;
  assessorId?: string | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsComplianceChecks = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  complianceStandard?: string | undefined;
  checkResult?: string | undefined;
  violations?: Array<string> | undefined;
  remediationSteps?: string | undefined;
  checkDate?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsIntelligence = {
  id?: string | undefined;
  contractType?: string | undefined;
  riskScores?: { [k: string]: number } | undefined;
  detectedClauses?: { [k: string]: string } | undefined;
  keyObligations?: Array<string> | undefined;
  complianceScores?: { [k: string]: number } | undefined;
  jurisdiction?: string | undefined;
  governingLaws?: Array<string> | undefined;
  semanticAnalysis?: { [k: string]: string } | undefined;
  analysisDate?: Date | undefined;
  riskAssessments?:
    | Array<PutApiWorkspaceServiceV1AccountsRiskAssessments>
    | undefined;
  complianceChecks?:
    | Array<PutApiWorkspaceServiceV1AccountsComplianceChecks>
    | undefined;
};

export type PutApiWorkspaceServiceV1AccountsTemplates = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  industryType?: string | undefined;
  documentType?: string | undefined;
  baseContent?: string | undefined;
  isAdaptive?: boolean | undefined;
  metadata?: { [k: string]: string } | undefined;
  supportedLanguages?: Array<string> | undefined;
  requiredDataFields?: Array<string> | undefined;
  version?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  templateType?: PutApiWorkspaceServiceV1AccountsTemplateType | undefined;
  content?: string | undefined;
  detectedVariables?: Array<string> | undefined;
  variableMappings?: { [k: string]: string } | undefined;
  isContextAware?: boolean | undefined;
  supportedContexts?: Array<string> | undefined;
  formattingRules?: { [k: string]: string } | undefined;
  conditionalSections?: Array<string> | undefined;
  versions?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsVersions>
    | undefined;
  variables?: Array<PutApiWorkspaceServiceV1AccountsVariables> | undefined;
  instances?: Array<PutApiWorkspaceServiceV1AccountsInstances> | undefined;
  explanations?:
    | Array<PutApiWorkspaceServiceV1AccountsExplanations>
    | undefined;
  intelligence?:
    | Array<PutApiWorkspaceServiceV1AccountsIntelligence>
    | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsSharing = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsActivities = {
  id?: string | undefined;
  activityType?: string | undefined;
  userId?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsCompliance = {
  id?: string | undefined;
  complianceType?: string | undefined;
  status?: string | undefined;
  certificationId?: string | undefined;
  validUntil?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export const PutApiWorkspaceServiceV1AccountsCategory = {
  AppCategoryUnspecified: "APP_CATEGORY_UNSPECIFIED",
  AppCategoryContractAutomation: "APP_CATEGORY_CONTRACT_AUTOMATION",
  AppCategoryContractAnalysis: "APP_CATEGORY_CONTRACT_ANALYSIS",
  AppCategoryIntegration: "APP_CATEGORY_INTEGRATION",
  AppCategoryAiPowered: "APP_CATEGORY_AI_POWERED",
  AppCategoryWorkflow: "APP_CATEGORY_WORKFLOW",
  AppCategoryCompliance: "APP_CATEGORY_COMPLIANCE",
} as const;
export type PutApiWorkspaceServiceV1AccountsCategory = ClosedEnum<
  typeof PutApiWorkspaceServiceV1AccountsCategory
>;

export const PutApiWorkspaceServiceV1AccountsPricingModel = {
  PricingModelUnspecified: "PRICING_MODEL_UNSPECIFIED",
  PricingModelFree: "PRICING_MODEL_FREE",
  PricingModelSubscription: "PRICING_MODEL_SUBSCRIPTION",
  PricingModelUsageBased: "PRICING_MODEL_USAGE_BASED",
  PricingModelEnterprise: "PRICING_MODEL_ENTERPRISE",
} as const;
export type PutApiWorkspaceServiceV1AccountsPricingModel = ClosedEnum<
  typeof PutApiWorkspaceServiceV1AccountsPricingModel
>;

export type PutApiWorkspaceServiceV1AccountsAccountsRequestRequestBodyVersions =
  {
    id?: string | undefined;
    appId?: string | undefined;
    versionNumber?: string | undefined;
    changelog?: string | undefined;
    requirements?: { [k: string]: string } | undefined;
    isPublic?: boolean | undefined;
    releaseDate?: Date | undefined;
  };

export type PutApiWorkspaceServiceV1AccountsInstallations = {
  id?: string | undefined;
  appId?: string | undefined;
  workspaceId?: string | undefined;
  versionInstalled?: string | undefined;
  configuration?: { [k: string]: string } | undefined;
  installationStatus?: string | undefined;
  installedAt?: Date | undefined;
  lastUsed?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAnalytics = {
  id?: string | undefined;
  appId?: string | undefined;
  metricName?: string | undefined;
  metricValue?: number | undefined;
  dimensions?: { [k: string]: string } | undefined;
  recordedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsReviews = {
  id?: string | undefined;
  appId?: string | undefined;
  reviewerId?: string | undefined;
  rating?: number | undefined;
  reviewText?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsInfo = {
  id?: string | undefined;
  appId?: string | undefined;
  supportedLanguages?: Array<string> | undefined;
  sdkFeatures?: Array<string> | undefined;
  testCoverage?: { [k: string]: number } | undefined;
  securityScans?: Array<string> | undefined;
  performanceMetrics?: { [k: string]: string } | undefined;
  developmentStatus?: string | undefined;
  knownIssues?: Array<string> | undefined;
  roadmapUrl?: string | undefined;
  lastSecurityAudit?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsWebhooks = {
  id?: string | undefined;
  appId?: string | undefined;
  url?: string | undefined;
  subscribedEvents?: Array<string> | undefined;
  secretKey?: string | undefined;
  retryCount?: number | undefined;
  timeoutSeconds?: number | undefined;
  isActive?: boolean | undefined;
  headers?: { [k: string]: string } | undefined;
  lastTriggered?: Date | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsPermissions = {
  id?: string | undefined;
  appId?: string | undefined;
  scope?: string | undefined;
  description?: string | undefined;
  isRequired?: boolean | undefined;
  accessLevels?: Array<string> | undefined;
  constraints?: { [k: string]: string } | undefined;
  requiresApproval?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsInstalledApps = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  developerId?: string | undefined;
  category?: PutApiWorkspaceServiceV1AccountsCategory | undefined;
  supportedContractTypes?: Array<string> | undefined;
  features?: Array<string> | undefined;
  pricingModel?: PutApiWorkspaceServiceV1AccountsPricingModel | undefined;
  pricingTiers?: { [k: string]: number } | undefined;
  supportedIntegrations?: Array<string> | undefined;
  isVerified?: boolean | undefined;
  rating?: number | undefined;
  installationCount?: number | undefined;
  requiredPermissions?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  documentationUrl?: string | undefined;
  supportEmail?: string | undefined;
  screenshots?: Array<string> | undefined;
  privacyPolicyUrl?: string | undefined;
  termsUrl?: string | undefined;
  publishedAt?: Date | undefined;
  lastUpdated?: Date | undefined;
  versions?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsRequestRequestBodyVersions>
    | undefined;
  installations?:
    | Array<PutApiWorkspaceServiceV1AccountsInstallations>
    | undefined;
  analytics?: Array<PutApiWorkspaceServiceV1AccountsAnalytics> | undefined;
  reviews?: Array<PutApiWorkspaceServiceV1AccountsReviews> | undefined;
  info?: PutApiWorkspaceServiceV1AccountsInfo | undefined;
  webhooks?: Array<PutApiWorkspaceServiceV1AccountsWebhooks> | undefined;
  permissions?: Array<PutApiWorkspaceServiceV1AccountsPermissions> | undefined;
};

export type PutApiWorkspaceServiceV1AccountsWorkspaces = {
  id?: string | undefined;
  name?: string | undefined;
  uniqueIdentifier?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  storageQuota?: string | undefined;
  usedStorage?: string | undefined;
  allowPublicSharing?: boolean | undefined;
  requireApproval?: boolean | undefined;
  gdprCompliant?: boolean | undefined;
  hipaaCompliant?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  folders?: Array<PutApiWorkspaceServiceV1AccountsFolders> | undefined;
  templates?: Array<PutApiWorkspaceServiceV1AccountsTemplates> | undefined;
  sharing?: Array<PutApiWorkspaceServiceV1AccountsAccountsSharing> | undefined;
  activities?: Array<PutApiWorkspaceServiceV1AccountsActivities> | undefined;
  compliance?: Array<PutApiWorkspaceServiceV1AccountsCompliance> | undefined;
  installedApps?:
    | Array<PutApiWorkspaceServiceV1AccountsInstalledApps>
    | undefined;
};

export type DataProfiles = {
  id?: string | undefined;
  name?: string | undefined;
  profileType?: string | undefined;
  dataFields?: { [k: string]: string } | undefined;
  isDefault?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccount = {
  id?: string | undefined;
  auth0UserId?: string | undefined;
  email?: string | undefined;
  baseDirectory?: string | undefined;
  bucketName?: string | undefined;
  region?: string | undefined;
  orgId?: string | undefined;
  tenantId?: string | undefined;
  roles?: Array<string> | undefined;
  permissions?: Array<string> | undefined;
  mfaEnabled?: boolean | undefined;
  complianceLevel?: PutApiWorkspaceServiceV1AccountsComplianceLevel | undefined;
  preferences?: { [k: string]: string } | undefined;
  apiKeys?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  workspaces?: Array<PutApiWorkspaceServiceV1AccountsWorkspaces> | undefined;
  dataProfiles?: Array<DataProfiles> | undefined;
};

export type PutApiWorkspaceServiceV1AccountsRequestBody = {
  account?: PutApiWorkspaceServiceV1AccountsAccount | undefined;
};

export const PutApiWorkspaceServiceV1AccountsAccountsComplianceLevel = {
  ComplianceLevelUnspecified: "COMPLIANCE_LEVEL_UNSPECIFIED",
  ComplianceLevelNone: "COMPLIANCE_LEVEL_NONE",
  ComplianceLevelBasic: "COMPLIANCE_LEVEL_BASIC",
  ComplianceLevelAdvanced: "COMPLIANCE_LEVEL_ADVANCED",
  ComplianceLevelEnterprise: "COMPLIANCE_LEVEL_ENTERPRISE",
} as const;
export type PutApiWorkspaceServiceV1AccountsAccountsComplianceLevel =
  ClosedEnum<typeof PutApiWorkspaceServiceV1AccountsAccountsComplianceLevel>;

export type PutApiWorkspaceServiceV1AccountsAccountsEmbeddings = {
  id?: string | undefined;
  embeddings?: Array<number> | undefined;
  modelVersion?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONResponseBodyVersions =
  {
    id?: string | undefined;
    fileId?: string | undefined;
    versionNumber?: number | undefined;
    s3Key?: string | undefined;
    size?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    createdAt?: Date | undefined;
  };

export type PutApiWorkspaceServiceV1AccountsAccountsComments = {
  id?: string | undefined;
  authorId?: string | undefined;
  content?: string | undefined;
  startPosition?: number | undefined;
  endPosition?: number | undefined;
  resolved?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsResponse200Sharing = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsSnapshots = {
  id?: string | undefined;
  fileId?: string | undefined;
  snapshotHash?: string | undefined;
  content?: string | undefined;
  authorId?: string | undefined;
  reason?: string | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsFiles = {
  id?: string | undefined;
  name?: string | undefined;
  size?: string | undefined;
  s3Key?: string | undefined;
  s3BucketName?: string | undefined;
  isDeleted?: boolean | undefined;
  version?: number | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  embeddings?: PutApiWorkspaceServiceV1AccountsAccountsEmbeddings | undefined;
  versions?:
    | Array<
      PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONResponseBodyVersions
    >
    | undefined;
  comments?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsComments>
    | undefined;
  sharing?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsResponse200Sharing>
    | undefined;
  snapshots?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsSnapshots>
    | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsFolders = {
  id?: string | undefined;
  name?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  isDeleted?: boolean | undefined;
  parentFolderId?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  files?: Array<PutApiWorkspaceServiceV1AccountsAccountsFiles> | undefined;
};

export const PutApiWorkspaceServiceV1AccountsAccountsTemplateType = {
  TemplateTypeUnspecified: "TEMPLATE_TYPE_UNSPECIFIED",
  TemplateTypeStandard: "TEMPLATE_TYPE_STANDARD",
  TemplateTypeSmart: "TEMPLATE_TYPE_SMART",
  TemplateTypeAdaptive: "TEMPLATE_TYPE_ADAPTIVE",
  TemplateTypeAiGenerated: "TEMPLATE_TYPE_AI_GENERATED",
} as const;
export type PutApiWorkspaceServiceV1AccountsAccountsTemplateType = ClosedEnum<
  typeof PutApiWorkspaceServiceV1AccountsAccountsTemplateType
>;

export type PutApiWorkspaceServiceV1AccountsAccountsResponseVersions = {
  id?: string | undefined;
  templateId?: string | undefined;
  version?: string | undefined;
  baseContent?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  authorId?: string | undefined;
  changeDescription?: string | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsVariables = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  variableType?: string | undefined;
  defaultValue?: string | undefined;
  isRequired?: boolean | undefined;
  validationRules?: string | undefined;
  dataSource?: string | undefined;
  aiExtractionRules?: string | undefined;
  alternatives?: Array<string> | undefined;
  templateId?: string | undefined;
};

export const PutApiWorkspaceServiceV1AccountsAccountsResponseStatus = {
  DocumentStatusUnspecified: "DOCUMENT_STATUS_UNSPECIFIED",
  DocumentStatusDraft: "DOCUMENT_STATUS_DRAFT",
  DocumentStatusInReview: "DOCUMENT_STATUS_IN_REVIEW",
  DocumentStatusApproved: "DOCUMENT_STATUS_APPROVED",
  DocumentStatusRejected: "DOCUMENT_STATUS_REJECTED",
  DocumentStatusExpired: "DOCUMENT_STATUS_EXPIRED",
  DocumentStatusArchived: "DOCUMENT_STATUS_ARCHIVED",
} as const;
export type PutApiWorkspaceServiceV1AccountsAccountsResponseStatus = ClosedEnum<
  typeof PutApiWorkspaceServiceV1AccountsAccountsResponseStatus
>;

export const PutApiWorkspaceServiceV1AccountsAccountsResponse200Status = {
  SignatureStatusUnspecified: "SIGNATURE_STATUS_UNSPECIFIED",
  SignatureStatusPending: "SIGNATURE_STATUS_PENDING",
  SignatureStatusSigned: "SIGNATURE_STATUS_SIGNED",
  SignatureStatusRejected: "SIGNATURE_STATUS_REJECTED",
  SignatureStatusExpired: "SIGNATURE_STATUS_EXPIRED",
  SignatureStatusRevoked: "SIGNATURE_STATUS_REVOKED",
} as const;
export type PutApiWorkspaceServiceV1AccountsAccountsResponse200Status =
  ClosedEnum<typeof PutApiWorkspaceServiceV1AccountsAccountsResponse200Status>;

export type PutApiWorkspaceServiceV1AccountsAccountsSignatureBlocks = {
  id?: string | undefined;
  requestId?: string | undefined;
  blockType?: string | undefined;
  pageNumber?: number | undefined;
  xPosition?: number | undefined;
  yPosition?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
  isRequired?: boolean | undefined;
  signatureData?: string | undefined;
  signedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsWorkflow = {
  id?: string | undefined;
  requestId?: string | undefined;
  signingOrder?: Array<string> | undefined;
  currentSigner?: string | undefined;
  workflowStatus?: string | undefined;
  parallelSigning?: boolean | undefined;
  requireAllSignatures?: boolean | undefined;
  deadline?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsSignatureRequests = {
  id?: string | undefined;
  status?:
    | PutApiWorkspaceServiceV1AccountsAccountsResponse200Status
    | undefined;
  signerEmail?: string | undefined;
  signerName?: string | undefined;
  role?: string | undefined;
  authenticationMethod?: string | undefined;
  expiresAt?: Date | undefined;
  requiresMfa?: boolean | undefined;
  signatureType?: string | undefined;
  reminderSchedule?: Array<string> | undefined;
  documentId?: string | undefined;
  signatureBlocks?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsSignatureBlocks>
    | undefined;
  workflow?: PutApiWorkspaceServiceV1AccountsAccountsWorkflow | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsAiAssistance = {
  id?: string | undefined;
  documentId?: string | undefined;
  interactionType?: string | undefined;
  userQuery?: string | undefined;
  aiResponse?: string | undefined;
  context?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsRounds = {
  id?: string | undefined;
  historyId?: string | undefined;
  roundNumber?: number | undefined;
  proposerId?: string | undefined;
  proposalContent?: string | undefined;
  responseContent?: string | undefined;
  status?: string | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsNegotiation = {
  id?: string | undefined;
  documentId?: string | undefined;
  rounds?: Array<PutApiWorkspaceServiceV1AccountsAccountsRounds> | undefined;
  currentStatus?: string | undefined;
  startedAt?: Date | undefined;
  lastUpdated?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsMerges = {
  id?: string | undefined;
  branchId?: string | undefined;
  sourceBranch?: string | undefined;
  targetBranch?: string | undefined;
  mergeStatus?: string | undefined;
  mergeStrategy?: string | undefined;
  conflicts?: Array<string> | undefined;
  mergerId?: string | undefined;
  createdAt?: Date | undefined;
  completedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsPolicy = {
  id?: string | undefined;
  branchId?: string | undefined;
  requiredApprovers?: Array<string> | undefined;
  minimumApprovals?: number | undefined;
  enforceLinearHistory?: boolean | undefined;
  allowForcePush?: boolean | undefined;
  protectedPaths?: Array<string> | undefined;
  mergeRules?: { [k: string]: string } | undefined;
  automatedChecks?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsMergeRequests = {
  id?: string | undefined;
  sourceBranchId?: string | undefined;
  targetBranchId?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  authorId?: string | undefined;
  reviewers?: Array<string> | undefined;
  status?: string | undefined;
  labels?: Array<string> | undefined;
  hasConflicts?: boolean | undefined;
  automatedCheckResults?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsBranches = {
  id?: string | undefined;
  name?: string | undefined;
  baseVersionHash?: string | undefined;
  currentHeadHash?: string | undefined;
  purpose?: string | undefined;
  status?: string | undefined;
  reviewers?: Array<string> | undefined;
  branchMetadata?: { [k: string]: string } | undefined;
  isLocked?: boolean | undefined;
  lastUpdated?: Date | undefined;
  merges?: Array<PutApiWorkspaceServiceV1AccountsAccountsMerges> | undefined;
  policy?: PutApiWorkspaceServiceV1AccountsAccountsPolicy | undefined;
  mergeRequests?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsMergeRequests>
    | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsChanges = {
  id?: string | undefined;
  versionId?: string | undefined;
  changeType?: string | undefined;
  contentBefore?: string | undefined;
  contentAfter?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsSummaries = {
  id?: string | undefined;
  versionId?: string | undefined;
  summaryType?: string | undefined;
  content?: string | undefined;
  targetAudience?: string | undefined;
  keyPoints?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONVersions =
  {
    id?: string | undefined;
    versionHash?: string | undefined;
    parentHash?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    branchName?: string | undefined;
    metadata?: { [k: string]: string } | undefined;
    tags?: Array<string> | undefined;
    isApproved?: boolean | undefined;
    approvalChain?: string | undefined;
    createdAt?: Date | undefined;
    branches?:
      | Array<PutApiWorkspaceServiceV1AccountsAccountsBranches>
      | undefined;
    changes?:
      | Array<PutApiWorkspaceServiceV1AccountsAccountsChanges>
      | undefined;
    summaries?:
      | Array<PutApiWorkspaceServiceV1AccountsAccountsSummaries>
      | undefined;
  };

export type PutApiWorkspaceServiceV1AccountsAccountsInstances = {
  id?: string | undefined;
  templateId?: string | undefined;
  status?: PutApiWorkspaceServiceV1AccountsAccountsResponseStatus | undefined;
  fieldValues?: { [k: string]: string } | undefined;
  signers?: Array<string> | undefined;
  language?: string | undefined;
  isCompleted?: boolean | undefined;
  dueDate?: Date | undefined;
  generatedContent?: string | undefined;
  attachments?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  signatureRequests?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsSignatureRequests>
    | undefined;
  aiAssistance?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsAiAssistance>
    | undefined;
  negotiation?: PutApiWorkspaceServiceV1AccountsAccountsNegotiation | undefined;
  versions?:
    | Array<
      PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONVersions
    >
    | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsExplanations = {
  id?: string | undefined;
  templateId?: string | undefined;
  sectionIdentifier?: string | undefined;
  explanationText?: string | undefined;
  complexityLevel?: string | undefined;
  relatedTerms?: Array<string> | undefined;
  legalReferences?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsRiskAssessments = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  riskType?: string | undefined;
  riskScore?: number | undefined;
  assessmentDetails?: string | undefined;
  mitigationSuggestions?: Array<string> | undefined;
  assessorId?: string | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsComplianceChecks = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  complianceStandard?: string | undefined;
  checkResult?: string | undefined;
  violations?: Array<string> | undefined;
  remediationSteps?: string | undefined;
  checkDate?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsIntelligence = {
  id?: string | undefined;
  contractType?: string | undefined;
  riskScores?: { [k: string]: number } | undefined;
  detectedClauses?: { [k: string]: string } | undefined;
  keyObligations?: Array<string> | undefined;
  complianceScores?: { [k: string]: number } | undefined;
  jurisdiction?: string | undefined;
  governingLaws?: Array<string> | undefined;
  semanticAnalysis?: { [k: string]: string } | undefined;
  analysisDate?: Date | undefined;
  riskAssessments?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsRiskAssessments>
    | undefined;
  complianceChecks?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsComplianceChecks>
    | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsTemplates = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  industryType?: string | undefined;
  documentType?: string | undefined;
  baseContent?: string | undefined;
  isAdaptive?: boolean | undefined;
  metadata?: { [k: string]: string } | undefined;
  supportedLanguages?: Array<string> | undefined;
  requiredDataFields?: Array<string> | undefined;
  version?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  templateType?:
    | PutApiWorkspaceServiceV1AccountsAccountsTemplateType
    | undefined;
  content?: string | undefined;
  detectedVariables?: Array<string> | undefined;
  variableMappings?: { [k: string]: string } | undefined;
  isContextAware?: boolean | undefined;
  supportedContexts?: Array<string> | undefined;
  formattingRules?: { [k: string]: string } | undefined;
  conditionalSections?: Array<string> | undefined;
  versions?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsResponseVersions>
    | undefined;
  variables?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsVariables>
    | undefined;
  instances?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsInstances>
    | undefined;
  explanations?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsExplanations>
    | undefined;
  intelligence?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsIntelligence>
    | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsResponseSharing = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsActivities = {
  id?: string | undefined;
  activityType?: string | undefined;
  userId?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsCompliance = {
  id?: string | undefined;
  complianceType?: string | undefined;
  status?: string | undefined;
  certificationId?: string | undefined;
  validUntil?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export const PutApiWorkspaceServiceV1AccountsAccountsCategory = {
  AppCategoryUnspecified: "APP_CATEGORY_UNSPECIFIED",
  AppCategoryContractAutomation: "APP_CATEGORY_CONTRACT_AUTOMATION",
  AppCategoryContractAnalysis: "APP_CATEGORY_CONTRACT_ANALYSIS",
  AppCategoryIntegration: "APP_CATEGORY_INTEGRATION",
  AppCategoryAiPowered: "APP_CATEGORY_AI_POWERED",
  AppCategoryWorkflow: "APP_CATEGORY_WORKFLOW",
  AppCategoryCompliance: "APP_CATEGORY_COMPLIANCE",
} as const;
export type PutApiWorkspaceServiceV1AccountsAccountsCategory = ClosedEnum<
  typeof PutApiWorkspaceServiceV1AccountsAccountsCategory
>;

export const PutApiWorkspaceServiceV1AccountsAccountsPricingModel = {
  PricingModelUnspecified: "PRICING_MODEL_UNSPECIFIED",
  PricingModelFree: "PRICING_MODEL_FREE",
  PricingModelSubscription: "PRICING_MODEL_SUBSCRIPTION",
  PricingModelUsageBased: "PRICING_MODEL_USAGE_BASED",
  PricingModelEnterprise: "PRICING_MODEL_ENTERPRISE",
} as const;
export type PutApiWorkspaceServiceV1AccountsAccountsPricingModel = ClosedEnum<
  typeof PutApiWorkspaceServiceV1AccountsAccountsPricingModel
>;

export type PutApiWorkspaceServiceV1AccountsAccountsResponse200Versions = {
  id?: string | undefined;
  appId?: string | undefined;
  versionNumber?: string | undefined;
  changelog?: string | undefined;
  requirements?: { [k: string]: string } | undefined;
  isPublic?: boolean | undefined;
  releaseDate?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsInstallations = {
  id?: string | undefined;
  appId?: string | undefined;
  workspaceId?: string | undefined;
  versionInstalled?: string | undefined;
  configuration?: { [k: string]: string } | undefined;
  installationStatus?: string | undefined;
  installedAt?: Date | undefined;
  lastUsed?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsAnalytics = {
  id?: string | undefined;
  appId?: string | undefined;
  metricName?: string | undefined;
  metricValue?: number | undefined;
  dimensions?: { [k: string]: string } | undefined;
  recordedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsReviews = {
  id?: string | undefined;
  appId?: string | undefined;
  reviewerId?: string | undefined;
  rating?: number | undefined;
  reviewText?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsInfo = {
  id?: string | undefined;
  appId?: string | undefined;
  supportedLanguages?: Array<string> | undefined;
  sdkFeatures?: Array<string> | undefined;
  testCoverage?: { [k: string]: number } | undefined;
  securityScans?: Array<string> | undefined;
  performanceMetrics?: { [k: string]: string } | undefined;
  developmentStatus?: string | undefined;
  knownIssues?: Array<string> | undefined;
  roadmapUrl?: string | undefined;
  lastSecurityAudit?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsWebhooks = {
  id?: string | undefined;
  appId?: string | undefined;
  url?: string | undefined;
  subscribedEvents?: Array<string> | undefined;
  secretKey?: string | undefined;
  retryCount?: number | undefined;
  timeoutSeconds?: number | undefined;
  isActive?: boolean | undefined;
  headers?: { [k: string]: string } | undefined;
  lastTriggered?: Date | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsPermissions = {
  id?: string | undefined;
  appId?: string | undefined;
  scope?: string | undefined;
  description?: string | undefined;
  isRequired?: boolean | undefined;
  accessLevels?: Array<string> | undefined;
  constraints?: { [k: string]: string } | undefined;
  requiresApproval?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsInstalledApps = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  developerId?: string | undefined;
  category?: PutApiWorkspaceServiceV1AccountsAccountsCategory | undefined;
  supportedContractTypes?: Array<string> | undefined;
  features?: Array<string> | undefined;
  pricingModel?:
    | PutApiWorkspaceServiceV1AccountsAccountsPricingModel
    | undefined;
  pricingTiers?: { [k: string]: number } | undefined;
  supportedIntegrations?: Array<string> | undefined;
  isVerified?: boolean | undefined;
  rating?: number | undefined;
  installationCount?: number | undefined;
  requiredPermissions?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  documentationUrl?: string | undefined;
  supportEmail?: string | undefined;
  screenshots?: Array<string> | undefined;
  privacyPolicyUrl?: string | undefined;
  termsUrl?: string | undefined;
  publishedAt?: Date | undefined;
  lastUpdated?: Date | undefined;
  versions?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsResponse200Versions>
    | undefined;
  installations?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsInstallations>
    | undefined;
  analytics?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsAnalytics>
    | undefined;
  reviews?: Array<PutApiWorkspaceServiceV1AccountsAccountsReviews> | undefined;
  info?: PutApiWorkspaceServiceV1AccountsAccountsInfo | undefined;
  webhooks?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsWebhooks>
    | undefined;
  permissions?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsPermissions>
    | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsWorkspaces = {
  id?: string | undefined;
  name?: string | undefined;
  uniqueIdentifier?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  storageQuota?: string | undefined;
  usedStorage?: string | undefined;
  allowPublicSharing?: boolean | undefined;
  requireApproval?: boolean | undefined;
  gdprCompliant?: boolean | undefined;
  hipaaCompliant?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  folders?: Array<PutApiWorkspaceServiceV1AccountsAccountsFolders> | undefined;
  templates?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsTemplates>
    | undefined;
  sharing?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsResponseSharing>
    | undefined;
  activities?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsActivities>
    | undefined;
  compliance?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsCompliance>
    | undefined;
  installedApps?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsInstalledApps>
    | undefined;
};

export type PutApiWorkspaceServiceV1AccountsDataProfiles = {
  id?: string | undefined;
  name?: string | undefined;
  profileType?: string | undefined;
  dataFields?: { [k: string]: string } | undefined;
  isDefault?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1AccountsAccountsAccount = {
  id?: string | undefined;
  auth0UserId?: string | undefined;
  email?: string | undefined;
  baseDirectory?: string | undefined;
  bucketName?: string | undefined;
  region?: string | undefined;
  orgId?: string | undefined;
  tenantId?: string | undefined;
  roles?: Array<string> | undefined;
  permissions?: Array<string> | undefined;
  mfaEnabled?: boolean | undefined;
  complianceLevel?:
    | PutApiWorkspaceServiceV1AccountsAccountsComplianceLevel
    | undefined;
  preferences?: { [k: string]: string } | undefined;
  apiKeys?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  workspaces?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsWorkspaces>
    | undefined;
  dataProfiles?:
    | Array<PutApiWorkspaceServiceV1AccountsDataProfiles>
    | undefined;
};

export type PutApiWorkspaceServiceV1AccountsResponseBody = {
  account?: PutApiWorkspaceServiceV1AccountsAccountsAccount | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsComplianceLevel$inboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1AccountsComplianceLevel> = z
    .nativeEnum(PutApiWorkspaceServiceV1AccountsComplianceLevel);

/** @internal */
export const PutApiWorkspaceServiceV1AccountsComplianceLevel$outboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1AccountsComplianceLevel> =
    PutApiWorkspaceServiceV1AccountsComplianceLevel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsComplianceLevel$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsComplianceLevel$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsComplianceLevel$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsComplianceLevel$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsComplianceLevel$outboundSchema;
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsEmbeddings$inboundSchema:
  z.ZodType<PutApiWorkspaceServiceV1AccountsEmbeddings, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      embeddings: z.array(z.number()).optional(),
      modelVersion: z.string().optional(),
      createdAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      updatedAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
    });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsEmbeddings$Outbound = {
  id?: string | undefined;
  embeddings?: Array<number> | undefined;
  modelVersion?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsEmbeddings$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsEmbeddings$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsEmbeddings
  > = z.object({
    id: z.string().optional(),
    embeddings: z.array(z.number()).optional(),
    modelVersion: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsEmbeddings$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsEmbeddings$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsEmbeddings$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsEmbeddings$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsEmbeddings$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsEmbeddings$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsEmbeddings$Outbound;
}

export function putApiWorkspaceServiceV1AccountsEmbeddingsToJSON(
  putApiWorkspaceServiceV1AccountsEmbeddings:
    PutApiWorkspaceServiceV1AccountsEmbeddings,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsEmbeddings$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsEmbeddings,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsEmbeddingsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsEmbeddings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsEmbeddings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsEmbeddings' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsVersions$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsVersions,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  fileId: z.string().optional(),
  versionNumber: z.number().int().optional(),
  s3Key: z.string().optional(),
  size: z.string().optional(),
  commitMessage: z.string().optional(),
  authorId: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1AccountsVersions$Outbound = {
  id?: string | undefined;
  fileId?: string | undefined;
  versionNumber?: number | undefined;
  s3Key?: string | undefined;
  size?: string | undefined;
  commitMessage?: string | undefined;
  authorId?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsVersions$outboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsVersions$Outbound,
  z.ZodTypeDef,
  PutApiWorkspaceServiceV1AccountsVersions
> = z.object({
  id: z.string().optional(),
  fileId: z.string().optional(),
  versionNumber: z.number().int().optional(),
  s3Key: z.string().optional(),
  size: z.string().optional(),
  commitMessage: z.string().optional(),
  authorId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsVersions$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsVersions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsVersions$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsVersions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsVersions$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsVersions$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsVersions$Outbound;
}

export function putApiWorkspaceServiceV1AccountsVersionsToJSON(
  putApiWorkspaceServiceV1AccountsVersions:
    PutApiWorkspaceServiceV1AccountsVersions,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsVersions$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsVersions,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsVersions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsVersions' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsComments$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsComments,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  authorId: z.string().optional(),
  content: z.string().optional(),
  startPosition: z.number().int().optional(),
  endPosition: z.number().int().optional(),
  resolved: z.boolean().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1AccountsComments$Outbound = {
  id?: string | undefined;
  authorId?: string | undefined;
  content?: string | undefined;
  startPosition?: number | undefined;
  endPosition?: number | undefined;
  resolved?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsComments$outboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsComments$Outbound,
  z.ZodTypeDef,
  PutApiWorkspaceServiceV1AccountsComments
> = z.object({
  id: z.string().optional(),
  authorId: z.string().optional(),
  content: z.string().optional(),
  startPosition: z.number().int().optional(),
  endPosition: z.number().int().optional(),
  resolved: z.boolean().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsComments$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsComments$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsComments$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsComments$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsComments$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsComments$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsComments$Outbound;
}

export function putApiWorkspaceServiceV1AccountsCommentsToJSON(
  putApiWorkspaceServiceV1AccountsComments:
    PutApiWorkspaceServiceV1AccountsComments,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsComments$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsComments,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsCommentsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsComments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsComments$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsComments' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsSharing$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsSharing,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  sharedWithEmail: z.string().optional(),
  permissionLevel: z.string().optional(),
  expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1AccountsSharing$Outbound = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsSharing$outboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsSharing$Outbound,
  z.ZodTypeDef,
  PutApiWorkspaceServiceV1AccountsSharing
> = z.object({
  id: z.string().optional(),
  sharedWithEmail: z.string().optional(),
  permissionLevel: z.string().optional(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsSharing$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsSharing$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsSharing$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsSharing$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsSharing$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsSharing$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsSharing$Outbound;
}

export function putApiWorkspaceServiceV1AccountsSharingToJSON(
  putApiWorkspaceServiceV1AccountsSharing:
    PutApiWorkspaceServiceV1AccountsSharing,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsSharing$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsSharing,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsSharingFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsSharing,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsSharing$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsSharing' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsSnapshots$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsSnapshots,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  fileId: z.string().optional(),
  snapshotHash: z.string().optional(),
  content: z.string().optional(),
  authorId: z.string().optional(),
  reason: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1AccountsSnapshots$Outbound = {
  id?: string | undefined;
  fileId?: string | undefined;
  snapshotHash?: string | undefined;
  content?: string | undefined;
  authorId?: string | undefined;
  reason?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsSnapshots$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsSnapshots$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsSnapshots
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    snapshotHash: z.string().optional(),
    content: z.string().optional(),
    authorId: z.string().optional(),
    reason: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsSnapshots$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsSnapshots$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsSnapshots$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsSnapshots$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsSnapshots$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsSnapshots$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsSnapshots$Outbound;
}

export function putApiWorkspaceServiceV1AccountsSnapshotsToJSON(
  putApiWorkspaceServiceV1AccountsSnapshots:
    PutApiWorkspaceServiceV1AccountsSnapshots,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsSnapshots$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsSnapshots,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsSnapshotsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsSnapshots,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsSnapshots$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsSnapshots' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsFiles$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsFiles,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  size: z.string().optional(),
  s3Key: z.string().optional(),
  s3BucketName: z.string().optional(),
  isDeleted: z.boolean().optional(),
  version: z.number().int().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  embeddings: z.lazy(() =>
    PutApiWorkspaceServiceV1AccountsEmbeddings$inboundSchema
  ).optional(),
  versions: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1AccountsVersions$inboundSchema),
  ).optional(),
  comments: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1AccountsComments$inboundSchema),
  ).optional(),
  sharing: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1AccountsSharing$inboundSchema),
  ).optional(),
  snapshots: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1AccountsSnapshots$inboundSchema),
  ).optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1AccountsFiles$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  size?: string | undefined;
  s3Key?: string | undefined;
  s3BucketName?: string | undefined;
  isDeleted?: boolean | undefined;
  version?: number | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  embeddings?: PutApiWorkspaceServiceV1AccountsEmbeddings$Outbound | undefined;
  versions?:
    | Array<PutApiWorkspaceServiceV1AccountsVersions$Outbound>
    | undefined;
  comments?:
    | Array<PutApiWorkspaceServiceV1AccountsComments$Outbound>
    | undefined;
  sharing?: Array<PutApiWorkspaceServiceV1AccountsSharing$Outbound> | undefined;
  snapshots?:
    | Array<PutApiWorkspaceServiceV1AccountsSnapshots$Outbound>
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsFiles$outboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsFiles$Outbound,
  z.ZodTypeDef,
  PutApiWorkspaceServiceV1AccountsFiles
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  size: z.string().optional(),
  s3Key: z.string().optional(),
  s3BucketName: z.string().optional(),
  isDeleted: z.boolean().optional(),
  version: z.number().int().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  deletedAt: z.date().transform(v => v.toISOString()).optional(),
  embeddings: z.lazy(() =>
    PutApiWorkspaceServiceV1AccountsEmbeddings$outboundSchema
  ).optional(),
  versions: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1AccountsVersions$outboundSchema),
  ).optional(),
  comments: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1AccountsComments$outboundSchema),
  ).optional(),
  sharing: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1AccountsSharing$outboundSchema),
  ).optional(),
  snapshots: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1AccountsSnapshots$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsFiles$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsFiles$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsFiles$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsFiles$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsFiles$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsFiles$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsFiles$Outbound;
}

export function putApiWorkspaceServiceV1AccountsFilesToJSON(
  putApiWorkspaceServiceV1AccountsFiles: PutApiWorkspaceServiceV1AccountsFiles,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsFiles$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsFiles,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsFilesFromJSON(
  jsonString: string,
): SafeParseResult<PutApiWorkspaceServiceV1AccountsFiles, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsFiles$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsFiles' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsFolders$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsFolders,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  s3BucketName: z.string().optional(),
  s3FolderPath: z.string().optional(),
  isDeleted: z.boolean().optional(),
  parentFolderId: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  files: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1AccountsFiles$inboundSchema),
  ).optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1AccountsFolders$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  isDeleted?: boolean | undefined;
  parentFolderId?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  files?: Array<PutApiWorkspaceServiceV1AccountsFiles$Outbound> | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsFolders$outboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsFolders$Outbound,
  z.ZodTypeDef,
  PutApiWorkspaceServiceV1AccountsFolders
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  s3BucketName: z.string().optional(),
  s3FolderPath: z.string().optional(),
  isDeleted: z.boolean().optional(),
  parentFolderId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  deletedAt: z.date().transform(v => v.toISOString()).optional(),
  files: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1AccountsFiles$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsFolders$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsFolders$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsFolders$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsFolders$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsFolders$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsFolders$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsFolders$Outbound;
}

export function putApiWorkspaceServiceV1AccountsFoldersToJSON(
  putApiWorkspaceServiceV1AccountsFolders:
    PutApiWorkspaceServiceV1AccountsFolders,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsFolders$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsFolders,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsFoldersFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsFolders,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsFolders$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsFolders' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsTemplateType$inboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1AccountsTemplateType> = z
    .nativeEnum(PutApiWorkspaceServiceV1AccountsTemplateType);

/** @internal */
export const PutApiWorkspaceServiceV1AccountsTemplateType$outboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1AccountsTemplateType> =
    PutApiWorkspaceServiceV1AccountsTemplateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsTemplateType$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsTemplateType$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsTemplateType$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsTemplateType$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsTemplateType$outboundSchema;
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsVersions$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    version: z.string().optional(),
    baseContent: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    authorId: z.string().optional(),
    changeDescription: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsVersions$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  version?: string | undefined;
  baseContent?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  authorId?: string | undefined;
  changeDescription?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsVersions$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsVersions$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsVersions
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    version: z.string().optional(),
    baseContent: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    authorId: z.string().optional(),
    changeDescription: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsVersions$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsVersions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsVersions$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsVersions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsVersions$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsVersions$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsVersions$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsVersionsToJSON(
  putApiWorkspaceServiceV1AccountsAccountsVersions:
    PutApiWorkspaceServiceV1AccountsAccountsVersions,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsVersions$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsVersions,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsVersions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsVersions' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsVariables$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsVariables,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  variableType: z.string().optional(),
  defaultValue: z.string().optional(),
  isRequired: z.boolean().optional(),
  validationRules: z.string().optional(),
  dataSource: z.string().optional(),
  aiExtractionRules: z.string().optional(),
  alternatives: z.array(z.string()).optional(),
  templateId: z.string().optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1AccountsVariables$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  variableType?: string | undefined;
  defaultValue?: string | undefined;
  isRequired?: boolean | undefined;
  validationRules?: string | undefined;
  dataSource?: string | undefined;
  aiExtractionRules?: string | undefined;
  alternatives?: Array<string> | undefined;
  templateId?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsVariables$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsVariables$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsVariables
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    variableType: z.string().optional(),
    defaultValue: z.string().optional(),
    isRequired: z.boolean().optional(),
    validationRules: z.string().optional(),
    dataSource: z.string().optional(),
    aiExtractionRules: z.string().optional(),
    alternatives: z.array(z.string()).optional(),
    templateId: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsVariables$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsVariables$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsVariables$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsVariables$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsVariables$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsVariables$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsVariables$Outbound;
}

export function putApiWorkspaceServiceV1AccountsVariablesToJSON(
  putApiWorkspaceServiceV1AccountsVariables:
    PutApiWorkspaceServiceV1AccountsVariables,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsVariables$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsVariables,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsVariablesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsVariables,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsVariables$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsVariables' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsStatus$inboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1AccountsStatus> = z.nativeEnum(
    PutApiWorkspaceServiceV1AccountsStatus,
  );

/** @internal */
export const PutApiWorkspaceServiceV1AccountsStatus$outboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1AccountsStatus> =
    PutApiWorkspaceServiceV1AccountsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsStatus$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsStatus$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsStatus$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsStatus$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsStatus$outboundSchema;
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsStatus$inboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1AccountsAccountsStatus> = z
    .nativeEnum(PutApiWorkspaceServiceV1AccountsAccountsStatus);

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsStatus$outboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1AccountsAccountsStatus> =
    PutApiWorkspaceServiceV1AccountsAccountsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsStatus$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsStatus$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsStatus$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsStatus$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsStatus$outboundSchema;
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsSignatureBlocks$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsSignatureBlocks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    blockType: z.string().optional(),
    pageNumber: z.number().int().optional(),
    xPosition: z.number().optional(),
    yPosition: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    isRequired: z.boolean().optional(),
    signatureData: z.string().optional(),
    signedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsSignatureBlocks$Outbound = {
  id?: string | undefined;
  requestId?: string | undefined;
  blockType?: string | undefined;
  pageNumber?: number | undefined;
  xPosition?: number | undefined;
  yPosition?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
  isRequired?: boolean | undefined;
  signatureData?: string | undefined;
  signedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsSignatureBlocks$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsSignatureBlocks$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsSignatureBlocks
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    blockType: z.string().optional(),
    pageNumber: z.number().int().optional(),
    xPosition: z.number().optional(),
    yPosition: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    isRequired: z.boolean().optional(),
    signatureData: z.string().optional(),
    signedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsSignatureBlocks$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsSignatureBlocks$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsSignatureBlocks$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsSignatureBlocks$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsSignatureBlocks$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsSignatureBlocks$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsSignatureBlocks$Outbound;
}

export function putApiWorkspaceServiceV1AccountsSignatureBlocksToJSON(
  putApiWorkspaceServiceV1AccountsSignatureBlocks:
    PutApiWorkspaceServiceV1AccountsSignatureBlocks,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsSignatureBlocks$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsSignatureBlocks,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsSignatureBlocksFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsSignatureBlocks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsSignatureBlocks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsSignatureBlocks' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsWorkflow$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsWorkflow,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  requestId: z.string().optional(),
  signingOrder: z.array(z.string()).optional(),
  currentSigner: z.string().optional(),
  workflowStatus: z.string().optional(),
  parallelSigning: z.boolean().optional(),
  requireAllSignatures: z.boolean().optional(),
  deadline: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1AccountsWorkflow$Outbound = {
  id?: string | undefined;
  requestId?: string | undefined;
  signingOrder?: Array<string> | undefined;
  currentSigner?: string | undefined;
  workflowStatus?: string | undefined;
  parallelSigning?: boolean | undefined;
  requireAllSignatures?: boolean | undefined;
  deadline?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsWorkflow$outboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsWorkflow$Outbound,
  z.ZodTypeDef,
  PutApiWorkspaceServiceV1AccountsWorkflow
> = z.object({
  id: z.string().optional(),
  requestId: z.string().optional(),
  signingOrder: z.array(z.string()).optional(),
  currentSigner: z.string().optional(),
  workflowStatus: z.string().optional(),
  parallelSigning: z.boolean().optional(),
  requireAllSignatures: z.boolean().optional(),
  deadline: z.date().transform(v => v.toISOString()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsWorkflow$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsWorkflow$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsWorkflow$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsWorkflow$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsWorkflow$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsWorkflow$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsWorkflow$Outbound;
}

export function putApiWorkspaceServiceV1AccountsWorkflowToJSON(
  putApiWorkspaceServiceV1AccountsWorkflow:
    PutApiWorkspaceServiceV1AccountsWorkflow,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsWorkflow$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsWorkflow,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsWorkflowFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsWorkflow,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsWorkflow$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsWorkflow' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsSignatureRequests$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsSignatureRequests,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    status: PutApiWorkspaceServiceV1AccountsAccountsStatus$inboundSchema
      .default("SIGNATURE_STATUS_UNSPECIFIED"),
    signerEmail: z.string().optional(),
    signerName: z.string().optional(),
    role: z.string().optional(),
    authenticationMethod: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    requiresMfa: z.boolean().optional(),
    signatureType: z.string().optional(),
    reminderSchedule: z.array(z.string()).optional(),
    documentId: z.string().optional(),
    signatureBlocks: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsSignatureBlocks$inboundSchema
      ),
    ).optional(),
    workflow: z.lazy(() =>
      PutApiWorkspaceServiceV1AccountsWorkflow$inboundSchema
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsSignatureRequests$Outbound = {
  id?: string | undefined;
  status: string;
  signerEmail?: string | undefined;
  signerName?: string | undefined;
  role?: string | undefined;
  authenticationMethod?: string | undefined;
  expiresAt?: string | undefined;
  requiresMfa?: boolean | undefined;
  signatureType?: string | undefined;
  reminderSchedule?: Array<string> | undefined;
  documentId?: string | undefined;
  signatureBlocks?:
    | Array<PutApiWorkspaceServiceV1AccountsSignatureBlocks$Outbound>
    | undefined;
  workflow?: PutApiWorkspaceServiceV1AccountsWorkflow$Outbound | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsSignatureRequests$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsSignatureRequests$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsSignatureRequests
  > = z.object({
    id: z.string().optional(),
    status: PutApiWorkspaceServiceV1AccountsAccountsStatus$outboundSchema
      .default("SIGNATURE_STATUS_UNSPECIFIED"),
    signerEmail: z.string().optional(),
    signerName: z.string().optional(),
    role: z.string().optional(),
    authenticationMethod: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    requiresMfa: z.boolean().optional(),
    signatureType: z.string().optional(),
    reminderSchedule: z.array(z.string()).optional(),
    documentId: z.string().optional(),
    signatureBlocks: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsSignatureBlocks$outboundSchema
      ),
    ).optional(),
    workflow: z.lazy(() =>
      PutApiWorkspaceServiceV1AccountsWorkflow$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsSignatureRequests$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsSignatureRequests$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsSignatureRequests$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsSignatureRequests$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsSignatureRequests$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsSignatureRequests$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsSignatureRequests$Outbound;
}

export function putApiWorkspaceServiceV1AccountsSignatureRequestsToJSON(
  putApiWorkspaceServiceV1AccountsSignatureRequests:
    PutApiWorkspaceServiceV1AccountsSignatureRequests,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsSignatureRequests$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsSignatureRequests,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsSignatureRequestsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsSignatureRequests,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsSignatureRequests$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsSignatureRequests' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAiAssistance$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAiAssistance,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    interactionType: z.string().optional(),
    userQuery: z.string().optional(),
    aiResponse: z.string().optional(),
    context: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAiAssistance$Outbound = {
  id?: string | undefined;
  documentId?: string | undefined;
  interactionType?: string | undefined;
  userQuery?: string | undefined;
  aiResponse?: string | undefined;
  context?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAiAssistance$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAiAssistance$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAiAssistance
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    interactionType: z.string().optional(),
    userQuery: z.string().optional(),
    aiResponse: z.string().optional(),
    context: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAiAssistance$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAiAssistance$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAiAssistance$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAiAssistance$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAiAssistance$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAiAssistance$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsAiAssistance$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAiAssistanceToJSON(
  putApiWorkspaceServiceV1AccountsAiAssistance:
    PutApiWorkspaceServiceV1AccountsAiAssistance,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAiAssistance$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAiAssistance,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAiAssistanceFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAiAssistance,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAiAssistance$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAiAssistance' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsRounds$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsRounds,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  historyId: z.string().optional(),
  roundNumber: z.number().int().optional(),
  proposerId: z.string().optional(),
  proposalContent: z.string().optional(),
  responseContent: z.string().optional(),
  status: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1AccountsRounds$Outbound = {
  id?: string | undefined;
  historyId?: string | undefined;
  roundNumber?: number | undefined;
  proposerId?: string | undefined;
  proposalContent?: string | undefined;
  responseContent?: string | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsRounds$outboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsRounds$Outbound,
  z.ZodTypeDef,
  PutApiWorkspaceServiceV1AccountsRounds
> = z.object({
  id: z.string().optional(),
  historyId: z.string().optional(),
  roundNumber: z.number().int().optional(),
  proposerId: z.string().optional(),
  proposalContent: z.string().optional(),
  responseContent: z.string().optional(),
  status: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsRounds$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsRounds$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsRounds$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsRounds$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsRounds$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsRounds$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsRounds$Outbound;
}

export function putApiWorkspaceServiceV1AccountsRoundsToJSON(
  putApiWorkspaceServiceV1AccountsRounds:
    PutApiWorkspaceServiceV1AccountsRounds,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsRounds$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsRounds,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsRoundsFromJSON(
  jsonString: string,
): SafeParseResult<PutApiWorkspaceServiceV1AccountsRounds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsRounds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsRounds' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsNegotiation$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsNegotiation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    rounds: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsRounds$inboundSchema),
    ).optional(),
    currentStatus: z.string().optional(),
    startedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsNegotiation$Outbound = {
  id?: string | undefined;
  documentId?: string | undefined;
  rounds?: Array<PutApiWorkspaceServiceV1AccountsRounds$Outbound> | undefined;
  currentStatus?: string | undefined;
  startedAt?: string | undefined;
  lastUpdated?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsNegotiation$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsNegotiation$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsNegotiation
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    rounds: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsRounds$outboundSchema),
    ).optional(),
    currentStatus: z.string().optional(),
    startedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsNegotiation$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsNegotiation$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsNegotiation$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsNegotiation$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsNegotiation$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsNegotiation$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsNegotiation$Outbound;
}

export function putApiWorkspaceServiceV1AccountsNegotiationToJSON(
  putApiWorkspaceServiceV1AccountsNegotiation:
    PutApiWorkspaceServiceV1AccountsNegotiation,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsNegotiation$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsNegotiation,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsNegotiationFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsNegotiation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsNegotiation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsNegotiation' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsMerges$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsMerges,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  branchId: z.string().optional(),
  sourceBranch: z.string().optional(),
  targetBranch: z.string().optional(),
  mergeStatus: z.string().optional(),
  mergeStrategy: z.string().optional(),
  conflicts: z.array(z.string()).optional(),
  mergerId: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  completedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1AccountsMerges$Outbound = {
  id?: string | undefined;
  branchId?: string | undefined;
  sourceBranch?: string | undefined;
  targetBranch?: string | undefined;
  mergeStatus?: string | undefined;
  mergeStrategy?: string | undefined;
  conflicts?: Array<string> | undefined;
  mergerId?: string | undefined;
  createdAt?: string | undefined;
  completedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsMerges$outboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsMerges$Outbound,
  z.ZodTypeDef,
  PutApiWorkspaceServiceV1AccountsMerges
> = z.object({
  id: z.string().optional(),
  branchId: z.string().optional(),
  sourceBranch: z.string().optional(),
  targetBranch: z.string().optional(),
  mergeStatus: z.string().optional(),
  mergeStrategy: z.string().optional(),
  conflicts: z.array(z.string()).optional(),
  mergerId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  completedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsMerges$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsMerges$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsMerges$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsMerges$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsMerges$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsMerges$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsMerges$Outbound;
}

export function putApiWorkspaceServiceV1AccountsMergesToJSON(
  putApiWorkspaceServiceV1AccountsMerges:
    PutApiWorkspaceServiceV1AccountsMerges,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsMerges$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsMerges,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsMergesFromJSON(
  jsonString: string,
): SafeParseResult<PutApiWorkspaceServiceV1AccountsMerges, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsMerges$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsMerges' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsPolicy$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsPolicy,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  branchId: z.string().optional(),
  requiredApprovers: z.array(z.string()).optional(),
  minimumApprovals: z.number().int().optional(),
  enforceLinearHistory: z.boolean().optional(),
  allowForcePush: z.boolean().optional(),
  protectedPaths: z.array(z.string()).optional(),
  mergeRules: z.record(z.string()).optional(),
  automatedChecks: z.array(z.string()).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1AccountsPolicy$Outbound = {
  id?: string | undefined;
  branchId?: string | undefined;
  requiredApprovers?: Array<string> | undefined;
  minimumApprovals?: number | undefined;
  enforceLinearHistory?: boolean | undefined;
  allowForcePush?: boolean | undefined;
  protectedPaths?: Array<string> | undefined;
  mergeRules?: { [k: string]: string } | undefined;
  automatedChecks?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsPolicy$outboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsPolicy$Outbound,
  z.ZodTypeDef,
  PutApiWorkspaceServiceV1AccountsPolicy
> = z.object({
  id: z.string().optional(),
  branchId: z.string().optional(),
  requiredApprovers: z.array(z.string()).optional(),
  minimumApprovals: z.number().int().optional(),
  enforceLinearHistory: z.boolean().optional(),
  allowForcePush: z.boolean().optional(),
  protectedPaths: z.array(z.string()).optional(),
  mergeRules: z.record(z.string()).optional(),
  automatedChecks: z.array(z.string()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsPolicy$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsPolicy$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsPolicy$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsPolicy$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsPolicy$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsPolicy$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsPolicy$Outbound;
}

export function putApiWorkspaceServiceV1AccountsPolicyToJSON(
  putApiWorkspaceServiceV1AccountsPolicy:
    PutApiWorkspaceServiceV1AccountsPolicy,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsPolicy$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsPolicy,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsPolicyFromJSON(
  jsonString: string,
): SafeParseResult<PutApiWorkspaceServiceV1AccountsPolicy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsPolicy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsPolicy' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsMergeRequests$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsMergeRequests,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sourceBranchId: z.string().optional(),
    targetBranchId: z.string().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    authorId: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    status: z.string().optional(),
    labels: z.array(z.string()).optional(),
    hasConflicts: z.boolean().optional(),
    automatedCheckResults: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsMergeRequests$Outbound = {
  id?: string | undefined;
  sourceBranchId?: string | undefined;
  targetBranchId?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  authorId?: string | undefined;
  reviewers?: Array<string> | undefined;
  status?: string | undefined;
  labels?: Array<string> | undefined;
  hasConflicts?: boolean | undefined;
  automatedCheckResults?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsMergeRequests$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsMergeRequests$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsMergeRequests
  > = z.object({
    id: z.string().optional(),
    sourceBranchId: z.string().optional(),
    targetBranchId: z.string().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    authorId: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    status: z.string().optional(),
    labels: z.array(z.string()).optional(),
    hasConflicts: z.boolean().optional(),
    automatedCheckResults: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsMergeRequests$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsMergeRequests$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsMergeRequests$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsMergeRequests$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsMergeRequests$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsMergeRequests$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsMergeRequests$Outbound;
}

export function putApiWorkspaceServiceV1AccountsMergeRequestsToJSON(
  putApiWorkspaceServiceV1AccountsMergeRequests:
    PutApiWorkspaceServiceV1AccountsMergeRequests,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsMergeRequests$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsMergeRequests,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsMergeRequestsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsMergeRequests,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsMergeRequests$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsMergeRequests' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsBranches$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsBranches,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  baseVersionHash: z.string().optional(),
  currentHeadHash: z.string().optional(),
  purpose: z.string().optional(),
  status: z.string().optional(),
  reviewers: z.array(z.string()).optional(),
  branchMetadata: z.record(z.string()).optional(),
  isLocked: z.boolean().optional(),
  lastUpdated: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  merges: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1AccountsMerges$inboundSchema),
  ).optional(),
  policy: z.lazy(() => PutApiWorkspaceServiceV1AccountsPolicy$inboundSchema)
    .optional(),
  mergeRequests: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1AccountsMergeRequests$inboundSchema),
  ).optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1AccountsBranches$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  baseVersionHash?: string | undefined;
  currentHeadHash?: string | undefined;
  purpose?: string | undefined;
  status?: string | undefined;
  reviewers?: Array<string> | undefined;
  branchMetadata?: { [k: string]: string } | undefined;
  isLocked?: boolean | undefined;
  lastUpdated?: string | undefined;
  merges?: Array<PutApiWorkspaceServiceV1AccountsMerges$Outbound> | undefined;
  policy?: PutApiWorkspaceServiceV1AccountsPolicy$Outbound | undefined;
  mergeRequests?:
    | Array<PutApiWorkspaceServiceV1AccountsMergeRequests$Outbound>
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsBranches$outboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsBranches$Outbound,
  z.ZodTypeDef,
  PutApiWorkspaceServiceV1AccountsBranches
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  baseVersionHash: z.string().optional(),
  currentHeadHash: z.string().optional(),
  purpose: z.string().optional(),
  status: z.string().optional(),
  reviewers: z.array(z.string()).optional(),
  branchMetadata: z.record(z.string()).optional(),
  isLocked: z.boolean().optional(),
  lastUpdated: z.date().transform(v => v.toISOString()).optional(),
  merges: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1AccountsMerges$outboundSchema),
  ).optional(),
  policy: z.lazy(() => PutApiWorkspaceServiceV1AccountsPolicy$outboundSchema)
    .optional(),
  mergeRequests: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1AccountsMergeRequests$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsBranches$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsBranches$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsBranches$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsBranches$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsBranches$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsBranches$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsBranches$Outbound;
}

export function putApiWorkspaceServiceV1AccountsBranchesToJSON(
  putApiWorkspaceServiceV1AccountsBranches:
    PutApiWorkspaceServiceV1AccountsBranches,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsBranches$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsBranches,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsBranchesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsBranches,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsBranches$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsBranches' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsChanges$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsChanges,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  versionId: z.string().optional(),
  changeType: z.string().optional(),
  contentBefore: z.string().optional(),
  contentAfter: z.string().optional(),
  metadata: z.record(z.string()).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1AccountsChanges$Outbound = {
  id?: string | undefined;
  versionId?: string | undefined;
  changeType?: string | undefined;
  contentBefore?: string | undefined;
  contentAfter?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsChanges$outboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsChanges$Outbound,
  z.ZodTypeDef,
  PutApiWorkspaceServiceV1AccountsChanges
> = z.object({
  id: z.string().optional(),
  versionId: z.string().optional(),
  changeType: z.string().optional(),
  contentBefore: z.string().optional(),
  contentAfter: z.string().optional(),
  metadata: z.record(z.string()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsChanges$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsChanges$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsChanges$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsChanges$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsChanges$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsChanges$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsChanges$Outbound;
}

export function putApiWorkspaceServiceV1AccountsChangesToJSON(
  putApiWorkspaceServiceV1AccountsChanges:
    PutApiWorkspaceServiceV1AccountsChanges,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsChanges$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsChanges,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsChangesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsChanges,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsChanges$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsChanges' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsSummaries$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsSummaries,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  versionId: z.string().optional(),
  summaryType: z.string().optional(),
  content: z.string().optional(),
  targetAudience: z.string().optional(),
  keyPoints: z.array(z.string()).optional(),
  metadata: z.record(z.string()).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1AccountsSummaries$Outbound = {
  id?: string | undefined;
  versionId?: string | undefined;
  summaryType?: string | undefined;
  content?: string | undefined;
  targetAudience?: string | undefined;
  keyPoints?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsSummaries$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsSummaries$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsSummaries
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    summaryType: z.string().optional(),
    content: z.string().optional(),
    targetAudience: z.string().optional(),
    keyPoints: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsSummaries$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsSummaries$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsSummaries$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsSummaries$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsSummaries$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsSummaries$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsSummaries$Outbound;
}

export function putApiWorkspaceServiceV1AccountsSummariesToJSON(
  putApiWorkspaceServiceV1AccountsSummaries:
    PutApiWorkspaceServiceV1AccountsSummaries,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsSummaries$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsSummaries,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsSummariesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsSummaries,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsSummaries$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsSummaries' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsRequestVersions$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsRequestVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionHash: z.string().optional(),
    parentHash: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    branchName: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    isApproved: z.boolean().optional(),
    approvalChain: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    branches: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsBranches$inboundSchema),
    ).optional(),
    changes: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsChanges$inboundSchema),
    ).optional(),
    summaries: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsSummaries$inboundSchema),
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsRequestVersions$Outbound = {
  id?: string | undefined;
  versionHash?: string | undefined;
  parentHash?: string | undefined;
  commitMessage?: string | undefined;
  authorId?: string | undefined;
  branchName?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  tags?: Array<string> | undefined;
  isApproved?: boolean | undefined;
  approvalChain?: string | undefined;
  createdAt?: string | undefined;
  branches?:
    | Array<PutApiWorkspaceServiceV1AccountsBranches$Outbound>
    | undefined;
  changes?: Array<PutApiWorkspaceServiceV1AccountsChanges$Outbound> | undefined;
  summaries?:
    | Array<PutApiWorkspaceServiceV1AccountsSummaries$Outbound>
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsRequestVersions$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsRequestVersions$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsRequestVersions
  > = z.object({
    id: z.string().optional(),
    versionHash: z.string().optional(),
    parentHash: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    branchName: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    isApproved: z.boolean().optional(),
    approvalChain: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    branches: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsBranches$outboundSchema),
    ).optional(),
    changes: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsChanges$outboundSchema),
    ).optional(),
    summaries: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsSummaries$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsRequestVersions$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsRequestVersions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsRequestVersions$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsRequestVersions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsRequestVersions$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsRequestVersions$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsRequestVersions$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsRequestVersionsToJSON(
  putApiWorkspaceServiceV1AccountsAccountsRequestVersions:
    PutApiWorkspaceServiceV1AccountsAccountsRequestVersions,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsRequestVersions$outboundSchema
      .parse(putApiWorkspaceServiceV1AccountsAccountsRequestVersions),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsRequestVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsRequestVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsRequestVersions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsRequestVersions' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsInstances$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsInstances,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  templateId: z.string().optional(),
  status: PutApiWorkspaceServiceV1AccountsStatus$inboundSchema.default(
    "DOCUMENT_STATUS_UNSPECIFIED",
  ),
  fieldValues: z.record(z.string()).optional(),
  signers: z.array(z.string()).optional(),
  language: z.string().optional(),
  isCompleted: z.boolean().optional(),
  dueDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  generatedContent: z.string().optional(),
  attachments: z.array(z.string()).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  signatureRequests: z.array(
    z.lazy(() =>
      PutApiWorkspaceServiceV1AccountsSignatureRequests$inboundSchema
    ),
  ).optional(),
  aiAssistance: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1AccountsAiAssistance$inboundSchema),
  ).optional(),
  negotiation: z.lazy(() =>
    PutApiWorkspaceServiceV1AccountsNegotiation$inboundSchema
  ).optional(),
  versions: z.array(
    z.lazy(() =>
      PutApiWorkspaceServiceV1AccountsAccountsRequestVersions$inboundSchema
    ),
  ).optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1AccountsInstances$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  status: string;
  fieldValues?: { [k: string]: string } | undefined;
  signers?: Array<string> | undefined;
  language?: string | undefined;
  isCompleted?: boolean | undefined;
  dueDate?: string | undefined;
  generatedContent?: string | undefined;
  attachments?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  signatureRequests?:
    | Array<PutApiWorkspaceServiceV1AccountsSignatureRequests$Outbound>
    | undefined;
  aiAssistance?:
    | Array<PutApiWorkspaceServiceV1AccountsAiAssistance$Outbound>
    | undefined;
  negotiation?:
    | PutApiWorkspaceServiceV1AccountsNegotiation$Outbound
    | undefined;
  versions?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsRequestVersions$Outbound>
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsInstances$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsInstances$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsInstances
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    status: PutApiWorkspaceServiceV1AccountsStatus$outboundSchema.default(
      "DOCUMENT_STATUS_UNSPECIFIED",
    ),
    fieldValues: z.record(z.string()).optional(),
    signers: z.array(z.string()).optional(),
    language: z.string().optional(),
    isCompleted: z.boolean().optional(),
    dueDate: z.date().transform(v => v.toISOString()).optional(),
    generatedContent: z.string().optional(),
    attachments: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    signatureRequests: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsSignatureRequests$outboundSchema
      ),
    ).optional(),
    aiAssistance: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsAiAssistance$outboundSchema),
    ).optional(),
    negotiation: z.lazy(() =>
      PutApiWorkspaceServiceV1AccountsNegotiation$outboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsRequestVersions$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsInstances$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsInstances$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsInstances$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsInstances$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsInstances$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsInstances$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsInstances$Outbound;
}

export function putApiWorkspaceServiceV1AccountsInstancesToJSON(
  putApiWorkspaceServiceV1AccountsInstances:
    PutApiWorkspaceServiceV1AccountsInstances,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsInstances$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsInstances,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsInstancesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsInstances,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsInstances$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsInstances' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsExplanations$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsExplanations,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    sectionIdentifier: z.string().optional(),
    explanationText: z.string().optional(),
    complexityLevel: z.string().optional(),
    relatedTerms: z.array(z.string()).optional(),
    legalReferences: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsExplanations$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  sectionIdentifier?: string | undefined;
  explanationText?: string | undefined;
  complexityLevel?: string | undefined;
  relatedTerms?: Array<string> | undefined;
  legalReferences?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsExplanations$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsExplanations$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsExplanations
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    sectionIdentifier: z.string().optional(),
    explanationText: z.string().optional(),
    complexityLevel: z.string().optional(),
    relatedTerms: z.array(z.string()).optional(),
    legalReferences: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsExplanations$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsExplanations$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsExplanations$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsExplanations$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsExplanations$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsExplanations$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsExplanations$Outbound;
}

export function putApiWorkspaceServiceV1AccountsExplanationsToJSON(
  putApiWorkspaceServiceV1AccountsExplanations:
    PutApiWorkspaceServiceV1AccountsExplanations,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsExplanations$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsExplanations,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsExplanationsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsExplanations,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsExplanations$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsExplanations' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsRiskAssessments$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsRiskAssessments,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    riskType: z.string().optional(),
    riskScore: z.number().optional(),
    assessmentDetails: z.string().optional(),
    mitigationSuggestions: z.array(z.string()).optional(),
    assessorId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsRiskAssessments$Outbound = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  riskType?: string | undefined;
  riskScore?: number | undefined;
  assessmentDetails?: string | undefined;
  mitigationSuggestions?: Array<string> | undefined;
  assessorId?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsRiskAssessments$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsRiskAssessments$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsRiskAssessments
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    riskType: z.string().optional(),
    riskScore: z.number().optional(),
    assessmentDetails: z.string().optional(),
    mitigationSuggestions: z.array(z.string()).optional(),
    assessorId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsRiskAssessments$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsRiskAssessments$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsRiskAssessments$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsRiskAssessments$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsRiskAssessments$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsRiskAssessments$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsRiskAssessments$Outbound;
}

export function putApiWorkspaceServiceV1AccountsRiskAssessmentsToJSON(
  putApiWorkspaceServiceV1AccountsRiskAssessments:
    PutApiWorkspaceServiceV1AccountsRiskAssessments,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsRiskAssessments$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsRiskAssessments,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsRiskAssessmentsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsRiskAssessments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsRiskAssessments$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsRiskAssessments' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsComplianceChecks$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsComplianceChecks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    complianceStandard: z.string().optional(),
    checkResult: z.string().optional(),
    violations: z.array(z.string()).optional(),
    remediationSteps: z.string().optional(),
    checkDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsComplianceChecks$Outbound = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  complianceStandard?: string | undefined;
  checkResult?: string | undefined;
  violations?: Array<string> | undefined;
  remediationSteps?: string | undefined;
  checkDate?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsComplianceChecks$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsComplianceChecks$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsComplianceChecks
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    complianceStandard: z.string().optional(),
    checkResult: z.string().optional(),
    violations: z.array(z.string()).optional(),
    remediationSteps: z.string().optional(),
    checkDate: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsComplianceChecks$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsComplianceChecks$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsComplianceChecks$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsComplianceChecks$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsComplianceChecks$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsComplianceChecks$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsComplianceChecks$Outbound;
}

export function putApiWorkspaceServiceV1AccountsComplianceChecksToJSON(
  putApiWorkspaceServiceV1AccountsComplianceChecks:
    PutApiWorkspaceServiceV1AccountsComplianceChecks,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsComplianceChecks$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsComplianceChecks,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsComplianceChecksFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsComplianceChecks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsComplianceChecks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsComplianceChecks' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsIntelligence$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsIntelligence,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    contractType: z.string().optional(),
    riskScores: z.record(z.number()).optional(),
    detectedClauses: z.record(z.string()).optional(),
    keyObligations: z.array(z.string()).optional(),
    complianceScores: z.record(z.number()).optional(),
    jurisdiction: z.string().optional(),
    governingLaws: z.array(z.string()).optional(),
    semanticAnalysis: z.record(z.string()).optional(),
    analysisDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    riskAssessments: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsRiskAssessments$inboundSchema
      ),
    ).optional(),
    complianceChecks: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsComplianceChecks$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsIntelligence$Outbound = {
  id?: string | undefined;
  contractType?: string | undefined;
  riskScores?: { [k: string]: number } | undefined;
  detectedClauses?: { [k: string]: string } | undefined;
  keyObligations?: Array<string> | undefined;
  complianceScores?: { [k: string]: number } | undefined;
  jurisdiction?: string | undefined;
  governingLaws?: Array<string> | undefined;
  semanticAnalysis?: { [k: string]: string } | undefined;
  analysisDate?: string | undefined;
  riskAssessments?:
    | Array<PutApiWorkspaceServiceV1AccountsRiskAssessments$Outbound>
    | undefined;
  complianceChecks?:
    | Array<PutApiWorkspaceServiceV1AccountsComplianceChecks$Outbound>
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsIntelligence$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsIntelligence$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsIntelligence
  > = z.object({
    id: z.string().optional(),
    contractType: z.string().optional(),
    riskScores: z.record(z.number()).optional(),
    detectedClauses: z.record(z.string()).optional(),
    keyObligations: z.array(z.string()).optional(),
    complianceScores: z.record(z.number()).optional(),
    jurisdiction: z.string().optional(),
    governingLaws: z.array(z.string()).optional(),
    semanticAnalysis: z.record(z.string()).optional(),
    analysisDate: z.date().transform(v => v.toISOString()).optional(),
    riskAssessments: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsRiskAssessments$outboundSchema
      ),
    ).optional(),
    complianceChecks: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsComplianceChecks$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsIntelligence$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsIntelligence$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsIntelligence$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsIntelligence$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsIntelligence$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsIntelligence$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsIntelligence$Outbound;
}

export function putApiWorkspaceServiceV1AccountsIntelligenceToJSON(
  putApiWorkspaceServiceV1AccountsIntelligence:
    PutApiWorkspaceServiceV1AccountsIntelligence,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsIntelligence$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsIntelligence,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsIntelligenceFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsIntelligence,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsIntelligence$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsIntelligence' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsTemplates$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsTemplates,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  industryType: z.string().optional(),
  documentType: z.string().optional(),
  baseContent: z.string().optional(),
  isAdaptive: z.boolean().optional(),
  metadata: z.record(z.string()).optional(),
  supportedLanguages: z.array(z.string()).optional(),
  requiredDataFields: z.array(z.string()).optional(),
  version: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  templateType: PutApiWorkspaceServiceV1AccountsTemplateType$inboundSchema
    .default("TEMPLATE_TYPE_UNSPECIFIED"),
  content: z.string().optional(),
  detectedVariables: z.array(z.string()).optional(),
  variableMappings: z.record(z.string()).optional(),
  isContextAware: z.boolean().optional(),
  supportedContexts: z.array(z.string()).optional(),
  formattingRules: z.record(z.string()).optional(),
  conditionalSections: z.array(z.string()).optional(),
  versions: z.array(
    z.lazy(() =>
      PutApiWorkspaceServiceV1AccountsAccountsVersions$inboundSchema
    ),
  ).optional(),
  variables: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1AccountsVariables$inboundSchema),
  ).optional(),
  instances: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1AccountsInstances$inboundSchema),
  ).optional(),
  explanations: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1AccountsExplanations$inboundSchema),
  ).optional(),
  intelligence: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1AccountsIntelligence$inboundSchema),
  ).optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1AccountsTemplates$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  industryType?: string | undefined;
  documentType?: string | undefined;
  baseContent?: string | undefined;
  isAdaptive?: boolean | undefined;
  metadata?: { [k: string]: string } | undefined;
  supportedLanguages?: Array<string> | undefined;
  requiredDataFields?: Array<string> | undefined;
  version?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  templateType: string;
  content?: string | undefined;
  detectedVariables?: Array<string> | undefined;
  variableMappings?: { [k: string]: string } | undefined;
  isContextAware?: boolean | undefined;
  supportedContexts?: Array<string> | undefined;
  formattingRules?: { [k: string]: string } | undefined;
  conditionalSections?: Array<string> | undefined;
  versions?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsVersions$Outbound>
    | undefined;
  variables?:
    | Array<PutApiWorkspaceServiceV1AccountsVariables$Outbound>
    | undefined;
  instances?:
    | Array<PutApiWorkspaceServiceV1AccountsInstances$Outbound>
    | undefined;
  explanations?:
    | Array<PutApiWorkspaceServiceV1AccountsExplanations$Outbound>
    | undefined;
  intelligence?:
    | Array<PutApiWorkspaceServiceV1AccountsIntelligence$Outbound>
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsTemplates$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsTemplates$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsTemplates
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    industryType: z.string().optional(),
    documentType: z.string().optional(),
    baseContent: z.string().optional(),
    isAdaptive: z.boolean().optional(),
    metadata: z.record(z.string()).optional(),
    supportedLanguages: z.array(z.string()).optional(),
    requiredDataFields: z.array(z.string()).optional(),
    version: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    templateType: PutApiWorkspaceServiceV1AccountsTemplateType$outboundSchema
      .default("TEMPLATE_TYPE_UNSPECIFIED"),
    content: z.string().optional(),
    detectedVariables: z.array(z.string()).optional(),
    variableMappings: z.record(z.string()).optional(),
    isContextAware: z.boolean().optional(),
    supportedContexts: z.array(z.string()).optional(),
    formattingRules: z.record(z.string()).optional(),
    conditionalSections: z.array(z.string()).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsVersions$outboundSchema
      ),
    ).optional(),
    variables: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsVariables$outboundSchema),
    ).optional(),
    instances: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsInstances$outboundSchema),
    ).optional(),
    explanations: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsExplanations$outboundSchema),
    ).optional(),
    intelligence: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsIntelligence$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsTemplates$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsTemplates$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsTemplates$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsTemplates$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsTemplates$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsTemplates$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsTemplates$Outbound;
}

export function putApiWorkspaceServiceV1AccountsTemplatesToJSON(
  putApiWorkspaceServiceV1AccountsTemplates:
    PutApiWorkspaceServiceV1AccountsTemplates,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsTemplates$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsTemplates,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsTemplatesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsTemplates,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsTemplates$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsTemplates' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsSharing$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsSharing,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsSharing$Outbound = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsSharing$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsSharing$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsSharing
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsSharing$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsSharing$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsSharing$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsSharing$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsSharing$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsSharing$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsSharing$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsSharingToJSON(
  putApiWorkspaceServiceV1AccountsAccountsSharing:
    PutApiWorkspaceServiceV1AccountsAccountsSharing,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsSharing$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsSharing,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsSharingFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsSharing,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsSharing$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsSharing' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsActivities$inboundSchema:
  z.ZodType<PutApiWorkspaceServiceV1AccountsActivities, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      activityType: z.string().optional(),
      userId: z.string().optional(),
      description: z.string().optional(),
      metadata: z.record(z.string()).optional(),
      createdAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
    });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsActivities$Outbound = {
  id?: string | undefined;
  activityType?: string | undefined;
  userId?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsActivities$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsActivities$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsActivities
  > = z.object({
    id: z.string().optional(),
    activityType: z.string().optional(),
    userId: z.string().optional(),
    description: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsActivities$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsActivities$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsActivities$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsActivities$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsActivities$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsActivities$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsActivities$Outbound;
}

export function putApiWorkspaceServiceV1AccountsActivitiesToJSON(
  putApiWorkspaceServiceV1AccountsActivities:
    PutApiWorkspaceServiceV1AccountsActivities,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsActivities$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsActivities,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsActivitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsActivities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsActivities$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsActivities' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsCompliance$inboundSchema:
  z.ZodType<PutApiWorkspaceServiceV1AccountsCompliance, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      complianceType: z.string().optional(),
      status: z.string().optional(),
      certificationId: z.string().optional(),
      validUntil: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      createdAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      updatedAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
    });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsCompliance$Outbound = {
  id?: string | undefined;
  complianceType?: string | undefined;
  status?: string | undefined;
  certificationId?: string | undefined;
  validUntil?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsCompliance$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsCompliance$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsCompliance
  > = z.object({
    id: z.string().optional(),
    complianceType: z.string().optional(),
    status: z.string().optional(),
    certificationId: z.string().optional(),
    validUntil: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsCompliance$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsCompliance$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsCompliance$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsCompliance$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsCompliance$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsCompliance$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsCompliance$Outbound;
}

export function putApiWorkspaceServiceV1AccountsComplianceToJSON(
  putApiWorkspaceServiceV1AccountsCompliance:
    PutApiWorkspaceServiceV1AccountsCompliance,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsCompliance$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsCompliance,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsComplianceFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsCompliance,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsCompliance$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsCompliance' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsCategory$inboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1AccountsCategory> = z
    .nativeEnum(PutApiWorkspaceServiceV1AccountsCategory);

/** @internal */
export const PutApiWorkspaceServiceV1AccountsCategory$outboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1AccountsCategory> =
    PutApiWorkspaceServiceV1AccountsCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsCategory$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsCategory$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsCategory$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsCategory$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsCategory$outboundSchema;
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsPricingModel$inboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1AccountsPricingModel> = z
    .nativeEnum(PutApiWorkspaceServiceV1AccountsPricingModel);

/** @internal */
export const PutApiWorkspaceServiceV1AccountsPricingModel$outboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1AccountsPricingModel> =
    PutApiWorkspaceServiceV1AccountsPricingModel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsPricingModel$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsPricingModel$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsPricingModel$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsPricingModel$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsPricingModel$outboundSchema;
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsRequestRequestBodyVersions$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsRequestRequestBodyVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    versionNumber: z.string().optional(),
    changelog: z.string().optional(),
    requirements: z.record(z.string()).optional(),
    isPublic: z.boolean().optional(),
    releaseDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsRequestRequestBodyVersions$Outbound =
  {
    id?: string | undefined;
    appId?: string | undefined;
    versionNumber?: string | undefined;
    changelog?: string | undefined;
    requirements?: { [k: string]: string } | undefined;
    isPublic?: boolean | undefined;
    releaseDate?: string | undefined;
  };

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsRequestRequestBodyVersions$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsRequestRequestBodyVersions$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsRequestRequestBodyVersions
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    versionNumber: z.string().optional(),
    changelog: z.string().optional(),
    requirements: z.record(z.string()).optional(),
    isPublic: z.boolean().optional(),
    releaseDate: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsRequestRequestBodyVersions$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsRequestRequestBodyVersions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsRequestRequestBodyVersions$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsRequestRequestBodyVersions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsRequestRequestBodyVersions$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsRequestRequestBodyVersions$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsRequestRequestBodyVersions$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsRequestRequestBodyVersionsToJSON(
  putApiWorkspaceServiceV1AccountsAccountsRequestRequestBodyVersions:
    PutApiWorkspaceServiceV1AccountsAccountsRequestRequestBodyVersions,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsRequestRequestBodyVersions$outboundSchema
      .parse(
        putApiWorkspaceServiceV1AccountsAccountsRequestRequestBodyVersions,
      ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsRequestRequestBodyVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsRequestRequestBodyVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsRequestRequestBodyVersions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsRequestRequestBodyVersions' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsInstallations$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsInstallations,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    workspaceId: z.string().optional(),
    versionInstalled: z.string().optional(),
    configuration: z.record(z.string()).optional(),
    installationStatus: z.string().optional(),
    installedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    lastUsed: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsInstallations$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  workspaceId?: string | undefined;
  versionInstalled?: string | undefined;
  configuration?: { [k: string]: string } | undefined;
  installationStatus?: string | undefined;
  installedAt?: string | undefined;
  lastUsed?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsInstallations$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsInstallations$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsInstallations
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    workspaceId: z.string().optional(),
    versionInstalled: z.string().optional(),
    configuration: z.record(z.string()).optional(),
    installationStatus: z.string().optional(),
    installedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUsed: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsInstallations$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsInstallations$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsInstallations$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsInstallations$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsInstallations$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsInstallations$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsInstallations$Outbound;
}

export function putApiWorkspaceServiceV1AccountsInstallationsToJSON(
  putApiWorkspaceServiceV1AccountsInstallations:
    PutApiWorkspaceServiceV1AccountsInstallations,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsInstallations$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsInstallations,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsInstallationsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsInstallations,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsInstallations$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsInstallations' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAnalytics$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsAnalytics,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  appId: z.string().optional(),
  metricName: z.string().optional(),
  metricValue: z.number().optional(),
  dimensions: z.record(z.string()).optional(),
  recordedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAnalytics$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  metricName?: string | undefined;
  metricValue?: number | undefined;
  dimensions?: { [k: string]: string } | undefined;
  recordedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAnalytics$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAnalytics$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAnalytics
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    metricName: z.string().optional(),
    metricValue: z.number().optional(),
    dimensions: z.record(z.string()).optional(),
    recordedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAnalytics$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAnalytics$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAnalytics$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAnalytics$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAnalytics$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAnalytics$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsAnalytics$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAnalyticsToJSON(
  putApiWorkspaceServiceV1AccountsAnalytics:
    PutApiWorkspaceServiceV1AccountsAnalytics,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAnalytics$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAnalytics,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAnalytics,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAnalytics$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAnalytics' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsReviews$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsReviews,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  appId: z.string().optional(),
  reviewerId: z.string().optional(),
  rating: z.number().optional(),
  reviewText: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1AccountsReviews$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  reviewerId?: string | undefined;
  rating?: number | undefined;
  reviewText?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsReviews$outboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsReviews$Outbound,
  z.ZodTypeDef,
  PutApiWorkspaceServiceV1AccountsReviews
> = z.object({
  id: z.string().optional(),
  appId: z.string().optional(),
  reviewerId: z.string().optional(),
  rating: z.number().optional(),
  reviewText: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsReviews$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsReviews$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsReviews$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsReviews$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsReviews$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsReviews$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsReviews$Outbound;
}

export function putApiWorkspaceServiceV1AccountsReviewsToJSON(
  putApiWorkspaceServiceV1AccountsReviews:
    PutApiWorkspaceServiceV1AccountsReviews,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsReviews$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsReviews,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsReviewsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsReviews,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsReviews$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsReviews' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsInfo$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  appId: z.string().optional(),
  supportedLanguages: z.array(z.string()).optional(),
  sdkFeatures: z.array(z.string()).optional(),
  testCoverage: z.record(z.number()).optional(),
  securityScans: z.array(z.string()).optional(),
  performanceMetrics: z.record(z.string()).optional(),
  developmentStatus: z.string().optional(),
  knownIssues: z.array(z.string()).optional(),
  roadmapUrl: z.string().optional(),
  lastSecurityAudit: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1AccountsInfo$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  supportedLanguages?: Array<string> | undefined;
  sdkFeatures?: Array<string> | undefined;
  testCoverage?: { [k: string]: number } | undefined;
  securityScans?: Array<string> | undefined;
  performanceMetrics?: { [k: string]: string } | undefined;
  developmentStatus?: string | undefined;
  knownIssues?: Array<string> | undefined;
  roadmapUrl?: string | undefined;
  lastSecurityAudit?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsInfo$outboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsInfo$Outbound,
  z.ZodTypeDef,
  PutApiWorkspaceServiceV1AccountsInfo
> = z.object({
  id: z.string().optional(),
  appId: z.string().optional(),
  supportedLanguages: z.array(z.string()).optional(),
  sdkFeatures: z.array(z.string()).optional(),
  testCoverage: z.record(z.number()).optional(),
  securityScans: z.array(z.string()).optional(),
  performanceMetrics: z.record(z.string()).optional(),
  developmentStatus: z.string().optional(),
  knownIssues: z.array(z.string()).optional(),
  roadmapUrl: z.string().optional(),
  lastSecurityAudit: z.date().transform(v => v.toISOString()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsInfo$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsInfo$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsInfo$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsInfo$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsInfo$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsInfo$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsInfo$Outbound;
}

export function putApiWorkspaceServiceV1AccountsInfoToJSON(
  putApiWorkspaceServiceV1AccountsInfo: PutApiWorkspaceServiceV1AccountsInfo,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsInfo$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsInfo,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsInfoFromJSON(
  jsonString: string,
): SafeParseResult<PutApiWorkspaceServiceV1AccountsInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsInfo' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsWebhooks$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsWebhooks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  appId: z.string().optional(),
  url: z.string().optional(),
  subscribedEvents: z.array(z.string()).optional(),
  secretKey: z.string().optional(),
  retryCount: z.number().int().optional(),
  timeoutSeconds: z.number().int().optional(),
  isActive: z.boolean().optional(),
  headers: z.record(z.string()).optional(),
  lastTriggered: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1AccountsWebhooks$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  url?: string | undefined;
  subscribedEvents?: Array<string> | undefined;
  secretKey?: string | undefined;
  retryCount?: number | undefined;
  timeoutSeconds?: number | undefined;
  isActive?: boolean | undefined;
  headers?: { [k: string]: string } | undefined;
  lastTriggered?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsWebhooks$outboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsWebhooks$Outbound,
  z.ZodTypeDef,
  PutApiWorkspaceServiceV1AccountsWebhooks
> = z.object({
  id: z.string().optional(),
  appId: z.string().optional(),
  url: z.string().optional(),
  subscribedEvents: z.array(z.string()).optional(),
  secretKey: z.string().optional(),
  retryCount: z.number().int().optional(),
  timeoutSeconds: z.number().int().optional(),
  isActive: z.boolean().optional(),
  headers: z.record(z.string()).optional(),
  lastTriggered: z.date().transform(v => v.toISOString()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsWebhooks$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsWebhooks$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsWebhooks$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsWebhooks$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsWebhooks$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsWebhooks$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsWebhooks$Outbound;
}

export function putApiWorkspaceServiceV1AccountsWebhooksToJSON(
  putApiWorkspaceServiceV1AccountsWebhooks:
    PutApiWorkspaceServiceV1AccountsWebhooks,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsWebhooks$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsWebhooks,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsWebhooksFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsWebhooks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsWebhooks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsWebhooks' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsPermissions$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsPermissions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    scope: z.string().optional(),
    description: z.string().optional(),
    isRequired: z.boolean().optional(),
    accessLevels: z.array(z.string()).optional(),
    constraints: z.record(z.string()).optional(),
    requiresApproval: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsPermissions$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  scope?: string | undefined;
  description?: string | undefined;
  isRequired?: boolean | undefined;
  accessLevels?: Array<string> | undefined;
  constraints?: { [k: string]: string } | undefined;
  requiresApproval?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsPermissions$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsPermissions$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsPermissions
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    scope: z.string().optional(),
    description: z.string().optional(),
    isRequired: z.boolean().optional(),
    accessLevels: z.array(z.string()).optional(),
    constraints: z.record(z.string()).optional(),
    requiresApproval: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsPermissions$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsPermissions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsPermissions$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsPermissions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsPermissions$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsPermissions$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsPermissions$Outbound;
}

export function putApiWorkspaceServiceV1AccountsPermissionsToJSON(
  putApiWorkspaceServiceV1AccountsPermissions:
    PutApiWorkspaceServiceV1AccountsPermissions,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsPermissions$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsPermissions,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsPermissionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsPermissions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsPermissions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsPermissions' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsInstalledApps$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsInstalledApps,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    developerId: z.string().optional(),
    category: PutApiWorkspaceServiceV1AccountsCategory$inboundSchema.default(
      "APP_CATEGORY_UNSPECIFIED",
    ),
    supportedContractTypes: z.array(z.string()).optional(),
    features: z.array(z.string()).optional(),
    pricingModel: PutApiWorkspaceServiceV1AccountsPricingModel$inboundSchema
      .default("PRICING_MODEL_UNSPECIFIED"),
    pricingTiers: z.record(z.number()).optional(),
    supportedIntegrations: z.array(z.string()).optional(),
    isVerified: z.boolean().optional(),
    rating: z.number().optional(),
    installationCount: z.number().int().optional(),
    requiredPermissions: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    documentationUrl: z.string().optional(),
    supportEmail: z.string().optional(),
    screenshots: z.array(z.string()).optional(),
    privacyPolicyUrl: z.string().optional(),
    termsUrl: z.string().optional(),
    publishedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsRequestRequestBodyVersions$inboundSchema
      ),
    ).optional(),
    installations: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsInstallations$inboundSchema),
    ).optional(),
    analytics: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsAnalytics$inboundSchema),
    ).optional(),
    reviews: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsReviews$inboundSchema),
    ).optional(),
    info: z.lazy(() => PutApiWorkspaceServiceV1AccountsInfo$inboundSchema)
      .optional(),
    webhooks: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsWebhooks$inboundSchema),
    ).optional(),
    permissions: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsPermissions$inboundSchema),
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsInstalledApps$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  developerId?: string | undefined;
  category: string;
  supportedContractTypes?: Array<string> | undefined;
  features?: Array<string> | undefined;
  pricingModel: string;
  pricingTiers?: { [k: string]: number } | undefined;
  supportedIntegrations?: Array<string> | undefined;
  isVerified?: boolean | undefined;
  rating?: number | undefined;
  installationCount?: number | undefined;
  requiredPermissions?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  documentationUrl?: string | undefined;
  supportEmail?: string | undefined;
  screenshots?: Array<string> | undefined;
  privacyPolicyUrl?: string | undefined;
  termsUrl?: string | undefined;
  publishedAt?: string | undefined;
  lastUpdated?: string | undefined;
  versions?:
    | Array<
      PutApiWorkspaceServiceV1AccountsAccountsRequestRequestBodyVersions$Outbound
    >
    | undefined;
  installations?:
    | Array<PutApiWorkspaceServiceV1AccountsInstallations$Outbound>
    | undefined;
  analytics?:
    | Array<PutApiWorkspaceServiceV1AccountsAnalytics$Outbound>
    | undefined;
  reviews?: Array<PutApiWorkspaceServiceV1AccountsReviews$Outbound> | undefined;
  info?: PutApiWorkspaceServiceV1AccountsInfo$Outbound | undefined;
  webhooks?:
    | Array<PutApiWorkspaceServiceV1AccountsWebhooks$Outbound>
    | undefined;
  permissions?:
    | Array<PutApiWorkspaceServiceV1AccountsPermissions$Outbound>
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsInstalledApps$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsInstalledApps$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsInstalledApps
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    developerId: z.string().optional(),
    category: PutApiWorkspaceServiceV1AccountsCategory$outboundSchema.default(
      "APP_CATEGORY_UNSPECIFIED",
    ),
    supportedContractTypes: z.array(z.string()).optional(),
    features: z.array(z.string()).optional(),
    pricingModel: PutApiWorkspaceServiceV1AccountsPricingModel$outboundSchema
      .default("PRICING_MODEL_UNSPECIFIED"),
    pricingTiers: z.record(z.number()).optional(),
    supportedIntegrations: z.array(z.string()).optional(),
    isVerified: z.boolean().optional(),
    rating: z.number().optional(),
    installationCount: z.number().int().optional(),
    requiredPermissions: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    documentationUrl: z.string().optional(),
    supportEmail: z.string().optional(),
    screenshots: z.array(z.string()).optional(),
    privacyPolicyUrl: z.string().optional(),
    termsUrl: z.string().optional(),
    publishedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsRequestRequestBodyVersions$outboundSchema
      ),
    ).optional(),
    installations: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsInstallations$outboundSchema
      ),
    ).optional(),
    analytics: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsAnalytics$outboundSchema),
    ).optional(),
    reviews: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsReviews$outboundSchema),
    ).optional(),
    info: z.lazy(() => PutApiWorkspaceServiceV1AccountsInfo$outboundSchema)
      .optional(),
    webhooks: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsWebhooks$outboundSchema),
    ).optional(),
    permissions: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsPermissions$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsInstalledApps$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsInstalledApps$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsInstalledApps$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsInstalledApps$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsInstalledApps$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsInstalledApps$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsInstalledApps$Outbound;
}

export function putApiWorkspaceServiceV1AccountsInstalledAppsToJSON(
  putApiWorkspaceServiceV1AccountsInstalledApps:
    PutApiWorkspaceServiceV1AccountsInstalledApps,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsInstalledApps$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsInstalledApps,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsInstalledAppsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsInstalledApps,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsInstalledApps$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsInstalledApps' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsWorkspaces$inboundSchema:
  z.ZodType<PutApiWorkspaceServiceV1AccountsWorkspaces, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      uniqueIdentifier: z.string().optional(),
      s3BucketName: z.string().optional(),
      s3FolderPath: z.string().optional(),
      storageQuota: z.string().optional(),
      usedStorage: z.string().optional(),
      allowPublicSharing: z.boolean().optional(),
      requireApproval: z.boolean().optional(),
      gdprCompliant: z.boolean().optional(),
      hipaaCompliant: z.boolean().optional(),
      createdAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      updatedAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      deletedAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      folders: z.array(
        z.lazy(() => PutApiWorkspaceServiceV1AccountsFolders$inboundSchema),
      ).optional(),
      templates: z.array(
        z.lazy(() => PutApiWorkspaceServiceV1AccountsTemplates$inboundSchema),
      ).optional(),
      sharing: z.array(
        z.lazy(() =>
          PutApiWorkspaceServiceV1AccountsAccountsSharing$inboundSchema
        ),
      ).optional(),
      activities: z.array(
        z.lazy(() => PutApiWorkspaceServiceV1AccountsActivities$inboundSchema),
      ).optional(),
      compliance: z.array(
        z.lazy(() => PutApiWorkspaceServiceV1AccountsCompliance$inboundSchema),
      ).optional(),
      installedApps: z.array(
        z.lazy(() =>
          PutApiWorkspaceServiceV1AccountsInstalledApps$inboundSchema
        ),
      ).optional(),
    });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsWorkspaces$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  uniqueIdentifier?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  storageQuota?: string | undefined;
  usedStorage?: string | undefined;
  allowPublicSharing?: boolean | undefined;
  requireApproval?: boolean | undefined;
  gdprCompliant?: boolean | undefined;
  hipaaCompliant?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  folders?: Array<PutApiWorkspaceServiceV1AccountsFolders$Outbound> | undefined;
  templates?:
    | Array<PutApiWorkspaceServiceV1AccountsTemplates$Outbound>
    | undefined;
  sharing?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsSharing$Outbound>
    | undefined;
  activities?:
    | Array<PutApiWorkspaceServiceV1AccountsActivities$Outbound>
    | undefined;
  compliance?:
    | Array<PutApiWorkspaceServiceV1AccountsCompliance$Outbound>
    | undefined;
  installedApps?:
    | Array<PutApiWorkspaceServiceV1AccountsInstalledApps$Outbound>
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsWorkspaces$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsWorkspaces$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsWorkspaces
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    uniqueIdentifier: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    storageQuota: z.string().optional(),
    usedStorage: z.string().optional(),
    allowPublicSharing: z.boolean().optional(),
    requireApproval: z.boolean().optional(),
    gdprCompliant: z.boolean().optional(),
    hipaaCompliant: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    folders: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsFolders$outboundSchema),
    ).optional(),
    templates: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsTemplates$outboundSchema),
    ).optional(),
    sharing: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsSharing$outboundSchema
      ),
    ).optional(),
    activities: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsActivities$outboundSchema),
    ).optional(),
    compliance: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsCompliance$outboundSchema),
    ).optional(),
    installedApps: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsInstalledApps$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsWorkspaces$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsWorkspaces$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsWorkspaces$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsWorkspaces$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsWorkspaces$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsWorkspaces$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsWorkspaces$Outbound;
}

export function putApiWorkspaceServiceV1AccountsWorkspacesToJSON(
  putApiWorkspaceServiceV1AccountsWorkspaces:
    PutApiWorkspaceServiceV1AccountsWorkspaces,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsWorkspaces$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsWorkspaces,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsWorkspacesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsWorkspaces,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsWorkspaces$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsWorkspaces' from JSON`,
  );
}

/** @internal */
export const DataProfiles$inboundSchema: z.ZodType<
  DataProfiles,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  profileType: z.string().optional(),
  dataFields: z.record(z.string()).optional(),
  isDefault: z.boolean().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type DataProfiles$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  profileType?: string | undefined;
  dataFields?: { [k: string]: string } | undefined;
  isDefault?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const DataProfiles$outboundSchema: z.ZodType<
  DataProfiles$Outbound,
  z.ZodTypeDef,
  DataProfiles
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  profileType: z.string().optional(),
  dataFields: z.record(z.string()).optional(),
  isDefault: z.boolean().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataProfiles$ {
  /** @deprecated use `DataProfiles$inboundSchema` instead. */
  export const inboundSchema = DataProfiles$inboundSchema;
  /** @deprecated use `DataProfiles$outboundSchema` instead. */
  export const outboundSchema = DataProfiles$outboundSchema;
  /** @deprecated use `DataProfiles$Outbound` instead. */
  export type Outbound = DataProfiles$Outbound;
}

export function dataProfilesToJSON(dataProfiles: DataProfiles): string {
  return JSON.stringify(DataProfiles$outboundSchema.parse(dataProfiles));
}

export function dataProfilesFromJSON(
  jsonString: string,
): SafeParseResult<DataProfiles, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DataProfiles$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataProfiles' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccount$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  auth0UserId: z.string().optional(),
  email: z.string().optional(),
  baseDirectory: z.string().optional(),
  bucketName: z.string().optional(),
  region: z.string().optional(),
  orgId: z.string().optional(),
  tenantId: z.string().optional(),
  roles: z.array(z.string()).optional(),
  permissions: z.array(z.string()).optional(),
  mfaEnabled: z.boolean().optional(),
  complianceLevel: PutApiWorkspaceServiceV1AccountsComplianceLevel$inboundSchema
    .default("COMPLIANCE_LEVEL_UNSPECIFIED"),
  preferences: z.record(z.string()).optional(),
  apiKeys: z.array(z.string()).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  workspaces: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1AccountsWorkspaces$inboundSchema),
  ).optional(),
  dataProfiles: z.array(z.lazy(() => DataProfiles$inboundSchema)).optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccount$Outbound = {
  id?: string | undefined;
  auth0UserId?: string | undefined;
  email?: string | undefined;
  baseDirectory?: string | undefined;
  bucketName?: string | undefined;
  region?: string | undefined;
  orgId?: string | undefined;
  tenantId?: string | undefined;
  roles?: Array<string> | undefined;
  permissions?: Array<string> | undefined;
  mfaEnabled?: boolean | undefined;
  complianceLevel: string;
  preferences?: { [k: string]: string } | undefined;
  apiKeys?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  workspaces?:
    | Array<PutApiWorkspaceServiceV1AccountsWorkspaces$Outbound>
    | undefined;
  dataProfiles?: Array<DataProfiles$Outbound> | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccount$outboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1AccountsAccount$Outbound,
  z.ZodTypeDef,
  PutApiWorkspaceServiceV1AccountsAccount
> = z.object({
  id: z.string().optional(),
  auth0UserId: z.string().optional(),
  email: z.string().optional(),
  baseDirectory: z.string().optional(),
  bucketName: z.string().optional(),
  region: z.string().optional(),
  orgId: z.string().optional(),
  tenantId: z.string().optional(),
  roles: z.array(z.string()).optional(),
  permissions: z.array(z.string()).optional(),
  mfaEnabled: z.boolean().optional(),
  complianceLevel:
    PutApiWorkspaceServiceV1AccountsComplianceLevel$outboundSchema.default(
      "COMPLIANCE_LEVEL_UNSPECIFIED",
    ),
  preferences: z.record(z.string()).optional(),
  apiKeys: z.array(z.string()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  deletedAt: z.date().transform(v => v.toISOString()).optional(),
  workspaces: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1AccountsWorkspaces$outboundSchema),
  ).optional(),
  dataProfiles: z.array(z.lazy(() => DataProfiles$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccount$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccount$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccount$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccount$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccount$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccount$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsAccount$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountToJSON(
  putApiWorkspaceServiceV1AccountsAccount:
    PutApiWorkspaceServiceV1AccountsAccount,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccount$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccount,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccount' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsRequestBody$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    account: z.lazy(() => PutApiWorkspaceServiceV1AccountsAccount$inboundSchema)
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsRequestBody$Outbound = {
  account?: PutApiWorkspaceServiceV1AccountsAccount$Outbound | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsRequestBody$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsRequestBody$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsRequestBody
  > = z.object({
    account: z.lazy(() =>
      PutApiWorkspaceServiceV1AccountsAccount$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsRequestBody$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsRequestBody$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsRequestBody$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsRequestBody$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsRequestBody$Outbound;
}

export function putApiWorkspaceServiceV1AccountsRequestBodyToJSON(
  putApiWorkspaceServiceV1AccountsRequestBody:
    PutApiWorkspaceServiceV1AccountsRequestBody,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsRequestBody$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsRequestBody,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsRequestBody' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsComplianceLevel$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiWorkspaceServiceV1AccountsAccountsComplianceLevel
  > = z.nativeEnum(PutApiWorkspaceServiceV1AccountsAccountsComplianceLevel);

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsComplianceLevel$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiWorkspaceServiceV1AccountsAccountsComplianceLevel
  > = PutApiWorkspaceServiceV1AccountsAccountsComplianceLevel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsComplianceLevel$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsComplianceLevel$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsComplianceLevel$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsComplianceLevel$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsComplianceLevel$outboundSchema;
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsEmbeddings$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsEmbeddings,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    embeddings: z.array(z.number()).optional(),
    modelVersion: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsEmbeddings$Outbound = {
  id?: string | undefined;
  embeddings?: Array<number> | undefined;
  modelVersion?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsEmbeddings$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsEmbeddings$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsEmbeddings
  > = z.object({
    id: z.string().optional(),
    embeddings: z.array(z.number()).optional(),
    modelVersion: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsEmbeddings$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsEmbeddings$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsEmbeddings$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsEmbeddings$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsEmbeddings$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsEmbeddings$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsEmbeddings$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsEmbeddingsToJSON(
  putApiWorkspaceServiceV1AccountsAccountsEmbeddings:
    PutApiWorkspaceServiceV1AccountsAccountsEmbeddings,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsEmbeddings$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsEmbeddings,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsEmbeddingsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsEmbeddings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsEmbeddings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsEmbeddings' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONResponseBodyVersions$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONResponseBodyVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    versionNumber: z.number().int().optional(),
    s3Key: z.string().optional(),
    size: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONResponseBodyVersions$Outbound =
  {
    id?: string | undefined;
    fileId?: string | undefined;
    versionNumber?: number | undefined;
    s3Key?: string | undefined;
    size?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    createdAt?: string | undefined;
  };

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONResponseBodyVersions$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONResponseBodyVersions$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONResponseBodyVersions
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    versionNumber: z.number().int().optional(),
    s3Key: z.string().optional(),
    size: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONResponseBodyVersions$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONResponseBodyVersions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONResponseBodyVersions$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONResponseBodyVersions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONResponseBodyVersions$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONResponseBodyVersions$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONResponseBodyVersions$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONResponseBodyVersionsToJSON(
  putApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONResponseBodyVersions:
    PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONResponseBodyVersions,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONResponseBodyVersions$outboundSchema
      .parse(
        putApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONResponseBodyVersions,
      ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONResponseBodyVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONResponseBodyVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONResponseBodyVersions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONResponseBodyVersions' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsComments$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsComments,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    authorId: z.string().optional(),
    content: z.string().optional(),
    startPosition: z.number().int().optional(),
    endPosition: z.number().int().optional(),
    resolved: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsComments$Outbound = {
  id?: string | undefined;
  authorId?: string | undefined;
  content?: string | undefined;
  startPosition?: number | undefined;
  endPosition?: number | undefined;
  resolved?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsComments$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsComments$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsComments
  > = z.object({
    id: z.string().optional(),
    authorId: z.string().optional(),
    content: z.string().optional(),
    startPosition: z.number().int().optional(),
    endPosition: z.number().int().optional(),
    resolved: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsComments$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsComments$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsComments$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsComments$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsComments$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsComments$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsComments$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsCommentsToJSON(
  putApiWorkspaceServiceV1AccountsAccountsComments:
    PutApiWorkspaceServiceV1AccountsAccountsComments,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsComments$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsComments,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsCommentsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsComments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsComments$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsComments' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsResponse200Sharing$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsResponse200Sharing,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsResponse200Sharing$Outbound =
  {
    id?: string | undefined;
    sharedWithEmail?: string | undefined;
    permissionLevel?: string | undefined;
    expiresAt?: string | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
  };

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsResponse200Sharing$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsResponse200Sharing$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsResponse200Sharing
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsResponse200Sharing$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsResponse200Sharing$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsResponse200Sharing$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsResponse200Sharing$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsResponse200Sharing$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsResponse200Sharing$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsResponse200Sharing$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsResponse200SharingToJSON(
  putApiWorkspaceServiceV1AccountsAccountsResponse200Sharing:
    PutApiWorkspaceServiceV1AccountsAccountsResponse200Sharing,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsResponse200Sharing$outboundSchema
      .parse(putApiWorkspaceServiceV1AccountsAccountsResponse200Sharing),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsResponse200SharingFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsResponse200Sharing,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsResponse200Sharing$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsResponse200Sharing' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsSnapshots$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsSnapshots,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    snapshotHash: z.string().optional(),
    content: z.string().optional(),
    authorId: z.string().optional(),
    reason: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsSnapshots$Outbound = {
  id?: string | undefined;
  fileId?: string | undefined;
  snapshotHash?: string | undefined;
  content?: string | undefined;
  authorId?: string | undefined;
  reason?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsSnapshots$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsSnapshots$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsSnapshots
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    snapshotHash: z.string().optional(),
    content: z.string().optional(),
    authorId: z.string().optional(),
    reason: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsSnapshots$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsSnapshots$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsSnapshots$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsSnapshots$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsSnapshots$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsSnapshots$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsSnapshots$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsSnapshotsToJSON(
  putApiWorkspaceServiceV1AccountsAccountsSnapshots:
    PutApiWorkspaceServiceV1AccountsAccountsSnapshots,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsSnapshots$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsSnapshots,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsSnapshotsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsSnapshots,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsSnapshots$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsSnapshots' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsFiles$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsFiles,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    size: z.string().optional(),
    s3Key: z.string().optional(),
    s3BucketName: z.string().optional(),
    isDeleted: z.boolean().optional(),
    version: z.number().int().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    embeddings: z.lazy(() =>
      PutApiWorkspaceServiceV1AccountsAccountsEmbeddings$inboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONResponseBodyVersions$inboundSchema
      ),
    ).optional(),
    comments: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsComments$inboundSchema
      ),
    ).optional(),
    sharing: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsResponse200Sharing$inboundSchema
      ),
    ).optional(),
    snapshots: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsSnapshots$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsFiles$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  size?: string | undefined;
  s3Key?: string | undefined;
  s3BucketName?: string | undefined;
  isDeleted?: boolean | undefined;
  version?: number | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  embeddings?:
    | PutApiWorkspaceServiceV1AccountsAccountsEmbeddings$Outbound
    | undefined;
  versions?:
    | Array<
      PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONResponseBodyVersions$Outbound
    >
    | undefined;
  comments?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsComments$Outbound>
    | undefined;
  sharing?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsResponse200Sharing$Outbound>
    | undefined;
  snapshots?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsSnapshots$Outbound>
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsFiles$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsFiles$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsFiles
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    size: z.string().optional(),
    s3Key: z.string().optional(),
    s3BucketName: z.string().optional(),
    isDeleted: z.boolean().optional(),
    version: z.number().int().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    embeddings: z.lazy(() =>
      PutApiWorkspaceServiceV1AccountsAccountsEmbeddings$outboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONResponseBodyVersions$outboundSchema
      ),
    ).optional(),
    comments: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsComments$outboundSchema
      ),
    ).optional(),
    sharing: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsResponse200Sharing$outboundSchema
      ),
    ).optional(),
    snapshots: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsSnapshots$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsFiles$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsFiles$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsFiles$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsFiles$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsFiles$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsFiles$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsAccountsFiles$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsFilesToJSON(
  putApiWorkspaceServiceV1AccountsAccountsFiles:
    PutApiWorkspaceServiceV1AccountsAccountsFiles,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsFiles$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsFiles,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsFilesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsFiles,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsFiles$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsFiles' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsFolders$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsFolders,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    isDeleted: z.boolean().optional(),
    parentFolderId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    files: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsAccountsFiles$inboundSchema),
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsFolders$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  isDeleted?: boolean | undefined;
  parentFolderId?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  files?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsFiles$Outbound>
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsFolders$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsFolders$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsFolders
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    isDeleted: z.boolean().optional(),
    parentFolderId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    files: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsFiles$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsFolders$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsFolders$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsFolders$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsFolders$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsFolders$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsFolders$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsFolders$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsFoldersToJSON(
  putApiWorkspaceServiceV1AccountsAccountsFolders:
    PutApiWorkspaceServiceV1AccountsAccountsFolders,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsFolders$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsFolders,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsFoldersFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsFolders,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsFolders$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsFolders' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsTemplateType$inboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1AccountsAccountsTemplateType> =
    z.nativeEnum(PutApiWorkspaceServiceV1AccountsAccountsTemplateType);

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsTemplateType$outboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1AccountsAccountsTemplateType> =
    PutApiWorkspaceServiceV1AccountsAccountsTemplateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsTemplateType$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsTemplateType$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsTemplateType$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsTemplateType$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsTemplateType$outboundSchema;
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsResponseVersions$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsResponseVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    version: z.string().optional(),
    baseContent: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    authorId: z.string().optional(),
    changeDescription: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsResponseVersions$Outbound =
  {
    id?: string | undefined;
    templateId?: string | undefined;
    version?: string | undefined;
    baseContent?: string | undefined;
    metadata?: { [k: string]: string } | undefined;
    authorId?: string | undefined;
    changeDescription?: string | undefined;
    createdAt?: string | undefined;
  };

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsResponseVersions$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsResponseVersions$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsResponseVersions
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    version: z.string().optional(),
    baseContent: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    authorId: z.string().optional(),
    changeDescription: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsResponseVersions$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsResponseVersions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsResponseVersions$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsResponseVersions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsResponseVersions$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsResponseVersions$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsResponseVersions$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsResponseVersionsToJSON(
  putApiWorkspaceServiceV1AccountsAccountsResponseVersions:
    PutApiWorkspaceServiceV1AccountsAccountsResponseVersions,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsResponseVersions$outboundSchema
      .parse(putApiWorkspaceServiceV1AccountsAccountsResponseVersions),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsResponseVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsResponseVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsResponseVersions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsResponseVersions' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsVariables$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsVariables,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    variableType: z.string().optional(),
    defaultValue: z.string().optional(),
    isRequired: z.boolean().optional(),
    validationRules: z.string().optional(),
    dataSource: z.string().optional(),
    aiExtractionRules: z.string().optional(),
    alternatives: z.array(z.string()).optional(),
    templateId: z.string().optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsVariables$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  variableType?: string | undefined;
  defaultValue?: string | undefined;
  isRequired?: boolean | undefined;
  validationRules?: string | undefined;
  dataSource?: string | undefined;
  aiExtractionRules?: string | undefined;
  alternatives?: Array<string> | undefined;
  templateId?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsVariables$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsVariables$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsVariables
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    variableType: z.string().optional(),
    defaultValue: z.string().optional(),
    isRequired: z.boolean().optional(),
    validationRules: z.string().optional(),
    dataSource: z.string().optional(),
    aiExtractionRules: z.string().optional(),
    alternatives: z.array(z.string()).optional(),
    templateId: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsVariables$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsVariables$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsVariables$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsVariables$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsVariables$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsVariables$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsVariables$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsVariablesToJSON(
  putApiWorkspaceServiceV1AccountsAccountsVariables:
    PutApiWorkspaceServiceV1AccountsAccountsVariables,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsVariables$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsVariables,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsVariablesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsVariables,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsVariables$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsVariables' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsResponseStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiWorkspaceServiceV1AccountsAccountsResponseStatus
  > = z.nativeEnum(PutApiWorkspaceServiceV1AccountsAccountsResponseStatus);

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsResponseStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiWorkspaceServiceV1AccountsAccountsResponseStatus
  > = PutApiWorkspaceServiceV1AccountsAccountsResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsResponseStatus$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsResponseStatus$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsResponseStatus$outboundSchema;
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsResponse200Status$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiWorkspaceServiceV1AccountsAccountsResponse200Status
  > = z.nativeEnum(PutApiWorkspaceServiceV1AccountsAccountsResponse200Status);

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsResponse200Status$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiWorkspaceServiceV1AccountsAccountsResponse200Status
  > = PutApiWorkspaceServiceV1AccountsAccountsResponse200Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsResponse200Status$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsResponse200Status$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsResponse200Status$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsResponse200Status$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsResponse200Status$outboundSchema;
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsSignatureBlocks$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsSignatureBlocks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    blockType: z.string().optional(),
    pageNumber: z.number().int().optional(),
    xPosition: z.number().optional(),
    yPosition: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    isRequired: z.boolean().optional(),
    signatureData: z.string().optional(),
    signedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsSignatureBlocks$Outbound = {
  id?: string | undefined;
  requestId?: string | undefined;
  blockType?: string | undefined;
  pageNumber?: number | undefined;
  xPosition?: number | undefined;
  yPosition?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
  isRequired?: boolean | undefined;
  signatureData?: string | undefined;
  signedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsSignatureBlocks$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsSignatureBlocks$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsSignatureBlocks
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    blockType: z.string().optional(),
    pageNumber: z.number().int().optional(),
    xPosition: z.number().optional(),
    yPosition: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    isRequired: z.boolean().optional(),
    signatureData: z.string().optional(),
    signedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsSignatureBlocks$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsSignatureBlocks$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsSignatureBlocks$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsSignatureBlocks$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsSignatureBlocks$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsSignatureBlocks$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsSignatureBlocks$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsSignatureBlocksToJSON(
  putApiWorkspaceServiceV1AccountsAccountsSignatureBlocks:
    PutApiWorkspaceServiceV1AccountsAccountsSignatureBlocks,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsSignatureBlocks$outboundSchema
      .parse(putApiWorkspaceServiceV1AccountsAccountsSignatureBlocks),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsSignatureBlocksFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsSignatureBlocks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsSignatureBlocks$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsSignatureBlocks' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsWorkflow$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsWorkflow,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    signingOrder: z.array(z.string()).optional(),
    currentSigner: z.string().optional(),
    workflowStatus: z.string().optional(),
    parallelSigning: z.boolean().optional(),
    requireAllSignatures: z.boolean().optional(),
    deadline: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsWorkflow$Outbound = {
  id?: string | undefined;
  requestId?: string | undefined;
  signingOrder?: Array<string> | undefined;
  currentSigner?: string | undefined;
  workflowStatus?: string | undefined;
  parallelSigning?: boolean | undefined;
  requireAllSignatures?: boolean | undefined;
  deadline?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsWorkflow$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsWorkflow$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsWorkflow
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    signingOrder: z.array(z.string()).optional(),
    currentSigner: z.string().optional(),
    workflowStatus: z.string().optional(),
    parallelSigning: z.boolean().optional(),
    requireAllSignatures: z.boolean().optional(),
    deadline: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsWorkflow$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsWorkflow$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsWorkflow$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsWorkflow$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsWorkflow$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsWorkflow$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsWorkflow$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsWorkflowToJSON(
  putApiWorkspaceServiceV1AccountsAccountsWorkflow:
    PutApiWorkspaceServiceV1AccountsAccountsWorkflow,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsWorkflow$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsWorkflow,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsWorkflowFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsWorkflow,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsWorkflow$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsWorkflow' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsSignatureRequests$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsSignatureRequests,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    status:
      PutApiWorkspaceServiceV1AccountsAccountsResponse200Status$inboundSchema
        .default("SIGNATURE_STATUS_UNSPECIFIED"),
    signerEmail: z.string().optional(),
    signerName: z.string().optional(),
    role: z.string().optional(),
    authenticationMethod: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    requiresMfa: z.boolean().optional(),
    signatureType: z.string().optional(),
    reminderSchedule: z.array(z.string()).optional(),
    documentId: z.string().optional(),
    signatureBlocks: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsSignatureBlocks$inboundSchema
      ),
    ).optional(),
    workflow: z.lazy(() =>
      PutApiWorkspaceServiceV1AccountsAccountsWorkflow$inboundSchema
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsSignatureRequests$Outbound =
  {
    id?: string | undefined;
    status: string;
    signerEmail?: string | undefined;
    signerName?: string | undefined;
    role?: string | undefined;
    authenticationMethod?: string | undefined;
    expiresAt?: string | undefined;
    requiresMfa?: boolean | undefined;
    signatureType?: string | undefined;
    reminderSchedule?: Array<string> | undefined;
    documentId?: string | undefined;
    signatureBlocks?:
      | Array<PutApiWorkspaceServiceV1AccountsAccountsSignatureBlocks$Outbound>
      | undefined;
    workflow?:
      | PutApiWorkspaceServiceV1AccountsAccountsWorkflow$Outbound
      | undefined;
  };

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsSignatureRequests$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsSignatureRequests$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsSignatureRequests
  > = z.object({
    id: z.string().optional(),
    status:
      PutApiWorkspaceServiceV1AccountsAccountsResponse200Status$outboundSchema
        .default("SIGNATURE_STATUS_UNSPECIFIED"),
    signerEmail: z.string().optional(),
    signerName: z.string().optional(),
    role: z.string().optional(),
    authenticationMethod: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    requiresMfa: z.boolean().optional(),
    signatureType: z.string().optional(),
    reminderSchedule: z.array(z.string()).optional(),
    documentId: z.string().optional(),
    signatureBlocks: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsSignatureBlocks$outboundSchema
      ),
    ).optional(),
    workflow: z.lazy(() =>
      PutApiWorkspaceServiceV1AccountsAccountsWorkflow$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsSignatureRequests$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsSignatureRequests$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsSignatureRequests$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsSignatureRequests$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsSignatureRequests$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsSignatureRequests$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsSignatureRequests$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsSignatureRequestsToJSON(
  putApiWorkspaceServiceV1AccountsAccountsSignatureRequests:
    PutApiWorkspaceServiceV1AccountsAccountsSignatureRequests,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsSignatureRequests$outboundSchema
      .parse(putApiWorkspaceServiceV1AccountsAccountsSignatureRequests),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsSignatureRequestsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsSignatureRequests,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsSignatureRequests$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsSignatureRequests' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsAiAssistance$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsAiAssistance,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    interactionType: z.string().optional(),
    userQuery: z.string().optional(),
    aiResponse: z.string().optional(),
    context: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsAiAssistance$Outbound = {
  id?: string | undefined;
  documentId?: string | undefined;
  interactionType?: string | undefined;
  userQuery?: string | undefined;
  aiResponse?: string | undefined;
  context?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsAiAssistance$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsAiAssistance$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsAiAssistance
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    interactionType: z.string().optional(),
    userQuery: z.string().optional(),
    aiResponse: z.string().optional(),
    context: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsAiAssistance$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsAiAssistance$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsAiAssistance$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsAiAssistance$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsAiAssistance$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsAiAssistance$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsAiAssistance$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsAiAssistanceToJSON(
  putApiWorkspaceServiceV1AccountsAccountsAiAssistance:
    PutApiWorkspaceServiceV1AccountsAccountsAiAssistance,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsAiAssistance$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsAiAssistance,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsAiAssistanceFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsAiAssistance,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsAiAssistance$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsAiAssistance' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsRounds$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsRounds,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    historyId: z.string().optional(),
    roundNumber: z.number().int().optional(),
    proposerId: z.string().optional(),
    proposalContent: z.string().optional(),
    responseContent: z.string().optional(),
    status: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsRounds$Outbound = {
  id?: string | undefined;
  historyId?: string | undefined;
  roundNumber?: number | undefined;
  proposerId?: string | undefined;
  proposalContent?: string | undefined;
  responseContent?: string | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsRounds$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsRounds$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsRounds
  > = z.object({
    id: z.string().optional(),
    historyId: z.string().optional(),
    roundNumber: z.number().int().optional(),
    proposerId: z.string().optional(),
    proposalContent: z.string().optional(),
    responseContent: z.string().optional(),
    status: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsRounds$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsRounds$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsRounds$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsRounds$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsRounds$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsRounds$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsRounds$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsRoundsToJSON(
  putApiWorkspaceServiceV1AccountsAccountsRounds:
    PutApiWorkspaceServiceV1AccountsAccountsRounds,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsRounds$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsRounds,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsRoundsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsRounds,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsRounds$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsRounds' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsNegotiation$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsNegotiation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    rounds: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsRounds$inboundSchema
      ),
    ).optional(),
    currentStatus: z.string().optional(),
    startedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsNegotiation$Outbound = {
  id?: string | undefined;
  documentId?: string | undefined;
  rounds?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsRounds$Outbound>
    | undefined;
  currentStatus?: string | undefined;
  startedAt?: string | undefined;
  lastUpdated?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsNegotiation$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsNegotiation$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsNegotiation
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    rounds: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsRounds$outboundSchema
      ),
    ).optional(),
    currentStatus: z.string().optional(),
    startedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsNegotiation$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsNegotiation$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsNegotiation$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsNegotiation$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsNegotiation$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsNegotiation$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsNegotiation$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsNegotiationToJSON(
  putApiWorkspaceServiceV1AccountsAccountsNegotiation:
    PutApiWorkspaceServiceV1AccountsAccountsNegotiation,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsNegotiation$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsNegotiation,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsNegotiationFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsNegotiation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsNegotiation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsNegotiation' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsMerges$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsMerges,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    sourceBranch: z.string().optional(),
    targetBranch: z.string().optional(),
    mergeStatus: z.string().optional(),
    mergeStrategy: z.string().optional(),
    conflicts: z.array(z.string()).optional(),
    mergerId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    completedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsMerges$Outbound = {
  id?: string | undefined;
  branchId?: string | undefined;
  sourceBranch?: string | undefined;
  targetBranch?: string | undefined;
  mergeStatus?: string | undefined;
  mergeStrategy?: string | undefined;
  conflicts?: Array<string> | undefined;
  mergerId?: string | undefined;
  createdAt?: string | undefined;
  completedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsMerges$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsMerges$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsMerges
  > = z.object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    sourceBranch: z.string().optional(),
    targetBranch: z.string().optional(),
    mergeStatus: z.string().optional(),
    mergeStrategy: z.string().optional(),
    conflicts: z.array(z.string()).optional(),
    mergerId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    completedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsMerges$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsMerges$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsMerges$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsMerges$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsMerges$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsMerges$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsMerges$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsMergesToJSON(
  putApiWorkspaceServiceV1AccountsAccountsMerges:
    PutApiWorkspaceServiceV1AccountsAccountsMerges,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsMerges$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsMerges,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsMergesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsMerges,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsMerges$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsMerges' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsPolicy$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsPolicy,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    requiredApprovers: z.array(z.string()).optional(),
    minimumApprovals: z.number().int().optional(),
    enforceLinearHistory: z.boolean().optional(),
    allowForcePush: z.boolean().optional(),
    protectedPaths: z.array(z.string()).optional(),
    mergeRules: z.record(z.string()).optional(),
    automatedChecks: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsPolicy$Outbound = {
  id?: string | undefined;
  branchId?: string | undefined;
  requiredApprovers?: Array<string> | undefined;
  minimumApprovals?: number | undefined;
  enforceLinearHistory?: boolean | undefined;
  allowForcePush?: boolean | undefined;
  protectedPaths?: Array<string> | undefined;
  mergeRules?: { [k: string]: string } | undefined;
  automatedChecks?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsPolicy$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsPolicy$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsPolicy
  > = z.object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    requiredApprovers: z.array(z.string()).optional(),
    minimumApprovals: z.number().int().optional(),
    enforceLinearHistory: z.boolean().optional(),
    allowForcePush: z.boolean().optional(),
    protectedPaths: z.array(z.string()).optional(),
    mergeRules: z.record(z.string()).optional(),
    automatedChecks: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsPolicy$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsPolicy$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsPolicy$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsPolicy$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsPolicy$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsPolicy$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsPolicy$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsPolicyToJSON(
  putApiWorkspaceServiceV1AccountsAccountsPolicy:
    PutApiWorkspaceServiceV1AccountsAccountsPolicy,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsPolicy$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsPolicy,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsPolicyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsPolicy,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsPolicy$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsPolicy' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsMergeRequests$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsMergeRequests,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sourceBranchId: z.string().optional(),
    targetBranchId: z.string().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    authorId: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    status: z.string().optional(),
    labels: z.array(z.string()).optional(),
    hasConflicts: z.boolean().optional(),
    automatedCheckResults: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsMergeRequests$Outbound = {
  id?: string | undefined;
  sourceBranchId?: string | undefined;
  targetBranchId?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  authorId?: string | undefined;
  reviewers?: Array<string> | undefined;
  status?: string | undefined;
  labels?: Array<string> | undefined;
  hasConflicts?: boolean | undefined;
  automatedCheckResults?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsMergeRequests$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsMergeRequests$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsMergeRequests
  > = z.object({
    id: z.string().optional(),
    sourceBranchId: z.string().optional(),
    targetBranchId: z.string().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    authorId: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    status: z.string().optional(),
    labels: z.array(z.string()).optional(),
    hasConflicts: z.boolean().optional(),
    automatedCheckResults: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsMergeRequests$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsMergeRequests$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsMergeRequests$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsMergeRequests$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsMergeRequests$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsMergeRequests$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsMergeRequests$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsMergeRequestsToJSON(
  putApiWorkspaceServiceV1AccountsAccountsMergeRequests:
    PutApiWorkspaceServiceV1AccountsAccountsMergeRequests,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsMergeRequests$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsMergeRequests,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsMergeRequestsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsMergeRequests,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsMergeRequests$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsMergeRequests' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsBranches$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsBranches,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    baseVersionHash: z.string().optional(),
    currentHeadHash: z.string().optional(),
    purpose: z.string().optional(),
    status: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    branchMetadata: z.record(z.string()).optional(),
    isLocked: z.boolean().optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    merges: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsMerges$inboundSchema
      ),
    ).optional(),
    policy: z.lazy(() =>
      PutApiWorkspaceServiceV1AccountsAccountsPolicy$inboundSchema
    ).optional(),
    mergeRequests: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsMergeRequests$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsBranches$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  baseVersionHash?: string | undefined;
  currentHeadHash?: string | undefined;
  purpose?: string | undefined;
  status?: string | undefined;
  reviewers?: Array<string> | undefined;
  branchMetadata?: { [k: string]: string } | undefined;
  isLocked?: boolean | undefined;
  lastUpdated?: string | undefined;
  merges?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsMerges$Outbound>
    | undefined;
  policy?: PutApiWorkspaceServiceV1AccountsAccountsPolicy$Outbound | undefined;
  mergeRequests?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsMergeRequests$Outbound>
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsBranches$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsBranches$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsBranches
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    baseVersionHash: z.string().optional(),
    currentHeadHash: z.string().optional(),
    purpose: z.string().optional(),
    status: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    branchMetadata: z.record(z.string()).optional(),
    isLocked: z.boolean().optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
    merges: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsMerges$outboundSchema
      ),
    ).optional(),
    policy: z.lazy(() =>
      PutApiWorkspaceServiceV1AccountsAccountsPolicy$outboundSchema
    ).optional(),
    mergeRequests: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsMergeRequests$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsBranches$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsBranches$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsBranches$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsBranches$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsBranches$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsBranches$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsBranches$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsBranchesToJSON(
  putApiWorkspaceServiceV1AccountsAccountsBranches:
    PutApiWorkspaceServiceV1AccountsAccountsBranches,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsBranches$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsBranches,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsBranchesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsBranches,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsBranches$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsBranches' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsChanges$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsChanges,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    changeType: z.string().optional(),
    contentBefore: z.string().optional(),
    contentAfter: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsChanges$Outbound = {
  id?: string | undefined;
  versionId?: string | undefined;
  changeType?: string | undefined;
  contentBefore?: string | undefined;
  contentAfter?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsChanges$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsChanges$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsChanges
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    changeType: z.string().optional(),
    contentBefore: z.string().optional(),
    contentAfter: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsChanges$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsChanges$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsChanges$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsChanges$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsChanges$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsChanges$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsChanges$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsChangesToJSON(
  putApiWorkspaceServiceV1AccountsAccountsChanges:
    PutApiWorkspaceServiceV1AccountsAccountsChanges,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsChanges$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsChanges,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsChangesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsChanges,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsChanges$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsChanges' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsSummaries$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsSummaries,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    summaryType: z.string().optional(),
    content: z.string().optional(),
    targetAudience: z.string().optional(),
    keyPoints: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsSummaries$Outbound = {
  id?: string | undefined;
  versionId?: string | undefined;
  summaryType?: string | undefined;
  content?: string | undefined;
  targetAudience?: string | undefined;
  keyPoints?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsSummaries$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsSummaries$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsSummaries
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    summaryType: z.string().optional(),
    content: z.string().optional(),
    targetAudience: z.string().optional(),
    keyPoints: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsSummaries$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsSummaries$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsSummaries$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsSummaries$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsSummaries$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsSummaries$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsSummaries$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsSummariesToJSON(
  putApiWorkspaceServiceV1AccountsAccountsSummaries:
    PutApiWorkspaceServiceV1AccountsAccountsSummaries,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsSummaries$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsSummaries,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsSummariesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsSummaries,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsSummaries$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsSummaries' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONVersions$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionHash: z.string().optional(),
    parentHash: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    branchName: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    isApproved: z.boolean().optional(),
    approvalChain: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    branches: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsBranches$inboundSchema
      ),
    ).optional(),
    changes: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsChanges$inboundSchema
      ),
    ).optional(),
    summaries: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsSummaries$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONVersions$Outbound =
  {
    id?: string | undefined;
    versionHash?: string | undefined;
    parentHash?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    branchName?: string | undefined;
    metadata?: { [k: string]: string } | undefined;
    tags?: Array<string> | undefined;
    isApproved?: boolean | undefined;
    approvalChain?: string | undefined;
    createdAt?: string | undefined;
    branches?:
      | Array<PutApiWorkspaceServiceV1AccountsAccountsBranches$Outbound>
      | undefined;
    changes?:
      | Array<PutApiWorkspaceServiceV1AccountsAccountsChanges$Outbound>
      | undefined;
    summaries?:
      | Array<PutApiWorkspaceServiceV1AccountsAccountsSummaries$Outbound>
      | undefined;
  };

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONVersions$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONVersions$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONVersions
  > = z.object({
    id: z.string().optional(),
    versionHash: z.string().optional(),
    parentHash: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    branchName: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    isApproved: z.boolean().optional(),
    approvalChain: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    branches: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsBranches$outboundSchema
      ),
    ).optional(),
    changes: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsChanges$outboundSchema
      ),
    ).optional(),
    summaries: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsSummaries$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONVersions$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONVersions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONVersions$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONVersions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONVersions$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONVersions$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONVersions$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONVersionsToJSON(
  putApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONVersions:
    PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONVersions,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONVersions$outboundSchema
      .parse(
        putApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONVersions,
      ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONVersions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONVersions' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsInstances$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsInstances,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    status: PutApiWorkspaceServiceV1AccountsAccountsResponseStatus$inboundSchema
      .default("DOCUMENT_STATUS_UNSPECIFIED"),
    fieldValues: z.record(z.string()).optional(),
    signers: z.array(z.string()).optional(),
    language: z.string().optional(),
    isCompleted: z.boolean().optional(),
    dueDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    generatedContent: z.string().optional(),
    attachments: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    signatureRequests: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsSignatureRequests$inboundSchema
      ),
    ).optional(),
    aiAssistance: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsAiAssistance$inboundSchema
      ),
    ).optional(),
    negotiation: z.lazy(() =>
      PutApiWorkspaceServiceV1AccountsAccountsNegotiation$inboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONVersions$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsInstances$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  status: string;
  fieldValues?: { [k: string]: string } | undefined;
  signers?: Array<string> | undefined;
  language?: string | undefined;
  isCompleted?: boolean | undefined;
  dueDate?: string | undefined;
  generatedContent?: string | undefined;
  attachments?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  signatureRequests?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsSignatureRequests$Outbound>
    | undefined;
  aiAssistance?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsAiAssistance$Outbound>
    | undefined;
  negotiation?:
    | PutApiWorkspaceServiceV1AccountsAccountsNegotiation$Outbound
    | undefined;
  versions?:
    | Array<
      PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONVersions$Outbound
    >
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsInstances$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsInstances$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsInstances
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    status:
      PutApiWorkspaceServiceV1AccountsAccountsResponseStatus$outboundSchema
        .default("DOCUMENT_STATUS_UNSPECIFIED"),
    fieldValues: z.record(z.string()).optional(),
    signers: z.array(z.string()).optional(),
    language: z.string().optional(),
    isCompleted: z.boolean().optional(),
    dueDate: z.date().transform(v => v.toISOString()).optional(),
    generatedContent: z.string().optional(),
    attachments: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    signatureRequests: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsSignatureRequests$outboundSchema
      ),
    ).optional(),
    aiAssistance: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsAiAssistance$outboundSchema
      ),
    ).optional(),
    negotiation: z.lazy(() =>
      PutApiWorkspaceServiceV1AccountsAccountsNegotiation$outboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsResponse200ApplicationJSONVersions$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsInstances$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsInstances$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsInstances$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsInstances$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsInstances$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsInstances$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsInstances$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsInstancesToJSON(
  putApiWorkspaceServiceV1AccountsAccountsInstances:
    PutApiWorkspaceServiceV1AccountsAccountsInstances,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsInstances$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsInstances,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsInstancesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsInstances,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsInstances$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsInstances' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsExplanations$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsExplanations,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    sectionIdentifier: z.string().optional(),
    explanationText: z.string().optional(),
    complexityLevel: z.string().optional(),
    relatedTerms: z.array(z.string()).optional(),
    legalReferences: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsExplanations$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  sectionIdentifier?: string | undefined;
  explanationText?: string | undefined;
  complexityLevel?: string | undefined;
  relatedTerms?: Array<string> | undefined;
  legalReferences?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsExplanations$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsExplanations$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsExplanations
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    sectionIdentifier: z.string().optional(),
    explanationText: z.string().optional(),
    complexityLevel: z.string().optional(),
    relatedTerms: z.array(z.string()).optional(),
    legalReferences: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsExplanations$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsExplanations$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsExplanations$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsExplanations$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsExplanations$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsExplanations$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsExplanations$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsExplanationsToJSON(
  putApiWorkspaceServiceV1AccountsAccountsExplanations:
    PutApiWorkspaceServiceV1AccountsAccountsExplanations,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsExplanations$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsExplanations,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsExplanationsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsExplanations,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsExplanations$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsExplanations' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsRiskAssessments$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsRiskAssessments,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    riskType: z.string().optional(),
    riskScore: z.number().optional(),
    assessmentDetails: z.string().optional(),
    mitigationSuggestions: z.array(z.string()).optional(),
    assessorId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsRiskAssessments$Outbound = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  riskType?: string | undefined;
  riskScore?: number | undefined;
  assessmentDetails?: string | undefined;
  mitigationSuggestions?: Array<string> | undefined;
  assessorId?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsRiskAssessments$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsRiskAssessments$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsRiskAssessments
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    riskType: z.string().optional(),
    riskScore: z.number().optional(),
    assessmentDetails: z.string().optional(),
    mitigationSuggestions: z.array(z.string()).optional(),
    assessorId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsRiskAssessments$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsRiskAssessments$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsRiskAssessments$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsRiskAssessments$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsRiskAssessments$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsRiskAssessments$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsRiskAssessments$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsRiskAssessmentsToJSON(
  putApiWorkspaceServiceV1AccountsAccountsRiskAssessments:
    PutApiWorkspaceServiceV1AccountsAccountsRiskAssessments,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsRiskAssessments$outboundSchema
      .parse(putApiWorkspaceServiceV1AccountsAccountsRiskAssessments),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsRiskAssessmentsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsRiskAssessments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsRiskAssessments$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsRiskAssessments' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsComplianceChecks$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsComplianceChecks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    complianceStandard: z.string().optional(),
    checkResult: z.string().optional(),
    violations: z.array(z.string()).optional(),
    remediationSteps: z.string().optional(),
    checkDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsComplianceChecks$Outbound =
  {
    id?: string | undefined;
    intelligenceId?: string | undefined;
    complianceStandard?: string | undefined;
    checkResult?: string | undefined;
    violations?: Array<string> | undefined;
    remediationSteps?: string | undefined;
    checkDate?: string | undefined;
  };

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsComplianceChecks$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsComplianceChecks$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsComplianceChecks
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    complianceStandard: z.string().optional(),
    checkResult: z.string().optional(),
    violations: z.array(z.string()).optional(),
    remediationSteps: z.string().optional(),
    checkDate: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsComplianceChecks$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsComplianceChecks$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsComplianceChecks$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsComplianceChecks$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsComplianceChecks$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsComplianceChecks$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsComplianceChecks$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsComplianceChecksToJSON(
  putApiWorkspaceServiceV1AccountsAccountsComplianceChecks:
    PutApiWorkspaceServiceV1AccountsAccountsComplianceChecks,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsComplianceChecks$outboundSchema
      .parse(putApiWorkspaceServiceV1AccountsAccountsComplianceChecks),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsComplianceChecksFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsComplianceChecks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsComplianceChecks$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsComplianceChecks' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsIntelligence$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsIntelligence,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    contractType: z.string().optional(),
    riskScores: z.record(z.number()).optional(),
    detectedClauses: z.record(z.string()).optional(),
    keyObligations: z.array(z.string()).optional(),
    complianceScores: z.record(z.number()).optional(),
    jurisdiction: z.string().optional(),
    governingLaws: z.array(z.string()).optional(),
    semanticAnalysis: z.record(z.string()).optional(),
    analysisDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    riskAssessments: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsRiskAssessments$inboundSchema
      ),
    ).optional(),
    complianceChecks: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsComplianceChecks$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsIntelligence$Outbound = {
  id?: string | undefined;
  contractType?: string | undefined;
  riskScores?: { [k: string]: number } | undefined;
  detectedClauses?: { [k: string]: string } | undefined;
  keyObligations?: Array<string> | undefined;
  complianceScores?: { [k: string]: number } | undefined;
  jurisdiction?: string | undefined;
  governingLaws?: Array<string> | undefined;
  semanticAnalysis?: { [k: string]: string } | undefined;
  analysisDate?: string | undefined;
  riskAssessments?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsRiskAssessments$Outbound>
    | undefined;
  complianceChecks?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsComplianceChecks$Outbound>
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsIntelligence$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsIntelligence$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsIntelligence
  > = z.object({
    id: z.string().optional(),
    contractType: z.string().optional(),
    riskScores: z.record(z.number()).optional(),
    detectedClauses: z.record(z.string()).optional(),
    keyObligations: z.array(z.string()).optional(),
    complianceScores: z.record(z.number()).optional(),
    jurisdiction: z.string().optional(),
    governingLaws: z.array(z.string()).optional(),
    semanticAnalysis: z.record(z.string()).optional(),
    analysisDate: z.date().transform(v => v.toISOString()).optional(),
    riskAssessments: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsRiskAssessments$outboundSchema
      ),
    ).optional(),
    complianceChecks: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsComplianceChecks$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsIntelligence$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsIntelligence$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsIntelligence$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsIntelligence$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsIntelligence$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsIntelligence$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsIntelligence$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsIntelligenceToJSON(
  putApiWorkspaceServiceV1AccountsAccountsIntelligence:
    PutApiWorkspaceServiceV1AccountsAccountsIntelligence,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsIntelligence$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsIntelligence,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsIntelligenceFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsIntelligence,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsIntelligence$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsIntelligence' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsTemplates$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsTemplates,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    industryType: z.string().optional(),
    documentType: z.string().optional(),
    baseContent: z.string().optional(),
    isAdaptive: z.boolean().optional(),
    metadata: z.record(z.string()).optional(),
    supportedLanguages: z.array(z.string()).optional(),
    requiredDataFields: z.array(z.string()).optional(),
    version: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    templateType:
      PutApiWorkspaceServiceV1AccountsAccountsTemplateType$inboundSchema
        .default("TEMPLATE_TYPE_UNSPECIFIED"),
    content: z.string().optional(),
    detectedVariables: z.array(z.string()).optional(),
    variableMappings: z.record(z.string()).optional(),
    isContextAware: z.boolean().optional(),
    supportedContexts: z.array(z.string()).optional(),
    formattingRules: z.record(z.string()).optional(),
    conditionalSections: z.array(z.string()).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsResponseVersions$inboundSchema
      ),
    ).optional(),
    variables: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsVariables$inboundSchema
      ),
    ).optional(),
    instances: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsInstances$inboundSchema
      ),
    ).optional(),
    explanations: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsExplanations$inboundSchema
      ),
    ).optional(),
    intelligence: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsIntelligence$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsTemplates$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  industryType?: string | undefined;
  documentType?: string | undefined;
  baseContent?: string | undefined;
  isAdaptive?: boolean | undefined;
  metadata?: { [k: string]: string } | undefined;
  supportedLanguages?: Array<string> | undefined;
  requiredDataFields?: Array<string> | undefined;
  version?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  templateType: string;
  content?: string | undefined;
  detectedVariables?: Array<string> | undefined;
  variableMappings?: { [k: string]: string } | undefined;
  isContextAware?: boolean | undefined;
  supportedContexts?: Array<string> | undefined;
  formattingRules?: { [k: string]: string } | undefined;
  conditionalSections?: Array<string> | undefined;
  versions?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsResponseVersions$Outbound>
    | undefined;
  variables?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsVariables$Outbound>
    | undefined;
  instances?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsInstances$Outbound>
    | undefined;
  explanations?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsExplanations$Outbound>
    | undefined;
  intelligence?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsIntelligence$Outbound>
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsTemplates$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsTemplates$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsTemplates
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    industryType: z.string().optional(),
    documentType: z.string().optional(),
    baseContent: z.string().optional(),
    isAdaptive: z.boolean().optional(),
    metadata: z.record(z.string()).optional(),
    supportedLanguages: z.array(z.string()).optional(),
    requiredDataFields: z.array(z.string()).optional(),
    version: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    templateType:
      PutApiWorkspaceServiceV1AccountsAccountsTemplateType$outboundSchema
        .default("TEMPLATE_TYPE_UNSPECIFIED"),
    content: z.string().optional(),
    detectedVariables: z.array(z.string()).optional(),
    variableMappings: z.record(z.string()).optional(),
    isContextAware: z.boolean().optional(),
    supportedContexts: z.array(z.string()).optional(),
    formattingRules: z.record(z.string()).optional(),
    conditionalSections: z.array(z.string()).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsResponseVersions$outboundSchema
      ),
    ).optional(),
    variables: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsVariables$outboundSchema
      ),
    ).optional(),
    instances: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsInstances$outboundSchema
      ),
    ).optional(),
    explanations: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsExplanations$outboundSchema
      ),
    ).optional(),
    intelligence: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsIntelligence$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsTemplates$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsTemplates$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsTemplates$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsTemplates$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsTemplates$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsTemplates$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsTemplates$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsTemplatesToJSON(
  putApiWorkspaceServiceV1AccountsAccountsTemplates:
    PutApiWorkspaceServiceV1AccountsAccountsTemplates,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsTemplates$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsTemplates,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsTemplatesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsTemplates,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsTemplates$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsTemplates' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsResponseSharing$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsResponseSharing,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsResponseSharing$Outbound = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsResponseSharing$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsResponseSharing$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsResponseSharing
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsResponseSharing$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsResponseSharing$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsResponseSharing$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsResponseSharing$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsResponseSharing$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsResponseSharing$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsResponseSharing$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsResponseSharingToJSON(
  putApiWorkspaceServiceV1AccountsAccountsResponseSharing:
    PutApiWorkspaceServiceV1AccountsAccountsResponseSharing,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsResponseSharing$outboundSchema
      .parse(putApiWorkspaceServiceV1AccountsAccountsResponseSharing),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsResponseSharingFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsResponseSharing,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsResponseSharing$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsResponseSharing' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsActivities$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsActivities,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    activityType: z.string().optional(),
    userId: z.string().optional(),
    description: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsActivities$Outbound = {
  id?: string | undefined;
  activityType?: string | undefined;
  userId?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsActivities$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsActivities$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsActivities
  > = z.object({
    id: z.string().optional(),
    activityType: z.string().optional(),
    userId: z.string().optional(),
    description: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsActivities$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsActivities$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsActivities$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsActivities$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsActivities$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsActivities$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsActivities$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsActivitiesToJSON(
  putApiWorkspaceServiceV1AccountsAccountsActivities:
    PutApiWorkspaceServiceV1AccountsAccountsActivities,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsActivities$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsActivities,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsActivitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsActivities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsActivities$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsActivities' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsCompliance$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsCompliance,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    complianceType: z.string().optional(),
    status: z.string().optional(),
    certificationId: z.string().optional(),
    validUntil: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsCompliance$Outbound = {
  id?: string | undefined;
  complianceType?: string | undefined;
  status?: string | undefined;
  certificationId?: string | undefined;
  validUntil?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsCompliance$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsCompliance$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsCompliance
  > = z.object({
    id: z.string().optional(),
    complianceType: z.string().optional(),
    status: z.string().optional(),
    certificationId: z.string().optional(),
    validUntil: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsCompliance$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsCompliance$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsCompliance$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsCompliance$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsCompliance$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsCompliance$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsCompliance$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsComplianceToJSON(
  putApiWorkspaceServiceV1AccountsAccountsCompliance:
    PutApiWorkspaceServiceV1AccountsAccountsCompliance,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsCompliance$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsCompliance,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsComplianceFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsCompliance,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsCompliance$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsCompliance' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsCategory$inboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1AccountsAccountsCategory> = z
    .nativeEnum(PutApiWorkspaceServiceV1AccountsAccountsCategory);

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsCategory$outboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1AccountsAccountsCategory> =
    PutApiWorkspaceServiceV1AccountsAccountsCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsCategory$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsCategory$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsCategory$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsCategory$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsCategory$outboundSchema;
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsPricingModel$inboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1AccountsAccountsPricingModel> =
    z.nativeEnum(PutApiWorkspaceServiceV1AccountsAccountsPricingModel);

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsPricingModel$outboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1AccountsAccountsPricingModel> =
    PutApiWorkspaceServiceV1AccountsAccountsPricingModel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsPricingModel$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsPricingModel$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsPricingModel$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsPricingModel$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsPricingModel$outboundSchema;
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsResponse200Versions$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsResponse200Versions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    versionNumber: z.string().optional(),
    changelog: z.string().optional(),
    requirements: z.record(z.string()).optional(),
    isPublic: z.boolean().optional(),
    releaseDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsResponse200Versions$Outbound =
  {
    id?: string | undefined;
    appId?: string | undefined;
    versionNumber?: string | undefined;
    changelog?: string | undefined;
    requirements?: { [k: string]: string } | undefined;
    isPublic?: boolean | undefined;
    releaseDate?: string | undefined;
  };

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsResponse200Versions$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsResponse200Versions$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsResponse200Versions
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    versionNumber: z.string().optional(),
    changelog: z.string().optional(),
    requirements: z.record(z.string()).optional(),
    isPublic: z.boolean().optional(),
    releaseDate: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsResponse200Versions$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsResponse200Versions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsResponse200Versions$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsResponse200Versions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsResponse200Versions$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsResponse200Versions$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsResponse200Versions$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsResponse200VersionsToJSON(
  putApiWorkspaceServiceV1AccountsAccountsResponse200Versions:
    PutApiWorkspaceServiceV1AccountsAccountsResponse200Versions,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsResponse200Versions$outboundSchema
      .parse(putApiWorkspaceServiceV1AccountsAccountsResponse200Versions),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsResponse200VersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsResponse200Versions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsResponse200Versions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsResponse200Versions' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsInstallations$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsInstallations,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    workspaceId: z.string().optional(),
    versionInstalled: z.string().optional(),
    configuration: z.record(z.string()).optional(),
    installationStatus: z.string().optional(),
    installedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    lastUsed: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsInstallations$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  workspaceId?: string | undefined;
  versionInstalled?: string | undefined;
  configuration?: { [k: string]: string } | undefined;
  installationStatus?: string | undefined;
  installedAt?: string | undefined;
  lastUsed?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsInstallations$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsInstallations$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsInstallations
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    workspaceId: z.string().optional(),
    versionInstalled: z.string().optional(),
    configuration: z.record(z.string()).optional(),
    installationStatus: z.string().optional(),
    installedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUsed: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsInstallations$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsInstallations$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsInstallations$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsInstallations$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsInstallations$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsInstallations$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsInstallations$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsInstallationsToJSON(
  putApiWorkspaceServiceV1AccountsAccountsInstallations:
    PutApiWorkspaceServiceV1AccountsAccountsInstallations,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsInstallations$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsInstallations,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsInstallationsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsInstallations,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsInstallations$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsInstallations' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsAnalytics$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsAnalytics,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    metricName: z.string().optional(),
    metricValue: z.number().optional(),
    dimensions: z.record(z.string()).optional(),
    recordedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsAnalytics$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  metricName?: string | undefined;
  metricValue?: number | undefined;
  dimensions?: { [k: string]: string } | undefined;
  recordedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsAnalytics$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsAnalytics$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsAnalytics
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    metricName: z.string().optional(),
    metricValue: z.number().optional(),
    dimensions: z.record(z.string()).optional(),
    recordedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsAnalytics$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsAnalytics$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsAnalytics$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsAnalytics$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsAnalytics$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsAnalytics$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsAnalytics$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsAnalyticsToJSON(
  putApiWorkspaceServiceV1AccountsAccountsAnalytics:
    PutApiWorkspaceServiceV1AccountsAccountsAnalytics,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsAnalytics$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsAnalytics,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsAnalytics,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsAnalytics$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsAnalytics' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsReviews$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsReviews,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    reviewerId: z.string().optional(),
    rating: z.number().optional(),
    reviewText: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsReviews$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  reviewerId?: string | undefined;
  rating?: number | undefined;
  reviewText?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsReviews$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsReviews$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsReviews
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    reviewerId: z.string().optional(),
    rating: z.number().optional(),
    reviewText: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsReviews$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsReviews$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsReviews$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsReviews$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsReviews$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsReviews$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsReviews$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsReviewsToJSON(
  putApiWorkspaceServiceV1AccountsAccountsReviews:
    PutApiWorkspaceServiceV1AccountsAccountsReviews,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsReviews$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsReviews,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsReviewsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsReviews,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsReviews$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsReviews' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsInfo$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsInfo,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    supportedLanguages: z.array(z.string()).optional(),
    sdkFeatures: z.array(z.string()).optional(),
    testCoverage: z.record(z.number()).optional(),
    securityScans: z.array(z.string()).optional(),
    performanceMetrics: z.record(z.string()).optional(),
    developmentStatus: z.string().optional(),
    knownIssues: z.array(z.string()).optional(),
    roadmapUrl: z.string().optional(),
    lastSecurityAudit: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsInfo$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  supportedLanguages?: Array<string> | undefined;
  sdkFeatures?: Array<string> | undefined;
  testCoverage?: { [k: string]: number } | undefined;
  securityScans?: Array<string> | undefined;
  performanceMetrics?: { [k: string]: string } | undefined;
  developmentStatus?: string | undefined;
  knownIssues?: Array<string> | undefined;
  roadmapUrl?: string | undefined;
  lastSecurityAudit?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsInfo$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsInfo$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsInfo
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    supportedLanguages: z.array(z.string()).optional(),
    sdkFeatures: z.array(z.string()).optional(),
    testCoverage: z.record(z.number()).optional(),
    securityScans: z.array(z.string()).optional(),
    performanceMetrics: z.record(z.string()).optional(),
    developmentStatus: z.string().optional(),
    knownIssues: z.array(z.string()).optional(),
    roadmapUrl: z.string().optional(),
    lastSecurityAudit: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsInfo$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsInfo$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsInfo$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsInfo$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsInfo$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsInfo$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsAccountsInfo$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsInfoToJSON(
  putApiWorkspaceServiceV1AccountsAccountsInfo:
    PutApiWorkspaceServiceV1AccountsAccountsInfo,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsInfo$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsInfo,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsInfoFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsInfo,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsInfo$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsInfo' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsWebhooks$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsWebhooks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    url: z.string().optional(),
    subscribedEvents: z.array(z.string()).optional(),
    secretKey: z.string().optional(),
    retryCount: z.number().int().optional(),
    timeoutSeconds: z.number().int().optional(),
    isActive: z.boolean().optional(),
    headers: z.record(z.string()).optional(),
    lastTriggered: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsWebhooks$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  url?: string | undefined;
  subscribedEvents?: Array<string> | undefined;
  secretKey?: string | undefined;
  retryCount?: number | undefined;
  timeoutSeconds?: number | undefined;
  isActive?: boolean | undefined;
  headers?: { [k: string]: string } | undefined;
  lastTriggered?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsWebhooks$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsWebhooks$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsWebhooks
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    url: z.string().optional(),
    subscribedEvents: z.array(z.string()).optional(),
    secretKey: z.string().optional(),
    retryCount: z.number().int().optional(),
    timeoutSeconds: z.number().int().optional(),
    isActive: z.boolean().optional(),
    headers: z.record(z.string()).optional(),
    lastTriggered: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsWebhooks$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsWebhooks$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsWebhooks$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsWebhooks$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsWebhooks$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsWebhooks$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsWebhooks$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsWebhooksToJSON(
  putApiWorkspaceServiceV1AccountsAccountsWebhooks:
    PutApiWorkspaceServiceV1AccountsAccountsWebhooks,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsWebhooks$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsWebhooks,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsWebhooksFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsWebhooks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsWebhooks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsWebhooks' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsPermissions$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsPermissions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    scope: z.string().optional(),
    description: z.string().optional(),
    isRequired: z.boolean().optional(),
    accessLevels: z.array(z.string()).optional(),
    constraints: z.record(z.string()).optional(),
    requiresApproval: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsPermissions$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  scope?: string | undefined;
  description?: string | undefined;
  isRequired?: boolean | undefined;
  accessLevels?: Array<string> | undefined;
  constraints?: { [k: string]: string } | undefined;
  requiresApproval?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsPermissions$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsPermissions$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsPermissions
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    scope: z.string().optional(),
    description: z.string().optional(),
    isRequired: z.boolean().optional(),
    accessLevels: z.array(z.string()).optional(),
    constraints: z.record(z.string()).optional(),
    requiresApproval: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsPermissions$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsPermissions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsPermissions$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsPermissions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsPermissions$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsPermissions$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsPermissions$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsPermissionsToJSON(
  putApiWorkspaceServiceV1AccountsAccountsPermissions:
    PutApiWorkspaceServiceV1AccountsAccountsPermissions,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsPermissions$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsPermissions,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsPermissionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsPermissions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsPermissions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsPermissions' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsInstalledApps$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsInstalledApps,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    developerId: z.string().optional(),
    category: PutApiWorkspaceServiceV1AccountsAccountsCategory$inboundSchema
      .default("APP_CATEGORY_UNSPECIFIED"),
    supportedContractTypes: z.array(z.string()).optional(),
    features: z.array(z.string()).optional(),
    pricingModel:
      PutApiWorkspaceServiceV1AccountsAccountsPricingModel$inboundSchema
        .default("PRICING_MODEL_UNSPECIFIED"),
    pricingTiers: z.record(z.number()).optional(),
    supportedIntegrations: z.array(z.string()).optional(),
    isVerified: z.boolean().optional(),
    rating: z.number().optional(),
    installationCount: z.number().int().optional(),
    requiredPermissions: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    documentationUrl: z.string().optional(),
    supportEmail: z.string().optional(),
    screenshots: z.array(z.string()).optional(),
    privacyPolicyUrl: z.string().optional(),
    termsUrl: z.string().optional(),
    publishedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsResponse200Versions$inboundSchema
      ),
    ).optional(),
    installations: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsInstallations$inboundSchema
      ),
    ).optional(),
    analytics: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsAnalytics$inboundSchema
      ),
    ).optional(),
    reviews: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsReviews$inboundSchema
      ),
    ).optional(),
    info: z.lazy(() =>
      PutApiWorkspaceServiceV1AccountsAccountsInfo$inboundSchema
    ).optional(),
    webhooks: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsWebhooks$inboundSchema
      ),
    ).optional(),
    permissions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsPermissions$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsInstalledApps$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  developerId?: string | undefined;
  category: string;
  supportedContractTypes?: Array<string> | undefined;
  features?: Array<string> | undefined;
  pricingModel: string;
  pricingTiers?: { [k: string]: number } | undefined;
  supportedIntegrations?: Array<string> | undefined;
  isVerified?: boolean | undefined;
  rating?: number | undefined;
  installationCount?: number | undefined;
  requiredPermissions?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  documentationUrl?: string | undefined;
  supportEmail?: string | undefined;
  screenshots?: Array<string> | undefined;
  privacyPolicyUrl?: string | undefined;
  termsUrl?: string | undefined;
  publishedAt?: string | undefined;
  lastUpdated?: string | undefined;
  versions?:
    | Array<
      PutApiWorkspaceServiceV1AccountsAccountsResponse200Versions$Outbound
    >
    | undefined;
  installations?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsInstallations$Outbound>
    | undefined;
  analytics?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsAnalytics$Outbound>
    | undefined;
  reviews?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsReviews$Outbound>
    | undefined;
  info?: PutApiWorkspaceServiceV1AccountsAccountsInfo$Outbound | undefined;
  webhooks?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsWebhooks$Outbound>
    | undefined;
  permissions?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsPermissions$Outbound>
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsInstalledApps$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsInstalledApps$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsInstalledApps
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    developerId: z.string().optional(),
    category: PutApiWorkspaceServiceV1AccountsAccountsCategory$outboundSchema
      .default("APP_CATEGORY_UNSPECIFIED"),
    supportedContractTypes: z.array(z.string()).optional(),
    features: z.array(z.string()).optional(),
    pricingModel:
      PutApiWorkspaceServiceV1AccountsAccountsPricingModel$outboundSchema
        .default("PRICING_MODEL_UNSPECIFIED"),
    pricingTiers: z.record(z.number()).optional(),
    supportedIntegrations: z.array(z.string()).optional(),
    isVerified: z.boolean().optional(),
    rating: z.number().optional(),
    installationCount: z.number().int().optional(),
    requiredPermissions: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    documentationUrl: z.string().optional(),
    supportEmail: z.string().optional(),
    screenshots: z.array(z.string()).optional(),
    privacyPolicyUrl: z.string().optional(),
    termsUrl: z.string().optional(),
    publishedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsResponse200Versions$outboundSchema
      ),
    ).optional(),
    installations: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsInstallations$outboundSchema
      ),
    ).optional(),
    analytics: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsAnalytics$outboundSchema
      ),
    ).optional(),
    reviews: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsReviews$outboundSchema
      ),
    ).optional(),
    info: z.lazy(() =>
      PutApiWorkspaceServiceV1AccountsAccountsInfo$outboundSchema
    ).optional(),
    webhooks: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsWebhooks$outboundSchema
      ),
    ).optional(),
    permissions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsPermissions$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsInstalledApps$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsInstalledApps$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsInstalledApps$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsInstalledApps$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsInstalledApps$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsInstalledApps$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsInstalledApps$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsInstalledAppsToJSON(
  putApiWorkspaceServiceV1AccountsAccountsInstalledApps:
    PutApiWorkspaceServiceV1AccountsAccountsInstalledApps,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsInstalledApps$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsInstalledApps,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsInstalledAppsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsInstalledApps,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsInstalledApps$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsInstalledApps' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsWorkspaces$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsWorkspaces,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    uniqueIdentifier: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    storageQuota: z.string().optional(),
    usedStorage: z.string().optional(),
    allowPublicSharing: z.boolean().optional(),
    requireApproval: z.boolean().optional(),
    gdprCompliant: z.boolean().optional(),
    hipaaCompliant: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    folders: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsFolders$inboundSchema
      ),
    ).optional(),
    templates: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsTemplates$inboundSchema
      ),
    ).optional(),
    sharing: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsResponseSharing$inboundSchema
      ),
    ).optional(),
    activities: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsActivities$inboundSchema
      ),
    ).optional(),
    compliance: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsCompliance$inboundSchema
      ),
    ).optional(),
    installedApps: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsInstalledApps$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsWorkspaces$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  uniqueIdentifier?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  storageQuota?: string | undefined;
  usedStorage?: string | undefined;
  allowPublicSharing?: boolean | undefined;
  requireApproval?: boolean | undefined;
  gdprCompliant?: boolean | undefined;
  hipaaCompliant?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  folders?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsFolders$Outbound>
    | undefined;
  templates?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsTemplates$Outbound>
    | undefined;
  sharing?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsResponseSharing$Outbound>
    | undefined;
  activities?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsActivities$Outbound>
    | undefined;
  compliance?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsCompliance$Outbound>
    | undefined;
  installedApps?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsInstalledApps$Outbound>
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsWorkspaces$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsWorkspaces$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsWorkspaces
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    uniqueIdentifier: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    storageQuota: z.string().optional(),
    usedStorage: z.string().optional(),
    allowPublicSharing: z.boolean().optional(),
    requireApproval: z.boolean().optional(),
    gdprCompliant: z.boolean().optional(),
    hipaaCompliant: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    folders: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsFolders$outboundSchema
      ),
    ).optional(),
    templates: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsTemplates$outboundSchema
      ),
    ).optional(),
    sharing: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsResponseSharing$outboundSchema
      ),
    ).optional(),
    activities: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsActivities$outboundSchema
      ),
    ).optional(),
    compliance: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsCompliance$outboundSchema
      ),
    ).optional(),
    installedApps: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsInstalledApps$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsWorkspaces$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsWorkspaces$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsWorkspaces$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsWorkspaces$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsWorkspaces$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsWorkspaces$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsWorkspaces$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsWorkspacesToJSON(
  putApiWorkspaceServiceV1AccountsAccountsWorkspaces:
    PutApiWorkspaceServiceV1AccountsAccountsWorkspaces,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsWorkspaces$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsWorkspaces,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsWorkspacesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsWorkspaces,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsWorkspaces$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsWorkspaces' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsDataProfiles$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsDataProfiles,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    profileType: z.string().optional(),
    dataFields: z.record(z.string()).optional(),
    isDefault: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsDataProfiles$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  profileType?: string | undefined;
  dataFields?: { [k: string]: string } | undefined;
  isDefault?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsDataProfiles$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsDataProfiles$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsDataProfiles
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    profileType: z.string().optional(),
    dataFields: z.record(z.string()).optional(),
    isDefault: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsDataProfiles$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsDataProfiles$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsDataProfiles$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsDataProfiles$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsDataProfiles$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsDataProfiles$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsDataProfiles$Outbound;
}

export function putApiWorkspaceServiceV1AccountsDataProfilesToJSON(
  putApiWorkspaceServiceV1AccountsDataProfiles:
    PutApiWorkspaceServiceV1AccountsDataProfiles,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsDataProfiles$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsDataProfiles,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsDataProfilesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsDataProfiles,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsDataProfiles$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsDataProfiles' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsAccount$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsAccount,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    auth0UserId: z.string().optional(),
    email: z.string().optional(),
    baseDirectory: z.string().optional(),
    bucketName: z.string().optional(),
    region: z.string().optional(),
    orgId: z.string().optional(),
    tenantId: z.string().optional(),
    roles: z.array(z.string()).optional(),
    permissions: z.array(z.string()).optional(),
    mfaEnabled: z.boolean().optional(),
    complianceLevel:
      PutApiWorkspaceServiceV1AccountsAccountsComplianceLevel$inboundSchema
        .default("COMPLIANCE_LEVEL_UNSPECIFIED"),
    preferences: z.record(z.string()).optional(),
    apiKeys: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    workspaces: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsWorkspaces$inboundSchema
      ),
    ).optional(),
    dataProfiles: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsDataProfiles$inboundSchema),
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsAccountsAccount$Outbound = {
  id?: string | undefined;
  auth0UserId?: string | undefined;
  email?: string | undefined;
  baseDirectory?: string | undefined;
  bucketName?: string | undefined;
  region?: string | undefined;
  orgId?: string | undefined;
  tenantId?: string | undefined;
  roles?: Array<string> | undefined;
  permissions?: Array<string> | undefined;
  mfaEnabled?: boolean | undefined;
  complianceLevel: string;
  preferences?: { [k: string]: string } | undefined;
  apiKeys?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  workspaces?:
    | Array<PutApiWorkspaceServiceV1AccountsAccountsWorkspaces$Outbound>
    | undefined;
  dataProfiles?:
    | Array<PutApiWorkspaceServiceV1AccountsDataProfiles$Outbound>
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsAccountsAccount$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsAccountsAccount$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsAccountsAccount
  > = z.object({
    id: z.string().optional(),
    auth0UserId: z.string().optional(),
    email: z.string().optional(),
    baseDirectory: z.string().optional(),
    bucketName: z.string().optional(),
    region: z.string().optional(),
    orgId: z.string().optional(),
    tenantId: z.string().optional(),
    roles: z.array(z.string()).optional(),
    permissions: z.array(z.string()).optional(),
    mfaEnabled: z.boolean().optional(),
    complianceLevel:
      PutApiWorkspaceServiceV1AccountsAccountsComplianceLevel$outboundSchema
        .default("COMPLIANCE_LEVEL_UNSPECIFIED"),
    preferences: z.record(z.string()).optional(),
    apiKeys: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    workspaces: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1AccountsAccountsWorkspaces$outboundSchema
      ),
    ).optional(),
    dataProfiles: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1AccountsDataProfiles$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsAccountsAccount$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsAccount$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsAccount$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsAccount$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsAccountsAccount$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsAccountsAccount$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1AccountsAccountsAccount$Outbound;
}

export function putApiWorkspaceServiceV1AccountsAccountsAccountToJSON(
  putApiWorkspaceServiceV1AccountsAccountsAccount:
    PutApiWorkspaceServiceV1AccountsAccountsAccount,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsAccountsAccount$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsAccountsAccount,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsAccountsAccountFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsAccountsAccount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsAccountsAccount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsAccountsAccount' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1AccountsResponseBody$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    account: z.lazy(() =>
      PutApiWorkspaceServiceV1AccountsAccountsAccount$inboundSchema
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1AccountsResponseBody$Outbound = {
  account?:
    | PutApiWorkspaceServiceV1AccountsAccountsAccount$Outbound
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1AccountsResponseBody$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1AccountsResponseBody$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1AccountsResponseBody
  > = z.object({
    account: z.lazy(() =>
      PutApiWorkspaceServiceV1AccountsAccountsAccount$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1AccountsResponseBody$ {
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1AccountsResponseBody$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1AccountsResponseBody$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1AccountsResponseBody$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1AccountsResponseBody$Outbound;
}

export function putApiWorkspaceServiceV1AccountsResponseBodyToJSON(
  putApiWorkspaceServiceV1AccountsResponseBody:
    PutApiWorkspaceServiceV1AccountsResponseBody,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1AccountsResponseBody$outboundSchema.parse(
      putApiWorkspaceServiceV1AccountsResponseBody,
    ),
  );
}

export function putApiWorkspaceServiceV1AccountsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1AccountsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1AccountsResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1AccountsResponseBody' from JSON`,
  );
}
