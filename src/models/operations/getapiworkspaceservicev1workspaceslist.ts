/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiWorkspaceServiceV1WorkspacesListRequest = {
  accountId?: string | undefined;
  pageSize?: number | undefined;
  pageToken?: string | undefined;
  filter?: string | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListEmbeddings = {
  id?: string | undefined;
  embeddings?: Array<number> | undefined;
  modelVersion?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponse200Versions =
  {
    id?: string | undefined;
    fileId?: string | undefined;
    versionNumber?: number | undefined;
    s3Key?: string | undefined;
    size?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    createdAt?: Date | undefined;
  };

export type GetApiWorkspaceServiceV1WorkspacesListComments = {
  id?: string | undefined;
  authorId?: string | undefined;
  content?: string | undefined;
  startPosition?: number | undefined;
  endPosition?: number | undefined;
  resolved?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListWorkspacesSharing = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListSnapshots = {
  id?: string | undefined;
  fileId?: string | undefined;
  snapshotHash?: string | undefined;
  content?: string | undefined;
  authorId?: string | undefined;
  reason?: string | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListFiles = {
  id?: string | undefined;
  name?: string | undefined;
  size?: string | undefined;
  s3Key?: string | undefined;
  s3BucketName?: string | undefined;
  isDeleted?: boolean | undefined;
  version?: number | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  embeddings?: GetApiWorkspaceServiceV1WorkspacesListEmbeddings | undefined;
  versions?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponse200Versions>
    | undefined;
  comments?: Array<GetApiWorkspaceServiceV1WorkspacesListComments> | undefined;
  sharing?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListWorkspacesSharing>
    | undefined;
  snapshots?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListSnapshots>
    | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListFolders = {
  id?: string | undefined;
  name?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  isDeleted?: boolean | undefined;
  parentFolderId?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  files?: Array<GetApiWorkspaceServiceV1WorkspacesListFiles> | undefined;
};

export const GetApiWorkspaceServiceV1WorkspacesListTemplateType = {
  TemplateTypeUnspecified: "TEMPLATE_TYPE_UNSPECIFIED",
  TemplateTypeStandard: "TEMPLATE_TYPE_STANDARD",
  TemplateTypeSmart: "TEMPLATE_TYPE_SMART",
  TemplateTypeAdaptive: "TEMPLATE_TYPE_ADAPTIVE",
  TemplateTypeAiGenerated: "TEMPLATE_TYPE_AI_GENERATED",
} as const;
export type GetApiWorkspaceServiceV1WorkspacesListTemplateType = ClosedEnum<
  typeof GetApiWorkspaceServiceV1WorkspacesListTemplateType
>;

export type GetApiWorkspaceServiceV1WorkspacesListVersions = {
  id?: string | undefined;
  templateId?: string | undefined;
  version?: string | undefined;
  baseContent?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  authorId?: string | undefined;
  changeDescription?: string | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListVariables = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  variableType?: string | undefined;
  defaultValue?: string | undefined;
  isRequired?: boolean | undefined;
  validationRules?: string | undefined;
  dataSource?: string | undefined;
  aiExtractionRules?: string | undefined;
  alternatives?: Array<string> | undefined;
  templateId?: string | undefined;
};

export const GetApiWorkspaceServiceV1WorkspacesListStatus = {
  DocumentStatusUnspecified: "DOCUMENT_STATUS_UNSPECIFIED",
  DocumentStatusDraft: "DOCUMENT_STATUS_DRAFT",
  DocumentStatusInReview: "DOCUMENT_STATUS_IN_REVIEW",
  DocumentStatusApproved: "DOCUMENT_STATUS_APPROVED",
  DocumentStatusRejected: "DOCUMENT_STATUS_REJECTED",
  DocumentStatusExpired: "DOCUMENT_STATUS_EXPIRED",
  DocumentStatusArchived: "DOCUMENT_STATUS_ARCHIVED",
} as const;
export type GetApiWorkspaceServiceV1WorkspacesListStatus = ClosedEnum<
  typeof GetApiWorkspaceServiceV1WorkspacesListStatus
>;

export const GetApiWorkspaceServiceV1WorkspacesListWorkspacesStatus = {
  SignatureStatusUnspecified: "SIGNATURE_STATUS_UNSPECIFIED",
  SignatureStatusPending: "SIGNATURE_STATUS_PENDING",
  SignatureStatusSigned: "SIGNATURE_STATUS_SIGNED",
  SignatureStatusRejected: "SIGNATURE_STATUS_REJECTED",
  SignatureStatusExpired: "SIGNATURE_STATUS_EXPIRED",
  SignatureStatusRevoked: "SIGNATURE_STATUS_REVOKED",
} as const;
export type GetApiWorkspaceServiceV1WorkspacesListWorkspacesStatus = ClosedEnum<
  typeof GetApiWorkspaceServiceV1WorkspacesListWorkspacesStatus
>;

export type GetApiWorkspaceServiceV1WorkspacesListSignatureBlocks = {
  id?: string | undefined;
  requestId?: string | undefined;
  blockType?: string | undefined;
  pageNumber?: number | undefined;
  xPosition?: number | undefined;
  yPosition?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
  isRequired?: boolean | undefined;
  signatureData?: string | undefined;
  signedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListWorkflow = {
  id?: string | undefined;
  requestId?: string | undefined;
  signingOrder?: Array<string> | undefined;
  currentSigner?: string | undefined;
  workflowStatus?: string | undefined;
  parallelSigning?: boolean | undefined;
  requireAllSignatures?: boolean | undefined;
  deadline?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListSignatureRequests = {
  id?: string | undefined;
  status?: GetApiWorkspaceServiceV1WorkspacesListWorkspacesStatus | undefined;
  signerEmail?: string | undefined;
  signerName?: string | undefined;
  role?: string | undefined;
  authenticationMethod?: string | undefined;
  expiresAt?: Date | undefined;
  requiresMfa?: boolean | undefined;
  signatureType?: string | undefined;
  reminderSchedule?: Array<string> | undefined;
  documentId?: string | undefined;
  signatureBlocks?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListSignatureBlocks>
    | undefined;
  workflow?: GetApiWorkspaceServiceV1WorkspacesListWorkflow | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListAiAssistance = {
  id?: string | undefined;
  documentId?: string | undefined;
  interactionType?: string | undefined;
  userQuery?: string | undefined;
  aiResponse?: string | undefined;
  context?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListRounds = {
  id?: string | undefined;
  historyId?: string | undefined;
  roundNumber?: number | undefined;
  proposerId?: string | undefined;
  proposalContent?: string | undefined;
  responseContent?: string | undefined;
  status?: string | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListNegotiation = {
  id?: string | undefined;
  documentId?: string | undefined;
  rounds?: Array<GetApiWorkspaceServiceV1WorkspacesListRounds> | undefined;
  currentStatus?: string | undefined;
  startedAt?: Date | undefined;
  lastUpdated?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListMerges = {
  id?: string | undefined;
  branchId?: string | undefined;
  sourceBranch?: string | undefined;
  targetBranch?: string | undefined;
  mergeStatus?: string | undefined;
  mergeStrategy?: string | undefined;
  conflicts?: Array<string> | undefined;
  mergerId?: string | undefined;
  createdAt?: Date | undefined;
  completedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListPolicy = {
  id?: string | undefined;
  branchId?: string | undefined;
  requiredApprovers?: Array<string> | undefined;
  minimumApprovals?: number | undefined;
  enforceLinearHistory?: boolean | undefined;
  allowForcePush?: boolean | undefined;
  protectedPaths?: Array<string> | undefined;
  mergeRules?: { [k: string]: string } | undefined;
  automatedChecks?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListMergeRequests = {
  id?: string | undefined;
  sourceBranchId?: string | undefined;
  targetBranchId?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  authorId?: string | undefined;
  reviewers?: Array<string> | undefined;
  status?: string | undefined;
  labels?: Array<string> | undefined;
  hasConflicts?: boolean | undefined;
  automatedCheckResults?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListBranches = {
  id?: string | undefined;
  name?: string | undefined;
  baseVersionHash?: string | undefined;
  currentHeadHash?: string | undefined;
  purpose?: string | undefined;
  status?: string | undefined;
  reviewers?: Array<string> | undefined;
  branchMetadata?: { [k: string]: string } | undefined;
  isLocked?: boolean | undefined;
  lastUpdated?: Date | undefined;
  merges?: Array<GetApiWorkspaceServiceV1WorkspacesListMerges> | undefined;
  policy?: GetApiWorkspaceServiceV1WorkspacesListPolicy | undefined;
  mergeRequests?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListMergeRequests>
    | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListChanges = {
  id?: string | undefined;
  versionId?: string | undefined;
  changeType?: string | undefined;
  contentBefore?: string | undefined;
  contentAfter?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListSummaries = {
  id?: string | undefined;
  versionId?: string | undefined;
  summaryType?: string | undefined;
  content?: string | undefined;
  targetAudience?: string | undefined;
  keyPoints?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponseVersions = {
  id?: string | undefined;
  versionHash?: string | undefined;
  parentHash?: string | undefined;
  commitMessage?: string | undefined;
  authorId?: string | undefined;
  branchName?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  tags?: Array<string> | undefined;
  isApproved?: boolean | undefined;
  approvalChain?: string | undefined;
  createdAt?: Date | undefined;
  branches?: Array<GetApiWorkspaceServiceV1WorkspacesListBranches> | undefined;
  changes?: Array<GetApiWorkspaceServiceV1WorkspacesListChanges> | undefined;
  summaries?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListSummaries>
    | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListInstances = {
  id?: string | undefined;
  templateId?: string | undefined;
  status?: GetApiWorkspaceServiceV1WorkspacesListStatus | undefined;
  fieldValues?: { [k: string]: string } | undefined;
  signers?: Array<string> | undefined;
  language?: string | undefined;
  isCompleted?: boolean | undefined;
  dueDate?: Date | undefined;
  generatedContent?: string | undefined;
  attachments?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  signatureRequests?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListSignatureRequests>
    | undefined;
  aiAssistance?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListAiAssistance>
    | undefined;
  negotiation?: GetApiWorkspaceServiceV1WorkspacesListNegotiation | undefined;
  versions?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponseVersions>
    | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListExplanations = {
  id?: string | undefined;
  templateId?: string | undefined;
  sectionIdentifier?: string | undefined;
  explanationText?: string | undefined;
  complexityLevel?: string | undefined;
  relatedTerms?: Array<string> | undefined;
  legalReferences?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListRiskAssessments = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  riskType?: string | undefined;
  riskScore?: number | undefined;
  assessmentDetails?: string | undefined;
  mitigationSuggestions?: Array<string> | undefined;
  assessorId?: string | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListComplianceChecks = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  complianceStandard?: string | undefined;
  checkResult?: string | undefined;
  violations?: Array<string> | undefined;
  remediationSteps?: string | undefined;
  checkDate?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListIntelligence = {
  id?: string | undefined;
  contractType?: string | undefined;
  riskScores?: { [k: string]: number } | undefined;
  detectedClauses?: { [k: string]: string } | undefined;
  keyObligations?: Array<string> | undefined;
  complianceScores?: { [k: string]: number } | undefined;
  jurisdiction?: string | undefined;
  governingLaws?: Array<string> | undefined;
  semanticAnalysis?: { [k: string]: string } | undefined;
  analysisDate?: Date | undefined;
  riskAssessments?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListRiskAssessments>
    | undefined;
  complianceChecks?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListComplianceChecks>
    | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListTemplates = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  industryType?: string | undefined;
  documentType?: string | undefined;
  baseContent?: string | undefined;
  isAdaptive?: boolean | undefined;
  metadata?: { [k: string]: string } | undefined;
  supportedLanguages?: Array<string> | undefined;
  requiredDataFields?: Array<string> | undefined;
  version?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  templateType?: GetApiWorkspaceServiceV1WorkspacesListTemplateType | undefined;
  content?: string | undefined;
  detectedVariables?: Array<string> | undefined;
  variableMappings?: { [k: string]: string } | undefined;
  isContextAware?: boolean | undefined;
  supportedContexts?: Array<string> | undefined;
  formattingRules?: { [k: string]: string } | undefined;
  conditionalSections?: Array<string> | undefined;
  versions?: Array<GetApiWorkspaceServiceV1WorkspacesListVersions> | undefined;
  variables?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListVariables>
    | undefined;
  instances?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListInstances>
    | undefined;
  explanations?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListExplanations>
    | undefined;
  intelligence?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListIntelligence>
    | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListSharing = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListActivities = {
  id?: string | undefined;
  activityType?: string | undefined;
  userId?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListCompliance = {
  id?: string | undefined;
  complianceType?: string | undefined;
  status?: string | undefined;
  certificationId?: string | undefined;
  validUntil?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export const GetApiWorkspaceServiceV1WorkspacesListCategory = {
  AppCategoryUnspecified: "APP_CATEGORY_UNSPECIFIED",
  AppCategoryContractAutomation: "APP_CATEGORY_CONTRACT_AUTOMATION",
  AppCategoryContractAnalysis: "APP_CATEGORY_CONTRACT_ANALYSIS",
  AppCategoryIntegration: "APP_CATEGORY_INTEGRATION",
  AppCategoryAiPowered: "APP_CATEGORY_AI_POWERED",
  AppCategoryWorkflow: "APP_CATEGORY_WORKFLOW",
  AppCategoryCompliance: "APP_CATEGORY_COMPLIANCE",
} as const;
export type GetApiWorkspaceServiceV1WorkspacesListCategory = ClosedEnum<
  typeof GetApiWorkspaceServiceV1WorkspacesListCategory
>;

export const GetApiWorkspaceServiceV1WorkspacesListPricingModel = {
  PricingModelUnspecified: "PRICING_MODEL_UNSPECIFIED",
  PricingModelFree: "PRICING_MODEL_FREE",
  PricingModelSubscription: "PRICING_MODEL_SUBSCRIPTION",
  PricingModelUsageBased: "PRICING_MODEL_USAGE_BASED",
  PricingModelEnterprise: "PRICING_MODEL_ENTERPRISE",
} as const;
export type GetApiWorkspaceServiceV1WorkspacesListPricingModel = ClosedEnum<
  typeof GetApiWorkspaceServiceV1WorkspacesListPricingModel
>;

export type GetApiWorkspaceServiceV1WorkspacesListWorkspacesVersions = {
  id?: string | undefined;
  appId?: string | undefined;
  versionNumber?: string | undefined;
  changelog?: string | undefined;
  requirements?: { [k: string]: string } | undefined;
  isPublic?: boolean | undefined;
  releaseDate?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListInstallations = {
  id?: string | undefined;
  appId?: string | undefined;
  workspaceId?: string | undefined;
  versionInstalled?: string | undefined;
  configuration?: { [k: string]: string } | undefined;
  installationStatus?: string | undefined;
  installedAt?: Date | undefined;
  lastUsed?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListAnalytics = {
  id?: string | undefined;
  appId?: string | undefined;
  metricName?: string | undefined;
  metricValue?: number | undefined;
  dimensions?: { [k: string]: string } | undefined;
  recordedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListReviews = {
  id?: string | undefined;
  appId?: string | undefined;
  reviewerId?: string | undefined;
  rating?: number | undefined;
  reviewText?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListInfo = {
  id?: string | undefined;
  appId?: string | undefined;
  supportedLanguages?: Array<string> | undefined;
  sdkFeatures?: Array<string> | undefined;
  testCoverage?: { [k: string]: number } | undefined;
  securityScans?: Array<string> | undefined;
  performanceMetrics?: { [k: string]: string } | undefined;
  developmentStatus?: string | undefined;
  knownIssues?: Array<string> | undefined;
  roadmapUrl?: string | undefined;
  lastSecurityAudit?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListWebhooks = {
  id?: string | undefined;
  appId?: string | undefined;
  url?: string | undefined;
  subscribedEvents?: Array<string> | undefined;
  secretKey?: string | undefined;
  retryCount?: number | undefined;
  timeoutSeconds?: number | undefined;
  isActive?: boolean | undefined;
  headers?: { [k: string]: string } | undefined;
  lastTriggered?: Date | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListPermissions = {
  id?: string | undefined;
  appId?: string | undefined;
  scope?: string | undefined;
  description?: string | undefined;
  isRequired?: boolean | undefined;
  accessLevels?: Array<string> | undefined;
  constraints?: { [k: string]: string } | undefined;
  requiresApproval?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListInstalledApps = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  developerId?: string | undefined;
  category?: GetApiWorkspaceServiceV1WorkspacesListCategory | undefined;
  supportedContractTypes?: Array<string> | undefined;
  features?: Array<string> | undefined;
  pricingModel?: GetApiWorkspaceServiceV1WorkspacesListPricingModel | undefined;
  pricingTiers?: { [k: string]: number } | undefined;
  supportedIntegrations?: Array<string> | undefined;
  isVerified?: boolean | undefined;
  rating?: number | undefined;
  installationCount?: number | undefined;
  requiredPermissions?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  documentationUrl?: string | undefined;
  supportEmail?: string | undefined;
  screenshots?: Array<string> | undefined;
  privacyPolicyUrl?: string | undefined;
  termsUrl?: string | undefined;
  publishedAt?: Date | undefined;
  lastUpdated?: Date | undefined;
  versions?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListWorkspacesVersions>
    | undefined;
  installations?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListInstallations>
    | undefined;
  analytics?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListAnalytics>
    | undefined;
  reviews?: Array<GetApiWorkspaceServiceV1WorkspacesListReviews> | undefined;
  info?: GetApiWorkspaceServiceV1WorkspacesListInfo | undefined;
  webhooks?: Array<GetApiWorkspaceServiceV1WorkspacesListWebhooks> | undefined;
  permissions?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListPermissions>
    | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListWorkspaces = {
  id?: string | undefined;
  name?: string | undefined;
  uniqueIdentifier?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  storageQuota?: string | undefined;
  usedStorage?: string | undefined;
  allowPublicSharing?: boolean | undefined;
  requireApproval?: boolean | undefined;
  gdprCompliant?: boolean | undefined;
  hipaaCompliant?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  folders?: Array<GetApiWorkspaceServiceV1WorkspacesListFolders> | undefined;
  templates?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListTemplates>
    | undefined;
  sharing?: Array<GetApiWorkspaceServiceV1WorkspacesListSharing> | undefined;
  activities?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListActivities>
    | undefined;
  compliance?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListCompliance>
    | undefined;
  installedApps?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListInstalledApps>
    | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListData = {
  workspaces?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListWorkspaces>
    | undefined;
  nextPageToken?: string | undefined;
  totalSize?: number | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesListResponseBody = {
  data: GetApiWorkspaceServiceV1WorkspacesListData;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListRequest$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    accountId: z.string().optional(),
    pageSize: z.number().optional(),
    pageToken: z.string().optional(),
    filter: z.string().optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListRequest$Outbound = {
  accountId?: string | undefined;
  pageSize?: number | undefined;
  pageToken?: string | undefined;
  filter?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListRequest$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListRequest$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListRequest
  > = z.object({
    accountId: z.string().optional(),
    pageSize: z.number().optional(),
    pageToken: z.string().optional(),
    filter: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListRequest$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListRequest$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListRequest$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListRequest$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesListRequest$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListRequestToJSON(
  getApiWorkspaceServiceV1WorkspacesListRequest:
    GetApiWorkspaceServiceV1WorkspacesListRequest,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListRequest$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListRequest,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListRequest' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListEmbeddings$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListEmbeddings,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    embeddings: z.array(z.number()).optional(),
    modelVersion: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListEmbeddings$Outbound = {
  id?: string | undefined;
  embeddings?: Array<number> | undefined;
  modelVersion?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListEmbeddings$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListEmbeddings$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListEmbeddings
  > = z.object({
    id: z.string().optional(),
    embeddings: z.array(z.number()).optional(),
    modelVersion: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListEmbeddings$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListEmbeddings$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListEmbeddings$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListEmbeddings$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListEmbeddings$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListEmbeddings$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListEmbeddings$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListEmbeddingsToJSON(
  getApiWorkspaceServiceV1WorkspacesListEmbeddings:
    GetApiWorkspaceServiceV1WorkspacesListEmbeddings,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListEmbeddings$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListEmbeddings,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListEmbeddingsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListEmbeddings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListEmbeddings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListEmbeddings' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponse200Versions$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponse200Versions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    versionNumber: z.number().int().optional(),
    s3Key: z.string().optional(),
    size: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponse200Versions$Outbound =
  {
    id?: string | undefined;
    fileId?: string | undefined;
    versionNumber?: number | undefined;
    s3Key?: string | undefined;
    size?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    createdAt?: string | undefined;
  };

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponse200Versions$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponse200Versions$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponse200Versions
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    versionNumber: z.number().int().optional(),
    s3Key: z.string().optional(),
    size: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponse200Versions$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponse200Versions$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponse200Versions$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponse200Versions$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponse200Versions$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponse200Versions$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponse200Versions$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListWorkspacesResponse200VersionsToJSON(
  getApiWorkspaceServiceV1WorkspacesListWorkspacesResponse200Versions:
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponse200Versions,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponse200Versions$outboundSchema
      .parse(
        getApiWorkspaceServiceV1WorkspacesListWorkspacesResponse200Versions,
      ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListWorkspacesResponse200VersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponse200Versions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponse200Versions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponse200Versions' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListComments$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListComments,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    authorId: z.string().optional(),
    content: z.string().optional(),
    startPosition: z.number().int().optional(),
    endPosition: z.number().int().optional(),
    resolved: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListComments$Outbound = {
  id?: string | undefined;
  authorId?: string | undefined;
  content?: string | undefined;
  startPosition?: number | undefined;
  endPosition?: number | undefined;
  resolved?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListComments$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListComments$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListComments
  > = z.object({
    id: z.string().optional(),
    authorId: z.string().optional(),
    content: z.string().optional(),
    startPosition: z.number().int().optional(),
    endPosition: z.number().int().optional(),
    resolved: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListComments$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListComments$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListComments$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListComments$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListComments$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListComments$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListComments$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListCommentsToJSON(
  getApiWorkspaceServiceV1WorkspacesListComments:
    GetApiWorkspaceServiceV1WorkspacesListComments,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListComments$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListComments,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListCommentsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListComments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListComments$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListComments' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListWorkspacesSharing$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesSharing,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListWorkspacesSharing$Outbound = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListWorkspacesSharing$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesSharing$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesSharing
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListWorkspacesSharing$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListWorkspacesSharing$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesSharing$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListWorkspacesSharing$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesSharing$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListWorkspacesSharing$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesSharing$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListWorkspacesSharingToJSON(
  getApiWorkspaceServiceV1WorkspacesListWorkspacesSharing:
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesSharing,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesSharing$outboundSchema
      .parse(getApiWorkspaceServiceV1WorkspacesListWorkspacesSharing),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListWorkspacesSharingFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListWorkspacesSharing,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListWorkspacesSharing$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListWorkspacesSharing' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListSnapshots$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListSnapshots,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    snapshotHash: z.string().optional(),
    content: z.string().optional(),
    authorId: z.string().optional(),
    reason: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListSnapshots$Outbound = {
  id?: string | undefined;
  fileId?: string | undefined;
  snapshotHash?: string | undefined;
  content?: string | undefined;
  authorId?: string | undefined;
  reason?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListSnapshots$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListSnapshots$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListSnapshots
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    snapshotHash: z.string().optional(),
    content: z.string().optional(),
    authorId: z.string().optional(),
    reason: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListSnapshots$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListSnapshots$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListSnapshots$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListSnapshots$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListSnapshots$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListSnapshots$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListSnapshots$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListSnapshotsToJSON(
  getApiWorkspaceServiceV1WorkspacesListSnapshots:
    GetApiWorkspaceServiceV1WorkspacesListSnapshots,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListSnapshots$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListSnapshots,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListSnapshotsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListSnapshots,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListSnapshots$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListSnapshots' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListFiles$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListFiles,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    size: z.string().optional(),
    s3Key: z.string().optional(),
    s3BucketName: z.string().optional(),
    isDeleted: z.boolean().optional(),
    version: z.number().int().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    embeddings: z.lazy(() =>
      GetApiWorkspaceServiceV1WorkspacesListEmbeddings$inboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponse200Versions$inboundSchema
      ),
    ).optional(),
    comments: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListComments$inboundSchema
      ),
    ).optional(),
    sharing: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListWorkspacesSharing$inboundSchema
      ),
    ).optional(),
    snapshots: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListSnapshots$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListFiles$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  size?: string | undefined;
  s3Key?: string | undefined;
  s3BucketName?: string | undefined;
  isDeleted?: boolean | undefined;
  version?: number | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  embeddings?:
    | GetApiWorkspaceServiceV1WorkspacesListEmbeddings$Outbound
    | undefined;
  versions?:
    | Array<
      GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponse200Versions$Outbound
    >
    | undefined;
  comments?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListComments$Outbound>
    | undefined;
  sharing?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListWorkspacesSharing$Outbound>
    | undefined;
  snapshots?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListSnapshots$Outbound>
    | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListFiles$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListFiles$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListFiles
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    size: z.string().optional(),
    s3Key: z.string().optional(),
    s3BucketName: z.string().optional(),
    isDeleted: z.boolean().optional(),
    version: z.number().int().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    embeddings: z.lazy(() =>
      GetApiWorkspaceServiceV1WorkspacesListEmbeddings$outboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponse200Versions$outboundSchema
      ),
    ).optional(),
    comments: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListComments$outboundSchema
      ),
    ).optional(),
    sharing: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListWorkspacesSharing$outboundSchema
      ),
    ).optional(),
    snapshots: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListSnapshots$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListFiles$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListFiles$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListFiles$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListFiles$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListFiles$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListFiles$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesListFiles$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListFilesToJSON(
  getApiWorkspaceServiceV1WorkspacesListFiles:
    GetApiWorkspaceServiceV1WorkspacesListFiles,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListFiles$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListFiles,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListFilesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListFiles,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListFiles$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListFiles' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListFolders$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListFolders,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    isDeleted: z.boolean().optional(),
    parentFolderId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    files: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesListFiles$inboundSchema),
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListFolders$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  isDeleted?: boolean | undefined;
  parentFolderId?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  files?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListFiles$Outbound>
    | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListFolders$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListFolders$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListFolders
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    isDeleted: z.boolean().optional(),
    parentFolderId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    files: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesListFiles$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListFolders$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListFolders$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListFolders$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListFolders$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListFolders$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListFolders$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesListFolders$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListFoldersToJSON(
  getApiWorkspaceServiceV1WorkspacesListFolders:
    GetApiWorkspaceServiceV1WorkspacesListFolders,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListFolders$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListFolders,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListFoldersFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListFolders,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListFolders$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListFolders' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListTemplateType$inboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1WorkspacesListTemplateType> = z
    .nativeEnum(GetApiWorkspaceServiceV1WorkspacesListTemplateType);

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListTemplateType$outboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1WorkspacesListTemplateType> =
    GetApiWorkspaceServiceV1WorkspacesListTemplateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListTemplateType$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListTemplateType$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListTemplateType$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListTemplateType$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListTemplateType$outboundSchema;
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListVersions$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    version: z.string().optional(),
    baseContent: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    authorId: z.string().optional(),
    changeDescription: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListVersions$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  version?: string | undefined;
  baseContent?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  authorId?: string | undefined;
  changeDescription?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListVersions$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListVersions$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListVersions
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    version: z.string().optional(),
    baseContent: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    authorId: z.string().optional(),
    changeDescription: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListVersions$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListVersions$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListVersions$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListVersions$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListVersions$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListVersions$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListVersions$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListVersionsToJSON(
  getApiWorkspaceServiceV1WorkspacesListVersions:
    GetApiWorkspaceServiceV1WorkspacesListVersions,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListVersions$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListVersions,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListVersions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListVersions' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListVariables$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListVariables,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    variableType: z.string().optional(),
    defaultValue: z.string().optional(),
    isRequired: z.boolean().optional(),
    validationRules: z.string().optional(),
    dataSource: z.string().optional(),
    aiExtractionRules: z.string().optional(),
    alternatives: z.array(z.string()).optional(),
    templateId: z.string().optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListVariables$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  variableType?: string | undefined;
  defaultValue?: string | undefined;
  isRequired?: boolean | undefined;
  validationRules?: string | undefined;
  dataSource?: string | undefined;
  aiExtractionRules?: string | undefined;
  alternatives?: Array<string> | undefined;
  templateId?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListVariables$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListVariables$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListVariables
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    variableType: z.string().optional(),
    defaultValue: z.string().optional(),
    isRequired: z.boolean().optional(),
    validationRules: z.string().optional(),
    dataSource: z.string().optional(),
    aiExtractionRules: z.string().optional(),
    alternatives: z.array(z.string()).optional(),
    templateId: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListVariables$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListVariables$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListVariables$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListVariables$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListVariables$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListVariables$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListVariables$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListVariablesToJSON(
  getApiWorkspaceServiceV1WorkspacesListVariables:
    GetApiWorkspaceServiceV1WorkspacesListVariables,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListVariables$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListVariables,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListVariablesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListVariables,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListVariables$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListVariables' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListStatus$inboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1WorkspacesListStatus> = z
    .nativeEnum(GetApiWorkspaceServiceV1WorkspacesListStatus);

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListStatus$outboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1WorkspacesListStatus> =
    GetApiWorkspaceServiceV1WorkspacesListStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListStatus$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListStatus$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListStatus$outboundSchema;
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListWorkspacesStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof GetApiWorkspaceServiceV1WorkspacesListWorkspacesStatus
  > = z.nativeEnum(GetApiWorkspaceServiceV1WorkspacesListWorkspacesStatus);

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListWorkspacesStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof GetApiWorkspaceServiceV1WorkspacesListWorkspacesStatus
  > = GetApiWorkspaceServiceV1WorkspacesListWorkspacesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListWorkspacesStatus$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListWorkspacesStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesStatus$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListWorkspacesStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesStatus$outboundSchema;
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListSignatureBlocks$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListSignatureBlocks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    blockType: z.string().optional(),
    pageNumber: z.number().int().optional(),
    xPosition: z.number().optional(),
    yPosition: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    isRequired: z.boolean().optional(),
    signatureData: z.string().optional(),
    signedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListSignatureBlocks$Outbound = {
  id?: string | undefined;
  requestId?: string | undefined;
  blockType?: string | undefined;
  pageNumber?: number | undefined;
  xPosition?: number | undefined;
  yPosition?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
  isRequired?: boolean | undefined;
  signatureData?: string | undefined;
  signedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListSignatureBlocks$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListSignatureBlocks$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListSignatureBlocks
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    blockType: z.string().optional(),
    pageNumber: z.number().int().optional(),
    xPosition: z.number().optional(),
    yPosition: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    isRequired: z.boolean().optional(),
    signatureData: z.string().optional(),
    signedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListSignatureBlocks$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListSignatureBlocks$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListSignatureBlocks$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListSignatureBlocks$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListSignatureBlocks$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListSignatureBlocks$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListSignatureBlocks$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListSignatureBlocksToJSON(
  getApiWorkspaceServiceV1WorkspacesListSignatureBlocks:
    GetApiWorkspaceServiceV1WorkspacesListSignatureBlocks,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListSignatureBlocks$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListSignatureBlocks,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListSignatureBlocksFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListSignatureBlocks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListSignatureBlocks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListSignatureBlocks' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListWorkflow$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListWorkflow,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    signingOrder: z.array(z.string()).optional(),
    currentSigner: z.string().optional(),
    workflowStatus: z.string().optional(),
    parallelSigning: z.boolean().optional(),
    requireAllSignatures: z.boolean().optional(),
    deadline: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListWorkflow$Outbound = {
  id?: string | undefined;
  requestId?: string | undefined;
  signingOrder?: Array<string> | undefined;
  currentSigner?: string | undefined;
  workflowStatus?: string | undefined;
  parallelSigning?: boolean | undefined;
  requireAllSignatures?: boolean | undefined;
  deadline?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListWorkflow$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListWorkflow$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListWorkflow
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    signingOrder: z.array(z.string()).optional(),
    currentSigner: z.string().optional(),
    workflowStatus: z.string().optional(),
    parallelSigning: z.boolean().optional(),
    requireAllSignatures: z.boolean().optional(),
    deadline: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListWorkflow$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListWorkflow$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListWorkflow$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListWorkflow$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListWorkflow$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListWorkflow$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListWorkflow$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListWorkflowToJSON(
  getApiWorkspaceServiceV1WorkspacesListWorkflow:
    GetApiWorkspaceServiceV1WorkspacesListWorkflow,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListWorkflow$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListWorkflow,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListWorkflowFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListWorkflow,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListWorkflow$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListWorkflow' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListSignatureRequests$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListSignatureRequests,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    status: GetApiWorkspaceServiceV1WorkspacesListWorkspacesStatus$inboundSchema
      .default("SIGNATURE_STATUS_UNSPECIFIED"),
    signerEmail: z.string().optional(),
    signerName: z.string().optional(),
    role: z.string().optional(),
    authenticationMethod: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    requiresMfa: z.boolean().optional(),
    signatureType: z.string().optional(),
    reminderSchedule: z.array(z.string()).optional(),
    documentId: z.string().optional(),
    signatureBlocks: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListSignatureBlocks$inboundSchema
      ),
    ).optional(),
    workflow: z.lazy(() =>
      GetApiWorkspaceServiceV1WorkspacesListWorkflow$inboundSchema
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListSignatureRequests$Outbound = {
  id?: string | undefined;
  status: string;
  signerEmail?: string | undefined;
  signerName?: string | undefined;
  role?: string | undefined;
  authenticationMethod?: string | undefined;
  expiresAt?: string | undefined;
  requiresMfa?: boolean | undefined;
  signatureType?: string | undefined;
  reminderSchedule?: Array<string> | undefined;
  documentId?: string | undefined;
  signatureBlocks?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListSignatureBlocks$Outbound>
    | undefined;
  workflow?:
    | GetApiWorkspaceServiceV1WorkspacesListWorkflow$Outbound
    | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListSignatureRequests$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListSignatureRequests$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListSignatureRequests
  > = z.object({
    id: z.string().optional(),
    status:
      GetApiWorkspaceServiceV1WorkspacesListWorkspacesStatus$outboundSchema
        .default("SIGNATURE_STATUS_UNSPECIFIED"),
    signerEmail: z.string().optional(),
    signerName: z.string().optional(),
    role: z.string().optional(),
    authenticationMethod: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    requiresMfa: z.boolean().optional(),
    signatureType: z.string().optional(),
    reminderSchedule: z.array(z.string()).optional(),
    documentId: z.string().optional(),
    signatureBlocks: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListSignatureBlocks$outboundSchema
      ),
    ).optional(),
    workflow: z.lazy(() =>
      GetApiWorkspaceServiceV1WorkspacesListWorkflow$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListSignatureRequests$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListSignatureRequests$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListSignatureRequests$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListSignatureRequests$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListSignatureRequests$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListSignatureRequests$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListSignatureRequests$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListSignatureRequestsToJSON(
  getApiWorkspaceServiceV1WorkspacesListSignatureRequests:
    GetApiWorkspaceServiceV1WorkspacesListSignatureRequests,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListSignatureRequests$outboundSchema
      .parse(getApiWorkspaceServiceV1WorkspacesListSignatureRequests),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListSignatureRequestsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListSignatureRequests,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListSignatureRequests$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListSignatureRequests' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListAiAssistance$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListAiAssistance,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    interactionType: z.string().optional(),
    userQuery: z.string().optional(),
    aiResponse: z.string().optional(),
    context: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListAiAssistance$Outbound = {
  id?: string | undefined;
  documentId?: string | undefined;
  interactionType?: string | undefined;
  userQuery?: string | undefined;
  aiResponse?: string | undefined;
  context?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListAiAssistance$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListAiAssistance$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListAiAssistance
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    interactionType: z.string().optional(),
    userQuery: z.string().optional(),
    aiResponse: z.string().optional(),
    context: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListAiAssistance$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListAiAssistance$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListAiAssistance$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListAiAssistance$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListAiAssistance$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListAiAssistance$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListAiAssistance$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListAiAssistanceToJSON(
  getApiWorkspaceServiceV1WorkspacesListAiAssistance:
    GetApiWorkspaceServiceV1WorkspacesListAiAssistance,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListAiAssistance$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListAiAssistance,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListAiAssistanceFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListAiAssistance,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListAiAssistance$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListAiAssistance' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListRounds$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListRounds,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    historyId: z.string().optional(),
    roundNumber: z.number().int().optional(),
    proposerId: z.string().optional(),
    proposalContent: z.string().optional(),
    responseContent: z.string().optional(),
    status: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListRounds$Outbound = {
  id?: string | undefined;
  historyId?: string | undefined;
  roundNumber?: number | undefined;
  proposerId?: string | undefined;
  proposalContent?: string | undefined;
  responseContent?: string | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListRounds$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListRounds$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListRounds
  > = z.object({
    id: z.string().optional(),
    historyId: z.string().optional(),
    roundNumber: z.number().int().optional(),
    proposerId: z.string().optional(),
    proposalContent: z.string().optional(),
    responseContent: z.string().optional(),
    status: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListRounds$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListRounds$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListRounds$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListRounds$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListRounds$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListRounds$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesListRounds$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListRoundsToJSON(
  getApiWorkspaceServiceV1WorkspacesListRounds:
    GetApiWorkspaceServiceV1WorkspacesListRounds,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListRounds$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListRounds,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListRoundsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListRounds,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListRounds$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListRounds' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListNegotiation$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListNegotiation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    rounds: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesListRounds$inboundSchema),
    ).optional(),
    currentStatus: z.string().optional(),
    startedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListNegotiation$Outbound = {
  id?: string | undefined;
  documentId?: string | undefined;
  rounds?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListRounds$Outbound>
    | undefined;
  currentStatus?: string | undefined;
  startedAt?: string | undefined;
  lastUpdated?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListNegotiation$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListNegotiation$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListNegotiation
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    rounds: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesListRounds$outboundSchema),
    ).optional(),
    currentStatus: z.string().optional(),
    startedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListNegotiation$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListNegotiation$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListNegotiation$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListNegotiation$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListNegotiation$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListNegotiation$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListNegotiation$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListNegotiationToJSON(
  getApiWorkspaceServiceV1WorkspacesListNegotiation:
    GetApiWorkspaceServiceV1WorkspacesListNegotiation,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListNegotiation$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListNegotiation,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListNegotiationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListNegotiation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListNegotiation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListNegotiation' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListMerges$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListMerges,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    sourceBranch: z.string().optional(),
    targetBranch: z.string().optional(),
    mergeStatus: z.string().optional(),
    mergeStrategy: z.string().optional(),
    conflicts: z.array(z.string()).optional(),
    mergerId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    completedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListMerges$Outbound = {
  id?: string | undefined;
  branchId?: string | undefined;
  sourceBranch?: string | undefined;
  targetBranch?: string | undefined;
  mergeStatus?: string | undefined;
  mergeStrategy?: string | undefined;
  conflicts?: Array<string> | undefined;
  mergerId?: string | undefined;
  createdAt?: string | undefined;
  completedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListMerges$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListMerges$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListMerges
  > = z.object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    sourceBranch: z.string().optional(),
    targetBranch: z.string().optional(),
    mergeStatus: z.string().optional(),
    mergeStrategy: z.string().optional(),
    conflicts: z.array(z.string()).optional(),
    mergerId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    completedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListMerges$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListMerges$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListMerges$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListMerges$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListMerges$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListMerges$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesListMerges$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListMergesToJSON(
  getApiWorkspaceServiceV1WorkspacesListMerges:
    GetApiWorkspaceServiceV1WorkspacesListMerges,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListMerges$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListMerges,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListMergesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListMerges,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListMerges$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListMerges' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListPolicy$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListPolicy,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    requiredApprovers: z.array(z.string()).optional(),
    minimumApprovals: z.number().int().optional(),
    enforceLinearHistory: z.boolean().optional(),
    allowForcePush: z.boolean().optional(),
    protectedPaths: z.array(z.string()).optional(),
    mergeRules: z.record(z.string()).optional(),
    automatedChecks: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListPolicy$Outbound = {
  id?: string | undefined;
  branchId?: string | undefined;
  requiredApprovers?: Array<string> | undefined;
  minimumApprovals?: number | undefined;
  enforceLinearHistory?: boolean | undefined;
  allowForcePush?: boolean | undefined;
  protectedPaths?: Array<string> | undefined;
  mergeRules?: { [k: string]: string } | undefined;
  automatedChecks?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListPolicy$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListPolicy$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListPolicy
  > = z.object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    requiredApprovers: z.array(z.string()).optional(),
    minimumApprovals: z.number().int().optional(),
    enforceLinearHistory: z.boolean().optional(),
    allowForcePush: z.boolean().optional(),
    protectedPaths: z.array(z.string()).optional(),
    mergeRules: z.record(z.string()).optional(),
    automatedChecks: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListPolicy$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListPolicy$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListPolicy$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListPolicy$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListPolicy$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListPolicy$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesListPolicy$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListPolicyToJSON(
  getApiWorkspaceServiceV1WorkspacesListPolicy:
    GetApiWorkspaceServiceV1WorkspacesListPolicy,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListPolicy$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListPolicy,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListPolicyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListPolicy,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListPolicy$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListPolicy' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListMergeRequests$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListMergeRequests,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sourceBranchId: z.string().optional(),
    targetBranchId: z.string().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    authorId: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    status: z.string().optional(),
    labels: z.array(z.string()).optional(),
    hasConflicts: z.boolean().optional(),
    automatedCheckResults: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListMergeRequests$Outbound = {
  id?: string | undefined;
  sourceBranchId?: string | undefined;
  targetBranchId?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  authorId?: string | undefined;
  reviewers?: Array<string> | undefined;
  status?: string | undefined;
  labels?: Array<string> | undefined;
  hasConflicts?: boolean | undefined;
  automatedCheckResults?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListMergeRequests$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListMergeRequests$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListMergeRequests
  > = z.object({
    id: z.string().optional(),
    sourceBranchId: z.string().optional(),
    targetBranchId: z.string().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    authorId: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    status: z.string().optional(),
    labels: z.array(z.string()).optional(),
    hasConflicts: z.boolean().optional(),
    automatedCheckResults: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListMergeRequests$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListMergeRequests$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListMergeRequests$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListMergeRequests$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListMergeRequests$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListMergeRequests$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListMergeRequests$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListMergeRequestsToJSON(
  getApiWorkspaceServiceV1WorkspacesListMergeRequests:
    GetApiWorkspaceServiceV1WorkspacesListMergeRequests,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListMergeRequests$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListMergeRequests,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListMergeRequestsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListMergeRequests,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListMergeRequests$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListMergeRequests' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListBranches$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListBranches,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    baseVersionHash: z.string().optional(),
    currentHeadHash: z.string().optional(),
    purpose: z.string().optional(),
    status: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    branchMetadata: z.record(z.string()).optional(),
    isLocked: z.boolean().optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    merges: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesListMerges$inboundSchema),
    ).optional(),
    policy: z.lazy(() =>
      GetApiWorkspaceServiceV1WorkspacesListPolicy$inboundSchema
    ).optional(),
    mergeRequests: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListMergeRequests$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListBranches$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  baseVersionHash?: string | undefined;
  currentHeadHash?: string | undefined;
  purpose?: string | undefined;
  status?: string | undefined;
  reviewers?: Array<string> | undefined;
  branchMetadata?: { [k: string]: string } | undefined;
  isLocked?: boolean | undefined;
  lastUpdated?: string | undefined;
  merges?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListMerges$Outbound>
    | undefined;
  policy?: GetApiWorkspaceServiceV1WorkspacesListPolicy$Outbound | undefined;
  mergeRequests?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListMergeRequests$Outbound>
    | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListBranches$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListBranches$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListBranches
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    baseVersionHash: z.string().optional(),
    currentHeadHash: z.string().optional(),
    purpose: z.string().optional(),
    status: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    branchMetadata: z.record(z.string()).optional(),
    isLocked: z.boolean().optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
    merges: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesListMerges$outboundSchema),
    ).optional(),
    policy: z.lazy(() =>
      GetApiWorkspaceServiceV1WorkspacesListPolicy$outboundSchema
    ).optional(),
    mergeRequests: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListMergeRequests$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListBranches$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListBranches$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListBranches$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListBranches$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListBranches$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListBranches$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListBranches$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListBranchesToJSON(
  getApiWorkspaceServiceV1WorkspacesListBranches:
    GetApiWorkspaceServiceV1WorkspacesListBranches,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListBranches$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListBranches,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListBranchesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListBranches,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListBranches$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListBranches' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListChanges$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListChanges,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    changeType: z.string().optional(),
    contentBefore: z.string().optional(),
    contentAfter: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListChanges$Outbound = {
  id?: string | undefined;
  versionId?: string | undefined;
  changeType?: string | undefined;
  contentBefore?: string | undefined;
  contentAfter?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListChanges$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListChanges$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListChanges
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    changeType: z.string().optional(),
    contentBefore: z.string().optional(),
    contentAfter: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListChanges$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListChanges$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListChanges$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListChanges$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListChanges$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListChanges$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesListChanges$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListChangesToJSON(
  getApiWorkspaceServiceV1WorkspacesListChanges:
    GetApiWorkspaceServiceV1WorkspacesListChanges,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListChanges$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListChanges,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListChangesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListChanges,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListChanges$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListChanges' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListSummaries$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListSummaries,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    summaryType: z.string().optional(),
    content: z.string().optional(),
    targetAudience: z.string().optional(),
    keyPoints: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListSummaries$Outbound = {
  id?: string | undefined;
  versionId?: string | undefined;
  summaryType?: string | undefined;
  content?: string | undefined;
  targetAudience?: string | undefined;
  keyPoints?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListSummaries$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListSummaries$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListSummaries
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    summaryType: z.string().optional(),
    content: z.string().optional(),
    targetAudience: z.string().optional(),
    keyPoints: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListSummaries$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListSummaries$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListSummaries$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListSummaries$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListSummaries$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListSummaries$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListSummaries$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListSummariesToJSON(
  getApiWorkspaceServiceV1WorkspacesListSummaries:
    GetApiWorkspaceServiceV1WorkspacesListSummaries,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListSummaries$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListSummaries,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListSummariesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListSummaries,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListSummaries$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListSummaries' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponseVersions$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponseVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionHash: z.string().optional(),
    parentHash: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    branchName: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    isApproved: z.boolean().optional(),
    approvalChain: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    branches: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListBranches$inboundSchema
      ),
    ).optional(),
    changes: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesListChanges$inboundSchema),
    ).optional(),
    summaries: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListSummaries$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponseVersions$Outbound =
  {
    id?: string | undefined;
    versionHash?: string | undefined;
    parentHash?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    branchName?: string | undefined;
    metadata?: { [k: string]: string } | undefined;
    tags?: Array<string> | undefined;
    isApproved?: boolean | undefined;
    approvalChain?: string | undefined;
    createdAt?: string | undefined;
    branches?:
      | Array<GetApiWorkspaceServiceV1WorkspacesListBranches$Outbound>
      | undefined;
    changes?:
      | Array<GetApiWorkspaceServiceV1WorkspacesListChanges$Outbound>
      | undefined;
    summaries?:
      | Array<GetApiWorkspaceServiceV1WorkspacesListSummaries$Outbound>
      | undefined;
  };

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponseVersions$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponseVersions$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponseVersions
  > = z.object({
    id: z.string().optional(),
    versionHash: z.string().optional(),
    parentHash: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    branchName: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    isApproved: z.boolean().optional(),
    approvalChain: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    branches: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListBranches$outboundSchema
      ),
    ).optional(),
    changes: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListChanges$outboundSchema
      ),
    ).optional(),
    summaries: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListSummaries$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponseVersions$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponseVersions$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponseVersions$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponseVersions$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponseVersions$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponseVersions$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponseVersions$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListWorkspacesResponseVersionsToJSON(
  getApiWorkspaceServiceV1WorkspacesListWorkspacesResponseVersions:
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponseVersions,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponseVersions$outboundSchema
      .parse(getApiWorkspaceServiceV1WorkspacesListWorkspacesResponseVersions),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListWorkspacesResponseVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponseVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponseVersions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponseVersions' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListInstances$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListInstances,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    status: GetApiWorkspaceServiceV1WorkspacesListStatus$inboundSchema.default(
      "DOCUMENT_STATUS_UNSPECIFIED",
    ),
    fieldValues: z.record(z.string()).optional(),
    signers: z.array(z.string()).optional(),
    language: z.string().optional(),
    isCompleted: z.boolean().optional(),
    dueDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    generatedContent: z.string().optional(),
    attachments: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    signatureRequests: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListSignatureRequests$inboundSchema
      ),
    ).optional(),
    aiAssistance: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListAiAssistance$inboundSchema
      ),
    ).optional(),
    negotiation: z.lazy(() =>
      GetApiWorkspaceServiceV1WorkspacesListNegotiation$inboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponseVersions$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListInstances$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  status: string;
  fieldValues?: { [k: string]: string } | undefined;
  signers?: Array<string> | undefined;
  language?: string | undefined;
  isCompleted?: boolean | undefined;
  dueDate?: string | undefined;
  generatedContent?: string | undefined;
  attachments?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  signatureRequests?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListSignatureRequests$Outbound>
    | undefined;
  aiAssistance?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListAiAssistance$Outbound>
    | undefined;
  negotiation?:
    | GetApiWorkspaceServiceV1WorkspacesListNegotiation$Outbound
    | undefined;
  versions?:
    | Array<
      GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponseVersions$Outbound
    >
    | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListInstances$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListInstances$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListInstances
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    status: GetApiWorkspaceServiceV1WorkspacesListStatus$outboundSchema.default(
      "DOCUMENT_STATUS_UNSPECIFIED",
    ),
    fieldValues: z.record(z.string()).optional(),
    signers: z.array(z.string()).optional(),
    language: z.string().optional(),
    isCompleted: z.boolean().optional(),
    dueDate: z.date().transform(v => v.toISOString()).optional(),
    generatedContent: z.string().optional(),
    attachments: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    signatureRequests: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListSignatureRequests$outboundSchema
      ),
    ).optional(),
    aiAssistance: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListAiAssistance$outboundSchema
      ),
    ).optional(),
    negotiation: z.lazy(() =>
      GetApiWorkspaceServiceV1WorkspacesListNegotiation$outboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListWorkspacesResponseVersions$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListInstances$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListInstances$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListInstances$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListInstances$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListInstances$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListInstances$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListInstances$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListInstancesToJSON(
  getApiWorkspaceServiceV1WorkspacesListInstances:
    GetApiWorkspaceServiceV1WorkspacesListInstances,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListInstances$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListInstances,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListInstancesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListInstances,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListInstances$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListInstances' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListExplanations$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListExplanations,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    sectionIdentifier: z.string().optional(),
    explanationText: z.string().optional(),
    complexityLevel: z.string().optional(),
    relatedTerms: z.array(z.string()).optional(),
    legalReferences: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListExplanations$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  sectionIdentifier?: string | undefined;
  explanationText?: string | undefined;
  complexityLevel?: string | undefined;
  relatedTerms?: Array<string> | undefined;
  legalReferences?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListExplanations$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListExplanations$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListExplanations
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    sectionIdentifier: z.string().optional(),
    explanationText: z.string().optional(),
    complexityLevel: z.string().optional(),
    relatedTerms: z.array(z.string()).optional(),
    legalReferences: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListExplanations$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListExplanations$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListExplanations$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListExplanations$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListExplanations$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListExplanations$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListExplanations$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListExplanationsToJSON(
  getApiWorkspaceServiceV1WorkspacesListExplanations:
    GetApiWorkspaceServiceV1WorkspacesListExplanations,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListExplanations$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListExplanations,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListExplanationsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListExplanations,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListExplanations$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListExplanations' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListRiskAssessments$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListRiskAssessments,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    riskType: z.string().optional(),
    riskScore: z.number().optional(),
    assessmentDetails: z.string().optional(),
    mitigationSuggestions: z.array(z.string()).optional(),
    assessorId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListRiskAssessments$Outbound = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  riskType?: string | undefined;
  riskScore?: number | undefined;
  assessmentDetails?: string | undefined;
  mitigationSuggestions?: Array<string> | undefined;
  assessorId?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListRiskAssessments$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListRiskAssessments$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListRiskAssessments
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    riskType: z.string().optional(),
    riskScore: z.number().optional(),
    assessmentDetails: z.string().optional(),
    mitigationSuggestions: z.array(z.string()).optional(),
    assessorId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListRiskAssessments$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListRiskAssessments$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListRiskAssessments$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListRiskAssessments$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListRiskAssessments$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListRiskAssessments$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListRiskAssessments$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListRiskAssessmentsToJSON(
  getApiWorkspaceServiceV1WorkspacesListRiskAssessments:
    GetApiWorkspaceServiceV1WorkspacesListRiskAssessments,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListRiskAssessments$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListRiskAssessments,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListRiskAssessmentsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListRiskAssessments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListRiskAssessments$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListRiskAssessments' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListComplianceChecks$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListComplianceChecks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    complianceStandard: z.string().optional(),
    checkResult: z.string().optional(),
    violations: z.array(z.string()).optional(),
    remediationSteps: z.string().optional(),
    checkDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListComplianceChecks$Outbound = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  complianceStandard?: string | undefined;
  checkResult?: string | undefined;
  violations?: Array<string> | undefined;
  remediationSteps?: string | undefined;
  checkDate?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListComplianceChecks$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListComplianceChecks$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListComplianceChecks
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    complianceStandard: z.string().optional(),
    checkResult: z.string().optional(),
    violations: z.array(z.string()).optional(),
    remediationSteps: z.string().optional(),
    checkDate: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListComplianceChecks$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListComplianceChecks$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListComplianceChecks$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListComplianceChecks$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListComplianceChecks$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListComplianceChecks$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListComplianceChecks$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListComplianceChecksToJSON(
  getApiWorkspaceServiceV1WorkspacesListComplianceChecks:
    GetApiWorkspaceServiceV1WorkspacesListComplianceChecks,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListComplianceChecks$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListComplianceChecks,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListComplianceChecksFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListComplianceChecks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListComplianceChecks$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListComplianceChecks' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListIntelligence$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListIntelligence,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    contractType: z.string().optional(),
    riskScores: z.record(z.number()).optional(),
    detectedClauses: z.record(z.string()).optional(),
    keyObligations: z.array(z.string()).optional(),
    complianceScores: z.record(z.number()).optional(),
    jurisdiction: z.string().optional(),
    governingLaws: z.array(z.string()).optional(),
    semanticAnalysis: z.record(z.string()).optional(),
    analysisDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    riskAssessments: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListRiskAssessments$inboundSchema
      ),
    ).optional(),
    complianceChecks: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListComplianceChecks$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListIntelligence$Outbound = {
  id?: string | undefined;
  contractType?: string | undefined;
  riskScores?: { [k: string]: number } | undefined;
  detectedClauses?: { [k: string]: string } | undefined;
  keyObligations?: Array<string> | undefined;
  complianceScores?: { [k: string]: number } | undefined;
  jurisdiction?: string | undefined;
  governingLaws?: Array<string> | undefined;
  semanticAnalysis?: { [k: string]: string } | undefined;
  analysisDate?: string | undefined;
  riskAssessments?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListRiskAssessments$Outbound>
    | undefined;
  complianceChecks?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListComplianceChecks$Outbound>
    | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListIntelligence$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListIntelligence$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListIntelligence
  > = z.object({
    id: z.string().optional(),
    contractType: z.string().optional(),
    riskScores: z.record(z.number()).optional(),
    detectedClauses: z.record(z.string()).optional(),
    keyObligations: z.array(z.string()).optional(),
    complianceScores: z.record(z.number()).optional(),
    jurisdiction: z.string().optional(),
    governingLaws: z.array(z.string()).optional(),
    semanticAnalysis: z.record(z.string()).optional(),
    analysisDate: z.date().transform(v => v.toISOString()).optional(),
    riskAssessments: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListRiskAssessments$outboundSchema
      ),
    ).optional(),
    complianceChecks: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListComplianceChecks$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListIntelligence$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListIntelligence$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListIntelligence$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListIntelligence$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListIntelligence$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListIntelligence$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListIntelligence$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListIntelligenceToJSON(
  getApiWorkspaceServiceV1WorkspacesListIntelligence:
    GetApiWorkspaceServiceV1WorkspacesListIntelligence,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListIntelligence$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListIntelligence,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListIntelligenceFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListIntelligence,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListIntelligence$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListIntelligence' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListTemplates$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListTemplates,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    industryType: z.string().optional(),
    documentType: z.string().optional(),
    baseContent: z.string().optional(),
    isAdaptive: z.boolean().optional(),
    metadata: z.record(z.string()).optional(),
    supportedLanguages: z.array(z.string()).optional(),
    requiredDataFields: z.array(z.string()).optional(),
    version: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    templateType:
      GetApiWorkspaceServiceV1WorkspacesListTemplateType$inboundSchema.default(
        "TEMPLATE_TYPE_UNSPECIFIED",
      ),
    content: z.string().optional(),
    detectedVariables: z.array(z.string()).optional(),
    variableMappings: z.record(z.string()).optional(),
    isContextAware: z.boolean().optional(),
    supportedContexts: z.array(z.string()).optional(),
    formattingRules: z.record(z.string()).optional(),
    conditionalSections: z.array(z.string()).optional(),
    versions: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListVersions$inboundSchema
      ),
    ).optional(),
    variables: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListVariables$inboundSchema
      ),
    ).optional(),
    instances: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListInstances$inboundSchema
      ),
    ).optional(),
    explanations: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListExplanations$inboundSchema
      ),
    ).optional(),
    intelligence: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListIntelligence$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListTemplates$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  industryType?: string | undefined;
  documentType?: string | undefined;
  baseContent?: string | undefined;
  isAdaptive?: boolean | undefined;
  metadata?: { [k: string]: string } | undefined;
  supportedLanguages?: Array<string> | undefined;
  requiredDataFields?: Array<string> | undefined;
  version?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  templateType: string;
  content?: string | undefined;
  detectedVariables?: Array<string> | undefined;
  variableMappings?: { [k: string]: string } | undefined;
  isContextAware?: boolean | undefined;
  supportedContexts?: Array<string> | undefined;
  formattingRules?: { [k: string]: string } | undefined;
  conditionalSections?: Array<string> | undefined;
  versions?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListVersions$Outbound>
    | undefined;
  variables?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListVariables$Outbound>
    | undefined;
  instances?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListInstances$Outbound>
    | undefined;
  explanations?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListExplanations$Outbound>
    | undefined;
  intelligence?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListIntelligence$Outbound>
    | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListTemplates$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListTemplates$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListTemplates
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    industryType: z.string().optional(),
    documentType: z.string().optional(),
    baseContent: z.string().optional(),
    isAdaptive: z.boolean().optional(),
    metadata: z.record(z.string()).optional(),
    supportedLanguages: z.array(z.string()).optional(),
    requiredDataFields: z.array(z.string()).optional(),
    version: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    templateType:
      GetApiWorkspaceServiceV1WorkspacesListTemplateType$outboundSchema.default(
        "TEMPLATE_TYPE_UNSPECIFIED",
      ),
    content: z.string().optional(),
    detectedVariables: z.array(z.string()).optional(),
    variableMappings: z.record(z.string()).optional(),
    isContextAware: z.boolean().optional(),
    supportedContexts: z.array(z.string()).optional(),
    formattingRules: z.record(z.string()).optional(),
    conditionalSections: z.array(z.string()).optional(),
    versions: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListVersions$outboundSchema
      ),
    ).optional(),
    variables: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListVariables$outboundSchema
      ),
    ).optional(),
    instances: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListInstances$outboundSchema
      ),
    ).optional(),
    explanations: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListExplanations$outboundSchema
      ),
    ).optional(),
    intelligence: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListIntelligence$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListTemplates$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListTemplates$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListTemplates$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListTemplates$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListTemplates$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListTemplates$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListTemplates$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListTemplatesToJSON(
  getApiWorkspaceServiceV1WorkspacesListTemplates:
    GetApiWorkspaceServiceV1WorkspacesListTemplates,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListTemplates$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListTemplates,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListTemplatesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListTemplates,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListTemplates$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListTemplates' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListSharing$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListSharing,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListSharing$Outbound = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListSharing$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListSharing$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListSharing
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListSharing$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListSharing$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListSharing$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListSharing$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListSharing$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListSharing$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesListSharing$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListSharingToJSON(
  getApiWorkspaceServiceV1WorkspacesListSharing:
    GetApiWorkspaceServiceV1WorkspacesListSharing,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListSharing$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListSharing,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListSharingFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListSharing,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListSharing$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListSharing' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListActivities$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListActivities,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    activityType: z.string().optional(),
    userId: z.string().optional(),
    description: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListActivities$Outbound = {
  id?: string | undefined;
  activityType?: string | undefined;
  userId?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListActivities$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListActivities$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListActivities
  > = z.object({
    id: z.string().optional(),
    activityType: z.string().optional(),
    userId: z.string().optional(),
    description: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListActivities$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListActivities$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListActivities$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListActivities$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListActivities$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListActivities$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListActivities$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListActivitiesToJSON(
  getApiWorkspaceServiceV1WorkspacesListActivities:
    GetApiWorkspaceServiceV1WorkspacesListActivities,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListActivities$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListActivities,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListActivitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListActivities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListActivities$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListActivities' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListCompliance$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListCompliance,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    complianceType: z.string().optional(),
    status: z.string().optional(),
    certificationId: z.string().optional(),
    validUntil: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListCompliance$Outbound = {
  id?: string | undefined;
  complianceType?: string | undefined;
  status?: string | undefined;
  certificationId?: string | undefined;
  validUntil?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListCompliance$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListCompliance$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListCompliance
  > = z.object({
    id: z.string().optional(),
    complianceType: z.string().optional(),
    status: z.string().optional(),
    certificationId: z.string().optional(),
    validUntil: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListCompliance$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListCompliance$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListCompliance$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListCompliance$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListCompliance$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListCompliance$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListCompliance$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListComplianceToJSON(
  getApiWorkspaceServiceV1WorkspacesListCompliance:
    GetApiWorkspaceServiceV1WorkspacesListCompliance,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListCompliance$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListCompliance,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListComplianceFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListCompliance,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListCompliance$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListCompliance' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListCategory$inboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1WorkspacesListCategory> = z
    .nativeEnum(GetApiWorkspaceServiceV1WorkspacesListCategory);

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListCategory$outboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1WorkspacesListCategory> =
    GetApiWorkspaceServiceV1WorkspacesListCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListCategory$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListCategory$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListCategory$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListCategory$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListCategory$outboundSchema;
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListPricingModel$inboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1WorkspacesListPricingModel> = z
    .nativeEnum(GetApiWorkspaceServiceV1WorkspacesListPricingModel);

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListPricingModel$outboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1WorkspacesListPricingModel> =
    GetApiWorkspaceServiceV1WorkspacesListPricingModel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListPricingModel$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListPricingModel$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListPricingModel$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListPricingModel$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListPricingModel$outboundSchema;
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListWorkspacesVersions$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    versionNumber: z.string().optional(),
    changelog: z.string().optional(),
    requirements: z.record(z.string()).optional(),
    isPublic: z.boolean().optional(),
    releaseDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListWorkspacesVersions$Outbound =
  {
    id?: string | undefined;
    appId?: string | undefined;
    versionNumber?: string | undefined;
    changelog?: string | undefined;
    requirements?: { [k: string]: string } | undefined;
    isPublic?: boolean | undefined;
    releaseDate?: string | undefined;
  };

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListWorkspacesVersions$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesVersions$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesVersions
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    versionNumber: z.string().optional(),
    changelog: z.string().optional(),
    requirements: z.record(z.string()).optional(),
    isPublic: z.boolean().optional(),
    releaseDate: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListWorkspacesVersions$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListWorkspacesVersions$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesVersions$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListWorkspacesVersions$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesVersions$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListWorkspacesVersions$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesVersions$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListWorkspacesVersionsToJSON(
  getApiWorkspaceServiceV1WorkspacesListWorkspacesVersions:
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesVersions,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListWorkspacesVersions$outboundSchema
      .parse(getApiWorkspaceServiceV1WorkspacesListWorkspacesVersions),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListWorkspacesVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListWorkspacesVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListWorkspacesVersions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListWorkspacesVersions' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListInstallations$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListInstallations,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    workspaceId: z.string().optional(),
    versionInstalled: z.string().optional(),
    configuration: z.record(z.string()).optional(),
    installationStatus: z.string().optional(),
    installedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    lastUsed: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListInstallations$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  workspaceId?: string | undefined;
  versionInstalled?: string | undefined;
  configuration?: { [k: string]: string } | undefined;
  installationStatus?: string | undefined;
  installedAt?: string | undefined;
  lastUsed?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListInstallations$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListInstallations$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListInstallations
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    workspaceId: z.string().optional(),
    versionInstalled: z.string().optional(),
    configuration: z.record(z.string()).optional(),
    installationStatus: z.string().optional(),
    installedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUsed: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListInstallations$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListInstallations$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListInstallations$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListInstallations$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListInstallations$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListInstallations$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListInstallations$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListInstallationsToJSON(
  getApiWorkspaceServiceV1WorkspacesListInstallations:
    GetApiWorkspaceServiceV1WorkspacesListInstallations,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListInstallations$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListInstallations,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListInstallationsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListInstallations,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListInstallations$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListInstallations' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListAnalytics$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListAnalytics,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    metricName: z.string().optional(),
    metricValue: z.number().optional(),
    dimensions: z.record(z.string()).optional(),
    recordedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListAnalytics$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  metricName?: string | undefined;
  metricValue?: number | undefined;
  dimensions?: { [k: string]: string } | undefined;
  recordedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListAnalytics$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListAnalytics$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListAnalytics
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    metricName: z.string().optional(),
    metricValue: z.number().optional(),
    dimensions: z.record(z.string()).optional(),
    recordedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListAnalytics$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListAnalytics$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListAnalytics$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListAnalytics$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListAnalytics$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListAnalytics$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListAnalytics$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListAnalyticsToJSON(
  getApiWorkspaceServiceV1WorkspacesListAnalytics:
    GetApiWorkspaceServiceV1WorkspacesListAnalytics,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListAnalytics$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListAnalytics,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListAnalytics,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListAnalytics$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListAnalytics' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListReviews$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListReviews,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    reviewerId: z.string().optional(),
    rating: z.number().optional(),
    reviewText: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListReviews$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  reviewerId?: string | undefined;
  rating?: number | undefined;
  reviewText?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListReviews$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListReviews$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListReviews
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    reviewerId: z.string().optional(),
    rating: z.number().optional(),
    reviewText: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListReviews$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListReviews$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListReviews$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListReviews$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListReviews$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListReviews$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesListReviews$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListReviewsToJSON(
  getApiWorkspaceServiceV1WorkspacesListReviews:
    GetApiWorkspaceServiceV1WorkspacesListReviews,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListReviews$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListReviews,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListReviewsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListReviews,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListReviews$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListReviews' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListInfo$inboundSchema:
  z.ZodType<GetApiWorkspaceServiceV1WorkspacesListInfo, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      appId: z.string().optional(),
      supportedLanguages: z.array(z.string()).optional(),
      sdkFeatures: z.array(z.string()).optional(),
      testCoverage: z.record(z.number()).optional(),
      securityScans: z.array(z.string()).optional(),
      performanceMetrics: z.record(z.string()).optional(),
      developmentStatus: z.string().optional(),
      knownIssues: z.array(z.string()).optional(),
      roadmapUrl: z.string().optional(),
      lastSecurityAudit: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      createdAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      updatedAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
    });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListInfo$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  supportedLanguages?: Array<string> | undefined;
  sdkFeatures?: Array<string> | undefined;
  testCoverage?: { [k: string]: number } | undefined;
  securityScans?: Array<string> | undefined;
  performanceMetrics?: { [k: string]: string } | undefined;
  developmentStatus?: string | undefined;
  knownIssues?: Array<string> | undefined;
  roadmapUrl?: string | undefined;
  lastSecurityAudit?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListInfo$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListInfo$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListInfo
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    supportedLanguages: z.array(z.string()).optional(),
    sdkFeatures: z.array(z.string()).optional(),
    testCoverage: z.record(z.number()).optional(),
    securityScans: z.array(z.string()).optional(),
    performanceMetrics: z.record(z.string()).optional(),
    developmentStatus: z.string().optional(),
    knownIssues: z.array(z.string()).optional(),
    roadmapUrl: z.string().optional(),
    lastSecurityAudit: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListInfo$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListInfo$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListInfo$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListInfo$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListInfo$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListInfo$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesListInfo$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListInfoToJSON(
  getApiWorkspaceServiceV1WorkspacesListInfo:
    GetApiWorkspaceServiceV1WorkspacesListInfo,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListInfo$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListInfo,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListInfoFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListInfo,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListInfo$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListInfo' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListWebhooks$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListWebhooks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    url: z.string().optional(),
    subscribedEvents: z.array(z.string()).optional(),
    secretKey: z.string().optional(),
    retryCount: z.number().int().optional(),
    timeoutSeconds: z.number().int().optional(),
    isActive: z.boolean().optional(),
    headers: z.record(z.string()).optional(),
    lastTriggered: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListWebhooks$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  url?: string | undefined;
  subscribedEvents?: Array<string> | undefined;
  secretKey?: string | undefined;
  retryCount?: number | undefined;
  timeoutSeconds?: number | undefined;
  isActive?: boolean | undefined;
  headers?: { [k: string]: string } | undefined;
  lastTriggered?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListWebhooks$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListWebhooks$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListWebhooks
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    url: z.string().optional(),
    subscribedEvents: z.array(z.string()).optional(),
    secretKey: z.string().optional(),
    retryCount: z.number().int().optional(),
    timeoutSeconds: z.number().int().optional(),
    isActive: z.boolean().optional(),
    headers: z.record(z.string()).optional(),
    lastTriggered: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListWebhooks$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListWebhooks$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListWebhooks$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListWebhooks$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListWebhooks$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListWebhooks$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListWebhooks$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListWebhooksToJSON(
  getApiWorkspaceServiceV1WorkspacesListWebhooks:
    GetApiWorkspaceServiceV1WorkspacesListWebhooks,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListWebhooks$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListWebhooks,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListWebhooksFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListWebhooks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListWebhooks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListWebhooks' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListPermissions$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListPermissions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    scope: z.string().optional(),
    description: z.string().optional(),
    isRequired: z.boolean().optional(),
    accessLevels: z.array(z.string()).optional(),
    constraints: z.record(z.string()).optional(),
    requiresApproval: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListPermissions$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  scope?: string | undefined;
  description?: string | undefined;
  isRequired?: boolean | undefined;
  accessLevels?: Array<string> | undefined;
  constraints?: { [k: string]: string } | undefined;
  requiresApproval?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListPermissions$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListPermissions$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListPermissions
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    scope: z.string().optional(),
    description: z.string().optional(),
    isRequired: z.boolean().optional(),
    accessLevels: z.array(z.string()).optional(),
    constraints: z.record(z.string()).optional(),
    requiresApproval: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListPermissions$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListPermissions$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListPermissions$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListPermissions$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListPermissions$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListPermissions$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListPermissions$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListPermissionsToJSON(
  getApiWorkspaceServiceV1WorkspacesListPermissions:
    GetApiWorkspaceServiceV1WorkspacesListPermissions,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListPermissions$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListPermissions,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListPermissionsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListPermissions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListPermissions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListPermissions' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListInstalledApps$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListInstalledApps,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    developerId: z.string().optional(),
    category: GetApiWorkspaceServiceV1WorkspacesListCategory$inboundSchema
      .default("APP_CATEGORY_UNSPECIFIED"),
    supportedContractTypes: z.array(z.string()).optional(),
    features: z.array(z.string()).optional(),
    pricingModel:
      GetApiWorkspaceServiceV1WorkspacesListPricingModel$inboundSchema.default(
        "PRICING_MODEL_UNSPECIFIED",
      ),
    pricingTiers: z.record(z.number()).optional(),
    supportedIntegrations: z.array(z.string()).optional(),
    isVerified: z.boolean().optional(),
    rating: z.number().optional(),
    installationCount: z.number().int().optional(),
    requiredPermissions: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    documentationUrl: z.string().optional(),
    supportEmail: z.string().optional(),
    screenshots: z.array(z.string()).optional(),
    privacyPolicyUrl: z.string().optional(),
    termsUrl: z.string().optional(),
    publishedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListWorkspacesVersions$inboundSchema
      ),
    ).optional(),
    installations: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListInstallations$inboundSchema
      ),
    ).optional(),
    analytics: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListAnalytics$inboundSchema
      ),
    ).optional(),
    reviews: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesListReviews$inboundSchema),
    ).optional(),
    info: z.lazy(() => GetApiWorkspaceServiceV1WorkspacesListInfo$inboundSchema)
      .optional(),
    webhooks: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListWebhooks$inboundSchema
      ),
    ).optional(),
    permissions: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListPermissions$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListInstalledApps$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  developerId?: string | undefined;
  category: string;
  supportedContractTypes?: Array<string> | undefined;
  features?: Array<string> | undefined;
  pricingModel: string;
  pricingTiers?: { [k: string]: number } | undefined;
  supportedIntegrations?: Array<string> | undefined;
  isVerified?: boolean | undefined;
  rating?: number | undefined;
  installationCount?: number | undefined;
  requiredPermissions?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  documentationUrl?: string | undefined;
  supportEmail?: string | undefined;
  screenshots?: Array<string> | undefined;
  privacyPolicyUrl?: string | undefined;
  termsUrl?: string | undefined;
  publishedAt?: string | undefined;
  lastUpdated?: string | undefined;
  versions?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListWorkspacesVersions$Outbound>
    | undefined;
  installations?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListInstallations$Outbound>
    | undefined;
  analytics?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListAnalytics$Outbound>
    | undefined;
  reviews?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListReviews$Outbound>
    | undefined;
  info?: GetApiWorkspaceServiceV1WorkspacesListInfo$Outbound | undefined;
  webhooks?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListWebhooks$Outbound>
    | undefined;
  permissions?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListPermissions$Outbound>
    | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListInstalledApps$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListInstalledApps$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListInstalledApps
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    developerId: z.string().optional(),
    category: GetApiWorkspaceServiceV1WorkspacesListCategory$outboundSchema
      .default("APP_CATEGORY_UNSPECIFIED"),
    supportedContractTypes: z.array(z.string()).optional(),
    features: z.array(z.string()).optional(),
    pricingModel:
      GetApiWorkspaceServiceV1WorkspacesListPricingModel$outboundSchema.default(
        "PRICING_MODEL_UNSPECIFIED",
      ),
    pricingTiers: z.record(z.number()).optional(),
    supportedIntegrations: z.array(z.string()).optional(),
    isVerified: z.boolean().optional(),
    rating: z.number().optional(),
    installationCount: z.number().int().optional(),
    requiredPermissions: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    documentationUrl: z.string().optional(),
    supportEmail: z.string().optional(),
    screenshots: z.array(z.string()).optional(),
    privacyPolicyUrl: z.string().optional(),
    termsUrl: z.string().optional(),
    publishedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
    versions: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListWorkspacesVersions$outboundSchema
      ),
    ).optional(),
    installations: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListInstallations$outboundSchema
      ),
    ).optional(),
    analytics: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListAnalytics$outboundSchema
      ),
    ).optional(),
    reviews: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListReviews$outboundSchema
      ),
    ).optional(),
    info: z.lazy(() =>
      GetApiWorkspaceServiceV1WorkspacesListInfo$outboundSchema
    ).optional(),
    webhooks: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListWebhooks$outboundSchema
      ),
    ).optional(),
    permissions: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListPermissions$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListInstalledApps$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListInstalledApps$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListInstalledApps$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListInstalledApps$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListInstalledApps$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListInstalledApps$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListInstalledApps$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListInstalledAppsToJSON(
  getApiWorkspaceServiceV1WorkspacesListInstalledApps:
    GetApiWorkspaceServiceV1WorkspacesListInstalledApps,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListInstalledApps$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListInstalledApps,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListInstalledAppsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListInstalledApps,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListInstalledApps$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListInstalledApps' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListWorkspaces$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListWorkspaces,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    uniqueIdentifier: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    storageQuota: z.string().optional(),
    usedStorage: z.string().optional(),
    allowPublicSharing: z.boolean().optional(),
    requireApproval: z.boolean().optional(),
    gdprCompliant: z.boolean().optional(),
    hipaaCompliant: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    folders: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesListFolders$inboundSchema),
    ).optional(),
    templates: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListTemplates$inboundSchema
      ),
    ).optional(),
    sharing: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1WorkspacesListSharing$inboundSchema),
    ).optional(),
    activities: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListActivities$inboundSchema
      ),
    ).optional(),
    compliance: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListCompliance$inboundSchema
      ),
    ).optional(),
    installedApps: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListInstalledApps$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListWorkspaces$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  uniqueIdentifier?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  storageQuota?: string | undefined;
  usedStorage?: string | undefined;
  allowPublicSharing?: boolean | undefined;
  requireApproval?: boolean | undefined;
  gdprCompliant?: boolean | undefined;
  hipaaCompliant?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  folders?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListFolders$Outbound>
    | undefined;
  templates?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListTemplates$Outbound>
    | undefined;
  sharing?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListSharing$Outbound>
    | undefined;
  activities?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListActivities$Outbound>
    | undefined;
  compliance?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListCompliance$Outbound>
    | undefined;
  installedApps?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListInstalledApps$Outbound>
    | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListWorkspaces$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListWorkspaces$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListWorkspaces
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    uniqueIdentifier: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    storageQuota: z.string().optional(),
    usedStorage: z.string().optional(),
    allowPublicSharing: z.boolean().optional(),
    requireApproval: z.boolean().optional(),
    gdprCompliant: z.boolean().optional(),
    hipaaCompliant: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    folders: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListFolders$outboundSchema
      ),
    ).optional(),
    templates: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListTemplates$outboundSchema
      ),
    ).optional(),
    sharing: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListSharing$outboundSchema
      ),
    ).optional(),
    activities: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListActivities$outboundSchema
      ),
    ).optional(),
    compliance: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListCompliance$outboundSchema
      ),
    ).optional(),
    installedApps: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListInstalledApps$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListWorkspaces$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListWorkspaces$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListWorkspaces$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListWorkspaces$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListWorkspaces$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListWorkspaces$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListWorkspaces$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListWorkspacesToJSON(
  getApiWorkspaceServiceV1WorkspacesListWorkspaces:
    GetApiWorkspaceServiceV1WorkspacesListWorkspaces,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListWorkspaces$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListWorkspaces,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListWorkspacesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListWorkspaces,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListWorkspaces$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListWorkspaces' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListData$inboundSchema:
  z.ZodType<GetApiWorkspaceServiceV1WorkspacesListData, z.ZodTypeDef, unknown> =
    z.object({
      workspaces: z.array(
        z.lazy(() =>
          GetApiWorkspaceServiceV1WorkspacesListWorkspaces$inboundSchema
        ),
      ).optional(),
      nextPageToken: z.string().optional(),
      totalSize: z.number().int().optional(),
    });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListData$Outbound = {
  workspaces?:
    | Array<GetApiWorkspaceServiceV1WorkspacesListWorkspaces$Outbound>
    | undefined;
  nextPageToken?: string | undefined;
  totalSize?: number | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListData$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListData$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListData
  > = z.object({
    workspaces: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1WorkspacesListWorkspaces$outboundSchema
      ),
    ).optional(),
    nextPageToken: z.string().optional(),
    totalSize: z.number().int().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListData$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListData$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListData$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListData$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListData$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListData$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1WorkspacesListData$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListDataToJSON(
  getApiWorkspaceServiceV1WorkspacesListData:
    GetApiWorkspaceServiceV1WorkspacesListData,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListData$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListData,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListDataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListData' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListResponseBody$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.lazy(() =>
      GetApiWorkspaceServiceV1WorkspacesListData$inboundSchema
    ),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesListResponseBody$Outbound = {
  data: GetApiWorkspaceServiceV1WorkspacesListData$Outbound;
};

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesListResponseBody$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesListResponseBody$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesListResponseBody
  > = z.object({
    data: z.lazy(() =>
      GetApiWorkspaceServiceV1WorkspacesListData$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesListResponseBody$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListResponseBody$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesListResponseBody$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesListResponseBody$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesListResponseBody$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesListResponseBodyToJSON(
  getApiWorkspaceServiceV1WorkspacesListResponseBody:
    GetApiWorkspaceServiceV1WorkspacesListResponseBody,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesListResponseBody$outboundSchema.parse(
      getApiWorkspaceServiceV1WorkspacesListResponseBody,
    ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesListResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesListResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesListResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesListResponseBody' from JSON`,
  );
}
