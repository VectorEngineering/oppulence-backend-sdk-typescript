/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdRequest = {
  workspaceId: string;
  startTime?: string | undefined;
  endTime?: string | undefined;
};

export type Activity = {
  totalFiles?: number | undefined;
  totalFolders?: number | undefined;
  activeUsers?: number | undefined;
  storageUsed?: string | undefined;
  storageUsagePercentage?: number | undefined;
};

export type UserActivities = {
  userId?: string | undefined;
  email?: string | undefined;
  fileOperations?: number | undefined;
  commentsMade?: number | undefined;
  documentsProcessed?: number | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdCompliance = {
  gdprComplianceScore?: number | undefined;
  hipaaComplianceScore?: number | undefined;
  pendingApprovals?: number | undefined;
  complianceViolations?: number | undefined;
};

export type RecentActivities = {
  id?: string | undefined;
  activityType?: string | undefined;
  userId?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdData = {
  activity?: Activity | undefined;
  userActivities?: Array<UserActivities> | undefined;
  compliance?:
    | GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdCompliance
    | undefined;
  recentActivities?: Array<RecentActivities> | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdResponseBody =
  {
    data: GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdData;
  };

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdRequest$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    workspaceId: z.string(),
    startTime: z.string().optional(),
    endTime: z.string().optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdRequest$Outbound =
  {
    workspaceId: string;
    startTime?: string | undefined;
    endTime?: string | undefined;
  };

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdRequest$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdRequest$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdRequest
  > = z.object({
    workspaceId: z.string(),
    startTime: z.string().optional(),
    endTime: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdRequest$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdRequest$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdRequest$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdRequest$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdRequest$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdRequestToJSON(
  getApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdRequest:
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdRequest,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdRequest$outboundSchema
      .parse(getApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdRequest),
  );
}

export function getApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdRequest' from JSON`,
  );
}

/** @internal */
export const Activity$inboundSchema: z.ZodType<
  Activity,
  z.ZodTypeDef,
  unknown
> = z.object({
  totalFiles: z.number().int().optional(),
  totalFolders: z.number().int().optional(),
  activeUsers: z.number().int().optional(),
  storageUsed: z.string().optional(),
  storageUsagePercentage: z.number().optional(),
});

/** @internal */
export type Activity$Outbound = {
  totalFiles?: number | undefined;
  totalFolders?: number | undefined;
  activeUsers?: number | undefined;
  storageUsed?: string | undefined;
  storageUsagePercentage?: number | undefined;
};

/** @internal */
export const Activity$outboundSchema: z.ZodType<
  Activity$Outbound,
  z.ZodTypeDef,
  Activity
> = z.object({
  totalFiles: z.number().int().optional(),
  totalFolders: z.number().int().optional(),
  activeUsers: z.number().int().optional(),
  storageUsed: z.string().optional(),
  storageUsagePercentage: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Activity$ {
  /** @deprecated use `Activity$inboundSchema` instead. */
  export const inboundSchema = Activity$inboundSchema;
  /** @deprecated use `Activity$outboundSchema` instead. */
  export const outboundSchema = Activity$outboundSchema;
  /** @deprecated use `Activity$Outbound` instead. */
  export type Outbound = Activity$Outbound;
}

export function activityToJSON(activity: Activity): string {
  return JSON.stringify(Activity$outboundSchema.parse(activity));
}

export function activityFromJSON(
  jsonString: string,
): SafeParseResult<Activity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Activity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Activity' from JSON`,
  );
}

/** @internal */
export const UserActivities$inboundSchema: z.ZodType<
  UserActivities,
  z.ZodTypeDef,
  unknown
> = z.object({
  userId: z.string().optional(),
  email: z.string().optional(),
  fileOperations: z.number().int().optional(),
  commentsMade: z.number().int().optional(),
  documentsProcessed: z.number().int().optional(),
});

/** @internal */
export type UserActivities$Outbound = {
  userId?: string | undefined;
  email?: string | undefined;
  fileOperations?: number | undefined;
  commentsMade?: number | undefined;
  documentsProcessed?: number | undefined;
};

/** @internal */
export const UserActivities$outboundSchema: z.ZodType<
  UserActivities$Outbound,
  z.ZodTypeDef,
  UserActivities
> = z.object({
  userId: z.string().optional(),
  email: z.string().optional(),
  fileOperations: z.number().int().optional(),
  commentsMade: z.number().int().optional(),
  documentsProcessed: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserActivities$ {
  /** @deprecated use `UserActivities$inboundSchema` instead. */
  export const inboundSchema = UserActivities$inboundSchema;
  /** @deprecated use `UserActivities$outboundSchema` instead. */
  export const outboundSchema = UserActivities$outboundSchema;
  /** @deprecated use `UserActivities$Outbound` instead. */
  export type Outbound = UserActivities$Outbound;
}

export function userActivitiesToJSON(userActivities: UserActivities): string {
  return JSON.stringify(UserActivities$outboundSchema.parse(userActivities));
}

export function userActivitiesFromJSON(
  jsonString: string,
): SafeParseResult<UserActivities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserActivities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserActivities' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdCompliance$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdCompliance,
    z.ZodTypeDef,
    unknown
  > = z.object({
    gdprComplianceScore: z.number().optional(),
    hipaaComplianceScore: z.number().optional(),
    pendingApprovals: z.number().int().optional(),
    complianceViolations: z.number().int().optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdCompliance$Outbound =
  {
    gdprComplianceScore?: number | undefined;
    hipaaComplianceScore?: number | undefined;
    pendingApprovals?: number | undefined;
    complianceViolations?: number | undefined;
  };

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdCompliance$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdCompliance$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdCompliance
  > = z.object({
    gdprComplianceScore: z.number().optional(),
    hipaaComplianceScore: z.number().optional(),
    pendingApprovals: z.number().int().optional(),
    complianceViolations: z.number().int().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdCompliance$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdCompliance$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdCompliance$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdCompliance$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdCompliance$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdCompliance$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdCompliance$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdComplianceToJSON(
  getApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdCompliance:
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdCompliance,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdCompliance$outboundSchema
      .parse(getApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdCompliance),
  );
}

export function getApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdComplianceFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdCompliance,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdCompliance$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdCompliance' from JSON`,
  );
}

/** @internal */
export const RecentActivities$inboundSchema: z.ZodType<
  RecentActivities,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  activityType: z.string().optional(),
  userId: z.string().optional(),
  description: z.string().optional(),
  metadata: z.record(z.string()).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type RecentActivities$Outbound = {
  id?: string | undefined;
  activityType?: string | undefined;
  userId?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const RecentActivities$outboundSchema: z.ZodType<
  RecentActivities$Outbound,
  z.ZodTypeDef,
  RecentActivities
> = z.object({
  id: z.string().optional(),
  activityType: z.string().optional(),
  userId: z.string().optional(),
  description: z.string().optional(),
  metadata: z.record(z.string()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecentActivities$ {
  /** @deprecated use `RecentActivities$inboundSchema` instead. */
  export const inboundSchema = RecentActivities$inboundSchema;
  /** @deprecated use `RecentActivities$outboundSchema` instead. */
  export const outboundSchema = RecentActivities$outboundSchema;
  /** @deprecated use `RecentActivities$Outbound` instead. */
  export type Outbound = RecentActivities$Outbound;
}

export function recentActivitiesToJSON(
  recentActivities: RecentActivities,
): string {
  return JSON.stringify(
    RecentActivities$outboundSchema.parse(recentActivities),
  );
}

export function recentActivitiesFromJSON(
  jsonString: string,
): SafeParseResult<RecentActivities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RecentActivities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RecentActivities' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdData$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdData,
    z.ZodTypeDef,
    unknown
  > = z.object({
    activity: z.lazy(() => Activity$inboundSchema).optional(),
    userActivities: z.array(z.lazy(() => UserActivities$inboundSchema))
      .optional(),
    compliance: z.lazy(() =>
      GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdCompliance$inboundSchema
    ).optional(),
    recentActivities: z.array(z.lazy(() => RecentActivities$inboundSchema))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdData$Outbound =
  {
    activity?: Activity$Outbound | undefined;
    userActivities?: Array<UserActivities$Outbound> | undefined;
    compliance?:
      | GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdCompliance$Outbound
      | undefined;
    recentActivities?: Array<RecentActivities$Outbound> | undefined;
  };

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdData$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdData$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdData
  > = z.object({
    activity: z.lazy(() => Activity$outboundSchema).optional(),
    userActivities: z.array(z.lazy(() => UserActivities$outboundSchema))
      .optional(),
    compliance: z.lazy(() =>
      GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdCompliance$outboundSchema
    ).optional(),
    recentActivities: z.array(z.lazy(() => RecentActivities$outboundSchema))
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdData$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdData$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdData$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdData$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdData$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdData$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdData$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdDataToJSON(
  getApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdData:
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdData,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdData$outboundSchema
      .parse(getApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdData),
  );
}

export function getApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdDataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdData' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdResponseBody$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.lazy(() =>
      GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdData$inboundSchema
    ),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdResponseBody$Outbound =
  {
    data: GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdData$Outbound;
  };

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdResponseBody$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdResponseBody$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdResponseBody
  > = z.object({
    data: z.lazy(() =>
      GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdData$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdResponseBody$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdResponseBody$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdResponseBody$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdResponseBody$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdResponseBody$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdResponseBodyToJSON(
  getApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdResponseBody:
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdResponseBody,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdResponseBody$outboundSchema
      .parse(
        getApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdResponseBody,
      ),
  );
}

export function getApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdResponseBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesAnalyticsWorkspaceIdResponseBody' from JSON`,
  );
}
