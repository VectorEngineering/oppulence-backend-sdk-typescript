/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Embeddings = {
  id?: string | undefined;
  embeddings?: Array<number> | undefined;
  modelVersion?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type Versions = {
  id?: string | undefined;
  fileId?: string | undefined;
  versionNumber?: number | undefined;
  s3Key?: string | undefined;
  size?: string | undefined;
  commitMessage?: string | undefined;
  authorId?: string | undefined;
  createdAt?: Date | undefined;
};

export type Comments = {
  id?: string | undefined;
  authorId?: string | undefined;
  content?: string | undefined;
  startPosition?: number | undefined;
  endPosition?: number | undefined;
  resolved?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type Sharing = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type Snapshots = {
  id?: string | undefined;
  fileId?: string | undefined;
  snapshotHash?: string | undefined;
  content?: string | undefined;
  authorId?: string | undefined;
  reason?: string | undefined;
  createdAt?: Date | undefined;
};

export type Files = {
  id?: string | undefined;
  name?: string | undefined;
  size?: string | undefined;
  s3Key?: string | undefined;
  s3BucketName?: string | undefined;
  isDeleted?: boolean | undefined;
  version?: number | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  embeddings?: Embeddings | undefined;
  versions?: Array<Versions> | undefined;
  comments?: Array<Comments> | undefined;
  sharing?: Array<Sharing> | undefined;
  snapshots?: Array<Snapshots> | undefined;
};

export type Folders = {
  id?: string | undefined;
  name?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  isDeleted?: boolean | undefined;
  parentFolderId?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  files?: Array<Files> | undefined;
};

export const TemplateType = {
  TemplateTypeUnspecified: "TEMPLATE_TYPE_UNSPECIFIED",
  TemplateTypeStandard: "TEMPLATE_TYPE_STANDARD",
  TemplateTypeSmart: "TEMPLATE_TYPE_SMART",
  TemplateTypeAdaptive: "TEMPLATE_TYPE_ADAPTIVE",
  TemplateTypeAiGenerated: "TEMPLATE_TYPE_AI_GENERATED",
} as const;
export type TemplateType = ClosedEnum<typeof TemplateType>;

export type PutApiLeadScraperMicroserviceApiV1WorkspaceVersions = {
  id?: string | undefined;
  templateId?: string | undefined;
  version?: string | undefined;
  baseContent?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  authorId?: string | undefined;
  changeDescription?: string | undefined;
  createdAt?: Date | undefined;
};

export type Variables = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  variableType?: string | undefined;
  defaultValue?: string | undefined;
  isRequired?: boolean | undefined;
  validationRules?: string | undefined;
  dataSource?: string | undefined;
  aiExtractionRules?: string | undefined;
  alternatives?: Array<string> | undefined;
  templateId?: string | undefined;
};

export const PutApiLeadScraperMicroserviceApiV1WorkspaceStatus = {
  DocumentStatusUnspecified: "DOCUMENT_STATUS_UNSPECIFIED",
  DocumentStatusDraft: "DOCUMENT_STATUS_DRAFT",
  DocumentStatusInReview: "DOCUMENT_STATUS_IN_REVIEW",
  DocumentStatusApproved: "DOCUMENT_STATUS_APPROVED",
  DocumentStatusRejected: "DOCUMENT_STATUS_REJECTED",
  DocumentStatusExpired: "DOCUMENT_STATUS_EXPIRED",
  DocumentStatusArchived: "DOCUMENT_STATUS_ARCHIVED",
} as const;
export type PutApiLeadScraperMicroserviceApiV1WorkspaceStatus = ClosedEnum<
  typeof PutApiLeadScraperMicroserviceApiV1WorkspaceStatus
>;

export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesStatus = {
  SignatureStatusUnspecified: "SIGNATURE_STATUS_UNSPECIFIED",
  SignatureStatusPending: "SIGNATURE_STATUS_PENDING",
  SignatureStatusSigned: "SIGNATURE_STATUS_SIGNED",
  SignatureStatusRejected: "SIGNATURE_STATUS_REJECTED",
  SignatureStatusExpired: "SIGNATURE_STATUS_EXPIRED",
  SignatureStatusRevoked: "SIGNATURE_STATUS_REVOKED",
} as const;
export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesStatus =
  ClosedEnum<
    typeof PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesStatus
  >;

export type SignatureBlocks = {
  id?: string | undefined;
  requestId?: string | undefined;
  blockType?: string | undefined;
  pageNumber?: number | undefined;
  xPosition?: number | undefined;
  yPosition?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
  isRequired?: boolean | undefined;
  signatureData?: string | undefined;
  signedAt?: Date | undefined;
};

export type Workflow = {
  id?: string | undefined;
  requestId?: string | undefined;
  signingOrder?: Array<string> | undefined;
  currentSigner?: string | undefined;
  workflowStatus?: string | undefined;
  parallelSigning?: boolean | undefined;
  requireAllSignatures?: boolean | undefined;
  deadline?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type SignatureRequests = {
  id?: string | undefined;
  status?:
    | PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesStatus
    | undefined;
  signerEmail?: string | undefined;
  signerName?: string | undefined;
  role?: string | undefined;
  authenticationMethod?: string | undefined;
  expiresAt?: Date | undefined;
  requiresMfa?: boolean | undefined;
  signatureType?: string | undefined;
  reminderSchedule?: Array<string> | undefined;
  documentId?: string | undefined;
  signatureBlocks?: Array<SignatureBlocks> | undefined;
  workflow?: Workflow | undefined;
};

export type AiAssistance = {
  id?: string | undefined;
  documentId?: string | undefined;
  interactionType?: string | undefined;
  userQuery?: string | undefined;
  aiResponse?: string | undefined;
  context?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type Rounds = {
  id?: string | undefined;
  historyId?: string | undefined;
  roundNumber?: number | undefined;
  proposerId?: string | undefined;
  proposalContent?: string | undefined;
  responseContent?: string | undefined;
  status?: string | undefined;
  createdAt?: Date | undefined;
};

export type Negotiation = {
  id?: string | undefined;
  documentId?: string | undefined;
  rounds?: Array<Rounds> | undefined;
  currentStatus?: string | undefined;
  startedAt?: Date | undefined;
  lastUpdated?: Date | undefined;
};

export type Merges = {
  id?: string | undefined;
  branchId?: string | undefined;
  sourceBranch?: string | undefined;
  targetBranch?: string | undefined;
  mergeStatus?: string | undefined;
  mergeStrategy?: string | undefined;
  conflicts?: Array<string> | undefined;
  mergerId?: string | undefined;
  createdAt?: Date | undefined;
  completedAt?: Date | undefined;
};

export type Policy = {
  id?: string | undefined;
  branchId?: string | undefined;
  requiredApprovers?: Array<string> | undefined;
  minimumApprovals?: number | undefined;
  enforceLinearHistory?: boolean | undefined;
  allowForcePush?: boolean | undefined;
  protectedPaths?: Array<string> | undefined;
  mergeRules?: { [k: string]: string } | undefined;
  automatedChecks?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type MergeRequests = {
  id?: string | undefined;
  sourceBranchId?: string | undefined;
  targetBranchId?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  authorId?: string | undefined;
  reviewers?: Array<string> | undefined;
  status?: string | undefined;
  labels?: Array<string> | undefined;
  hasConflicts?: boolean | undefined;
  automatedCheckResults?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type Branches = {
  id?: string | undefined;
  name?: string | undefined;
  baseVersionHash?: string | undefined;
  currentHeadHash?: string | undefined;
  purpose?: string | undefined;
  status?: string | undefined;
  reviewers?: Array<string> | undefined;
  branchMetadata?: { [k: string]: string } | undefined;
  isLocked?: boolean | undefined;
  lastUpdated?: Date | undefined;
  merges?: Array<Merges> | undefined;
  policy?: Policy | undefined;
  mergeRequests?: Array<MergeRequests> | undefined;
};

export type Changes = {
  id?: string | undefined;
  versionId?: string | undefined;
  changeType?: string | undefined;
  contentBefore?: string | undefined;
  contentAfter?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type Summaries = {
  id?: string | undefined;
  versionId?: string | undefined;
  summaryType?: string | undefined;
  content?: string | undefined;
  targetAudience?: string | undefined;
  keyPoints?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesVersions = {
  id?: string | undefined;
  versionHash?: string | undefined;
  parentHash?: string | undefined;
  commitMessage?: string | undefined;
  authorId?: string | undefined;
  branchName?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  tags?: Array<string> | undefined;
  isApproved?: boolean | undefined;
  approvalChain?: string | undefined;
  createdAt?: Date | undefined;
  branches?: Array<Branches> | undefined;
  changes?: Array<Changes> | undefined;
  summaries?: Array<Summaries> | undefined;
};

export type Instances = {
  id?: string | undefined;
  templateId?: string | undefined;
  status?: PutApiLeadScraperMicroserviceApiV1WorkspaceStatus | undefined;
  fieldValues?: { [k: string]: string } | undefined;
  signers?: Array<string> | undefined;
  language?: string | undefined;
  isCompleted?: boolean | undefined;
  dueDate?: Date | undefined;
  generatedContent?: string | undefined;
  attachments?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  signatureRequests?: Array<SignatureRequests> | undefined;
  aiAssistance?: Array<AiAssistance> | undefined;
  negotiation?: Negotiation | undefined;
  versions?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesVersions>
    | undefined;
};

export type Explanations = {
  id?: string | undefined;
  templateId?: string | undefined;
  sectionIdentifier?: string | undefined;
  explanationText?: string | undefined;
  complexityLevel?: string | undefined;
  relatedTerms?: Array<string> | undefined;
  legalReferences?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type RiskAssessments = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  riskType?: string | undefined;
  riskScore?: number | undefined;
  assessmentDetails?: string | undefined;
  mitigationSuggestions?: Array<string> | undefined;
  assessorId?: string | undefined;
  createdAt?: Date | undefined;
};

export type ComplianceChecks = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  complianceStandard?: string | undefined;
  checkResult?: string | undefined;
  violations?: Array<string> | undefined;
  remediationSteps?: string | undefined;
  checkDate?: Date | undefined;
};

export type Intelligence = {
  id?: string | undefined;
  contractType?: string | undefined;
  riskScores?: { [k: string]: number } | undefined;
  detectedClauses?: { [k: string]: string } | undefined;
  keyObligations?: Array<string> | undefined;
  complianceScores?: { [k: string]: number } | undefined;
  jurisdiction?: string | undefined;
  governingLaws?: Array<string> | undefined;
  semanticAnalysis?: { [k: string]: string } | undefined;
  analysisDate?: Date | undefined;
  riskAssessments?: Array<RiskAssessments> | undefined;
  complianceChecks?: Array<ComplianceChecks> | undefined;
};

export type Templates = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  industryType?: string | undefined;
  documentType?: string | undefined;
  baseContent?: string | undefined;
  isAdaptive?: boolean | undefined;
  metadata?: { [k: string]: string } | undefined;
  supportedLanguages?: Array<string> | undefined;
  requiredDataFields?: Array<string> | undefined;
  version?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  templateType?: TemplateType | undefined;
  content?: string | undefined;
  detectedVariables?: Array<string> | undefined;
  variableMappings?: { [k: string]: string } | undefined;
  isContextAware?: boolean | undefined;
  supportedContexts?: Array<string> | undefined;
  formattingRules?: { [k: string]: string } | undefined;
  conditionalSections?: Array<string> | undefined;
  versions?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceVersions>
    | undefined;
  variables?: Array<Variables> | undefined;
  instances?: Array<Instances> | undefined;
  explanations?: Array<Explanations> | undefined;
  intelligence?: Array<Intelligence> | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceSharing = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type Activities = {
  id?: string | undefined;
  activityType?: string | undefined;
  userId?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type Compliance = {
  id?: string | undefined;
  complianceType?: string | undefined;
  status?: string | undefined;
  certificationId?: string | undefined;
  validUntil?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export const Category = {
  AppCategoryUnspecified: "APP_CATEGORY_UNSPECIFIED",
  AppCategoryContractAutomation: "APP_CATEGORY_CONTRACT_AUTOMATION",
  AppCategoryContractAnalysis: "APP_CATEGORY_CONTRACT_ANALYSIS",
  AppCategoryIntegration: "APP_CATEGORY_INTEGRATION",
  AppCategoryAiPowered: "APP_CATEGORY_AI_POWERED",
  AppCategoryWorkflow: "APP_CATEGORY_WORKFLOW",
  AppCategoryCompliance: "APP_CATEGORY_COMPLIANCE",
} as const;
export type Category = ClosedEnum<typeof Category>;

export const PricingModel = {
  PricingModelUnspecified: "PRICING_MODEL_UNSPECIFIED",
  PricingModelFree: "PRICING_MODEL_FREE",
  PricingModelSubscription: "PRICING_MODEL_SUBSCRIPTION",
  PricingModelUsageBased: "PRICING_MODEL_USAGE_BASED",
  PricingModelEnterprise: "PRICING_MODEL_ENTERPRISE",
} as const;
export type PricingModel = ClosedEnum<typeof PricingModel>;

export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesRequestVersions =
  {
    id?: string | undefined;
    appId?: string | undefined;
    versionNumber?: string | undefined;
    changelog?: string | undefined;
    requirements?: { [k: string]: string } | undefined;
    isPublic?: boolean | undefined;
    releaseDate?: Date | undefined;
  };

export type Installations = {
  id?: string | undefined;
  appId?: string | undefined;
  workspaceId?: string | undefined;
  versionInstalled?: string | undefined;
  configuration?: { [k: string]: string } | undefined;
  installationStatus?: string | undefined;
  installedAt?: Date | undefined;
  lastUsed?: Date | undefined;
};

export type Analytics = {
  id?: string | undefined;
  appId?: string | undefined;
  metricName?: string | undefined;
  metricValue?: number | undefined;
  dimensions?: { [k: string]: string } | undefined;
  recordedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceReviews = {
  id?: string | undefined;
  appId?: string | undefined;
  reviewerId?: string | undefined;
  rating?: number | undefined;
  reviewText?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type Info = {
  id?: string | undefined;
  appId?: string | undefined;
  supportedLanguages?: Array<string> | undefined;
  sdkFeatures?: Array<string> | undefined;
  testCoverage?: { [k: string]: number } | undefined;
  securityScans?: Array<string> | undefined;
  performanceMetrics?: { [k: string]: string } | undefined;
  developmentStatus?: string | undefined;
  knownIssues?: Array<string> | undefined;
  roadmapUrl?: string | undefined;
  lastSecurityAudit?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceWebhooks = {
  id?: string | undefined;
  appId?: string | undefined;
  url?: string | undefined;
  subscribedEvents?: Array<string> | undefined;
  secretKey?: string | undefined;
  retryCount?: number | undefined;
  timeoutSeconds?: number | undefined;
  isActive?: boolean | undefined;
  headers?: { [k: string]: string } | undefined;
  lastTriggered?: Date | undefined;
  createdAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspacePermissions = {
  id?: string | undefined;
  appId?: string | undefined;
  scope?: string | undefined;
  description?: string | undefined;
  isRequired?: boolean | undefined;
  accessLevels?: Array<string> | undefined;
  constraints?: { [k: string]: string } | undefined;
  requiresApproval?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type InstalledApps = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  developerId?: string | undefined;
  category?: Category | undefined;
  supportedContractTypes?: Array<string> | undefined;
  features?: Array<string> | undefined;
  pricingModel?: PricingModel | undefined;
  pricingTiers?: { [k: string]: number } | undefined;
  supportedIntegrations?: Array<string> | undefined;
  isVerified?: boolean | undefined;
  rating?: number | undefined;
  installationCount?: number | undefined;
  requiredPermissions?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  documentationUrl?: string | undefined;
  supportEmail?: string | undefined;
  screenshots?: Array<string> | undefined;
  privacyPolicyUrl?: string | undefined;
  termsUrl?: string | undefined;
  publishedAt?: Date | undefined;
  lastUpdated?: Date | undefined;
  versions?:
    | Array<
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesRequestVersions
    >
    | undefined;
  installations?: Array<Installations> | undefined;
  analytics?: Array<Analytics> | undefined;
  reviews?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceReviews>
    | undefined;
  info?: Info | undefined;
  webhooks?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceWebhooks>
    | undefined;
  permissions?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspacePermissions>
    | undefined;
};

export type Workspace = {
  id?: string | undefined;
  name?: string | undefined;
  uniqueIdentifier?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  storageQuota?: string | undefined;
  usedStorage?: string | undefined;
  allowPublicSharing?: boolean | undefined;
  requireApproval?: boolean | undefined;
  gdprCompliant?: boolean | undefined;
  hipaaCompliant?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  folders?: Array<Folders> | undefined;
  templates?: Array<Templates> | undefined;
  sharing?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceSharing>
    | undefined;
  activities?: Array<Activities> | undefined;
  compliance?: Array<Compliance> | undefined;
  installedApps?: Array<InstalledApps> | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceRequestBody = {
  workspace?: Workspace | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceEmbeddings = {
  id?: string | undefined;
  embeddings?: Array<number> | undefined;
  modelVersion?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONResponseBodyVersions =
  {
    id?: string | undefined;
    fileId?: string | undefined;
    versionNumber?: number | undefined;
    s3Key?: string | undefined;
    size?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    createdAt?: Date | undefined;
  };

export type PutApiLeadScraperMicroserviceApiV1WorkspaceComments = {
  id?: string | undefined;
  authorId?: string | undefined;
  content?: string | undefined;
  startPosition?: number | undefined;
  endPosition?: number | undefined;
  resolved?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseSharing =
  {
    id?: string | undefined;
    sharedWithEmail?: string | undefined;
    permissionLevel?: string | undefined;
    expiresAt?: Date | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
  };

export type PutApiLeadScraperMicroserviceApiV1WorkspaceSnapshots = {
  id?: string | undefined;
  fileId?: string | undefined;
  snapshotHash?: string | undefined;
  content?: string | undefined;
  authorId?: string | undefined;
  reason?: string | undefined;
  createdAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceFiles = {
  id?: string | undefined;
  name?: string | undefined;
  size?: string | undefined;
  s3Key?: string | undefined;
  s3BucketName?: string | undefined;
  isDeleted?: boolean | undefined;
  version?: number | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  embeddings?:
    | PutApiLeadScraperMicroserviceApiV1WorkspaceEmbeddings
    | undefined;
  versions?:
    | Array<
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONResponseBodyVersions
    >
    | undefined;
  comments?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceComments>
    | undefined;
  sharing?:
    | Array<
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseSharing
    >
    | undefined;
  snapshots?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceSnapshots>
    | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceFolders = {
  id?: string | undefined;
  name?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  isDeleted?: boolean | undefined;
  parentFolderId?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  files?: Array<PutApiLeadScraperMicroserviceApiV1WorkspaceFiles> | undefined;
};

export const PutApiLeadScraperMicroserviceApiV1WorkspaceTemplateType = {
  TemplateTypeUnspecified: "TEMPLATE_TYPE_UNSPECIFIED",
  TemplateTypeStandard: "TEMPLATE_TYPE_STANDARD",
  TemplateTypeSmart: "TEMPLATE_TYPE_SMART",
  TemplateTypeAdaptive: "TEMPLATE_TYPE_ADAPTIVE",
  TemplateTypeAiGenerated: "TEMPLATE_TYPE_AI_GENERATED",
} as const;
export type PutApiLeadScraperMicroserviceApiV1WorkspaceTemplateType =
  ClosedEnum<typeof PutApiLeadScraperMicroserviceApiV1WorkspaceTemplateType>;

export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseVersions =
  {
    id?: string | undefined;
    templateId?: string | undefined;
    version?: string | undefined;
    baseContent?: string | undefined;
    metadata?: { [k: string]: string } | undefined;
    authorId?: string | undefined;
    changeDescription?: string | undefined;
    createdAt?: Date | undefined;
  };

export type PutApiLeadScraperMicroserviceApiV1WorkspaceVariables = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  variableType?: string | undefined;
  defaultValue?: string | undefined;
  isRequired?: boolean | undefined;
  validationRules?: string | undefined;
  dataSource?: string | undefined;
  aiExtractionRules?: string | undefined;
  alternatives?: Array<string> | undefined;
  templateId?: string | undefined;
};

export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseStatus =
  {
    DocumentStatusUnspecified: "DOCUMENT_STATUS_UNSPECIFIED",
    DocumentStatusDraft: "DOCUMENT_STATUS_DRAFT",
    DocumentStatusInReview: "DOCUMENT_STATUS_IN_REVIEW",
    DocumentStatusApproved: "DOCUMENT_STATUS_APPROVED",
    DocumentStatusRejected: "DOCUMENT_STATUS_REJECTED",
    DocumentStatusExpired: "DOCUMENT_STATUS_EXPIRED",
    DocumentStatusArchived: "DOCUMENT_STATUS_ARCHIVED",
  } as const;
export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseStatus =
  ClosedEnum<
    typeof PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseStatus
  >;

export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Status =
  {
    SignatureStatusUnspecified: "SIGNATURE_STATUS_UNSPECIFIED",
    SignatureStatusPending: "SIGNATURE_STATUS_PENDING",
    SignatureStatusSigned: "SIGNATURE_STATUS_SIGNED",
    SignatureStatusRejected: "SIGNATURE_STATUS_REJECTED",
    SignatureStatusExpired: "SIGNATURE_STATUS_EXPIRED",
    SignatureStatusRevoked: "SIGNATURE_STATUS_REVOKED",
  } as const;
export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Status =
  ClosedEnum<
    typeof PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Status
  >;

export type PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureBlocks = {
  id?: string | undefined;
  requestId?: string | undefined;
  blockType?: string | undefined;
  pageNumber?: number | undefined;
  xPosition?: number | undefined;
  yPosition?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
  isRequired?: boolean | undefined;
  signatureData?: string | undefined;
  signedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkflow = {
  id?: string | undefined;
  requestId?: string | undefined;
  signingOrder?: Array<string> | undefined;
  currentSigner?: string | undefined;
  workflowStatus?: string | undefined;
  parallelSigning?: boolean | undefined;
  requireAllSignatures?: boolean | undefined;
  deadline?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureRequests = {
  id?: string | undefined;
  status?:
    | PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Status
    | undefined;
  signerEmail?: string | undefined;
  signerName?: string | undefined;
  role?: string | undefined;
  authenticationMethod?: string | undefined;
  expiresAt?: Date | undefined;
  requiresMfa?: boolean | undefined;
  signatureType?: string | undefined;
  reminderSchedule?: Array<string> | undefined;
  documentId?: string | undefined;
  signatureBlocks?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureBlocks>
    | undefined;
  workflow?: PutApiLeadScraperMicroserviceApiV1WorkspaceWorkflow | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceAiAssistance = {
  id?: string | undefined;
  documentId?: string | undefined;
  interactionType?: string | undefined;
  userQuery?: string | undefined;
  aiResponse?: string | undefined;
  context?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceRounds = {
  id?: string | undefined;
  historyId?: string | undefined;
  roundNumber?: number | undefined;
  proposerId?: string | undefined;
  proposalContent?: string | undefined;
  responseContent?: string | undefined;
  status?: string | undefined;
  createdAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceNegotiation = {
  id?: string | undefined;
  documentId?: string | undefined;
  rounds?: Array<PutApiLeadScraperMicroserviceApiV1WorkspaceRounds> | undefined;
  currentStatus?: string | undefined;
  startedAt?: Date | undefined;
  lastUpdated?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceMerges = {
  id?: string | undefined;
  branchId?: string | undefined;
  sourceBranch?: string | undefined;
  targetBranch?: string | undefined;
  mergeStatus?: string | undefined;
  mergeStrategy?: string | undefined;
  conflicts?: Array<string> | undefined;
  mergerId?: string | undefined;
  createdAt?: Date | undefined;
  completedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspacePolicy = {
  id?: string | undefined;
  branchId?: string | undefined;
  requiredApprovers?: Array<string> | undefined;
  minimumApprovals?: number | undefined;
  enforceLinearHistory?: boolean | undefined;
  allowForcePush?: boolean | undefined;
  protectedPaths?: Array<string> | undefined;
  mergeRules?: { [k: string]: string } | undefined;
  automatedChecks?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceMergeRequests = {
  id?: string | undefined;
  sourceBranchId?: string | undefined;
  targetBranchId?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  authorId?: string | undefined;
  reviewers?: Array<string> | undefined;
  status?: string | undefined;
  labels?: Array<string> | undefined;
  hasConflicts?: boolean | undefined;
  automatedCheckResults?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceBranches = {
  id?: string | undefined;
  name?: string | undefined;
  baseVersionHash?: string | undefined;
  currentHeadHash?: string | undefined;
  purpose?: string | undefined;
  status?: string | undefined;
  reviewers?: Array<string> | undefined;
  branchMetadata?: { [k: string]: string } | undefined;
  isLocked?: boolean | undefined;
  lastUpdated?: Date | undefined;
  merges?: Array<PutApiLeadScraperMicroserviceApiV1WorkspaceMerges> | undefined;
  policy?: PutApiLeadScraperMicroserviceApiV1WorkspacePolicy | undefined;
  mergeRequests?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceMergeRequests>
    | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceChanges = {
  id?: string | undefined;
  versionId?: string | undefined;
  changeType?: string | undefined;
  contentBefore?: string | undefined;
  contentAfter?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceSummaries = {
  id?: string | undefined;
  versionId?: string | undefined;
  summaryType?: string | undefined;
  content?: string | undefined;
  targetAudience?: string | undefined;
  keyPoints?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONVersions =
  {
    id?: string | undefined;
    versionHash?: string | undefined;
    parentHash?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    branchName?: string | undefined;
    metadata?: { [k: string]: string } | undefined;
    tags?: Array<string> | undefined;
    isApproved?: boolean | undefined;
    approvalChain?: string | undefined;
    createdAt?: Date | undefined;
    branches?:
      | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceBranches>
      | undefined;
    changes?:
      | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceChanges>
      | undefined;
    summaries?:
      | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceSummaries>
      | undefined;
  };

export type PutApiLeadScraperMicroserviceApiV1WorkspaceInstances = {
  id?: string | undefined;
  templateId?: string | undefined;
  status?:
    | PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseStatus
    | undefined;
  fieldValues?: { [k: string]: string } | undefined;
  signers?: Array<string> | undefined;
  language?: string | undefined;
  isCompleted?: boolean | undefined;
  dueDate?: Date | undefined;
  generatedContent?: string | undefined;
  attachments?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  signatureRequests?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureRequests>
    | undefined;
  aiAssistance?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceAiAssistance>
    | undefined;
  negotiation?:
    | PutApiLeadScraperMicroserviceApiV1WorkspaceNegotiation
    | undefined;
  versions?:
    | Array<
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONVersions
    >
    | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceExplanations = {
  id?: string | undefined;
  templateId?: string | undefined;
  sectionIdentifier?: string | undefined;
  explanationText?: string | undefined;
  complexityLevel?: string | undefined;
  relatedTerms?: Array<string> | undefined;
  legalReferences?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceRiskAssessments = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  riskType?: string | undefined;
  riskScore?: number | undefined;
  assessmentDetails?: string | undefined;
  mitigationSuggestions?: Array<string> | undefined;
  assessorId?: string | undefined;
  createdAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceComplianceChecks = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  complianceStandard?: string | undefined;
  checkResult?: string | undefined;
  violations?: Array<string> | undefined;
  remediationSteps?: string | undefined;
  checkDate?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceIntelligence = {
  id?: string | undefined;
  contractType?: string | undefined;
  riskScores?: { [k: string]: number } | undefined;
  detectedClauses?: { [k: string]: string } | undefined;
  keyObligations?: Array<string> | undefined;
  complianceScores?: { [k: string]: number } | undefined;
  jurisdiction?: string | undefined;
  governingLaws?: Array<string> | undefined;
  semanticAnalysis?: { [k: string]: string } | undefined;
  analysisDate?: Date | undefined;
  riskAssessments?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceRiskAssessments>
    | undefined;
  complianceChecks?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceComplianceChecks>
    | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceTemplates = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  industryType?: string | undefined;
  documentType?: string | undefined;
  baseContent?: string | undefined;
  isAdaptive?: boolean | undefined;
  metadata?: { [k: string]: string } | undefined;
  supportedLanguages?: Array<string> | undefined;
  requiredDataFields?: Array<string> | undefined;
  version?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  templateType?:
    | PutApiLeadScraperMicroserviceApiV1WorkspaceTemplateType
    | undefined;
  content?: string | undefined;
  detectedVariables?: Array<string> | undefined;
  variableMappings?: { [k: string]: string } | undefined;
  isContextAware?: boolean | undefined;
  supportedContexts?: Array<string> | undefined;
  formattingRules?: { [k: string]: string } | undefined;
  conditionalSections?: Array<string> | undefined;
  versions?:
    | Array<
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseVersions
    >
    | undefined;
  variables?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceVariables>
    | undefined;
  instances?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceInstances>
    | undefined;
  explanations?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceExplanations>
    | undefined;
  intelligence?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceIntelligence>
    | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesSharing = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceActivities = {
  id?: string | undefined;
  activityType?: string | undefined;
  userId?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceCompliance = {
  id?: string | undefined;
  complianceType?: string | undefined;
  status?: string | undefined;
  certificationId?: string | undefined;
  validUntil?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export const PutApiLeadScraperMicroserviceApiV1WorkspaceCategory = {
  AppCategoryUnspecified: "APP_CATEGORY_UNSPECIFIED",
  AppCategoryContractAutomation: "APP_CATEGORY_CONTRACT_AUTOMATION",
  AppCategoryContractAnalysis: "APP_CATEGORY_CONTRACT_ANALYSIS",
  AppCategoryIntegration: "APP_CATEGORY_INTEGRATION",
  AppCategoryAiPowered: "APP_CATEGORY_AI_POWERED",
  AppCategoryWorkflow: "APP_CATEGORY_WORKFLOW",
  AppCategoryCompliance: "APP_CATEGORY_COMPLIANCE",
} as const;
export type PutApiLeadScraperMicroserviceApiV1WorkspaceCategory = ClosedEnum<
  typeof PutApiLeadScraperMicroserviceApiV1WorkspaceCategory
>;

export const PutApiLeadScraperMicroserviceApiV1WorkspacePricingModel = {
  PricingModelUnspecified: "PRICING_MODEL_UNSPECIFIED",
  PricingModelFree: "PRICING_MODEL_FREE",
  PricingModelSubscription: "PRICING_MODEL_SUBSCRIPTION",
  PricingModelUsageBased: "PRICING_MODEL_USAGE_BASED",
  PricingModelEnterprise: "PRICING_MODEL_ENTERPRISE",
} as const;
export type PutApiLeadScraperMicroserviceApiV1WorkspacePricingModel =
  ClosedEnum<typeof PutApiLeadScraperMicroserviceApiV1WorkspacePricingModel>;

export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Versions =
  {
    id?: string | undefined;
    appId?: string | undefined;
    versionNumber?: string | undefined;
    changelog?: string | undefined;
    requirements?: { [k: string]: string } | undefined;
    isPublic?: boolean | undefined;
    releaseDate?: Date | undefined;
  };

export type PutApiLeadScraperMicroserviceApiV1WorkspaceInstallations = {
  id?: string | undefined;
  appId?: string | undefined;
  workspaceId?: string | undefined;
  versionInstalled?: string | undefined;
  configuration?: { [k: string]: string } | undefined;
  installationStatus?: string | undefined;
  installedAt?: Date | undefined;
  lastUsed?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceAnalytics = {
  id?: string | undefined;
  appId?: string | undefined;
  metricName?: string | undefined;
  metricValue?: number | undefined;
  dimensions?: { [k: string]: string } | undefined;
  recordedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesReviews = {
  id?: string | undefined;
  appId?: string | undefined;
  reviewerId?: string | undefined;
  rating?: number | undefined;
  reviewText?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceInfo = {
  id?: string | undefined;
  appId?: string | undefined;
  supportedLanguages?: Array<string> | undefined;
  sdkFeatures?: Array<string> | undefined;
  testCoverage?: { [k: string]: number } | undefined;
  securityScans?: Array<string> | undefined;
  performanceMetrics?: { [k: string]: string } | undefined;
  developmentStatus?: string | undefined;
  knownIssues?: Array<string> | undefined;
  roadmapUrl?: string | undefined;
  lastSecurityAudit?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesWebhooks = {
  id?: string | undefined;
  appId?: string | undefined;
  url?: string | undefined;
  subscribedEvents?: Array<string> | undefined;
  secretKey?: string | undefined;
  retryCount?: number | undefined;
  timeoutSeconds?: number | undefined;
  isActive?: boolean | undefined;
  headers?: { [k: string]: string } | undefined;
  lastTriggered?: Date | undefined;
  createdAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesPermissions = {
  id?: string | undefined;
  appId?: string | undefined;
  scope?: string | undefined;
  description?: string | undefined;
  isRequired?: boolean | undefined;
  accessLevels?: Array<string> | undefined;
  constraints?: { [k: string]: string } | undefined;
  requiresApproval?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceInstalledApps = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  developerId?: string | undefined;
  category?: PutApiLeadScraperMicroserviceApiV1WorkspaceCategory | undefined;
  supportedContractTypes?: Array<string> | undefined;
  features?: Array<string> | undefined;
  pricingModel?:
    | PutApiLeadScraperMicroserviceApiV1WorkspacePricingModel
    | undefined;
  pricingTiers?: { [k: string]: number } | undefined;
  supportedIntegrations?: Array<string> | undefined;
  isVerified?: boolean | undefined;
  rating?: number | undefined;
  installationCount?: number | undefined;
  requiredPermissions?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  documentationUrl?: string | undefined;
  supportEmail?: string | undefined;
  screenshots?: Array<string> | undefined;
  privacyPolicyUrl?: string | undefined;
  termsUrl?: string | undefined;
  publishedAt?: Date | undefined;
  lastUpdated?: Date | undefined;
  versions?:
    | Array<
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Versions
    >
    | undefined;
  installations?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceInstallations>
    | undefined;
  analytics?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceAnalytics>
    | undefined;
  reviews?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesReviews>
    | undefined;
  info?: PutApiLeadScraperMicroserviceApiV1WorkspaceInfo | undefined;
  webhooks?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesWebhooks>
    | undefined;
  permissions?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesPermissions>
    | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspace = {
  id?: string | undefined;
  name?: string | undefined;
  uniqueIdentifier?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  storageQuota?: string | undefined;
  usedStorage?: string | undefined;
  allowPublicSharing?: boolean | undefined;
  requireApproval?: boolean | undefined;
  gdprCompliant?: boolean | undefined;
  hipaaCompliant?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  folders?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceFolders>
    | undefined;
  templates?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceTemplates>
    | undefined;
  sharing?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesSharing>
    | undefined;
  activities?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceActivities>
    | undefined;
  compliance?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceCompliance>
    | undefined;
  installedApps?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceInstalledApps>
    | undefined;
};

/**
 * Updates the details of a specific workspace
 */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceResponseBody = {
  workspace?: PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspace | undefined;
};

/** @internal */
export const Embeddings$inboundSchema: z.ZodType<
  Embeddings,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  embeddings: z.array(z.number()).optional(),
  modelVersion: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type Embeddings$Outbound = {
  id?: string | undefined;
  embeddings?: Array<number> | undefined;
  modelVersion?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const Embeddings$outboundSchema: z.ZodType<
  Embeddings$Outbound,
  z.ZodTypeDef,
  Embeddings
> = z.object({
  id: z.string().optional(),
  embeddings: z.array(z.number()).optional(),
  modelVersion: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Embeddings$ {
  /** @deprecated use `Embeddings$inboundSchema` instead. */
  export const inboundSchema = Embeddings$inboundSchema;
  /** @deprecated use `Embeddings$outboundSchema` instead. */
  export const outboundSchema = Embeddings$outboundSchema;
  /** @deprecated use `Embeddings$Outbound` instead. */
  export type Outbound = Embeddings$Outbound;
}

export function embeddingsToJSON(embeddings: Embeddings): string {
  return JSON.stringify(Embeddings$outboundSchema.parse(embeddings));
}

export function embeddingsFromJSON(
  jsonString: string,
): SafeParseResult<Embeddings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Embeddings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Embeddings' from JSON`,
  );
}

/** @internal */
export const Versions$inboundSchema: z.ZodType<
  Versions,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  fileId: z.string().optional(),
  versionNumber: z.number().int().optional(),
  s3Key: z.string().optional(),
  size: z.string().optional(),
  commitMessage: z.string().optional(),
  authorId: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type Versions$Outbound = {
  id?: string | undefined;
  fileId?: string | undefined;
  versionNumber?: number | undefined;
  s3Key?: string | undefined;
  size?: string | undefined;
  commitMessage?: string | undefined;
  authorId?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const Versions$outboundSchema: z.ZodType<
  Versions$Outbound,
  z.ZodTypeDef,
  Versions
> = z.object({
  id: z.string().optional(),
  fileId: z.string().optional(),
  versionNumber: z.number().int().optional(),
  s3Key: z.string().optional(),
  size: z.string().optional(),
  commitMessage: z.string().optional(),
  authorId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Versions$ {
  /** @deprecated use `Versions$inboundSchema` instead. */
  export const inboundSchema = Versions$inboundSchema;
  /** @deprecated use `Versions$outboundSchema` instead. */
  export const outboundSchema = Versions$outboundSchema;
  /** @deprecated use `Versions$Outbound` instead. */
  export type Outbound = Versions$Outbound;
}

export function versionsToJSON(versions: Versions): string {
  return JSON.stringify(Versions$outboundSchema.parse(versions));
}

export function versionsFromJSON(
  jsonString: string,
): SafeParseResult<Versions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Versions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Versions' from JSON`,
  );
}

/** @internal */
export const Comments$inboundSchema: z.ZodType<
  Comments,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  authorId: z.string().optional(),
  content: z.string().optional(),
  startPosition: z.number().int().optional(),
  endPosition: z.number().int().optional(),
  resolved: z.boolean().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type Comments$Outbound = {
  id?: string | undefined;
  authorId?: string | undefined;
  content?: string | undefined;
  startPosition?: number | undefined;
  endPosition?: number | undefined;
  resolved?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const Comments$outboundSchema: z.ZodType<
  Comments$Outbound,
  z.ZodTypeDef,
  Comments
> = z.object({
  id: z.string().optional(),
  authorId: z.string().optional(),
  content: z.string().optional(),
  startPosition: z.number().int().optional(),
  endPosition: z.number().int().optional(),
  resolved: z.boolean().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Comments$ {
  /** @deprecated use `Comments$inboundSchema` instead. */
  export const inboundSchema = Comments$inboundSchema;
  /** @deprecated use `Comments$outboundSchema` instead. */
  export const outboundSchema = Comments$outboundSchema;
  /** @deprecated use `Comments$Outbound` instead. */
  export type Outbound = Comments$Outbound;
}

export function commentsToJSON(comments: Comments): string {
  return JSON.stringify(Comments$outboundSchema.parse(comments));
}

export function commentsFromJSON(
  jsonString: string,
): SafeParseResult<Comments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Comments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Comments' from JSON`,
  );
}

/** @internal */
export const Sharing$inboundSchema: z.ZodType<Sharing, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type Sharing$Outbound = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const Sharing$outboundSchema: z.ZodType<
  Sharing$Outbound,
  z.ZodTypeDef,
  Sharing
> = z.object({
  id: z.string().optional(),
  sharedWithEmail: z.string().optional(),
  permissionLevel: z.string().optional(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sharing$ {
  /** @deprecated use `Sharing$inboundSchema` instead. */
  export const inboundSchema = Sharing$inboundSchema;
  /** @deprecated use `Sharing$outboundSchema` instead. */
  export const outboundSchema = Sharing$outboundSchema;
  /** @deprecated use `Sharing$Outbound` instead. */
  export type Outbound = Sharing$Outbound;
}

export function sharingToJSON(sharing: Sharing): string {
  return JSON.stringify(Sharing$outboundSchema.parse(sharing));
}

export function sharingFromJSON(
  jsonString: string,
): SafeParseResult<Sharing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Sharing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Sharing' from JSON`,
  );
}

/** @internal */
export const Snapshots$inboundSchema: z.ZodType<
  Snapshots,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  fileId: z.string().optional(),
  snapshotHash: z.string().optional(),
  content: z.string().optional(),
  authorId: z.string().optional(),
  reason: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type Snapshots$Outbound = {
  id?: string | undefined;
  fileId?: string | undefined;
  snapshotHash?: string | undefined;
  content?: string | undefined;
  authorId?: string | undefined;
  reason?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const Snapshots$outboundSchema: z.ZodType<
  Snapshots$Outbound,
  z.ZodTypeDef,
  Snapshots
> = z.object({
  id: z.string().optional(),
  fileId: z.string().optional(),
  snapshotHash: z.string().optional(),
  content: z.string().optional(),
  authorId: z.string().optional(),
  reason: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Snapshots$ {
  /** @deprecated use `Snapshots$inboundSchema` instead. */
  export const inboundSchema = Snapshots$inboundSchema;
  /** @deprecated use `Snapshots$outboundSchema` instead. */
  export const outboundSchema = Snapshots$outboundSchema;
  /** @deprecated use `Snapshots$Outbound` instead. */
  export type Outbound = Snapshots$Outbound;
}

export function snapshotsToJSON(snapshots: Snapshots): string {
  return JSON.stringify(Snapshots$outboundSchema.parse(snapshots));
}

export function snapshotsFromJSON(
  jsonString: string,
): SafeParseResult<Snapshots, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Snapshots$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Snapshots' from JSON`,
  );
}

/** @internal */
export const Files$inboundSchema: z.ZodType<Files, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    name: z.string().optional(),
    size: z.string().optional(),
    s3Key: z.string().optional(),
    s3BucketName: z.string().optional(),
    isDeleted: z.boolean().optional(),
    version: z.number().int().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    embeddings: z.lazy(() => Embeddings$inboundSchema).optional(),
    versions: z.array(z.lazy(() => Versions$inboundSchema)).optional(),
    comments: z.array(z.lazy(() => Comments$inboundSchema)).optional(),
    sharing: z.array(z.lazy(() => Sharing$inboundSchema)).optional(),
    snapshots: z.array(z.lazy(() => Snapshots$inboundSchema)).optional(),
  });

/** @internal */
export type Files$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  size?: string | undefined;
  s3Key?: string | undefined;
  s3BucketName?: string | undefined;
  isDeleted?: boolean | undefined;
  version?: number | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  embeddings?: Embeddings$Outbound | undefined;
  versions?: Array<Versions$Outbound> | undefined;
  comments?: Array<Comments$Outbound> | undefined;
  sharing?: Array<Sharing$Outbound> | undefined;
  snapshots?: Array<Snapshots$Outbound> | undefined;
};

/** @internal */
export const Files$outboundSchema: z.ZodType<
  Files$Outbound,
  z.ZodTypeDef,
  Files
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  size: z.string().optional(),
  s3Key: z.string().optional(),
  s3BucketName: z.string().optional(),
  isDeleted: z.boolean().optional(),
  version: z.number().int().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  deletedAt: z.date().transform(v => v.toISOString()).optional(),
  embeddings: z.lazy(() => Embeddings$outboundSchema).optional(),
  versions: z.array(z.lazy(() => Versions$outboundSchema)).optional(),
  comments: z.array(z.lazy(() => Comments$outboundSchema)).optional(),
  sharing: z.array(z.lazy(() => Sharing$outboundSchema)).optional(),
  snapshots: z.array(z.lazy(() => Snapshots$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Files$ {
  /** @deprecated use `Files$inboundSchema` instead. */
  export const inboundSchema = Files$inboundSchema;
  /** @deprecated use `Files$outboundSchema` instead. */
  export const outboundSchema = Files$outboundSchema;
  /** @deprecated use `Files$Outbound` instead. */
  export type Outbound = Files$Outbound;
}

export function filesToJSON(files: Files): string {
  return JSON.stringify(Files$outboundSchema.parse(files));
}

export function filesFromJSON(
  jsonString: string,
): SafeParseResult<Files, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Files$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Files' from JSON`,
  );
}

/** @internal */
export const Folders$inboundSchema: z.ZodType<Folders, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    isDeleted: z.boolean().optional(),
    parentFolderId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    files: z.array(z.lazy(() => Files$inboundSchema)).optional(),
  });

/** @internal */
export type Folders$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  isDeleted?: boolean | undefined;
  parentFolderId?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  files?: Array<Files$Outbound> | undefined;
};

/** @internal */
export const Folders$outboundSchema: z.ZodType<
  Folders$Outbound,
  z.ZodTypeDef,
  Folders
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  s3BucketName: z.string().optional(),
  s3FolderPath: z.string().optional(),
  isDeleted: z.boolean().optional(),
  parentFolderId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  deletedAt: z.date().transform(v => v.toISOString()).optional(),
  files: z.array(z.lazy(() => Files$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Folders$ {
  /** @deprecated use `Folders$inboundSchema` instead. */
  export const inboundSchema = Folders$inboundSchema;
  /** @deprecated use `Folders$outboundSchema` instead. */
  export const outboundSchema = Folders$outboundSchema;
  /** @deprecated use `Folders$Outbound` instead. */
  export type Outbound = Folders$Outbound;
}

export function foldersToJSON(folders: Folders): string {
  return JSON.stringify(Folders$outboundSchema.parse(folders));
}

export function foldersFromJSON(
  jsonString: string,
): SafeParseResult<Folders, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Folders$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Folders' from JSON`,
  );
}

/** @internal */
export const TemplateType$inboundSchema: z.ZodNativeEnum<typeof TemplateType> =
  z.nativeEnum(TemplateType);

/** @internal */
export const TemplateType$outboundSchema: z.ZodNativeEnum<typeof TemplateType> =
  TemplateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateType$ {
  /** @deprecated use `TemplateType$inboundSchema` instead. */
  export const inboundSchema = TemplateType$inboundSchema;
  /** @deprecated use `TemplateType$outboundSchema` instead. */
  export const outboundSchema = TemplateType$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceVersions$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    version: z.string().optional(),
    baseContent: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    authorId: z.string().optional(),
    changeDescription: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceVersions$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  version?: string | undefined;
  baseContent?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  authorId?: string | undefined;
  changeDescription?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceVersions$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceVersions$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceVersions
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    version: z.string().optional(),
    baseContent: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    authorId: z.string().optional(),
    changeDescription: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceVersions$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceVersions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceVersions$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceVersions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceVersions$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceVersions$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceVersions$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceVersionsToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceVersions:
    PutApiLeadScraperMicroserviceApiV1WorkspaceVersions,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceVersions$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1WorkspaceVersions,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceVersions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceVersions' from JSON`,
  );
}

/** @internal */
export const Variables$inboundSchema: z.ZodType<
  Variables,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  variableType: z.string().optional(),
  defaultValue: z.string().optional(),
  isRequired: z.boolean().optional(),
  validationRules: z.string().optional(),
  dataSource: z.string().optional(),
  aiExtractionRules: z.string().optional(),
  alternatives: z.array(z.string()).optional(),
  templateId: z.string().optional(),
});

/** @internal */
export type Variables$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  variableType?: string | undefined;
  defaultValue?: string | undefined;
  isRequired?: boolean | undefined;
  validationRules?: string | undefined;
  dataSource?: string | undefined;
  aiExtractionRules?: string | undefined;
  alternatives?: Array<string> | undefined;
  templateId?: string | undefined;
};

/** @internal */
export const Variables$outboundSchema: z.ZodType<
  Variables$Outbound,
  z.ZodTypeDef,
  Variables
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  variableType: z.string().optional(),
  defaultValue: z.string().optional(),
  isRequired: z.boolean().optional(),
  validationRules: z.string().optional(),
  dataSource: z.string().optional(),
  aiExtractionRules: z.string().optional(),
  alternatives: z.array(z.string()).optional(),
  templateId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Variables$ {
  /** @deprecated use `Variables$inboundSchema` instead. */
  export const inboundSchema = Variables$inboundSchema;
  /** @deprecated use `Variables$outboundSchema` instead. */
  export const outboundSchema = Variables$outboundSchema;
  /** @deprecated use `Variables$Outbound` instead. */
  export type Outbound = Variables$Outbound;
}

export function variablesToJSON(variables: Variables): string {
  return JSON.stringify(Variables$outboundSchema.parse(variables));
}

export function variablesFromJSON(
  jsonString: string,
): SafeParseResult<Variables, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Variables$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Variables' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceStatus$inboundSchema:
  z.ZodNativeEnum<typeof PutApiLeadScraperMicroserviceApiV1WorkspaceStatus> = z
    .nativeEnum(PutApiLeadScraperMicroserviceApiV1WorkspaceStatus);

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceStatus$outboundSchema:
  z.ZodNativeEnum<typeof PutApiLeadScraperMicroserviceApiV1WorkspaceStatus> =
    PutApiLeadScraperMicroserviceApiV1WorkspaceStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceStatus$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceStatus$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceStatus$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceStatus$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceStatus$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesStatus
  > = z.nativeEnum(PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesStatus);

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesStatus
  > = PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesStatus$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesStatus$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesStatus$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesStatus$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesStatus$outboundSchema;
}

/** @internal */
export const SignatureBlocks$inboundSchema: z.ZodType<
  SignatureBlocks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  requestId: z.string().optional(),
  blockType: z.string().optional(),
  pageNumber: z.number().int().optional(),
  xPosition: z.number().optional(),
  yPosition: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
  isRequired: z.boolean().optional(),
  signatureData: z.string().optional(),
  signedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type SignatureBlocks$Outbound = {
  id?: string | undefined;
  requestId?: string | undefined;
  blockType?: string | undefined;
  pageNumber?: number | undefined;
  xPosition?: number | undefined;
  yPosition?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
  isRequired?: boolean | undefined;
  signatureData?: string | undefined;
  signedAt?: string | undefined;
};

/** @internal */
export const SignatureBlocks$outboundSchema: z.ZodType<
  SignatureBlocks$Outbound,
  z.ZodTypeDef,
  SignatureBlocks
> = z.object({
  id: z.string().optional(),
  requestId: z.string().optional(),
  blockType: z.string().optional(),
  pageNumber: z.number().int().optional(),
  xPosition: z.number().optional(),
  yPosition: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
  isRequired: z.boolean().optional(),
  signatureData: z.string().optional(),
  signedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignatureBlocks$ {
  /** @deprecated use `SignatureBlocks$inboundSchema` instead. */
  export const inboundSchema = SignatureBlocks$inboundSchema;
  /** @deprecated use `SignatureBlocks$outboundSchema` instead. */
  export const outboundSchema = SignatureBlocks$outboundSchema;
  /** @deprecated use `SignatureBlocks$Outbound` instead. */
  export type Outbound = SignatureBlocks$Outbound;
}

export function signatureBlocksToJSON(
  signatureBlocks: SignatureBlocks,
): string {
  return JSON.stringify(SignatureBlocks$outboundSchema.parse(signatureBlocks));
}

export function signatureBlocksFromJSON(
  jsonString: string,
): SafeParseResult<SignatureBlocks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SignatureBlocks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SignatureBlocks' from JSON`,
  );
}

/** @internal */
export const Workflow$inboundSchema: z.ZodType<
  Workflow,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  requestId: z.string().optional(),
  signingOrder: z.array(z.string()).optional(),
  currentSigner: z.string().optional(),
  workflowStatus: z.string().optional(),
  parallelSigning: z.boolean().optional(),
  requireAllSignatures: z.boolean().optional(),
  deadline: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type Workflow$Outbound = {
  id?: string | undefined;
  requestId?: string | undefined;
  signingOrder?: Array<string> | undefined;
  currentSigner?: string | undefined;
  workflowStatus?: string | undefined;
  parallelSigning?: boolean | undefined;
  requireAllSignatures?: boolean | undefined;
  deadline?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const Workflow$outboundSchema: z.ZodType<
  Workflow$Outbound,
  z.ZodTypeDef,
  Workflow
> = z.object({
  id: z.string().optional(),
  requestId: z.string().optional(),
  signingOrder: z.array(z.string()).optional(),
  currentSigner: z.string().optional(),
  workflowStatus: z.string().optional(),
  parallelSigning: z.boolean().optional(),
  requireAllSignatures: z.boolean().optional(),
  deadline: z.date().transform(v => v.toISOString()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Workflow$ {
  /** @deprecated use `Workflow$inboundSchema` instead. */
  export const inboundSchema = Workflow$inboundSchema;
  /** @deprecated use `Workflow$outboundSchema` instead. */
  export const outboundSchema = Workflow$outboundSchema;
  /** @deprecated use `Workflow$Outbound` instead. */
  export type Outbound = Workflow$Outbound;
}

export function workflowToJSON(workflow: Workflow): string {
  return JSON.stringify(Workflow$outboundSchema.parse(workflow));
}

export function workflowFromJSON(
  jsonString: string,
): SafeParseResult<Workflow, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Workflow$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Workflow' from JSON`,
  );
}

/** @internal */
export const SignatureRequests$inboundSchema: z.ZodType<
  SignatureRequests,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  status:
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesStatus$inboundSchema
      .default("SIGNATURE_STATUS_UNSPECIFIED"),
  signerEmail: z.string().optional(),
  signerName: z.string().optional(),
  role: z.string().optional(),
  authenticationMethod: z.string().optional(),
  expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  requiresMfa: z.boolean().optional(),
  signatureType: z.string().optional(),
  reminderSchedule: z.array(z.string()).optional(),
  documentId: z.string().optional(),
  signatureBlocks: z.array(z.lazy(() => SignatureBlocks$inboundSchema))
    .optional(),
  workflow: z.lazy(() => Workflow$inboundSchema).optional(),
});

/** @internal */
export type SignatureRequests$Outbound = {
  id?: string | undefined;
  status: string;
  signerEmail?: string | undefined;
  signerName?: string | undefined;
  role?: string | undefined;
  authenticationMethod?: string | undefined;
  expiresAt?: string | undefined;
  requiresMfa?: boolean | undefined;
  signatureType?: string | undefined;
  reminderSchedule?: Array<string> | undefined;
  documentId?: string | undefined;
  signatureBlocks?: Array<SignatureBlocks$Outbound> | undefined;
  workflow?: Workflow$Outbound | undefined;
};

/** @internal */
export const SignatureRequests$outboundSchema: z.ZodType<
  SignatureRequests$Outbound,
  z.ZodTypeDef,
  SignatureRequests
> = z.object({
  id: z.string().optional(),
  status:
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesStatus$outboundSchema
      .default("SIGNATURE_STATUS_UNSPECIFIED"),
  signerEmail: z.string().optional(),
  signerName: z.string().optional(),
  role: z.string().optional(),
  authenticationMethod: z.string().optional(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
  requiresMfa: z.boolean().optional(),
  signatureType: z.string().optional(),
  reminderSchedule: z.array(z.string()).optional(),
  documentId: z.string().optional(),
  signatureBlocks: z.array(z.lazy(() => SignatureBlocks$outboundSchema))
    .optional(),
  workflow: z.lazy(() => Workflow$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignatureRequests$ {
  /** @deprecated use `SignatureRequests$inboundSchema` instead. */
  export const inboundSchema = SignatureRequests$inboundSchema;
  /** @deprecated use `SignatureRequests$outboundSchema` instead. */
  export const outboundSchema = SignatureRequests$outboundSchema;
  /** @deprecated use `SignatureRequests$Outbound` instead. */
  export type Outbound = SignatureRequests$Outbound;
}

export function signatureRequestsToJSON(
  signatureRequests: SignatureRequests,
): string {
  return JSON.stringify(
    SignatureRequests$outboundSchema.parse(signatureRequests),
  );
}

export function signatureRequestsFromJSON(
  jsonString: string,
): SafeParseResult<SignatureRequests, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SignatureRequests$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SignatureRequests' from JSON`,
  );
}

/** @internal */
export const AiAssistance$inboundSchema: z.ZodType<
  AiAssistance,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  documentId: z.string().optional(),
  interactionType: z.string().optional(),
  userQuery: z.string().optional(),
  aiResponse: z.string().optional(),
  context: z.record(z.string()).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type AiAssistance$Outbound = {
  id?: string | undefined;
  documentId?: string | undefined;
  interactionType?: string | undefined;
  userQuery?: string | undefined;
  aiResponse?: string | undefined;
  context?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const AiAssistance$outboundSchema: z.ZodType<
  AiAssistance$Outbound,
  z.ZodTypeDef,
  AiAssistance
> = z.object({
  id: z.string().optional(),
  documentId: z.string().optional(),
  interactionType: z.string().optional(),
  userQuery: z.string().optional(),
  aiResponse: z.string().optional(),
  context: z.record(z.string()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AiAssistance$ {
  /** @deprecated use `AiAssistance$inboundSchema` instead. */
  export const inboundSchema = AiAssistance$inboundSchema;
  /** @deprecated use `AiAssistance$outboundSchema` instead. */
  export const outboundSchema = AiAssistance$outboundSchema;
  /** @deprecated use `AiAssistance$Outbound` instead. */
  export type Outbound = AiAssistance$Outbound;
}

export function aiAssistanceToJSON(aiAssistance: AiAssistance): string {
  return JSON.stringify(AiAssistance$outboundSchema.parse(aiAssistance));
}

export function aiAssistanceFromJSON(
  jsonString: string,
): SafeParseResult<AiAssistance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AiAssistance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AiAssistance' from JSON`,
  );
}

/** @internal */
export const Rounds$inboundSchema: z.ZodType<Rounds, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    historyId: z.string().optional(),
    roundNumber: z.number().int().optional(),
    proposerId: z.string().optional(),
    proposalContent: z.string().optional(),
    responseContent: z.string().optional(),
    status: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type Rounds$Outbound = {
  id?: string | undefined;
  historyId?: string | undefined;
  roundNumber?: number | undefined;
  proposerId?: string | undefined;
  proposalContent?: string | undefined;
  responseContent?: string | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const Rounds$outboundSchema: z.ZodType<
  Rounds$Outbound,
  z.ZodTypeDef,
  Rounds
> = z.object({
  id: z.string().optional(),
  historyId: z.string().optional(),
  roundNumber: z.number().int().optional(),
  proposerId: z.string().optional(),
  proposalContent: z.string().optional(),
  responseContent: z.string().optional(),
  status: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Rounds$ {
  /** @deprecated use `Rounds$inboundSchema` instead. */
  export const inboundSchema = Rounds$inboundSchema;
  /** @deprecated use `Rounds$outboundSchema` instead. */
  export const outboundSchema = Rounds$outboundSchema;
  /** @deprecated use `Rounds$Outbound` instead. */
  export type Outbound = Rounds$Outbound;
}

export function roundsToJSON(rounds: Rounds): string {
  return JSON.stringify(Rounds$outboundSchema.parse(rounds));
}

export function roundsFromJSON(
  jsonString: string,
): SafeParseResult<Rounds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Rounds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Rounds' from JSON`,
  );
}

/** @internal */
export const Negotiation$inboundSchema: z.ZodType<
  Negotiation,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  documentId: z.string().optional(),
  rounds: z.array(z.lazy(() => Rounds$inboundSchema)).optional(),
  currentStatus: z.string().optional(),
  startedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  lastUpdated: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type Negotiation$Outbound = {
  id?: string | undefined;
  documentId?: string | undefined;
  rounds?: Array<Rounds$Outbound> | undefined;
  currentStatus?: string | undefined;
  startedAt?: string | undefined;
  lastUpdated?: string | undefined;
};

/** @internal */
export const Negotiation$outboundSchema: z.ZodType<
  Negotiation$Outbound,
  z.ZodTypeDef,
  Negotiation
> = z.object({
  id: z.string().optional(),
  documentId: z.string().optional(),
  rounds: z.array(z.lazy(() => Rounds$outboundSchema)).optional(),
  currentStatus: z.string().optional(),
  startedAt: z.date().transform(v => v.toISOString()).optional(),
  lastUpdated: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Negotiation$ {
  /** @deprecated use `Negotiation$inboundSchema` instead. */
  export const inboundSchema = Negotiation$inboundSchema;
  /** @deprecated use `Negotiation$outboundSchema` instead. */
  export const outboundSchema = Negotiation$outboundSchema;
  /** @deprecated use `Negotiation$Outbound` instead. */
  export type Outbound = Negotiation$Outbound;
}

export function negotiationToJSON(negotiation: Negotiation): string {
  return JSON.stringify(Negotiation$outboundSchema.parse(negotiation));
}

export function negotiationFromJSON(
  jsonString: string,
): SafeParseResult<Negotiation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Negotiation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Negotiation' from JSON`,
  );
}

/** @internal */
export const Merges$inboundSchema: z.ZodType<Merges, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    sourceBranch: z.string().optional(),
    targetBranch: z.string().optional(),
    mergeStatus: z.string().optional(),
    mergeStrategy: z.string().optional(),
    conflicts: z.array(z.string()).optional(),
    mergerId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    completedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type Merges$Outbound = {
  id?: string | undefined;
  branchId?: string | undefined;
  sourceBranch?: string | undefined;
  targetBranch?: string | undefined;
  mergeStatus?: string | undefined;
  mergeStrategy?: string | undefined;
  conflicts?: Array<string> | undefined;
  mergerId?: string | undefined;
  createdAt?: string | undefined;
  completedAt?: string | undefined;
};

/** @internal */
export const Merges$outboundSchema: z.ZodType<
  Merges$Outbound,
  z.ZodTypeDef,
  Merges
> = z.object({
  id: z.string().optional(),
  branchId: z.string().optional(),
  sourceBranch: z.string().optional(),
  targetBranch: z.string().optional(),
  mergeStatus: z.string().optional(),
  mergeStrategy: z.string().optional(),
  conflicts: z.array(z.string()).optional(),
  mergerId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  completedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Merges$ {
  /** @deprecated use `Merges$inboundSchema` instead. */
  export const inboundSchema = Merges$inboundSchema;
  /** @deprecated use `Merges$outboundSchema` instead. */
  export const outboundSchema = Merges$outboundSchema;
  /** @deprecated use `Merges$Outbound` instead. */
  export type Outbound = Merges$Outbound;
}

export function mergesToJSON(merges: Merges): string {
  return JSON.stringify(Merges$outboundSchema.parse(merges));
}

export function mergesFromJSON(
  jsonString: string,
): SafeParseResult<Merges, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Merges$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Merges' from JSON`,
  );
}

/** @internal */
export const Policy$inboundSchema: z.ZodType<Policy, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    requiredApprovers: z.array(z.string()).optional(),
    minimumApprovals: z.number().int().optional(),
    enforceLinearHistory: z.boolean().optional(),
    allowForcePush: z.boolean().optional(),
    protectedPaths: z.array(z.string()).optional(),
    mergeRules: z.record(z.string()).optional(),
    automatedChecks: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type Policy$Outbound = {
  id?: string | undefined;
  branchId?: string | undefined;
  requiredApprovers?: Array<string> | undefined;
  minimumApprovals?: number | undefined;
  enforceLinearHistory?: boolean | undefined;
  allowForcePush?: boolean | undefined;
  protectedPaths?: Array<string> | undefined;
  mergeRules?: { [k: string]: string } | undefined;
  automatedChecks?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const Policy$outboundSchema: z.ZodType<
  Policy$Outbound,
  z.ZodTypeDef,
  Policy
> = z.object({
  id: z.string().optional(),
  branchId: z.string().optional(),
  requiredApprovers: z.array(z.string()).optional(),
  minimumApprovals: z.number().int().optional(),
  enforceLinearHistory: z.boolean().optional(),
  allowForcePush: z.boolean().optional(),
  protectedPaths: z.array(z.string()).optional(),
  mergeRules: z.record(z.string()).optional(),
  automatedChecks: z.array(z.string()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Policy$ {
  /** @deprecated use `Policy$inboundSchema` instead. */
  export const inboundSchema = Policy$inboundSchema;
  /** @deprecated use `Policy$outboundSchema` instead. */
  export const outboundSchema = Policy$outboundSchema;
  /** @deprecated use `Policy$Outbound` instead. */
  export type Outbound = Policy$Outbound;
}

export function policyToJSON(policy: Policy): string {
  return JSON.stringify(Policy$outboundSchema.parse(policy));
}

export function policyFromJSON(
  jsonString: string,
): SafeParseResult<Policy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Policy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Policy' from JSON`,
  );
}

/** @internal */
export const MergeRequests$inboundSchema: z.ZodType<
  MergeRequests,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  sourceBranchId: z.string().optional(),
  targetBranchId: z.string().optional(),
  title: z.string().optional(),
  description: z.string().optional(),
  authorId: z.string().optional(),
  reviewers: z.array(z.string()).optional(),
  status: z.string().optional(),
  labels: z.array(z.string()).optional(),
  hasConflicts: z.boolean().optional(),
  automatedCheckResults: z.array(z.string()).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type MergeRequests$Outbound = {
  id?: string | undefined;
  sourceBranchId?: string | undefined;
  targetBranchId?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  authorId?: string | undefined;
  reviewers?: Array<string> | undefined;
  status?: string | undefined;
  labels?: Array<string> | undefined;
  hasConflicts?: boolean | undefined;
  automatedCheckResults?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const MergeRequests$outboundSchema: z.ZodType<
  MergeRequests$Outbound,
  z.ZodTypeDef,
  MergeRequests
> = z.object({
  id: z.string().optional(),
  sourceBranchId: z.string().optional(),
  targetBranchId: z.string().optional(),
  title: z.string().optional(),
  description: z.string().optional(),
  authorId: z.string().optional(),
  reviewers: z.array(z.string()).optional(),
  status: z.string().optional(),
  labels: z.array(z.string()).optional(),
  hasConflicts: z.boolean().optional(),
  automatedCheckResults: z.array(z.string()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MergeRequests$ {
  /** @deprecated use `MergeRequests$inboundSchema` instead. */
  export const inboundSchema = MergeRequests$inboundSchema;
  /** @deprecated use `MergeRequests$outboundSchema` instead. */
  export const outboundSchema = MergeRequests$outboundSchema;
  /** @deprecated use `MergeRequests$Outbound` instead. */
  export type Outbound = MergeRequests$Outbound;
}

export function mergeRequestsToJSON(mergeRequests: MergeRequests): string {
  return JSON.stringify(MergeRequests$outboundSchema.parse(mergeRequests));
}

export function mergeRequestsFromJSON(
  jsonString: string,
): SafeParseResult<MergeRequests, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MergeRequests$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MergeRequests' from JSON`,
  );
}

/** @internal */
export const Branches$inboundSchema: z.ZodType<
  Branches,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  baseVersionHash: z.string().optional(),
  currentHeadHash: z.string().optional(),
  purpose: z.string().optional(),
  status: z.string().optional(),
  reviewers: z.array(z.string()).optional(),
  branchMetadata: z.record(z.string()).optional(),
  isLocked: z.boolean().optional(),
  lastUpdated: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  merges: z.array(z.lazy(() => Merges$inboundSchema)).optional(),
  policy: z.lazy(() => Policy$inboundSchema).optional(),
  mergeRequests: z.array(z.lazy(() => MergeRequests$inboundSchema)).optional(),
});

/** @internal */
export type Branches$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  baseVersionHash?: string | undefined;
  currentHeadHash?: string | undefined;
  purpose?: string | undefined;
  status?: string | undefined;
  reviewers?: Array<string> | undefined;
  branchMetadata?: { [k: string]: string } | undefined;
  isLocked?: boolean | undefined;
  lastUpdated?: string | undefined;
  merges?: Array<Merges$Outbound> | undefined;
  policy?: Policy$Outbound | undefined;
  mergeRequests?: Array<MergeRequests$Outbound> | undefined;
};

/** @internal */
export const Branches$outboundSchema: z.ZodType<
  Branches$Outbound,
  z.ZodTypeDef,
  Branches
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  baseVersionHash: z.string().optional(),
  currentHeadHash: z.string().optional(),
  purpose: z.string().optional(),
  status: z.string().optional(),
  reviewers: z.array(z.string()).optional(),
  branchMetadata: z.record(z.string()).optional(),
  isLocked: z.boolean().optional(),
  lastUpdated: z.date().transform(v => v.toISOString()).optional(),
  merges: z.array(z.lazy(() => Merges$outboundSchema)).optional(),
  policy: z.lazy(() => Policy$outboundSchema).optional(),
  mergeRequests: z.array(z.lazy(() => MergeRequests$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Branches$ {
  /** @deprecated use `Branches$inboundSchema` instead. */
  export const inboundSchema = Branches$inboundSchema;
  /** @deprecated use `Branches$outboundSchema` instead. */
  export const outboundSchema = Branches$outboundSchema;
  /** @deprecated use `Branches$Outbound` instead. */
  export type Outbound = Branches$Outbound;
}

export function branchesToJSON(branches: Branches): string {
  return JSON.stringify(Branches$outboundSchema.parse(branches));
}

export function branchesFromJSON(
  jsonString: string,
): SafeParseResult<Branches, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Branches$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Branches' from JSON`,
  );
}

/** @internal */
export const Changes$inboundSchema: z.ZodType<Changes, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    changeType: z.string().optional(),
    contentBefore: z.string().optional(),
    contentAfter: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type Changes$Outbound = {
  id?: string | undefined;
  versionId?: string | undefined;
  changeType?: string | undefined;
  contentBefore?: string | undefined;
  contentAfter?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const Changes$outboundSchema: z.ZodType<
  Changes$Outbound,
  z.ZodTypeDef,
  Changes
> = z.object({
  id: z.string().optional(),
  versionId: z.string().optional(),
  changeType: z.string().optional(),
  contentBefore: z.string().optional(),
  contentAfter: z.string().optional(),
  metadata: z.record(z.string()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Changes$ {
  /** @deprecated use `Changes$inboundSchema` instead. */
  export const inboundSchema = Changes$inboundSchema;
  /** @deprecated use `Changes$outboundSchema` instead. */
  export const outboundSchema = Changes$outboundSchema;
  /** @deprecated use `Changes$Outbound` instead. */
  export type Outbound = Changes$Outbound;
}

export function changesToJSON(changes: Changes): string {
  return JSON.stringify(Changes$outboundSchema.parse(changes));
}

export function changesFromJSON(
  jsonString: string,
): SafeParseResult<Changes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Changes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Changes' from JSON`,
  );
}

/** @internal */
export const Summaries$inboundSchema: z.ZodType<
  Summaries,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  versionId: z.string().optional(),
  summaryType: z.string().optional(),
  content: z.string().optional(),
  targetAudience: z.string().optional(),
  keyPoints: z.array(z.string()).optional(),
  metadata: z.record(z.string()).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type Summaries$Outbound = {
  id?: string | undefined;
  versionId?: string | undefined;
  summaryType?: string | undefined;
  content?: string | undefined;
  targetAudience?: string | undefined;
  keyPoints?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const Summaries$outboundSchema: z.ZodType<
  Summaries$Outbound,
  z.ZodTypeDef,
  Summaries
> = z.object({
  id: z.string().optional(),
  versionId: z.string().optional(),
  summaryType: z.string().optional(),
  content: z.string().optional(),
  targetAudience: z.string().optional(),
  keyPoints: z.array(z.string()).optional(),
  metadata: z.record(z.string()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Summaries$ {
  /** @deprecated use `Summaries$inboundSchema` instead. */
  export const inboundSchema = Summaries$inboundSchema;
  /** @deprecated use `Summaries$outboundSchema` instead. */
  export const outboundSchema = Summaries$outboundSchema;
  /** @deprecated use `Summaries$Outbound` instead. */
  export type Outbound = Summaries$Outbound;
}

export function summariesToJSON(summaries: Summaries): string {
  return JSON.stringify(Summaries$outboundSchema.parse(summaries));
}

export function summariesFromJSON(
  jsonString: string,
): SafeParseResult<Summaries, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Summaries$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Summaries' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesVersions$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionHash: z.string().optional(),
    parentHash: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    branchName: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    isApproved: z.boolean().optional(),
    approvalChain: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    branches: z.array(z.lazy(() => Branches$inboundSchema)).optional(),
    changes: z.array(z.lazy(() => Changes$inboundSchema)).optional(),
    summaries: z.array(z.lazy(() => Summaries$inboundSchema)).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesVersions$Outbound =
  {
    id?: string | undefined;
    versionHash?: string | undefined;
    parentHash?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    branchName?: string | undefined;
    metadata?: { [k: string]: string } | undefined;
    tags?: Array<string> | undefined;
    isApproved?: boolean | undefined;
    approvalChain?: string | undefined;
    createdAt?: string | undefined;
    branches?: Array<Branches$Outbound> | undefined;
    changes?: Array<Changes$Outbound> | undefined;
    summaries?: Array<Summaries$Outbound> | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesVersions$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesVersions$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesVersions
  > = z.object({
    id: z.string().optional(),
    versionHash: z.string().optional(),
    parentHash: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    branchName: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    isApproved: z.boolean().optional(),
    approvalChain: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    branches: z.array(z.lazy(() => Branches$outboundSchema)).optional(),
    changes: z.array(z.lazy(() => Changes$outboundSchema)).optional(),
    summaries: z.array(z.lazy(() => Summaries$outboundSchema)).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesVersions$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesVersions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesVersions$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesVersions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesVersions$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesVersions$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesVersions$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesVersionsToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesVersions:
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesVersions,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesVersions$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesVersions),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesVersions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesVersions' from JSON`,
  );
}

/** @internal */
export const Instances$inboundSchema: z.ZodType<
  Instances,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  templateId: z.string().optional(),
  status: PutApiLeadScraperMicroserviceApiV1WorkspaceStatus$inboundSchema
    .default("DOCUMENT_STATUS_UNSPECIFIED"),
  fieldValues: z.record(z.string()).optional(),
  signers: z.array(z.string()).optional(),
  language: z.string().optional(),
  isCompleted: z.boolean().optional(),
  dueDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  generatedContent: z.string().optional(),
  attachments: z.array(z.string()).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  signatureRequests: z.array(z.lazy(() => SignatureRequests$inboundSchema))
    .optional(),
  aiAssistance: z.array(z.lazy(() => AiAssistance$inboundSchema)).optional(),
  negotiation: z.lazy(() => Negotiation$inboundSchema).optional(),
  versions: z.array(
    z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesVersions$inboundSchema
    ),
  ).optional(),
});

/** @internal */
export type Instances$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  status: string;
  fieldValues?: { [k: string]: string } | undefined;
  signers?: Array<string> | undefined;
  language?: string | undefined;
  isCompleted?: boolean | undefined;
  dueDate?: string | undefined;
  generatedContent?: string | undefined;
  attachments?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  signatureRequests?: Array<SignatureRequests$Outbound> | undefined;
  aiAssistance?: Array<AiAssistance$Outbound> | undefined;
  negotiation?: Negotiation$Outbound | undefined;
  versions?:
    | Array<
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesVersions$Outbound
    >
    | undefined;
};

/** @internal */
export const Instances$outboundSchema: z.ZodType<
  Instances$Outbound,
  z.ZodTypeDef,
  Instances
> = z.object({
  id: z.string().optional(),
  templateId: z.string().optional(),
  status: PutApiLeadScraperMicroserviceApiV1WorkspaceStatus$outboundSchema
    .default("DOCUMENT_STATUS_UNSPECIFIED"),
  fieldValues: z.record(z.string()).optional(),
  signers: z.array(z.string()).optional(),
  language: z.string().optional(),
  isCompleted: z.boolean().optional(),
  dueDate: z.date().transform(v => v.toISOString()).optional(),
  generatedContent: z.string().optional(),
  attachments: z.array(z.string()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  signatureRequests: z.array(z.lazy(() => SignatureRequests$outboundSchema))
    .optional(),
  aiAssistance: z.array(z.lazy(() => AiAssistance$outboundSchema)).optional(),
  negotiation: z.lazy(() => Negotiation$outboundSchema).optional(),
  versions: z.array(
    z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesVersions$outboundSchema
    ),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Instances$ {
  /** @deprecated use `Instances$inboundSchema` instead. */
  export const inboundSchema = Instances$inboundSchema;
  /** @deprecated use `Instances$outboundSchema` instead. */
  export const outboundSchema = Instances$outboundSchema;
  /** @deprecated use `Instances$Outbound` instead. */
  export type Outbound = Instances$Outbound;
}

export function instancesToJSON(instances: Instances): string {
  return JSON.stringify(Instances$outboundSchema.parse(instances));
}

export function instancesFromJSON(
  jsonString: string,
): SafeParseResult<Instances, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Instances$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Instances' from JSON`,
  );
}

/** @internal */
export const Explanations$inboundSchema: z.ZodType<
  Explanations,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  templateId: z.string().optional(),
  sectionIdentifier: z.string().optional(),
  explanationText: z.string().optional(),
  complexityLevel: z.string().optional(),
  relatedTerms: z.array(z.string()).optional(),
  legalReferences: z.array(z.string()).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type Explanations$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  sectionIdentifier?: string | undefined;
  explanationText?: string | undefined;
  complexityLevel?: string | undefined;
  relatedTerms?: Array<string> | undefined;
  legalReferences?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const Explanations$outboundSchema: z.ZodType<
  Explanations$Outbound,
  z.ZodTypeDef,
  Explanations
> = z.object({
  id: z.string().optional(),
  templateId: z.string().optional(),
  sectionIdentifier: z.string().optional(),
  explanationText: z.string().optional(),
  complexityLevel: z.string().optional(),
  relatedTerms: z.array(z.string()).optional(),
  legalReferences: z.array(z.string()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Explanations$ {
  /** @deprecated use `Explanations$inboundSchema` instead. */
  export const inboundSchema = Explanations$inboundSchema;
  /** @deprecated use `Explanations$outboundSchema` instead. */
  export const outboundSchema = Explanations$outboundSchema;
  /** @deprecated use `Explanations$Outbound` instead. */
  export type Outbound = Explanations$Outbound;
}

export function explanationsToJSON(explanations: Explanations): string {
  return JSON.stringify(Explanations$outboundSchema.parse(explanations));
}

export function explanationsFromJSON(
  jsonString: string,
): SafeParseResult<Explanations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Explanations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Explanations' from JSON`,
  );
}

/** @internal */
export const RiskAssessments$inboundSchema: z.ZodType<
  RiskAssessments,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  intelligenceId: z.string().optional(),
  riskType: z.string().optional(),
  riskScore: z.number().optional(),
  assessmentDetails: z.string().optional(),
  mitigationSuggestions: z.array(z.string()).optional(),
  assessorId: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type RiskAssessments$Outbound = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  riskType?: string | undefined;
  riskScore?: number | undefined;
  assessmentDetails?: string | undefined;
  mitigationSuggestions?: Array<string> | undefined;
  assessorId?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const RiskAssessments$outboundSchema: z.ZodType<
  RiskAssessments$Outbound,
  z.ZodTypeDef,
  RiskAssessments
> = z.object({
  id: z.string().optional(),
  intelligenceId: z.string().optional(),
  riskType: z.string().optional(),
  riskScore: z.number().optional(),
  assessmentDetails: z.string().optional(),
  mitigationSuggestions: z.array(z.string()).optional(),
  assessorId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RiskAssessments$ {
  /** @deprecated use `RiskAssessments$inboundSchema` instead. */
  export const inboundSchema = RiskAssessments$inboundSchema;
  /** @deprecated use `RiskAssessments$outboundSchema` instead. */
  export const outboundSchema = RiskAssessments$outboundSchema;
  /** @deprecated use `RiskAssessments$Outbound` instead. */
  export type Outbound = RiskAssessments$Outbound;
}

export function riskAssessmentsToJSON(
  riskAssessments: RiskAssessments,
): string {
  return JSON.stringify(RiskAssessments$outboundSchema.parse(riskAssessments));
}

export function riskAssessmentsFromJSON(
  jsonString: string,
): SafeParseResult<RiskAssessments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RiskAssessments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RiskAssessments' from JSON`,
  );
}

/** @internal */
export const ComplianceChecks$inboundSchema: z.ZodType<
  ComplianceChecks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  intelligenceId: z.string().optional(),
  complianceStandard: z.string().optional(),
  checkResult: z.string().optional(),
  violations: z.array(z.string()).optional(),
  remediationSteps: z.string().optional(),
  checkDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type ComplianceChecks$Outbound = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  complianceStandard?: string | undefined;
  checkResult?: string | undefined;
  violations?: Array<string> | undefined;
  remediationSteps?: string | undefined;
  checkDate?: string | undefined;
};

/** @internal */
export const ComplianceChecks$outboundSchema: z.ZodType<
  ComplianceChecks$Outbound,
  z.ZodTypeDef,
  ComplianceChecks
> = z.object({
  id: z.string().optional(),
  intelligenceId: z.string().optional(),
  complianceStandard: z.string().optional(),
  checkResult: z.string().optional(),
  violations: z.array(z.string()).optional(),
  remediationSteps: z.string().optional(),
  checkDate: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComplianceChecks$ {
  /** @deprecated use `ComplianceChecks$inboundSchema` instead. */
  export const inboundSchema = ComplianceChecks$inboundSchema;
  /** @deprecated use `ComplianceChecks$outboundSchema` instead. */
  export const outboundSchema = ComplianceChecks$outboundSchema;
  /** @deprecated use `ComplianceChecks$Outbound` instead. */
  export type Outbound = ComplianceChecks$Outbound;
}

export function complianceChecksToJSON(
  complianceChecks: ComplianceChecks,
): string {
  return JSON.stringify(
    ComplianceChecks$outboundSchema.parse(complianceChecks),
  );
}

export function complianceChecksFromJSON(
  jsonString: string,
): SafeParseResult<ComplianceChecks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComplianceChecks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComplianceChecks' from JSON`,
  );
}

/** @internal */
export const Intelligence$inboundSchema: z.ZodType<
  Intelligence,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  contractType: z.string().optional(),
  riskScores: z.record(z.number()).optional(),
  detectedClauses: z.record(z.string()).optional(),
  keyObligations: z.array(z.string()).optional(),
  complianceScores: z.record(z.number()).optional(),
  jurisdiction: z.string().optional(),
  governingLaws: z.array(z.string()).optional(),
  semanticAnalysis: z.record(z.string()).optional(),
  analysisDate: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  riskAssessments: z.array(z.lazy(() => RiskAssessments$inboundSchema))
    .optional(),
  complianceChecks: z.array(z.lazy(() => ComplianceChecks$inboundSchema))
    .optional(),
});

/** @internal */
export type Intelligence$Outbound = {
  id?: string | undefined;
  contractType?: string | undefined;
  riskScores?: { [k: string]: number } | undefined;
  detectedClauses?: { [k: string]: string } | undefined;
  keyObligations?: Array<string> | undefined;
  complianceScores?: { [k: string]: number } | undefined;
  jurisdiction?: string | undefined;
  governingLaws?: Array<string> | undefined;
  semanticAnalysis?: { [k: string]: string } | undefined;
  analysisDate?: string | undefined;
  riskAssessments?: Array<RiskAssessments$Outbound> | undefined;
  complianceChecks?: Array<ComplianceChecks$Outbound> | undefined;
};

/** @internal */
export const Intelligence$outboundSchema: z.ZodType<
  Intelligence$Outbound,
  z.ZodTypeDef,
  Intelligence
> = z.object({
  id: z.string().optional(),
  contractType: z.string().optional(),
  riskScores: z.record(z.number()).optional(),
  detectedClauses: z.record(z.string()).optional(),
  keyObligations: z.array(z.string()).optional(),
  complianceScores: z.record(z.number()).optional(),
  jurisdiction: z.string().optional(),
  governingLaws: z.array(z.string()).optional(),
  semanticAnalysis: z.record(z.string()).optional(),
  analysisDate: z.date().transform(v => v.toISOString()).optional(),
  riskAssessments: z.array(z.lazy(() => RiskAssessments$outboundSchema))
    .optional(),
  complianceChecks: z.array(z.lazy(() => ComplianceChecks$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Intelligence$ {
  /** @deprecated use `Intelligence$inboundSchema` instead. */
  export const inboundSchema = Intelligence$inboundSchema;
  /** @deprecated use `Intelligence$outboundSchema` instead. */
  export const outboundSchema = Intelligence$outboundSchema;
  /** @deprecated use `Intelligence$Outbound` instead. */
  export type Outbound = Intelligence$Outbound;
}

export function intelligenceToJSON(intelligence: Intelligence): string {
  return JSON.stringify(Intelligence$outboundSchema.parse(intelligence));
}

export function intelligenceFromJSON(
  jsonString: string,
): SafeParseResult<Intelligence, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Intelligence$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Intelligence' from JSON`,
  );
}

/** @internal */
export const Templates$inboundSchema: z.ZodType<
  Templates,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  industryType: z.string().optional(),
  documentType: z.string().optional(),
  baseContent: z.string().optional(),
  isAdaptive: z.boolean().optional(),
  metadata: z.record(z.string()).optional(),
  supportedLanguages: z.array(z.string()).optional(),
  requiredDataFields: z.array(z.string()).optional(),
  version: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  templateType: TemplateType$inboundSchema.default("TEMPLATE_TYPE_UNSPECIFIED"),
  content: z.string().optional(),
  detectedVariables: z.array(z.string()).optional(),
  variableMappings: z.record(z.string()).optional(),
  isContextAware: z.boolean().optional(),
  supportedContexts: z.array(z.string()).optional(),
  formattingRules: z.record(z.string()).optional(),
  conditionalSections: z.array(z.string()).optional(),
  versions: z.array(
    z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceVersions$inboundSchema
    ),
  ).optional(),
  variables: z.array(z.lazy(() => Variables$inboundSchema)).optional(),
  instances: z.array(z.lazy(() => Instances$inboundSchema)).optional(),
  explanations: z.array(z.lazy(() => Explanations$inboundSchema)).optional(),
  intelligence: z.array(z.lazy(() => Intelligence$inboundSchema)).optional(),
});

/** @internal */
export type Templates$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  industryType?: string | undefined;
  documentType?: string | undefined;
  baseContent?: string | undefined;
  isAdaptive?: boolean | undefined;
  metadata?: { [k: string]: string } | undefined;
  supportedLanguages?: Array<string> | undefined;
  requiredDataFields?: Array<string> | undefined;
  version?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  templateType: string;
  content?: string | undefined;
  detectedVariables?: Array<string> | undefined;
  variableMappings?: { [k: string]: string } | undefined;
  isContextAware?: boolean | undefined;
  supportedContexts?: Array<string> | undefined;
  formattingRules?: { [k: string]: string } | undefined;
  conditionalSections?: Array<string> | undefined;
  versions?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceVersions$Outbound>
    | undefined;
  variables?: Array<Variables$Outbound> | undefined;
  instances?: Array<Instances$Outbound> | undefined;
  explanations?: Array<Explanations$Outbound> | undefined;
  intelligence?: Array<Intelligence$Outbound> | undefined;
};

/** @internal */
export const Templates$outboundSchema: z.ZodType<
  Templates$Outbound,
  z.ZodTypeDef,
  Templates
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  industryType: z.string().optional(),
  documentType: z.string().optional(),
  baseContent: z.string().optional(),
  isAdaptive: z.boolean().optional(),
  metadata: z.record(z.string()).optional(),
  supportedLanguages: z.array(z.string()).optional(),
  requiredDataFields: z.array(z.string()).optional(),
  version: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  templateType: TemplateType$outboundSchema.default(
    "TEMPLATE_TYPE_UNSPECIFIED",
  ),
  content: z.string().optional(),
  detectedVariables: z.array(z.string()).optional(),
  variableMappings: z.record(z.string()).optional(),
  isContextAware: z.boolean().optional(),
  supportedContexts: z.array(z.string()).optional(),
  formattingRules: z.record(z.string()).optional(),
  conditionalSections: z.array(z.string()).optional(),
  versions: z.array(
    z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceVersions$outboundSchema
    ),
  ).optional(),
  variables: z.array(z.lazy(() => Variables$outboundSchema)).optional(),
  instances: z.array(z.lazy(() => Instances$outboundSchema)).optional(),
  explanations: z.array(z.lazy(() => Explanations$outboundSchema)).optional(),
  intelligence: z.array(z.lazy(() => Intelligence$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Templates$ {
  /** @deprecated use `Templates$inboundSchema` instead. */
  export const inboundSchema = Templates$inboundSchema;
  /** @deprecated use `Templates$outboundSchema` instead. */
  export const outboundSchema = Templates$outboundSchema;
  /** @deprecated use `Templates$Outbound` instead. */
  export type Outbound = Templates$Outbound;
}

export function templatesToJSON(templates: Templates): string {
  return JSON.stringify(Templates$outboundSchema.parse(templates));
}

export function templatesFromJSON(
  jsonString: string,
): SafeParseResult<Templates, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Templates$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Templates' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceSharing$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceSharing,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceSharing$Outbound = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceSharing$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceSharing$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceSharing
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceSharing$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceSharing$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceSharing$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceSharing$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceSharing$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceSharing$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceSharing$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceSharingToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceSharing:
    PutApiLeadScraperMicroserviceApiV1WorkspaceSharing,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceSharing$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1WorkspaceSharing,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceSharingFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceSharing,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceSharing$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceSharing' from JSON`,
  );
}

/** @internal */
export const Activities$inboundSchema: z.ZodType<
  Activities,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  activityType: z.string().optional(),
  userId: z.string().optional(),
  description: z.string().optional(),
  metadata: z.record(z.string()).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type Activities$Outbound = {
  id?: string | undefined;
  activityType?: string | undefined;
  userId?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const Activities$outboundSchema: z.ZodType<
  Activities$Outbound,
  z.ZodTypeDef,
  Activities
> = z.object({
  id: z.string().optional(),
  activityType: z.string().optional(),
  userId: z.string().optional(),
  description: z.string().optional(),
  metadata: z.record(z.string()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Activities$ {
  /** @deprecated use `Activities$inboundSchema` instead. */
  export const inboundSchema = Activities$inboundSchema;
  /** @deprecated use `Activities$outboundSchema` instead. */
  export const outboundSchema = Activities$outboundSchema;
  /** @deprecated use `Activities$Outbound` instead. */
  export type Outbound = Activities$Outbound;
}

export function activitiesToJSON(activities: Activities): string {
  return JSON.stringify(Activities$outboundSchema.parse(activities));
}

export function activitiesFromJSON(
  jsonString: string,
): SafeParseResult<Activities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Activities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Activities' from JSON`,
  );
}

/** @internal */
export const Compliance$inboundSchema: z.ZodType<
  Compliance,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  complianceType: z.string().optional(),
  status: z.string().optional(),
  certificationId: z.string().optional(),
  validUntil: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type Compliance$Outbound = {
  id?: string | undefined;
  complianceType?: string | undefined;
  status?: string | undefined;
  certificationId?: string | undefined;
  validUntil?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const Compliance$outboundSchema: z.ZodType<
  Compliance$Outbound,
  z.ZodTypeDef,
  Compliance
> = z.object({
  id: z.string().optional(),
  complianceType: z.string().optional(),
  status: z.string().optional(),
  certificationId: z.string().optional(),
  validUntil: z.date().transform(v => v.toISOString()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Compliance$ {
  /** @deprecated use `Compliance$inboundSchema` instead. */
  export const inboundSchema = Compliance$inboundSchema;
  /** @deprecated use `Compliance$outboundSchema` instead. */
  export const outboundSchema = Compliance$outboundSchema;
  /** @deprecated use `Compliance$Outbound` instead. */
  export type Outbound = Compliance$Outbound;
}

export function complianceToJSON(compliance: Compliance): string {
  return JSON.stringify(Compliance$outboundSchema.parse(compliance));
}

export function complianceFromJSON(
  jsonString: string,
): SafeParseResult<Compliance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Compliance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Compliance' from JSON`,
  );
}

/** @internal */
export const Category$inboundSchema: z.ZodNativeEnum<typeof Category> = z
  .nativeEnum(Category);

/** @internal */
export const Category$outboundSchema: z.ZodNativeEnum<typeof Category> =
  Category$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Category$ {
  /** @deprecated use `Category$inboundSchema` instead. */
  export const inboundSchema = Category$inboundSchema;
  /** @deprecated use `Category$outboundSchema` instead. */
  export const outboundSchema = Category$outboundSchema;
}

/** @internal */
export const PricingModel$inboundSchema: z.ZodNativeEnum<typeof PricingModel> =
  z.nativeEnum(PricingModel);

/** @internal */
export const PricingModel$outboundSchema: z.ZodNativeEnum<typeof PricingModel> =
  PricingModel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricingModel$ {
  /** @deprecated use `PricingModel$inboundSchema` instead. */
  export const inboundSchema = PricingModel$inboundSchema;
  /** @deprecated use `PricingModel$outboundSchema` instead. */
  export const outboundSchema = PricingModel$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesRequestVersions$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesRequestVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    versionNumber: z.string().optional(),
    changelog: z.string().optional(),
    requirements: z.record(z.string()).optional(),
    isPublic: z.boolean().optional(),
    releaseDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesRequestVersions$Outbound =
  {
    id?: string | undefined;
    appId?: string | undefined;
    versionNumber?: string | undefined;
    changelog?: string | undefined;
    requirements?: { [k: string]: string } | undefined;
    isPublic?: boolean | undefined;
    releaseDate?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesRequestVersions$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesRequestVersions$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesRequestVersions
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    versionNumber: z.string().optional(),
    changelog: z.string().optional(),
    requirements: z.record(z.string()).optional(),
    isPublic: z.boolean().optional(),
    releaseDate: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesRequestVersions$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesRequestVersions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesRequestVersions$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesRequestVersions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesRequestVersions$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesRequestVersions$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesRequestVersions$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesRequestVersionsToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesRequestVersions:
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesRequestVersions,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesRequestVersions$outboundSchema
      .parse(
        putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesRequestVersions,
      ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesRequestVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesRequestVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesRequestVersions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesRequestVersions' from JSON`,
  );
}

/** @internal */
export const Installations$inboundSchema: z.ZodType<
  Installations,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  appId: z.string().optional(),
  workspaceId: z.string().optional(),
  versionInstalled: z.string().optional(),
  configuration: z.record(z.string()).optional(),
  installationStatus: z.string().optional(),
  installedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  lastUsed: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type Installations$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  workspaceId?: string | undefined;
  versionInstalled?: string | undefined;
  configuration?: { [k: string]: string } | undefined;
  installationStatus?: string | undefined;
  installedAt?: string | undefined;
  lastUsed?: string | undefined;
};

/** @internal */
export const Installations$outboundSchema: z.ZodType<
  Installations$Outbound,
  z.ZodTypeDef,
  Installations
> = z.object({
  id: z.string().optional(),
  appId: z.string().optional(),
  workspaceId: z.string().optional(),
  versionInstalled: z.string().optional(),
  configuration: z.record(z.string()).optional(),
  installationStatus: z.string().optional(),
  installedAt: z.date().transform(v => v.toISOString()).optional(),
  lastUsed: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Installations$ {
  /** @deprecated use `Installations$inboundSchema` instead. */
  export const inboundSchema = Installations$inboundSchema;
  /** @deprecated use `Installations$outboundSchema` instead. */
  export const outboundSchema = Installations$outboundSchema;
  /** @deprecated use `Installations$Outbound` instead. */
  export type Outbound = Installations$Outbound;
}

export function installationsToJSON(installations: Installations): string {
  return JSON.stringify(Installations$outboundSchema.parse(installations));
}

export function installationsFromJSON(
  jsonString: string,
): SafeParseResult<Installations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Installations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Installations' from JSON`,
  );
}

/** @internal */
export const Analytics$inboundSchema: z.ZodType<
  Analytics,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  appId: z.string().optional(),
  metricName: z.string().optional(),
  metricValue: z.number().optional(),
  dimensions: z.record(z.string()).optional(),
  recordedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type Analytics$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  metricName?: string | undefined;
  metricValue?: number | undefined;
  dimensions?: { [k: string]: string } | undefined;
  recordedAt?: string | undefined;
};

/** @internal */
export const Analytics$outboundSchema: z.ZodType<
  Analytics$Outbound,
  z.ZodTypeDef,
  Analytics
> = z.object({
  id: z.string().optional(),
  appId: z.string().optional(),
  metricName: z.string().optional(),
  metricValue: z.number().optional(),
  dimensions: z.record(z.string()).optional(),
  recordedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Analytics$ {
  /** @deprecated use `Analytics$inboundSchema` instead. */
  export const inboundSchema = Analytics$inboundSchema;
  /** @deprecated use `Analytics$outboundSchema` instead. */
  export const outboundSchema = Analytics$outboundSchema;
  /** @deprecated use `Analytics$Outbound` instead. */
  export type Outbound = Analytics$Outbound;
}

export function analyticsToJSON(analytics: Analytics): string {
  return JSON.stringify(Analytics$outboundSchema.parse(analytics));
}

export function analyticsFromJSON(
  jsonString: string,
): SafeParseResult<Analytics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Analytics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Analytics' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceReviews$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceReviews,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    reviewerId: z.string().optional(),
    rating: z.number().optional(),
    reviewText: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceReviews$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  reviewerId?: string | undefined;
  rating?: number | undefined;
  reviewText?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceReviews$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceReviews$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceReviews
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    reviewerId: z.string().optional(),
    rating: z.number().optional(),
    reviewText: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceReviews$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceReviews$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceReviews$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceReviews$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceReviews$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceReviews$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceReviews$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceReviewsToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceReviews:
    PutApiLeadScraperMicroserviceApiV1WorkspaceReviews,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceReviews$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1WorkspaceReviews,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceReviewsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceReviews,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceReviews$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceReviews' from JSON`,
  );
}

/** @internal */
export const Info$inboundSchema: z.ZodType<Info, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    appId: z.string().optional(),
    supportedLanguages: z.array(z.string()).optional(),
    sdkFeatures: z.array(z.string()).optional(),
    testCoverage: z.record(z.number()).optional(),
    securityScans: z.array(z.string()).optional(),
    performanceMetrics: z.record(z.string()).optional(),
    developmentStatus: z.string().optional(),
    knownIssues: z.array(z.string()).optional(),
    roadmapUrl: z.string().optional(),
    lastSecurityAudit: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type Info$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  supportedLanguages?: Array<string> | undefined;
  sdkFeatures?: Array<string> | undefined;
  testCoverage?: { [k: string]: number } | undefined;
  securityScans?: Array<string> | undefined;
  performanceMetrics?: { [k: string]: string } | undefined;
  developmentStatus?: string | undefined;
  knownIssues?: Array<string> | undefined;
  roadmapUrl?: string | undefined;
  lastSecurityAudit?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const Info$outboundSchema: z.ZodType<Info$Outbound, z.ZodTypeDef, Info> =
  z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    supportedLanguages: z.array(z.string()).optional(),
    sdkFeatures: z.array(z.string()).optional(),
    testCoverage: z.record(z.number()).optional(),
    securityScans: z.array(z.string()).optional(),
    performanceMetrics: z.record(z.string()).optional(),
    developmentStatus: z.string().optional(),
    knownIssues: z.array(z.string()).optional(),
    roadmapUrl: z.string().optional(),
    lastSecurityAudit: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Info$ {
  /** @deprecated use `Info$inboundSchema` instead. */
  export const inboundSchema = Info$inboundSchema;
  /** @deprecated use `Info$outboundSchema` instead. */
  export const outboundSchema = Info$outboundSchema;
  /** @deprecated use `Info$Outbound` instead. */
  export type Outbound = Info$Outbound;
}

export function infoToJSON(info: Info): string {
  return JSON.stringify(Info$outboundSchema.parse(info));
}

export function infoFromJSON(
  jsonString: string,
): SafeParseResult<Info, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Info$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Info' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWebhooks$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceWebhooks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    url: z.string().optional(),
    subscribedEvents: z.array(z.string()).optional(),
    secretKey: z.string().optional(),
    retryCount: z.number().int().optional(),
    timeoutSeconds: z.number().int().optional(),
    isActive: z.boolean().optional(),
    headers: z.record(z.string()).optional(),
    lastTriggered: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceWebhooks$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  url?: string | undefined;
  subscribedEvents?: Array<string> | undefined;
  secretKey?: string | undefined;
  retryCount?: number | undefined;
  timeoutSeconds?: number | undefined;
  isActive?: boolean | undefined;
  headers?: { [k: string]: string } | undefined;
  lastTriggered?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWebhooks$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceWebhooks$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceWebhooks
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    url: z.string().optional(),
    subscribedEvents: z.array(z.string()).optional(),
    secretKey: z.string().optional(),
    retryCount: z.number().int().optional(),
    timeoutSeconds: z.number().int().optional(),
    isActive: z.boolean().optional(),
    headers: z.record(z.string()).optional(),
    lastTriggered: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceWebhooks$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWebhooks$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWebhooks$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWebhooks$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWebhooks$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWebhooks$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWebhooks$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceWebhooksToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceWebhooks:
    PutApiLeadScraperMicroserviceApiV1WorkspaceWebhooks,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceWebhooks$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1WorkspaceWebhooks,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceWebhooksFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceWebhooks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceWebhooks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceWebhooks' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspacePermissions$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspacePermissions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    scope: z.string().optional(),
    description: z.string().optional(),
    isRequired: z.boolean().optional(),
    accessLevels: z.array(z.string()).optional(),
    constraints: z.record(z.string()).optional(),
    requiresApproval: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspacePermissions$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  scope?: string | undefined;
  description?: string | undefined;
  isRequired?: boolean | undefined;
  accessLevels?: Array<string> | undefined;
  constraints?: { [k: string]: string } | undefined;
  requiresApproval?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspacePermissions$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspacePermissions$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspacePermissions
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    scope: z.string().optional(),
    description: z.string().optional(),
    isRequired: z.boolean().optional(),
    accessLevels: z.array(z.string()).optional(),
    constraints: z.record(z.string()).optional(),
    requiresApproval: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspacePermissions$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspacePermissions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspacePermissions$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspacePermissions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspacePermissions$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspacePermissions$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspacePermissions$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspacePermissionsToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspacePermissions:
    PutApiLeadScraperMicroserviceApiV1WorkspacePermissions,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspacePermissions$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1WorkspacePermissions,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspacePermissionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspacePermissions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspacePermissions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspacePermissions' from JSON`,
  );
}

/** @internal */
export const InstalledApps$inboundSchema: z.ZodType<
  InstalledApps,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  developerId: z.string().optional(),
  category: Category$inboundSchema.default("APP_CATEGORY_UNSPECIFIED"),
  supportedContractTypes: z.array(z.string()).optional(),
  features: z.array(z.string()).optional(),
  pricingModel: PricingModel$inboundSchema.default("PRICING_MODEL_UNSPECIFIED"),
  pricingTiers: z.record(z.number()).optional(),
  supportedIntegrations: z.array(z.string()).optional(),
  isVerified: z.boolean().optional(),
  rating: z.number().optional(),
  installationCount: z.number().int().optional(),
  requiredPermissions: z.array(z.string()).optional(),
  metadata: z.record(z.string()).optional(),
  documentationUrl: z.string().optional(),
  supportEmail: z.string().optional(),
  screenshots: z.array(z.string()).optional(),
  privacyPolicyUrl: z.string().optional(),
  termsUrl: z.string().optional(),
  publishedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  lastUpdated: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  versions: z.array(
    z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesRequestVersions$inboundSchema
    ),
  ).optional(),
  installations: z.array(z.lazy(() => Installations$inboundSchema)).optional(),
  analytics: z.array(z.lazy(() => Analytics$inboundSchema)).optional(),
  reviews: z.array(
    z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceReviews$inboundSchema
    ),
  ).optional(),
  info: z.lazy(() => Info$inboundSchema).optional(),
  webhooks: z.array(
    z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceWebhooks$inboundSchema
    ),
  ).optional(),
  permissions: z.array(
    z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1WorkspacePermissions$inboundSchema
    ),
  ).optional(),
});

/** @internal */
export type InstalledApps$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  developerId?: string | undefined;
  category: string;
  supportedContractTypes?: Array<string> | undefined;
  features?: Array<string> | undefined;
  pricingModel: string;
  pricingTiers?: { [k: string]: number } | undefined;
  supportedIntegrations?: Array<string> | undefined;
  isVerified?: boolean | undefined;
  rating?: number | undefined;
  installationCount?: number | undefined;
  requiredPermissions?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  documentationUrl?: string | undefined;
  supportEmail?: string | undefined;
  screenshots?: Array<string> | undefined;
  privacyPolicyUrl?: string | undefined;
  termsUrl?: string | undefined;
  publishedAt?: string | undefined;
  lastUpdated?: string | undefined;
  versions?:
    | Array<
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesRequestVersions$Outbound
    >
    | undefined;
  installations?: Array<Installations$Outbound> | undefined;
  analytics?: Array<Analytics$Outbound> | undefined;
  reviews?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceReviews$Outbound>
    | undefined;
  info?: Info$Outbound | undefined;
  webhooks?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceWebhooks$Outbound>
    | undefined;
  permissions?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspacePermissions$Outbound>
    | undefined;
};

/** @internal */
export const InstalledApps$outboundSchema: z.ZodType<
  InstalledApps$Outbound,
  z.ZodTypeDef,
  InstalledApps
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  developerId: z.string().optional(),
  category: Category$outboundSchema.default("APP_CATEGORY_UNSPECIFIED"),
  supportedContractTypes: z.array(z.string()).optional(),
  features: z.array(z.string()).optional(),
  pricingModel: PricingModel$outboundSchema.default(
    "PRICING_MODEL_UNSPECIFIED",
  ),
  pricingTiers: z.record(z.number()).optional(),
  supportedIntegrations: z.array(z.string()).optional(),
  isVerified: z.boolean().optional(),
  rating: z.number().optional(),
  installationCount: z.number().int().optional(),
  requiredPermissions: z.array(z.string()).optional(),
  metadata: z.record(z.string()).optional(),
  documentationUrl: z.string().optional(),
  supportEmail: z.string().optional(),
  screenshots: z.array(z.string()).optional(),
  privacyPolicyUrl: z.string().optional(),
  termsUrl: z.string().optional(),
  publishedAt: z.date().transform(v => v.toISOString()).optional(),
  lastUpdated: z.date().transform(v => v.toISOString()).optional(),
  versions: z.array(
    z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesRequestVersions$outboundSchema
    ),
  ).optional(),
  installations: z.array(z.lazy(() => Installations$outboundSchema)).optional(),
  analytics: z.array(z.lazy(() => Analytics$outboundSchema)).optional(),
  reviews: z.array(
    z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceReviews$outboundSchema
    ),
  ).optional(),
  info: z.lazy(() => Info$outboundSchema).optional(),
  webhooks: z.array(
    z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceWebhooks$outboundSchema
    ),
  ).optional(),
  permissions: z.array(
    z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1WorkspacePermissions$outboundSchema
    ),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstalledApps$ {
  /** @deprecated use `InstalledApps$inboundSchema` instead. */
  export const inboundSchema = InstalledApps$inboundSchema;
  /** @deprecated use `InstalledApps$outboundSchema` instead. */
  export const outboundSchema = InstalledApps$outboundSchema;
  /** @deprecated use `InstalledApps$Outbound` instead. */
  export type Outbound = InstalledApps$Outbound;
}

export function installedAppsToJSON(installedApps: InstalledApps): string {
  return JSON.stringify(InstalledApps$outboundSchema.parse(installedApps));
}

export function installedAppsFromJSON(
  jsonString: string,
): SafeParseResult<InstalledApps, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstalledApps$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstalledApps' from JSON`,
  );
}

/** @internal */
export const Workspace$inboundSchema: z.ZodType<
  Workspace,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  uniqueIdentifier: z.string().optional(),
  s3BucketName: z.string().optional(),
  s3FolderPath: z.string().optional(),
  storageQuota: z.string().optional(),
  usedStorage: z.string().optional(),
  allowPublicSharing: z.boolean().optional(),
  requireApproval: z.boolean().optional(),
  gdprCompliant: z.boolean().optional(),
  hipaaCompliant: z.boolean().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  folders: z.array(z.lazy(() => Folders$inboundSchema)).optional(),
  templates: z.array(z.lazy(() => Templates$inboundSchema)).optional(),
  sharing: z.array(
    z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceSharing$inboundSchema
    ),
  ).optional(),
  activities: z.array(z.lazy(() => Activities$inboundSchema)).optional(),
  compliance: z.array(z.lazy(() => Compliance$inboundSchema)).optional(),
  installedApps: z.array(z.lazy(() => InstalledApps$inboundSchema)).optional(),
});

/** @internal */
export type Workspace$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  uniqueIdentifier?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  storageQuota?: string | undefined;
  usedStorage?: string | undefined;
  allowPublicSharing?: boolean | undefined;
  requireApproval?: boolean | undefined;
  gdprCompliant?: boolean | undefined;
  hipaaCompliant?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  folders?: Array<Folders$Outbound> | undefined;
  templates?: Array<Templates$Outbound> | undefined;
  sharing?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceSharing$Outbound>
    | undefined;
  activities?: Array<Activities$Outbound> | undefined;
  compliance?: Array<Compliance$Outbound> | undefined;
  installedApps?: Array<InstalledApps$Outbound> | undefined;
};

/** @internal */
export const Workspace$outboundSchema: z.ZodType<
  Workspace$Outbound,
  z.ZodTypeDef,
  Workspace
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  uniqueIdentifier: z.string().optional(),
  s3BucketName: z.string().optional(),
  s3FolderPath: z.string().optional(),
  storageQuota: z.string().optional(),
  usedStorage: z.string().optional(),
  allowPublicSharing: z.boolean().optional(),
  requireApproval: z.boolean().optional(),
  gdprCompliant: z.boolean().optional(),
  hipaaCompliant: z.boolean().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  deletedAt: z.date().transform(v => v.toISOString()).optional(),
  folders: z.array(z.lazy(() => Folders$outboundSchema)).optional(),
  templates: z.array(z.lazy(() => Templates$outboundSchema)).optional(),
  sharing: z.array(
    z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceSharing$outboundSchema
    ),
  ).optional(),
  activities: z.array(z.lazy(() => Activities$outboundSchema)).optional(),
  compliance: z.array(z.lazy(() => Compliance$outboundSchema)).optional(),
  installedApps: z.array(z.lazy(() => InstalledApps$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Workspace$ {
  /** @deprecated use `Workspace$inboundSchema` instead. */
  export const inboundSchema = Workspace$inboundSchema;
  /** @deprecated use `Workspace$outboundSchema` instead. */
  export const outboundSchema = Workspace$outboundSchema;
  /** @deprecated use `Workspace$Outbound` instead. */
  export type Outbound = Workspace$Outbound;
}

export function workspaceToJSON(workspace: Workspace): string {
  return JSON.stringify(Workspace$outboundSchema.parse(workspace));
}

export function workspaceFromJSON(
  jsonString: string,
): SafeParseResult<Workspace, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Workspace$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Workspace' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceRequestBody$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    workspace: z.lazy(() => Workspace$inboundSchema).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceRequestBody$Outbound = {
  workspace?: Workspace$Outbound | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceRequestBody$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceRequestBody$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceRequestBody
  > = z.object({
    workspace: z.lazy(() => Workspace$outboundSchema).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceRequestBody$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceRequestBody$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceRequestBody$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceRequestBody$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceRequestBody$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceRequestBodyToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceRequestBody:
    PutApiLeadScraperMicroserviceApiV1WorkspaceRequestBody,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceRequestBody$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1WorkspaceRequestBody,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceRequestBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceRequestBody' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceEmbeddings$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceEmbeddings,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    embeddings: z.array(z.number()).optional(),
    modelVersion: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceEmbeddings$Outbound = {
  id?: string | undefined;
  embeddings?: Array<number> | undefined;
  modelVersion?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceEmbeddings$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceEmbeddings$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceEmbeddings
  > = z.object({
    id: z.string().optional(),
    embeddings: z.array(z.number()).optional(),
    modelVersion: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceEmbeddings$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceEmbeddings$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceEmbeddings$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceEmbeddings$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceEmbeddings$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceEmbeddings$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceEmbeddings$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceEmbeddingsToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceEmbeddings:
    PutApiLeadScraperMicroserviceApiV1WorkspaceEmbeddings,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceEmbeddings$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1WorkspaceEmbeddings,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceEmbeddingsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceEmbeddings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceEmbeddings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceEmbeddings' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONResponseBodyVersions$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONResponseBodyVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    versionNumber: z.number().int().optional(),
    s3Key: z.string().optional(),
    size: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONResponseBodyVersions$Outbound =
  {
    id?: string | undefined;
    fileId?: string | undefined;
    versionNumber?: number | undefined;
    s3Key?: string | undefined;
    size?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    createdAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONResponseBodyVersions$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONResponseBodyVersions$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONResponseBodyVersions
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    versionNumber: z.number().int().optional(),
    s3Key: z.string().optional(),
    size: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONResponseBodyVersions$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONResponseBodyVersions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONResponseBodyVersions$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONResponseBodyVersions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONResponseBodyVersions$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONResponseBodyVersions$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONResponseBodyVersions$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONResponseBodyVersionsToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONResponseBodyVersions:
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONResponseBodyVersions,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONResponseBodyVersions$outboundSchema
      .parse(
        putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONResponseBodyVersions,
      ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONResponseBodyVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONResponseBodyVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONResponseBodyVersions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONResponseBodyVersions' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceComments$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceComments,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    authorId: z.string().optional(),
    content: z.string().optional(),
    startPosition: z.number().int().optional(),
    endPosition: z.number().int().optional(),
    resolved: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceComments$Outbound = {
  id?: string | undefined;
  authorId?: string | undefined;
  content?: string | undefined;
  startPosition?: number | undefined;
  endPosition?: number | undefined;
  resolved?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceComments$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceComments$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceComments
  > = z.object({
    id: z.string().optional(),
    authorId: z.string().optional(),
    content: z.string().optional(),
    startPosition: z.number().int().optional(),
    endPosition: z.number().int().optional(),
    resolved: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceComments$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceComments$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceComments$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceComments$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceComments$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceComments$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceComments$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceCommentsToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceComments:
    PutApiLeadScraperMicroserviceApiV1WorkspaceComments,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceComments$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1WorkspaceComments,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceCommentsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceComments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceComments$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceComments' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseSharing$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseSharing,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseSharing$Outbound =
  {
    id?: string | undefined;
    sharedWithEmail?: string | undefined;
    permissionLevel?: string | undefined;
    expiresAt?: string | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseSharing$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseSharing$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseSharing
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseSharing$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseSharing$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseSharing$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseSharing$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseSharing$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseSharing$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseSharing$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseSharingToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseSharing:
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseSharing,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseSharing$outboundSchema
      .parse(
        putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseSharing,
      ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseSharingFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseSharing,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseSharing$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseSharing' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceSnapshots$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceSnapshots,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    snapshotHash: z.string().optional(),
    content: z.string().optional(),
    authorId: z.string().optional(),
    reason: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceSnapshots$Outbound = {
  id?: string | undefined;
  fileId?: string | undefined;
  snapshotHash?: string | undefined;
  content?: string | undefined;
  authorId?: string | undefined;
  reason?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceSnapshots$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceSnapshots$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceSnapshots
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    snapshotHash: z.string().optional(),
    content: z.string().optional(),
    authorId: z.string().optional(),
    reason: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceSnapshots$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceSnapshots$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceSnapshots$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceSnapshots$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceSnapshots$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceSnapshots$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceSnapshots$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceSnapshotsToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceSnapshots:
    PutApiLeadScraperMicroserviceApiV1WorkspaceSnapshots,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceSnapshots$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1WorkspaceSnapshots,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceSnapshotsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceSnapshots,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceSnapshots$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceSnapshots' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceFiles$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceFiles,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    size: z.string().optional(),
    s3Key: z.string().optional(),
    s3BucketName: z.string().optional(),
    isDeleted: z.boolean().optional(),
    version: z.number().int().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    embeddings: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceEmbeddings$inboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONResponseBodyVersions$inboundSchema
      ),
    ).optional(),
    comments: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceComments$inboundSchema
      ),
    ).optional(),
    sharing: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseSharing$inboundSchema
      ),
    ).optional(),
    snapshots: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceSnapshots$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceFiles$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  size?: string | undefined;
  s3Key?: string | undefined;
  s3BucketName?: string | undefined;
  isDeleted?: boolean | undefined;
  version?: number | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  embeddings?:
    | PutApiLeadScraperMicroserviceApiV1WorkspaceEmbeddings$Outbound
    | undefined;
  versions?:
    | Array<
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONResponseBodyVersions$Outbound
    >
    | undefined;
  comments?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceComments$Outbound>
    | undefined;
  sharing?:
    | Array<
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseSharing$Outbound
    >
    | undefined;
  snapshots?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceSnapshots$Outbound>
    | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceFiles$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceFiles$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceFiles
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    size: z.string().optional(),
    s3Key: z.string().optional(),
    s3BucketName: z.string().optional(),
    isDeleted: z.boolean().optional(),
    version: z.number().int().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    embeddings: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceEmbeddings$outboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONResponseBodyVersions$outboundSchema
      ),
    ).optional(),
    comments: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceComments$outboundSchema
      ),
    ).optional(),
    sharing: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseSharing$outboundSchema
      ),
    ).optional(),
    snapshots: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceSnapshots$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceFiles$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceFiles$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceFiles$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceFiles$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceFiles$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceFiles$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceFiles$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceFilesToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceFiles:
    PutApiLeadScraperMicroserviceApiV1WorkspaceFiles,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceFiles$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1WorkspaceFiles,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceFilesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceFiles,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceFiles$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceFiles' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceFolders$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceFolders,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    isDeleted: z.boolean().optional(),
    parentFolderId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    files: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceFiles$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceFolders$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  isDeleted?: boolean | undefined;
  parentFolderId?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  files?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceFiles$Outbound>
    | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceFolders$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceFolders$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceFolders
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    isDeleted: z.boolean().optional(),
    parentFolderId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    files: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceFiles$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceFolders$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceFolders$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceFolders$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceFolders$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceFolders$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceFolders$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceFolders$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceFoldersToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceFolders:
    PutApiLeadScraperMicroserviceApiV1WorkspaceFolders,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceFolders$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1WorkspaceFolders,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceFoldersFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceFolders,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceFolders$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceFolders' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceTemplateType$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1WorkspaceTemplateType
  > = z.nativeEnum(PutApiLeadScraperMicroserviceApiV1WorkspaceTemplateType);

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceTemplateType$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1WorkspaceTemplateType
  > = PutApiLeadScraperMicroserviceApiV1WorkspaceTemplateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceTemplateType$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceTemplateType$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceTemplateType$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceTemplateType$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceTemplateType$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseVersions$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    version: z.string().optional(),
    baseContent: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    authorId: z.string().optional(),
    changeDescription: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseVersions$Outbound =
  {
    id?: string | undefined;
    templateId?: string | undefined;
    version?: string | undefined;
    baseContent?: string | undefined;
    metadata?: { [k: string]: string } | undefined;
    authorId?: string | undefined;
    changeDescription?: string | undefined;
    createdAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseVersions$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseVersions$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseVersions
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    version: z.string().optional(),
    baseContent: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    authorId: z.string().optional(),
    changeDescription: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseVersions$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseVersions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseVersions$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseVersions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseVersions$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseVersions$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseVersions$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseVersionsToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseVersions:
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseVersions,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseVersions$outboundSchema
      .parse(
        putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseVersions,
      ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseVersions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseVersions' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceVariables$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceVariables,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    variableType: z.string().optional(),
    defaultValue: z.string().optional(),
    isRequired: z.boolean().optional(),
    validationRules: z.string().optional(),
    dataSource: z.string().optional(),
    aiExtractionRules: z.string().optional(),
    alternatives: z.array(z.string()).optional(),
    templateId: z.string().optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceVariables$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  variableType?: string | undefined;
  defaultValue?: string | undefined;
  isRequired?: boolean | undefined;
  validationRules?: string | undefined;
  dataSource?: string | undefined;
  aiExtractionRules?: string | undefined;
  alternatives?: Array<string> | undefined;
  templateId?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceVariables$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceVariables$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceVariables
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    variableType: z.string().optional(),
    defaultValue: z.string().optional(),
    isRequired: z.boolean().optional(),
    validationRules: z.string().optional(),
    dataSource: z.string().optional(),
    aiExtractionRules: z.string().optional(),
    alternatives: z.array(z.string()).optional(),
    templateId: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceVariables$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceVariables$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceVariables$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceVariables$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceVariables$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceVariables$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceVariables$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceVariablesToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceVariables:
    PutApiLeadScraperMicroserviceApiV1WorkspaceVariables,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceVariables$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1WorkspaceVariables,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceVariablesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceVariables,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceVariables$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceVariables' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseStatus
  > = z.nativeEnum(
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseStatus,
  );

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseStatus
  > =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseStatus$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseStatus$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseStatus$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Status$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Status
  > = z.nativeEnum(
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Status,
  );

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Status$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Status
  > =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Status$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Status$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Status$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Status$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Status$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureBlocks$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureBlocks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    blockType: z.string().optional(),
    pageNumber: z.number().int().optional(),
    xPosition: z.number().optional(),
    yPosition: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    isRequired: z.boolean().optional(),
    signatureData: z.string().optional(),
    signedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureBlocks$Outbound =
  {
    id?: string | undefined;
    requestId?: string | undefined;
    blockType?: string | undefined;
    pageNumber?: number | undefined;
    xPosition?: number | undefined;
    yPosition?: number | undefined;
    width?: number | undefined;
    height?: number | undefined;
    isRequired?: boolean | undefined;
    signatureData?: string | undefined;
    signedAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureBlocks$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureBlocks$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureBlocks
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    blockType: z.string().optional(),
    pageNumber: z.number().int().optional(),
    xPosition: z.number().optional(),
    yPosition: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    isRequired: z.boolean().optional(),
    signatureData: z.string().optional(),
    signedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureBlocks$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureBlocks$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureBlocks$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureBlocks$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureBlocks$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureBlocks$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureBlocks$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceSignatureBlocksToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceSignatureBlocks:
    PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureBlocks,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureBlocks$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1WorkspaceSignatureBlocks),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceSignatureBlocksFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureBlocks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureBlocks$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureBlocks' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkflow$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkflow,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    signingOrder: z.array(z.string()).optional(),
    currentSigner: z.string().optional(),
    workflowStatus: z.string().optional(),
    parallelSigning: z.boolean().optional(),
    requireAllSignatures: z.boolean().optional(),
    deadline: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkflow$Outbound = {
  id?: string | undefined;
  requestId?: string | undefined;
  signingOrder?: Array<string> | undefined;
  currentSigner?: string | undefined;
  workflowStatus?: string | undefined;
  parallelSigning?: boolean | undefined;
  requireAllSignatures?: boolean | undefined;
  deadline?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkflow$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkflow$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkflow
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    signingOrder: z.array(z.string()).optional(),
    currentSigner: z.string().optional(),
    workflowStatus: z.string().optional(),
    parallelSigning: z.boolean().optional(),
    requireAllSignatures: z.boolean().optional(),
    deadline: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceWorkflow$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkflow$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkflow$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkflow$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkflow$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkflow$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkflow$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceWorkflowToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceWorkflow:
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkflow,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkflow$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1WorkspaceWorkflow,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceWorkflowFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceWorkflow,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkflow$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceWorkflow' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureRequests$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureRequests,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    status:
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Status$inboundSchema
        .default("SIGNATURE_STATUS_UNSPECIFIED"),
    signerEmail: z.string().optional(),
    signerName: z.string().optional(),
    role: z.string().optional(),
    authenticationMethod: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    requiresMfa: z.boolean().optional(),
    signatureType: z.string().optional(),
    reminderSchedule: z.array(z.string()).optional(),
    documentId: z.string().optional(),
    signatureBlocks: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureBlocks$inboundSchema
      ),
    ).optional(),
    workflow: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkflow$inboundSchema
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureRequests$Outbound =
  {
    id?: string | undefined;
    status: string;
    signerEmail?: string | undefined;
    signerName?: string | undefined;
    role?: string | undefined;
    authenticationMethod?: string | undefined;
    expiresAt?: string | undefined;
    requiresMfa?: boolean | undefined;
    signatureType?: string | undefined;
    reminderSchedule?: Array<string> | undefined;
    documentId?: string | undefined;
    signatureBlocks?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureBlocks$Outbound
      >
      | undefined;
    workflow?:
      | PutApiLeadScraperMicroserviceApiV1WorkspaceWorkflow$Outbound
      | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureRequests$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureRequests$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureRequests
  > = z.object({
    id: z.string().optional(),
    status:
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Status$outboundSchema
        .default("SIGNATURE_STATUS_UNSPECIFIED"),
    signerEmail: z.string().optional(),
    signerName: z.string().optional(),
    role: z.string().optional(),
    authenticationMethod: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    requiresMfa: z.boolean().optional(),
    signatureType: z.string().optional(),
    reminderSchedule: z.array(z.string()).optional(),
    documentId: z.string().optional(),
    signatureBlocks: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureBlocks$outboundSchema
      ),
    ).optional(),
    workflow: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkflow$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureRequests$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureRequests$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureRequests$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureRequests$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureRequests$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureRequests$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureRequests$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceSignatureRequestsToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceSignatureRequests:
    PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureRequests,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureRequests$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1WorkspaceSignatureRequests),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceSignatureRequestsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureRequests,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureRequests$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureRequests' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceAiAssistance$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceAiAssistance,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    interactionType: z.string().optional(),
    userQuery: z.string().optional(),
    aiResponse: z.string().optional(),
    context: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceAiAssistance$Outbound = {
  id?: string | undefined;
  documentId?: string | undefined;
  interactionType?: string | undefined;
  userQuery?: string | undefined;
  aiResponse?: string | undefined;
  context?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceAiAssistance$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceAiAssistance$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceAiAssistance
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    interactionType: z.string().optional(),
    userQuery: z.string().optional(),
    aiResponse: z.string().optional(),
    context: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceAiAssistance$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceAiAssistance$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceAiAssistance$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceAiAssistance$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceAiAssistance$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceAiAssistance$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceAiAssistance$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceAiAssistanceToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceAiAssistance:
    PutApiLeadScraperMicroserviceApiV1WorkspaceAiAssistance,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceAiAssistance$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1WorkspaceAiAssistance),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceAiAssistanceFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceAiAssistance,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceAiAssistance$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceAiAssistance' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceRounds$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceRounds,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    historyId: z.string().optional(),
    roundNumber: z.number().int().optional(),
    proposerId: z.string().optional(),
    proposalContent: z.string().optional(),
    responseContent: z.string().optional(),
    status: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceRounds$Outbound = {
  id?: string | undefined;
  historyId?: string | undefined;
  roundNumber?: number | undefined;
  proposerId?: string | undefined;
  proposalContent?: string | undefined;
  responseContent?: string | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceRounds$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceRounds$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceRounds
  > = z.object({
    id: z.string().optional(),
    historyId: z.string().optional(),
    roundNumber: z.number().int().optional(),
    proposerId: z.string().optional(),
    proposalContent: z.string().optional(),
    responseContent: z.string().optional(),
    status: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceRounds$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceRounds$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceRounds$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceRounds$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceRounds$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceRounds$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceRounds$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceRoundsToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceRounds:
    PutApiLeadScraperMicroserviceApiV1WorkspaceRounds,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceRounds$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1WorkspaceRounds,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceRoundsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceRounds,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceRounds$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceRounds' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceNegotiation$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceNegotiation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    rounds: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceRounds$inboundSchema
      ),
    ).optional(),
    currentStatus: z.string().optional(),
    startedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceNegotiation$Outbound = {
  id?: string | undefined;
  documentId?: string | undefined;
  rounds?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceRounds$Outbound>
    | undefined;
  currentStatus?: string | undefined;
  startedAt?: string | undefined;
  lastUpdated?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceNegotiation$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceNegotiation$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceNegotiation
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    rounds: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceRounds$outboundSchema
      ),
    ).optional(),
    currentStatus: z.string().optional(),
    startedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceNegotiation$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceNegotiation$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceNegotiation$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceNegotiation$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceNegotiation$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceNegotiation$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceNegotiation$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceNegotiationToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceNegotiation:
    PutApiLeadScraperMicroserviceApiV1WorkspaceNegotiation,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceNegotiation$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1WorkspaceNegotiation,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceNegotiationFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceNegotiation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceNegotiation$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceNegotiation' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceMerges$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceMerges,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    sourceBranch: z.string().optional(),
    targetBranch: z.string().optional(),
    mergeStatus: z.string().optional(),
    mergeStrategy: z.string().optional(),
    conflicts: z.array(z.string()).optional(),
    mergerId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    completedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceMerges$Outbound = {
  id?: string | undefined;
  branchId?: string | undefined;
  sourceBranch?: string | undefined;
  targetBranch?: string | undefined;
  mergeStatus?: string | undefined;
  mergeStrategy?: string | undefined;
  conflicts?: Array<string> | undefined;
  mergerId?: string | undefined;
  createdAt?: string | undefined;
  completedAt?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceMerges$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceMerges$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceMerges
  > = z.object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    sourceBranch: z.string().optional(),
    targetBranch: z.string().optional(),
    mergeStatus: z.string().optional(),
    mergeStrategy: z.string().optional(),
    conflicts: z.array(z.string()).optional(),
    mergerId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    completedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceMerges$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceMerges$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceMerges$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceMerges$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceMerges$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceMerges$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceMerges$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceMergesToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceMerges:
    PutApiLeadScraperMicroserviceApiV1WorkspaceMerges,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceMerges$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1WorkspaceMerges,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceMergesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceMerges,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceMerges$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceMerges' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspacePolicy$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspacePolicy,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    requiredApprovers: z.array(z.string()).optional(),
    minimumApprovals: z.number().int().optional(),
    enforceLinearHistory: z.boolean().optional(),
    allowForcePush: z.boolean().optional(),
    protectedPaths: z.array(z.string()).optional(),
    mergeRules: z.record(z.string()).optional(),
    automatedChecks: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspacePolicy$Outbound = {
  id?: string | undefined;
  branchId?: string | undefined;
  requiredApprovers?: Array<string> | undefined;
  minimumApprovals?: number | undefined;
  enforceLinearHistory?: boolean | undefined;
  allowForcePush?: boolean | undefined;
  protectedPaths?: Array<string> | undefined;
  mergeRules?: { [k: string]: string } | undefined;
  automatedChecks?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspacePolicy$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspacePolicy$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspacePolicy
  > = z.object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    requiredApprovers: z.array(z.string()).optional(),
    minimumApprovals: z.number().int().optional(),
    enforceLinearHistory: z.boolean().optional(),
    allowForcePush: z.boolean().optional(),
    protectedPaths: z.array(z.string()).optional(),
    mergeRules: z.record(z.string()).optional(),
    automatedChecks: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspacePolicy$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspacePolicy$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspacePolicy$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspacePolicy$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspacePolicy$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspacePolicy$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspacePolicy$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspacePolicyToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspacePolicy:
    PutApiLeadScraperMicroserviceApiV1WorkspacePolicy,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspacePolicy$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1WorkspacePolicy,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspacePolicyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspacePolicy,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspacePolicy$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspacePolicy' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceMergeRequests$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceMergeRequests,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sourceBranchId: z.string().optional(),
    targetBranchId: z.string().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    authorId: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    status: z.string().optional(),
    labels: z.array(z.string()).optional(),
    hasConflicts: z.boolean().optional(),
    automatedCheckResults: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceMergeRequests$Outbound =
  {
    id?: string | undefined;
    sourceBranchId?: string | undefined;
    targetBranchId?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    authorId?: string | undefined;
    reviewers?: Array<string> | undefined;
    status?: string | undefined;
    labels?: Array<string> | undefined;
    hasConflicts?: boolean | undefined;
    automatedCheckResults?: Array<string> | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceMergeRequests$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceMergeRequests$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceMergeRequests
  > = z.object({
    id: z.string().optional(),
    sourceBranchId: z.string().optional(),
    targetBranchId: z.string().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    authorId: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    status: z.string().optional(),
    labels: z.array(z.string()).optional(),
    hasConflicts: z.boolean().optional(),
    automatedCheckResults: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceMergeRequests$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceMergeRequests$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceMergeRequests$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceMergeRequests$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceMergeRequests$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceMergeRequests$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceMergeRequests$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceMergeRequestsToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceMergeRequests:
    PutApiLeadScraperMicroserviceApiV1WorkspaceMergeRequests,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceMergeRequests$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1WorkspaceMergeRequests),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceMergeRequestsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceMergeRequests,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceMergeRequests$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceMergeRequests' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceBranches$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceBranches,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    baseVersionHash: z.string().optional(),
    currentHeadHash: z.string().optional(),
    purpose: z.string().optional(),
    status: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    branchMetadata: z.record(z.string()).optional(),
    isLocked: z.boolean().optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    merges: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceMerges$inboundSchema
      ),
    ).optional(),
    policy: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1WorkspacePolicy$inboundSchema
    ).optional(),
    mergeRequests: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceMergeRequests$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceBranches$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  baseVersionHash?: string | undefined;
  currentHeadHash?: string | undefined;
  purpose?: string | undefined;
  status?: string | undefined;
  reviewers?: Array<string> | undefined;
  branchMetadata?: { [k: string]: string } | undefined;
  isLocked?: boolean | undefined;
  lastUpdated?: string | undefined;
  merges?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceMerges$Outbound>
    | undefined;
  policy?:
    | PutApiLeadScraperMicroserviceApiV1WorkspacePolicy$Outbound
    | undefined;
  mergeRequests?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceMergeRequests$Outbound>
    | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceBranches$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceBranches$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceBranches
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    baseVersionHash: z.string().optional(),
    currentHeadHash: z.string().optional(),
    purpose: z.string().optional(),
    status: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    branchMetadata: z.record(z.string()).optional(),
    isLocked: z.boolean().optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
    merges: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceMerges$outboundSchema
      ),
    ).optional(),
    policy: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1WorkspacePolicy$outboundSchema
    ).optional(),
    mergeRequests: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceMergeRequests$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceBranches$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceBranches$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceBranches$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceBranches$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceBranches$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceBranches$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceBranches$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceBranchesToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceBranches:
    PutApiLeadScraperMicroserviceApiV1WorkspaceBranches,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceBranches$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1WorkspaceBranches,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceBranchesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceBranches,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceBranches$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceBranches' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceChanges$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceChanges,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    changeType: z.string().optional(),
    contentBefore: z.string().optional(),
    contentAfter: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceChanges$Outbound = {
  id?: string | undefined;
  versionId?: string | undefined;
  changeType?: string | undefined;
  contentBefore?: string | undefined;
  contentAfter?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceChanges$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceChanges$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceChanges
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    changeType: z.string().optional(),
    contentBefore: z.string().optional(),
    contentAfter: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceChanges$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceChanges$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceChanges$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceChanges$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceChanges$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceChanges$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceChanges$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceChangesToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceChanges:
    PutApiLeadScraperMicroserviceApiV1WorkspaceChanges,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceChanges$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1WorkspaceChanges,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceChangesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceChanges,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceChanges$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceChanges' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceSummaries$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceSummaries,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    summaryType: z.string().optional(),
    content: z.string().optional(),
    targetAudience: z.string().optional(),
    keyPoints: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceSummaries$Outbound = {
  id?: string | undefined;
  versionId?: string | undefined;
  summaryType?: string | undefined;
  content?: string | undefined;
  targetAudience?: string | undefined;
  keyPoints?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceSummaries$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceSummaries$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceSummaries
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    summaryType: z.string().optional(),
    content: z.string().optional(),
    targetAudience: z.string().optional(),
    keyPoints: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceSummaries$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceSummaries$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceSummaries$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceSummaries$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceSummaries$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceSummaries$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceSummaries$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceSummariesToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceSummaries:
    PutApiLeadScraperMicroserviceApiV1WorkspaceSummaries,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceSummaries$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1WorkspaceSummaries,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceSummariesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceSummaries,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceSummaries$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceSummaries' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONVersions$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionHash: z.string().optional(),
    parentHash: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    branchName: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    isApproved: z.boolean().optional(),
    approvalChain: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    branches: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceBranches$inboundSchema
      ),
    ).optional(),
    changes: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceChanges$inboundSchema
      ),
    ).optional(),
    summaries: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceSummaries$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONVersions$Outbound =
  {
    id?: string | undefined;
    versionHash?: string | undefined;
    parentHash?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    branchName?: string | undefined;
    metadata?: { [k: string]: string } | undefined;
    tags?: Array<string> | undefined;
    isApproved?: boolean | undefined;
    approvalChain?: string | undefined;
    createdAt?: string | undefined;
    branches?:
      | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceBranches$Outbound>
      | undefined;
    changes?:
      | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceChanges$Outbound>
      | undefined;
    summaries?:
      | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceSummaries$Outbound>
      | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONVersions$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONVersions$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONVersions
  > = z.object({
    id: z.string().optional(),
    versionHash: z.string().optional(),
    parentHash: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    branchName: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    isApproved: z.boolean().optional(),
    approvalChain: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    branches: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceBranches$outboundSchema
      ),
    ).optional(),
    changes: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceChanges$outboundSchema
      ),
    ).optional(),
    summaries: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceSummaries$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONVersions$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONVersions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONVersions$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONVersions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONVersions$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONVersions$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONVersions$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONVersionsToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONVersions:
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONVersions,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONVersions$outboundSchema
      .parse(
        putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONVersions,
      ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONVersions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONVersions' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceInstances$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceInstances,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    status:
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseStatus$inboundSchema
        .default("DOCUMENT_STATUS_UNSPECIFIED"),
    fieldValues: z.record(z.string()).optional(),
    signers: z.array(z.string()).optional(),
    language: z.string().optional(),
    isCompleted: z.boolean().optional(),
    dueDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    generatedContent: z.string().optional(),
    attachments: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    signatureRequests: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureRequests$inboundSchema
      ),
    ).optional(),
    aiAssistance: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceAiAssistance$inboundSchema
      ),
    ).optional(),
    negotiation: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceNegotiation$inboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONVersions$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceInstances$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  status: string;
  fieldValues?: { [k: string]: string } | undefined;
  signers?: Array<string> | undefined;
  language?: string | undefined;
  isCompleted?: boolean | undefined;
  dueDate?: string | undefined;
  generatedContent?: string | undefined;
  attachments?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  signatureRequests?:
    | Array<
      PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureRequests$Outbound
    >
    | undefined;
  aiAssistance?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceAiAssistance$Outbound>
    | undefined;
  negotiation?:
    | PutApiLeadScraperMicroserviceApiV1WorkspaceNegotiation$Outbound
    | undefined;
  versions?:
    | Array<
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONVersions$Outbound
    >
    | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceInstances$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceInstances$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceInstances
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    status:
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseStatus$outboundSchema
        .default("DOCUMENT_STATUS_UNSPECIFIED"),
    fieldValues: z.record(z.string()).optional(),
    signers: z.array(z.string()).optional(),
    language: z.string().optional(),
    isCompleted: z.boolean().optional(),
    dueDate: z.date().transform(v => v.toISOString()).optional(),
    generatedContent: z.string().optional(),
    attachments: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    signatureRequests: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceSignatureRequests$outboundSchema
      ),
    ).optional(),
    aiAssistance: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceAiAssistance$outboundSchema
      ),
    ).optional(),
    negotiation: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceNegotiation$outboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200ApplicationJSONVersions$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceInstances$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceInstances$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceInstances$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceInstances$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceInstances$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceInstances$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceInstances$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceInstancesToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceInstances:
    PutApiLeadScraperMicroserviceApiV1WorkspaceInstances,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceInstances$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1WorkspaceInstances,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceInstancesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceInstances,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceInstances$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceInstances' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceExplanations$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceExplanations,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    sectionIdentifier: z.string().optional(),
    explanationText: z.string().optional(),
    complexityLevel: z.string().optional(),
    relatedTerms: z.array(z.string()).optional(),
    legalReferences: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceExplanations$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  sectionIdentifier?: string | undefined;
  explanationText?: string | undefined;
  complexityLevel?: string | undefined;
  relatedTerms?: Array<string> | undefined;
  legalReferences?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceExplanations$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceExplanations$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceExplanations
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    sectionIdentifier: z.string().optional(),
    explanationText: z.string().optional(),
    complexityLevel: z.string().optional(),
    relatedTerms: z.array(z.string()).optional(),
    legalReferences: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceExplanations$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceExplanations$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceExplanations$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceExplanations$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceExplanations$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceExplanations$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceExplanations$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceExplanationsToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceExplanations:
    PutApiLeadScraperMicroserviceApiV1WorkspaceExplanations,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceExplanations$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1WorkspaceExplanations),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceExplanationsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceExplanations,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceExplanations$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceExplanations' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceRiskAssessments$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceRiskAssessments,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    riskType: z.string().optional(),
    riskScore: z.number().optional(),
    assessmentDetails: z.string().optional(),
    mitigationSuggestions: z.array(z.string()).optional(),
    assessorId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceRiskAssessments$Outbound =
  {
    id?: string | undefined;
    intelligenceId?: string | undefined;
    riskType?: string | undefined;
    riskScore?: number | undefined;
    assessmentDetails?: string | undefined;
    mitigationSuggestions?: Array<string> | undefined;
    assessorId?: string | undefined;
    createdAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceRiskAssessments$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceRiskAssessments$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceRiskAssessments
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    riskType: z.string().optional(),
    riskScore: z.number().optional(),
    assessmentDetails: z.string().optional(),
    mitigationSuggestions: z.array(z.string()).optional(),
    assessorId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceRiskAssessments$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceRiskAssessments$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceRiskAssessments$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceRiskAssessments$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceRiskAssessments$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceRiskAssessments$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceRiskAssessments$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceRiskAssessmentsToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceRiskAssessments:
    PutApiLeadScraperMicroserviceApiV1WorkspaceRiskAssessments,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceRiskAssessments$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1WorkspaceRiskAssessments),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceRiskAssessmentsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceRiskAssessments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceRiskAssessments$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceRiskAssessments' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceComplianceChecks$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceComplianceChecks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    complianceStandard: z.string().optional(),
    checkResult: z.string().optional(),
    violations: z.array(z.string()).optional(),
    remediationSteps: z.string().optional(),
    checkDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceComplianceChecks$Outbound =
  {
    id?: string | undefined;
    intelligenceId?: string | undefined;
    complianceStandard?: string | undefined;
    checkResult?: string | undefined;
    violations?: Array<string> | undefined;
    remediationSteps?: string | undefined;
    checkDate?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceComplianceChecks$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceComplianceChecks$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceComplianceChecks
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    complianceStandard: z.string().optional(),
    checkResult: z.string().optional(),
    violations: z.array(z.string()).optional(),
    remediationSteps: z.string().optional(),
    checkDate: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceComplianceChecks$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceComplianceChecks$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceComplianceChecks$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceComplianceChecks$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceComplianceChecks$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceComplianceChecks$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceComplianceChecks$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceComplianceChecksToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceComplianceChecks:
    PutApiLeadScraperMicroserviceApiV1WorkspaceComplianceChecks,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceComplianceChecks$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1WorkspaceComplianceChecks),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceComplianceChecksFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceComplianceChecks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceComplianceChecks$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceComplianceChecks' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceIntelligence$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceIntelligence,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    contractType: z.string().optional(),
    riskScores: z.record(z.number()).optional(),
    detectedClauses: z.record(z.string()).optional(),
    keyObligations: z.array(z.string()).optional(),
    complianceScores: z.record(z.number()).optional(),
    jurisdiction: z.string().optional(),
    governingLaws: z.array(z.string()).optional(),
    semanticAnalysis: z.record(z.string()).optional(),
    analysisDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    riskAssessments: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceRiskAssessments$inboundSchema
      ),
    ).optional(),
    complianceChecks: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceComplianceChecks$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceIntelligence$Outbound = {
  id?: string | undefined;
  contractType?: string | undefined;
  riskScores?: { [k: string]: number } | undefined;
  detectedClauses?: { [k: string]: string } | undefined;
  keyObligations?: Array<string> | undefined;
  complianceScores?: { [k: string]: number } | undefined;
  jurisdiction?: string | undefined;
  governingLaws?: Array<string> | undefined;
  semanticAnalysis?: { [k: string]: string } | undefined;
  analysisDate?: string | undefined;
  riskAssessments?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceRiskAssessments$Outbound>
    | undefined;
  complianceChecks?:
    | Array<
      PutApiLeadScraperMicroserviceApiV1WorkspaceComplianceChecks$Outbound
    >
    | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceIntelligence$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceIntelligence$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceIntelligence
  > = z.object({
    id: z.string().optional(),
    contractType: z.string().optional(),
    riskScores: z.record(z.number()).optional(),
    detectedClauses: z.record(z.string()).optional(),
    keyObligations: z.array(z.string()).optional(),
    complianceScores: z.record(z.number()).optional(),
    jurisdiction: z.string().optional(),
    governingLaws: z.array(z.string()).optional(),
    semanticAnalysis: z.record(z.string()).optional(),
    analysisDate: z.date().transform(v => v.toISOString()).optional(),
    riskAssessments: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceRiskAssessments$outboundSchema
      ),
    ).optional(),
    complianceChecks: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceComplianceChecks$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceIntelligence$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceIntelligence$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceIntelligence$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceIntelligence$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceIntelligence$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceIntelligence$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceIntelligence$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceIntelligenceToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceIntelligence:
    PutApiLeadScraperMicroserviceApiV1WorkspaceIntelligence,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceIntelligence$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1WorkspaceIntelligence),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceIntelligenceFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceIntelligence,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceIntelligence$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceIntelligence' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceTemplates$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceTemplates,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    industryType: z.string().optional(),
    documentType: z.string().optional(),
    baseContent: z.string().optional(),
    isAdaptive: z.boolean().optional(),
    metadata: z.record(z.string()).optional(),
    supportedLanguages: z.array(z.string()).optional(),
    requiredDataFields: z.array(z.string()).optional(),
    version: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    templateType:
      PutApiLeadScraperMicroserviceApiV1WorkspaceTemplateType$inboundSchema
        .default("TEMPLATE_TYPE_UNSPECIFIED"),
    content: z.string().optional(),
    detectedVariables: z.array(z.string()).optional(),
    variableMappings: z.record(z.string()).optional(),
    isContextAware: z.boolean().optional(),
    supportedContexts: z.array(z.string()).optional(),
    formattingRules: z.record(z.string()).optional(),
    conditionalSections: z.array(z.string()).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseVersions$inboundSchema
      ),
    ).optional(),
    variables: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceVariables$inboundSchema
      ),
    ).optional(),
    instances: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceInstances$inboundSchema
      ),
    ).optional(),
    explanations: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceExplanations$inboundSchema
      ),
    ).optional(),
    intelligence: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceIntelligence$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceTemplates$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  industryType?: string | undefined;
  documentType?: string | undefined;
  baseContent?: string | undefined;
  isAdaptive?: boolean | undefined;
  metadata?: { [k: string]: string } | undefined;
  supportedLanguages?: Array<string> | undefined;
  requiredDataFields?: Array<string> | undefined;
  version?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  templateType: string;
  content?: string | undefined;
  detectedVariables?: Array<string> | undefined;
  variableMappings?: { [k: string]: string } | undefined;
  isContextAware?: boolean | undefined;
  supportedContexts?: Array<string> | undefined;
  formattingRules?: { [k: string]: string } | undefined;
  conditionalSections?: Array<string> | undefined;
  versions?:
    | Array<
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseVersions$Outbound
    >
    | undefined;
  variables?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceVariables$Outbound>
    | undefined;
  instances?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceInstances$Outbound>
    | undefined;
  explanations?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceExplanations$Outbound>
    | undefined;
  intelligence?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceIntelligence$Outbound>
    | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceTemplates$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceTemplates$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceTemplates
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    industryType: z.string().optional(),
    documentType: z.string().optional(),
    baseContent: z.string().optional(),
    isAdaptive: z.boolean().optional(),
    metadata: z.record(z.string()).optional(),
    supportedLanguages: z.array(z.string()).optional(),
    requiredDataFields: z.array(z.string()).optional(),
    version: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    templateType:
      PutApiLeadScraperMicroserviceApiV1WorkspaceTemplateType$outboundSchema
        .default("TEMPLATE_TYPE_UNSPECIFIED"),
    content: z.string().optional(),
    detectedVariables: z.array(z.string()).optional(),
    variableMappings: z.record(z.string()).optional(),
    isContextAware: z.boolean().optional(),
    supportedContexts: z.array(z.string()).optional(),
    formattingRules: z.record(z.string()).optional(),
    conditionalSections: z.array(z.string()).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponseVersions$outboundSchema
      ),
    ).optional(),
    variables: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceVariables$outboundSchema
      ),
    ).optional(),
    instances: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceInstances$outboundSchema
      ),
    ).optional(),
    explanations: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceExplanations$outboundSchema
      ),
    ).optional(),
    intelligence: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceIntelligence$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceTemplates$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceTemplates$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceTemplates$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceTemplates$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceTemplates$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceTemplates$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceTemplates$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceTemplatesToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceTemplates:
    PutApiLeadScraperMicroserviceApiV1WorkspaceTemplates,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceTemplates$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1WorkspaceTemplates,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceTemplatesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceTemplates,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceTemplates$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceTemplates' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesSharing$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesSharing,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesSharing$Outbound =
  {
    id?: string | undefined;
    sharedWithEmail?: string | undefined;
    permissionLevel?: string | undefined;
    expiresAt?: string | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesSharing$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesSharing$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesSharing
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesSharing$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesSharing$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesSharing$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesSharing$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesSharing$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesSharing$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesSharing$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesSharingToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesSharing:
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesSharing,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesSharing$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesSharing),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesSharingFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesSharing,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesSharing$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesSharing' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceActivities$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceActivities,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    activityType: z.string().optional(),
    userId: z.string().optional(),
    description: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceActivities$Outbound = {
  id?: string | undefined;
  activityType?: string | undefined;
  userId?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceActivities$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceActivities$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceActivities
  > = z.object({
    id: z.string().optional(),
    activityType: z.string().optional(),
    userId: z.string().optional(),
    description: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceActivities$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceActivities$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceActivities$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceActivities$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceActivities$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceActivities$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceActivities$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceActivitiesToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceActivities:
    PutApiLeadScraperMicroserviceApiV1WorkspaceActivities,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceActivities$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1WorkspaceActivities,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceActivitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceActivities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceActivities$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceActivities' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceCompliance$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceCompliance,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    complianceType: z.string().optional(),
    status: z.string().optional(),
    certificationId: z.string().optional(),
    validUntil: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceCompliance$Outbound = {
  id?: string | undefined;
  complianceType?: string | undefined;
  status?: string | undefined;
  certificationId?: string | undefined;
  validUntil?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceCompliance$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceCompliance$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceCompliance
  > = z.object({
    id: z.string().optional(),
    complianceType: z.string().optional(),
    status: z.string().optional(),
    certificationId: z.string().optional(),
    validUntil: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceCompliance$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceCompliance$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceCompliance$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceCompliance$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceCompliance$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceCompliance$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceCompliance$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceComplianceToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceCompliance:
    PutApiLeadScraperMicroserviceApiV1WorkspaceCompliance,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceCompliance$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1WorkspaceCompliance,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceComplianceFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceCompliance,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceCompliance$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceCompliance' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceCategory$inboundSchema:
  z.ZodNativeEnum<typeof PutApiLeadScraperMicroserviceApiV1WorkspaceCategory> =
    z.nativeEnum(PutApiLeadScraperMicroserviceApiV1WorkspaceCategory);

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceCategory$outboundSchema:
  z.ZodNativeEnum<typeof PutApiLeadScraperMicroserviceApiV1WorkspaceCategory> =
    PutApiLeadScraperMicroserviceApiV1WorkspaceCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceCategory$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceCategory$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceCategory$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceCategory$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceCategory$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspacePricingModel$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1WorkspacePricingModel
  > = z.nativeEnum(PutApiLeadScraperMicroserviceApiV1WorkspacePricingModel);

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspacePricingModel$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiLeadScraperMicroserviceApiV1WorkspacePricingModel
  > = PutApiLeadScraperMicroserviceApiV1WorkspacePricingModel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspacePricingModel$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspacePricingModel$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspacePricingModel$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspacePricingModel$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspacePricingModel$outboundSchema;
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Versions$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Versions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    versionNumber: z.string().optional(),
    changelog: z.string().optional(),
    requirements: z.record(z.string()).optional(),
    isPublic: z.boolean().optional(),
    releaseDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Versions$Outbound =
  {
    id?: string | undefined;
    appId?: string | undefined;
    versionNumber?: string | undefined;
    changelog?: string | undefined;
    requirements?: { [k: string]: string } | undefined;
    isPublic?: boolean | undefined;
    releaseDate?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Versions$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Versions$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Versions
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    versionNumber: z.string().optional(),
    changelog: z.string().optional(),
    requirements: z.record(z.string()).optional(),
    isPublic: z.boolean().optional(),
    releaseDate: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Versions$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Versions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Versions$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Versions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Versions$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Versions$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Versions$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200VersionsToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Versions:
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Versions,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Versions$outboundSchema
      .parse(
        putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Versions,
      ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200VersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Versions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Versions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Versions' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceInstallations$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceInstallations,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    workspaceId: z.string().optional(),
    versionInstalled: z.string().optional(),
    configuration: z.record(z.string()).optional(),
    installationStatus: z.string().optional(),
    installedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    lastUsed: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceInstallations$Outbound =
  {
    id?: string | undefined;
    appId?: string | undefined;
    workspaceId?: string | undefined;
    versionInstalled?: string | undefined;
    configuration?: { [k: string]: string } | undefined;
    installationStatus?: string | undefined;
    installedAt?: string | undefined;
    lastUsed?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceInstallations$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceInstallations$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceInstallations
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    workspaceId: z.string().optional(),
    versionInstalled: z.string().optional(),
    configuration: z.record(z.string()).optional(),
    installationStatus: z.string().optional(),
    installedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUsed: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceInstallations$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceInstallations$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceInstallations$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceInstallations$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceInstallations$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceInstallations$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceInstallations$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceInstallationsToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceInstallations:
    PutApiLeadScraperMicroserviceApiV1WorkspaceInstallations,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceInstallations$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1WorkspaceInstallations),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceInstallationsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceInstallations,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceInstallations$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceInstallations' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceAnalytics$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceAnalytics,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    metricName: z.string().optional(),
    metricValue: z.number().optional(),
    dimensions: z.record(z.string()).optional(),
    recordedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceAnalytics$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  metricName?: string | undefined;
  metricValue?: number | undefined;
  dimensions?: { [k: string]: string } | undefined;
  recordedAt?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceAnalytics$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceAnalytics$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceAnalytics
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    metricName: z.string().optional(),
    metricValue: z.number().optional(),
    dimensions: z.record(z.string()).optional(),
    recordedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceAnalytics$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceAnalytics$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceAnalytics$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceAnalytics$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceAnalytics$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceAnalytics$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceAnalytics$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceAnalyticsToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceAnalytics:
    PutApiLeadScraperMicroserviceApiV1WorkspaceAnalytics,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceAnalytics$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1WorkspaceAnalytics,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceAnalytics,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceAnalytics$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceAnalytics' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesReviews$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesReviews,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    reviewerId: z.string().optional(),
    rating: z.number().optional(),
    reviewText: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesReviews$Outbound =
  {
    id?: string | undefined;
    appId?: string | undefined;
    reviewerId?: string | undefined;
    rating?: number | undefined;
    reviewText?: string | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesReviews$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesReviews$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesReviews
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    reviewerId: z.string().optional(),
    rating: z.number().optional(),
    reviewText: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesReviews$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesReviews$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesReviews$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesReviews$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesReviews$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesReviews$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesReviews$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesReviewsToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesReviews:
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesReviews,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesReviews$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesReviews),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesReviewsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesReviews,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesReviews$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesReviews' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceInfo$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceInfo,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    supportedLanguages: z.array(z.string()).optional(),
    sdkFeatures: z.array(z.string()).optional(),
    testCoverage: z.record(z.number()).optional(),
    securityScans: z.array(z.string()).optional(),
    performanceMetrics: z.record(z.string()).optional(),
    developmentStatus: z.string().optional(),
    knownIssues: z.array(z.string()).optional(),
    roadmapUrl: z.string().optional(),
    lastSecurityAudit: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceInfo$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  supportedLanguages?: Array<string> | undefined;
  sdkFeatures?: Array<string> | undefined;
  testCoverage?: { [k: string]: number } | undefined;
  securityScans?: Array<string> | undefined;
  performanceMetrics?: { [k: string]: string } | undefined;
  developmentStatus?: string | undefined;
  knownIssues?: Array<string> | undefined;
  roadmapUrl?: string | undefined;
  lastSecurityAudit?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceInfo$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceInfo$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceInfo
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    supportedLanguages: z.array(z.string()).optional(),
    sdkFeatures: z.array(z.string()).optional(),
    testCoverage: z.record(z.number()).optional(),
    securityScans: z.array(z.string()).optional(),
    performanceMetrics: z.record(z.string()).optional(),
    developmentStatus: z.string().optional(),
    knownIssues: z.array(z.string()).optional(),
    roadmapUrl: z.string().optional(),
    lastSecurityAudit: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceInfo$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceInfo$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceInfo$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceInfo$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceInfo$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceInfo$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceInfo$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceInfoToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceInfo:
    PutApiLeadScraperMicroserviceApiV1WorkspaceInfo,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceInfo$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1WorkspaceInfo,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceInfoFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceInfo,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceInfo$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceInfo' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesWebhooks$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesWebhooks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    url: z.string().optional(),
    subscribedEvents: z.array(z.string()).optional(),
    secretKey: z.string().optional(),
    retryCount: z.number().int().optional(),
    timeoutSeconds: z.number().int().optional(),
    isActive: z.boolean().optional(),
    headers: z.record(z.string()).optional(),
    lastTriggered: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesWebhooks$Outbound =
  {
    id?: string | undefined;
    appId?: string | undefined;
    url?: string | undefined;
    subscribedEvents?: Array<string> | undefined;
    secretKey?: string | undefined;
    retryCount?: number | undefined;
    timeoutSeconds?: number | undefined;
    isActive?: boolean | undefined;
    headers?: { [k: string]: string } | undefined;
    lastTriggered?: string | undefined;
    createdAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesWebhooks$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesWebhooks$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesWebhooks
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    url: z.string().optional(),
    subscribedEvents: z.array(z.string()).optional(),
    secretKey: z.string().optional(),
    retryCount: z.number().int().optional(),
    timeoutSeconds: z.number().int().optional(),
    isActive: z.boolean().optional(),
    headers: z.record(z.string()).optional(),
    lastTriggered: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesWebhooks$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesWebhooks$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesWebhooks$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesWebhooks$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesWebhooks$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesWebhooks$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesWebhooks$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesWebhooksToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesWebhooks:
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesWebhooks,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesWebhooks$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesWebhooks),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesWebhooksFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesWebhooks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesWebhooks$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesWebhooks' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesPermissions$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesPermissions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    scope: z.string().optional(),
    description: z.string().optional(),
    isRequired: z.boolean().optional(),
    accessLevels: z.array(z.string()).optional(),
    constraints: z.record(z.string()).optional(),
    requiresApproval: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesPermissions$Outbound =
  {
    id?: string | undefined;
    appId?: string | undefined;
    scope?: string | undefined;
    description?: string | undefined;
    isRequired?: boolean | undefined;
    accessLevels?: Array<string> | undefined;
    constraints?: { [k: string]: string } | undefined;
    requiresApproval?: boolean | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesPermissions$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesPermissions$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesPermissions
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    scope: z.string().optional(),
    description: z.string().optional(),
    isRequired: z.boolean().optional(),
    accessLevels: z.array(z.string()).optional(),
    constraints: z.record(z.string()).optional(),
    requiresApproval: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesPermissions$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesPermissions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesPermissions$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesPermissions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesPermissions$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesPermissions$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesPermissions$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesPermissionsToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesPermissions:
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesPermissions,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesPermissions$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesPermissions),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesPermissionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesPermissions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesPermissions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesPermissions' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceInstalledApps$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceInstalledApps,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    developerId: z.string().optional(),
    category: PutApiLeadScraperMicroserviceApiV1WorkspaceCategory$inboundSchema
      .default("APP_CATEGORY_UNSPECIFIED"),
    supportedContractTypes: z.array(z.string()).optional(),
    features: z.array(z.string()).optional(),
    pricingModel:
      PutApiLeadScraperMicroserviceApiV1WorkspacePricingModel$inboundSchema
        .default("PRICING_MODEL_UNSPECIFIED"),
    pricingTiers: z.record(z.number()).optional(),
    supportedIntegrations: z.array(z.string()).optional(),
    isVerified: z.boolean().optional(),
    rating: z.number().optional(),
    installationCount: z.number().int().optional(),
    requiredPermissions: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    documentationUrl: z.string().optional(),
    supportEmail: z.string().optional(),
    screenshots: z.array(z.string()).optional(),
    privacyPolicyUrl: z.string().optional(),
    termsUrl: z.string().optional(),
    publishedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Versions$inboundSchema
      ),
    ).optional(),
    installations: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceInstallations$inboundSchema
      ),
    ).optional(),
    analytics: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceAnalytics$inboundSchema
      ),
    ).optional(),
    reviews: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesReviews$inboundSchema
      ),
    ).optional(),
    info: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceInfo$inboundSchema
    ).optional(),
    webhooks: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesWebhooks$inboundSchema
      ),
    ).optional(),
    permissions: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesPermissions$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceInstalledApps$Outbound =
  {
    id?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    developerId?: string | undefined;
    category: string;
    supportedContractTypes?: Array<string> | undefined;
    features?: Array<string> | undefined;
    pricingModel: string;
    pricingTiers?: { [k: string]: number } | undefined;
    supportedIntegrations?: Array<string> | undefined;
    isVerified?: boolean | undefined;
    rating?: number | undefined;
    installationCount?: number | undefined;
    requiredPermissions?: Array<string> | undefined;
    metadata?: { [k: string]: string } | undefined;
    documentationUrl?: string | undefined;
    supportEmail?: string | undefined;
    screenshots?: Array<string> | undefined;
    privacyPolicyUrl?: string | undefined;
    termsUrl?: string | undefined;
    publishedAt?: string | undefined;
    lastUpdated?: string | undefined;
    versions?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Versions$Outbound
      >
      | undefined;
    installations?:
      | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceInstallations$Outbound>
      | undefined;
    analytics?:
      | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceAnalytics$Outbound>
      | undefined;
    reviews?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesReviews$Outbound
      >
      | undefined;
    info?: PutApiLeadScraperMicroserviceApiV1WorkspaceInfo$Outbound | undefined;
    webhooks?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesWebhooks$Outbound
      >
      | undefined;
    permissions?:
      | Array<
        PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesPermissions$Outbound
      >
      | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceInstalledApps$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceInstalledApps$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceInstalledApps
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    developerId: z.string().optional(),
    category: PutApiLeadScraperMicroserviceApiV1WorkspaceCategory$outboundSchema
      .default("APP_CATEGORY_UNSPECIFIED"),
    supportedContractTypes: z.array(z.string()).optional(),
    features: z.array(z.string()).optional(),
    pricingModel:
      PutApiLeadScraperMicroserviceApiV1WorkspacePricingModel$outboundSchema
        .default("PRICING_MODEL_UNSPECIFIED"),
    pricingTiers: z.record(z.number()).optional(),
    supportedIntegrations: z.array(z.string()).optional(),
    isVerified: z.boolean().optional(),
    rating: z.number().optional(),
    installationCount: z.number().int().optional(),
    requiredPermissions: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    documentationUrl: z.string().optional(),
    supportEmail: z.string().optional(),
    screenshots: z.array(z.string()).optional(),
    privacyPolicyUrl: z.string().optional(),
    termsUrl: z.string().optional(),
    publishedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesResponse200Versions$outboundSchema
      ),
    ).optional(),
    installations: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceInstallations$outboundSchema
      ),
    ).optional(),
    analytics: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceAnalytics$outboundSchema
      ),
    ).optional(),
    reviews: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesReviews$outboundSchema
      ),
    ).optional(),
    info: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceInfo$outboundSchema
    ).optional(),
    webhooks: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesWebhooks$outboundSchema
      ),
    ).optional(),
    permissions: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesPermissions$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceInstalledApps$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceInstalledApps$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceInstalledApps$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceInstalledApps$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceInstalledApps$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceInstalledApps$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceInstalledApps$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceInstalledAppsToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceInstalledApps:
    PutApiLeadScraperMicroserviceApiV1WorkspaceInstalledApps,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceInstalledApps$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1WorkspaceInstalledApps),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceInstalledAppsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceInstalledApps,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceInstalledApps$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceInstalledApps' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspace$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspace,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    uniqueIdentifier: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    storageQuota: z.string().optional(),
    usedStorage: z.string().optional(),
    allowPublicSharing: z.boolean().optional(),
    requireApproval: z.boolean().optional(),
    gdprCompliant: z.boolean().optional(),
    hipaaCompliant: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    folders: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceFolders$inboundSchema
      ),
    ).optional(),
    templates: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceTemplates$inboundSchema
      ),
    ).optional(),
    sharing: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesSharing$inboundSchema
      ),
    ).optional(),
    activities: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceActivities$inboundSchema
      ),
    ).optional(),
    compliance: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceCompliance$inboundSchema
      ),
    ).optional(),
    installedApps: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceInstalledApps$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspace$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  uniqueIdentifier?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  storageQuota?: string | undefined;
  usedStorage?: string | undefined;
  allowPublicSharing?: boolean | undefined;
  requireApproval?: boolean | undefined;
  gdprCompliant?: boolean | undefined;
  hipaaCompliant?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  folders?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceFolders$Outbound>
    | undefined;
  templates?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceTemplates$Outbound>
    | undefined;
  sharing?:
    | Array<
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesSharing$Outbound
    >
    | undefined;
  activities?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceActivities$Outbound>
    | undefined;
  compliance?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceCompliance$Outbound>
    | undefined;
  installedApps?:
    | Array<PutApiLeadScraperMicroserviceApiV1WorkspaceInstalledApps$Outbound>
    | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspace$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspace$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspace
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    uniqueIdentifier: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    storageQuota: z.string().optional(),
    usedStorage: z.string().optional(),
    allowPublicSharing: z.boolean().optional(),
    requireApproval: z.boolean().optional(),
    gdprCompliant: z.boolean().optional(),
    hipaaCompliant: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    folders: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceFolders$outboundSchema
      ),
    ).optional(),
    templates: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceTemplates$outboundSchema
      ),
    ).optional(),
    sharing: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspacesSharing$outboundSchema
      ),
    ).optional(),
    activities: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceActivities$outboundSchema
      ),
    ).optional(),
    compliance: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceCompliance$outboundSchema
      ),
    ).optional(),
    installedApps: z.array(
      z.lazy(() =>
        PutApiLeadScraperMicroserviceApiV1WorkspaceInstalledApps$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspace$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspace$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspace$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspace$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspace$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspace$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspace$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceWorkspaceToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceWorkspace:
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspace,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspace$outboundSchema.parse(
      putApiLeadScraperMicroserviceApiV1WorkspaceWorkspace,
    ),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceWorkspaceFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspace,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspace$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspace' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceResponseBody$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    workspace: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspace$inboundSchema
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1WorkspaceResponseBody$Outbound = {
  workspace?:
    | PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspace$Outbound
    | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1WorkspaceResponseBody$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1WorkspaceResponseBody$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1WorkspaceResponseBody
  > = z.object({
    workspace: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceWorkspace$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1WorkspaceResponseBody$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceResponseBody$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1WorkspaceResponseBody$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1WorkspaceResponseBody$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1WorkspaceResponseBody$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceResponseBodyToJSON(
  putApiLeadScraperMicroserviceApiV1WorkspaceResponseBody:
    PutApiLeadScraperMicroserviceApiV1WorkspaceResponseBody,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1WorkspaceResponseBody$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1WorkspaceResponseBody),
  );
}

export function putApiLeadScraperMicroserviceApiV1WorkspaceResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1WorkspaceResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1WorkspaceResponseBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1WorkspaceResponseBody' from JSON`,
  );
}
