/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutApiLeadScraperMicroserviceApiV1AccountsSettingsSettings = {
  id?: string | undefined;
  emailNotifications?: boolean | undefined;
  slackNotifications?: boolean | undefined;
  defaultDataRetention?: string | undefined;
  autoPurgeEnabled?: boolean | undefined;
  require2fa?: boolean | undefined;
  sessionTimeout?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsSettingsRequestBody = {
  settings?:
    | PutApiLeadScraperMicroserviceApiV1AccountsSettingsSettings
    | undefined;
};

export type PutApiLeadScraperMicroserviceApiV1AccountsSettingsAccountsSettings =
  {
    id?: string | undefined;
    emailNotifications?: boolean | undefined;
    slackNotifications?: boolean | undefined;
    defaultDataRetention?: string | undefined;
    autoPurgeEnabled?: boolean | undefined;
    require2fa?: boolean | undefined;
    sessionTimeout?: string | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
    deletedAt?: Date | undefined;
  };

/**
 * Updates the settings for a given account
 */
export type PutApiLeadScraperMicroserviceApiV1AccountsSettingsResponseBody = {
  settings?:
    | PutApiLeadScraperMicroserviceApiV1AccountsSettingsAccountsSettings
    | undefined;
};

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsSettingsSettings$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsSettings,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    emailNotifications: z.boolean().optional(),
    slackNotifications: z.boolean().optional(),
    defaultDataRetention: z.string().optional(),
    autoPurgeEnabled: z.boolean().optional(),
    require2fa: z.boolean().optional(),
    sessionTimeout: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsSettingsSettings$Outbound =
  {
    id?: string | undefined;
    emailNotifications?: boolean | undefined;
    slackNotifications?: boolean | undefined;
    defaultDataRetention?: string | undefined;
    autoPurgeEnabled?: boolean | undefined;
    require2fa?: boolean | undefined;
    sessionTimeout?: string | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
    deletedAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsSettingsSettings$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsSettings$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsSettings
  > = z.object({
    id: z.string().optional(),
    emailNotifications: z.boolean().optional(),
    slackNotifications: z.boolean().optional(),
    defaultDataRetention: z.string().optional(),
    autoPurgeEnabled: z.boolean().optional(),
    require2fa: z.boolean().optional(),
    sessionTimeout: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsSettingsSettings$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsSettingsSettings$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsSettings$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsSettingsSettings$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsSettings$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsSettingsSettings$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsSettings$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsSettingsSettingsToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsSettingsSettings:
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsSettings,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsSettings$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsSettingsSettings),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsSettingsSettingsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsSettingsSettings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsSettingsSettings$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsSettingsSettings' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsSettingsRequestBody$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    settings: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1AccountsSettingsSettings$inboundSchema
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsSettingsRequestBody$Outbound =
  {
    settings?:
      | PutApiLeadScraperMicroserviceApiV1AccountsSettingsSettings$Outbound
      | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsSettingsRequestBody$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsRequestBody$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsRequestBody
  > = z.object({
    settings: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1AccountsSettingsSettings$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsSettingsRequestBody$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsSettingsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsRequestBody$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsSettingsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsRequestBody$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsSettingsRequestBody$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsRequestBody$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsSettingsRequestBodyToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsSettingsRequestBody:
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsRequestBody,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsRequestBody$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsSettingsRequestBody),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsSettingsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsSettingsRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsSettingsRequestBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsSettingsRequestBody' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsSettingsAccountsSettings$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsAccountsSettings,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    emailNotifications: z.boolean().optional(),
    slackNotifications: z.boolean().optional(),
    defaultDataRetention: z.string().optional(),
    autoPurgeEnabled: z.boolean().optional(),
    require2fa: z.boolean().optional(),
    sessionTimeout: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsSettingsAccountsSettings$Outbound =
  {
    id?: string | undefined;
    emailNotifications?: boolean | undefined;
    slackNotifications?: boolean | undefined;
    defaultDataRetention?: string | undefined;
    autoPurgeEnabled?: boolean | undefined;
    require2fa?: boolean | undefined;
    sessionTimeout?: string | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
    deletedAt?: string | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsSettingsAccountsSettings$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsAccountsSettings$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsAccountsSettings
  > = z.object({
    id: z.string().optional(),
    emailNotifications: z.boolean().optional(),
    slackNotifications: z.boolean().optional(),
    defaultDataRetention: z.string().optional(),
    autoPurgeEnabled: z.boolean().optional(),
    require2fa: z.boolean().optional(),
    sessionTimeout: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsSettingsAccountsSettings$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsSettingsAccountsSettings$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsAccountsSettings$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsSettingsAccountsSettings$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsAccountsSettings$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsSettingsAccountsSettings$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsAccountsSettings$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsSettingsAccountsSettingsToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsSettingsAccountsSettings:
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsAccountsSettings,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsAccountsSettings$outboundSchema
      .parse(
        putApiLeadScraperMicroserviceApiV1AccountsSettingsAccountsSettings,
      ),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsSettingsAccountsSettingsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsSettingsAccountsSettings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsSettingsAccountsSettings$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsSettingsAccountsSettings' from JSON`,
  );
}

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsSettingsResponseBody$inboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    settings: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1AccountsSettingsAccountsSettings$inboundSchema
    ).optional(),
  });

/** @internal */
export type PutApiLeadScraperMicroserviceApiV1AccountsSettingsResponseBody$Outbound =
  {
    settings?:
      | PutApiLeadScraperMicroserviceApiV1AccountsSettingsAccountsSettings$Outbound
      | undefined;
  };

/** @internal */
export const PutApiLeadScraperMicroserviceApiV1AccountsSettingsResponseBody$outboundSchema:
  z.ZodType<
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsResponseBody$Outbound,
    z.ZodTypeDef,
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsResponseBody
  > = z.object({
    settings: z.lazy(() =>
      PutApiLeadScraperMicroserviceApiV1AccountsSettingsAccountsSettings$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiLeadScraperMicroserviceApiV1AccountsSettingsResponseBody$ {
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsSettingsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsResponseBody$inboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsSettingsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsResponseBody$outboundSchema;
  /** @deprecated use `PutApiLeadScraperMicroserviceApiV1AccountsSettingsResponseBody$Outbound` instead. */
  export type Outbound =
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsResponseBody$Outbound;
}

export function putApiLeadScraperMicroserviceApiV1AccountsSettingsResponseBodyToJSON(
  putApiLeadScraperMicroserviceApiV1AccountsSettingsResponseBody:
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsResponseBody,
): string {
  return JSON.stringify(
    PutApiLeadScraperMicroserviceApiV1AccountsSettingsResponseBody$outboundSchema
      .parse(putApiLeadScraperMicroserviceApiV1AccountsSettingsResponseBody),
  );
}

export function putApiLeadScraperMicroserviceApiV1AccountsSettingsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiLeadScraperMicroserviceApiV1AccountsSettingsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiLeadScraperMicroserviceApiV1AccountsSettingsResponseBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiLeadScraperMicroserviceApiV1AccountsSettingsResponseBody' from JSON`,
  );
}
