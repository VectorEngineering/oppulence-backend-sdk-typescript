/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostApiWorkspaceServiceV1WorkspacesRequestBody = {
  accountId?: string | undefined;
  name: string;
  storageQuota?: string | undefined;
  allowPublicSharing?: boolean | undefined;
  requireApproval?: boolean | undefined;
  gdprCompliant?: boolean | undefined;
  hipaaCompliant?: boolean | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesEmbeddings = {
  id?: string | undefined;
  embeddings?: Array<number> | undefined;
  modelVersion?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions = {
  id?: string | undefined;
  fileId?: string | undefined;
  versionNumber?: number | undefined;
  s3Key?: string | undefined;
  size?: string | undefined;
  commitMessage?: string | undefined;
  authorId?: string | undefined;
  createdAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesComments = {
  id?: string | undefined;
  authorId?: string | undefined;
  content?: string | undefined;
  startPosition?: number | undefined;
  endPosition?: number | undefined;
  resolved?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesWorkspacesSharing = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesSnapshots = {
  id?: string | undefined;
  fileId?: string | undefined;
  snapshotHash?: string | undefined;
  content?: string | undefined;
  authorId?: string | undefined;
  reason?: string | undefined;
  createdAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesFiles = {
  id?: string | undefined;
  name?: string | undefined;
  size?: string | undefined;
  s3Key?: string | undefined;
  s3BucketName?: string | undefined;
  isDeleted?: boolean | undefined;
  version?: number | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  embeddings?: PostApiWorkspaceServiceV1WorkspacesEmbeddings | undefined;
  versions?:
    | Array<PostApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions>
    | undefined;
  comments?: Array<PostApiWorkspaceServiceV1WorkspacesComments> | undefined;
  sharing?:
    | Array<PostApiWorkspaceServiceV1WorkspacesWorkspacesSharing>
    | undefined;
  snapshots?: Array<PostApiWorkspaceServiceV1WorkspacesSnapshots> | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesFolders = {
  id?: string | undefined;
  name?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  isDeleted?: boolean | undefined;
  parentFolderId?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  files?: Array<PostApiWorkspaceServiceV1WorkspacesFiles> | undefined;
};

export const PostApiWorkspaceServiceV1WorkspacesTemplateType = {
  TemplateTypeUnspecified: "TEMPLATE_TYPE_UNSPECIFIED",
  TemplateTypeStandard: "TEMPLATE_TYPE_STANDARD",
  TemplateTypeSmart: "TEMPLATE_TYPE_SMART",
  TemplateTypeAdaptive: "TEMPLATE_TYPE_ADAPTIVE",
  TemplateTypeAiGenerated: "TEMPLATE_TYPE_AI_GENERATED",
} as const;
export type PostApiWorkspaceServiceV1WorkspacesTemplateType = ClosedEnum<
  typeof PostApiWorkspaceServiceV1WorkspacesTemplateType
>;

export type PostApiWorkspaceServiceV1WorkspacesVersions = {
  id?: string | undefined;
  templateId?: string | undefined;
  version?: string | undefined;
  baseContent?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  authorId?: string | undefined;
  changeDescription?: string | undefined;
  createdAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesVariables = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  variableType?: string | undefined;
  defaultValue?: string | undefined;
  isRequired?: boolean | undefined;
  validationRules?: string | undefined;
  dataSource?: string | undefined;
  aiExtractionRules?: string | undefined;
  alternatives?: Array<string> | undefined;
  templateId?: string | undefined;
};

export const PostApiWorkspaceServiceV1WorkspacesStatus = {
  DocumentStatusUnspecified: "DOCUMENT_STATUS_UNSPECIFIED",
  DocumentStatusDraft: "DOCUMENT_STATUS_DRAFT",
  DocumentStatusInReview: "DOCUMENT_STATUS_IN_REVIEW",
  DocumentStatusApproved: "DOCUMENT_STATUS_APPROVED",
  DocumentStatusRejected: "DOCUMENT_STATUS_REJECTED",
  DocumentStatusExpired: "DOCUMENT_STATUS_EXPIRED",
  DocumentStatusArchived: "DOCUMENT_STATUS_ARCHIVED",
} as const;
export type PostApiWorkspaceServiceV1WorkspacesStatus = ClosedEnum<
  typeof PostApiWorkspaceServiceV1WorkspacesStatus
>;

export const PostApiWorkspaceServiceV1WorkspacesWorkspacesStatus = {
  SignatureStatusUnspecified: "SIGNATURE_STATUS_UNSPECIFIED",
  SignatureStatusPending: "SIGNATURE_STATUS_PENDING",
  SignatureStatusSigned: "SIGNATURE_STATUS_SIGNED",
  SignatureStatusRejected: "SIGNATURE_STATUS_REJECTED",
  SignatureStatusExpired: "SIGNATURE_STATUS_EXPIRED",
  SignatureStatusRevoked: "SIGNATURE_STATUS_REVOKED",
} as const;
export type PostApiWorkspaceServiceV1WorkspacesWorkspacesStatus = ClosedEnum<
  typeof PostApiWorkspaceServiceV1WorkspacesWorkspacesStatus
>;

export type PostApiWorkspaceServiceV1WorkspacesSignatureBlocks = {
  id?: string | undefined;
  requestId?: string | undefined;
  blockType?: string | undefined;
  pageNumber?: number | undefined;
  xPosition?: number | undefined;
  yPosition?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
  isRequired?: boolean | undefined;
  signatureData?: string | undefined;
  signedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesWorkflow = {
  id?: string | undefined;
  requestId?: string | undefined;
  signingOrder?: Array<string> | undefined;
  currentSigner?: string | undefined;
  workflowStatus?: string | undefined;
  parallelSigning?: boolean | undefined;
  requireAllSignatures?: boolean | undefined;
  deadline?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesSignatureRequests = {
  id?: string | undefined;
  status?: PostApiWorkspaceServiceV1WorkspacesWorkspacesStatus | undefined;
  signerEmail?: string | undefined;
  signerName?: string | undefined;
  role?: string | undefined;
  authenticationMethod?: string | undefined;
  expiresAt?: Date | undefined;
  requiresMfa?: boolean | undefined;
  signatureType?: string | undefined;
  reminderSchedule?: Array<string> | undefined;
  documentId?: string | undefined;
  signatureBlocks?:
    | Array<PostApiWorkspaceServiceV1WorkspacesSignatureBlocks>
    | undefined;
  workflow?: PostApiWorkspaceServiceV1WorkspacesWorkflow | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesAiAssistance = {
  id?: string | undefined;
  documentId?: string | undefined;
  interactionType?: string | undefined;
  userQuery?: string | undefined;
  aiResponse?: string | undefined;
  context?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesRounds = {
  id?: string | undefined;
  historyId?: string | undefined;
  roundNumber?: number | undefined;
  proposerId?: string | undefined;
  proposalContent?: string | undefined;
  responseContent?: string | undefined;
  status?: string | undefined;
  createdAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesNegotiation = {
  id?: string | undefined;
  documentId?: string | undefined;
  rounds?: Array<PostApiWorkspaceServiceV1WorkspacesRounds> | undefined;
  currentStatus?: string | undefined;
  startedAt?: Date | undefined;
  lastUpdated?: Date | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesMerges = {
  id?: string | undefined;
  branchId?: string | undefined;
  sourceBranch?: string | undefined;
  targetBranch?: string | undefined;
  mergeStatus?: string | undefined;
  mergeStrategy?: string | undefined;
  conflicts?: Array<string> | undefined;
  mergerId?: string | undefined;
  createdAt?: Date | undefined;
  completedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesPolicy = {
  id?: string | undefined;
  branchId?: string | undefined;
  requiredApprovers?: Array<string> | undefined;
  minimumApprovals?: number | undefined;
  enforceLinearHistory?: boolean | undefined;
  allowForcePush?: boolean | undefined;
  protectedPaths?: Array<string> | undefined;
  mergeRules?: { [k: string]: string } | undefined;
  automatedChecks?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesMergeRequests = {
  id?: string | undefined;
  sourceBranchId?: string | undefined;
  targetBranchId?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  authorId?: string | undefined;
  reviewers?: Array<string> | undefined;
  status?: string | undefined;
  labels?: Array<string> | undefined;
  hasConflicts?: boolean | undefined;
  automatedCheckResults?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesBranches = {
  id?: string | undefined;
  name?: string | undefined;
  baseVersionHash?: string | undefined;
  currentHeadHash?: string | undefined;
  purpose?: string | undefined;
  status?: string | undefined;
  reviewers?: Array<string> | undefined;
  branchMetadata?: { [k: string]: string } | undefined;
  isLocked?: boolean | undefined;
  lastUpdated?: Date | undefined;
  merges?: Array<PostApiWorkspaceServiceV1WorkspacesMerges> | undefined;
  policy?: PostApiWorkspaceServiceV1WorkspacesPolicy | undefined;
  mergeRequests?:
    | Array<PostApiWorkspaceServiceV1WorkspacesMergeRequests>
    | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesChanges = {
  id?: string | undefined;
  versionId?: string | undefined;
  changeType?: string | undefined;
  contentBefore?: string | undefined;
  contentAfter?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesSummaries = {
  id?: string | undefined;
  versionId?: string | undefined;
  summaryType?: string | undefined;
  content?: string | undefined;
  targetAudience?: string | undefined;
  keyPoints?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions = {
  id?: string | undefined;
  versionHash?: string | undefined;
  parentHash?: string | undefined;
  commitMessage?: string | undefined;
  authorId?: string | undefined;
  branchName?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  tags?: Array<string> | undefined;
  isApproved?: boolean | undefined;
  approvalChain?: string | undefined;
  createdAt?: Date | undefined;
  branches?: Array<PostApiWorkspaceServiceV1WorkspacesBranches> | undefined;
  changes?: Array<PostApiWorkspaceServiceV1WorkspacesChanges> | undefined;
  summaries?: Array<PostApiWorkspaceServiceV1WorkspacesSummaries> | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesInstances = {
  id?: string | undefined;
  templateId?: string | undefined;
  status?: PostApiWorkspaceServiceV1WorkspacesStatus | undefined;
  fieldValues?: { [k: string]: string } | undefined;
  signers?: Array<string> | undefined;
  language?: string | undefined;
  isCompleted?: boolean | undefined;
  dueDate?: Date | undefined;
  generatedContent?: string | undefined;
  attachments?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  signatureRequests?:
    | Array<PostApiWorkspaceServiceV1WorkspacesSignatureRequests>
    | undefined;
  aiAssistance?:
    | Array<PostApiWorkspaceServiceV1WorkspacesAiAssistance>
    | undefined;
  negotiation?: PostApiWorkspaceServiceV1WorkspacesNegotiation | undefined;
  versions?:
    | Array<PostApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions>
    | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesExplanations = {
  id?: string | undefined;
  templateId?: string | undefined;
  sectionIdentifier?: string | undefined;
  explanationText?: string | undefined;
  complexityLevel?: string | undefined;
  relatedTerms?: Array<string> | undefined;
  legalReferences?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesRiskAssessments = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  riskType?: string | undefined;
  riskScore?: number | undefined;
  assessmentDetails?: string | undefined;
  mitigationSuggestions?: Array<string> | undefined;
  assessorId?: string | undefined;
  createdAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesComplianceChecks = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  complianceStandard?: string | undefined;
  checkResult?: string | undefined;
  violations?: Array<string> | undefined;
  remediationSteps?: string | undefined;
  checkDate?: Date | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesIntelligence = {
  id?: string | undefined;
  contractType?: string | undefined;
  riskScores?: { [k: string]: number } | undefined;
  detectedClauses?: { [k: string]: string } | undefined;
  keyObligations?: Array<string> | undefined;
  complianceScores?: { [k: string]: number } | undefined;
  jurisdiction?: string | undefined;
  governingLaws?: Array<string> | undefined;
  semanticAnalysis?: { [k: string]: string } | undefined;
  analysisDate?: Date | undefined;
  riskAssessments?:
    | Array<PostApiWorkspaceServiceV1WorkspacesRiskAssessments>
    | undefined;
  complianceChecks?:
    | Array<PostApiWorkspaceServiceV1WorkspacesComplianceChecks>
    | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesTemplates = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  industryType?: string | undefined;
  documentType?: string | undefined;
  baseContent?: string | undefined;
  isAdaptive?: boolean | undefined;
  metadata?: { [k: string]: string } | undefined;
  supportedLanguages?: Array<string> | undefined;
  requiredDataFields?: Array<string> | undefined;
  version?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  templateType?: PostApiWorkspaceServiceV1WorkspacesTemplateType | undefined;
  content?: string | undefined;
  detectedVariables?: Array<string> | undefined;
  variableMappings?: { [k: string]: string } | undefined;
  isContextAware?: boolean | undefined;
  supportedContexts?: Array<string> | undefined;
  formattingRules?: { [k: string]: string } | undefined;
  conditionalSections?: Array<string> | undefined;
  versions?: Array<PostApiWorkspaceServiceV1WorkspacesVersions> | undefined;
  variables?: Array<PostApiWorkspaceServiceV1WorkspacesVariables> | undefined;
  instances?: Array<PostApiWorkspaceServiceV1WorkspacesInstances> | undefined;
  explanations?:
    | Array<PostApiWorkspaceServiceV1WorkspacesExplanations>
    | undefined;
  intelligence?:
    | Array<PostApiWorkspaceServiceV1WorkspacesIntelligence>
    | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesSharing = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesActivities = {
  id?: string | undefined;
  activityType?: string | undefined;
  userId?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesCompliance = {
  id?: string | undefined;
  complianceType?: string | undefined;
  status?: string | undefined;
  certificationId?: string | undefined;
  validUntil?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export const PostApiWorkspaceServiceV1WorkspacesCategory = {
  AppCategoryUnspecified: "APP_CATEGORY_UNSPECIFIED",
  AppCategoryContractAutomation: "APP_CATEGORY_CONTRACT_AUTOMATION",
  AppCategoryContractAnalysis: "APP_CATEGORY_CONTRACT_ANALYSIS",
  AppCategoryIntegration: "APP_CATEGORY_INTEGRATION",
  AppCategoryAiPowered: "APP_CATEGORY_AI_POWERED",
  AppCategoryWorkflow: "APP_CATEGORY_WORKFLOW",
  AppCategoryCompliance: "APP_CATEGORY_COMPLIANCE",
} as const;
export type PostApiWorkspaceServiceV1WorkspacesCategory = ClosedEnum<
  typeof PostApiWorkspaceServiceV1WorkspacesCategory
>;

export const PostApiWorkspaceServiceV1WorkspacesPricingModel = {
  PricingModelUnspecified: "PRICING_MODEL_UNSPECIFIED",
  PricingModelFree: "PRICING_MODEL_FREE",
  PricingModelSubscription: "PRICING_MODEL_SUBSCRIPTION",
  PricingModelUsageBased: "PRICING_MODEL_USAGE_BASED",
  PricingModelEnterprise: "PRICING_MODEL_ENTERPRISE",
} as const;
export type PostApiWorkspaceServiceV1WorkspacesPricingModel = ClosedEnum<
  typeof PostApiWorkspaceServiceV1WorkspacesPricingModel
>;

export type PostApiWorkspaceServiceV1WorkspacesWorkspacesVersions = {
  id?: string | undefined;
  appId?: string | undefined;
  versionNumber?: string | undefined;
  changelog?: string | undefined;
  requirements?: { [k: string]: string } | undefined;
  isPublic?: boolean | undefined;
  releaseDate?: Date | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesInstallations = {
  id?: string | undefined;
  appId?: string | undefined;
  workspaceId?: string | undefined;
  versionInstalled?: string | undefined;
  configuration?: { [k: string]: string } | undefined;
  installationStatus?: string | undefined;
  installedAt?: Date | undefined;
  lastUsed?: Date | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesAnalytics = {
  id?: string | undefined;
  appId?: string | undefined;
  metricName?: string | undefined;
  metricValue?: number | undefined;
  dimensions?: { [k: string]: string } | undefined;
  recordedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesReviews = {
  id?: string | undefined;
  appId?: string | undefined;
  reviewerId?: string | undefined;
  rating?: number | undefined;
  reviewText?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesInfo = {
  id?: string | undefined;
  appId?: string | undefined;
  supportedLanguages?: Array<string> | undefined;
  sdkFeatures?: Array<string> | undefined;
  testCoverage?: { [k: string]: number } | undefined;
  securityScans?: Array<string> | undefined;
  performanceMetrics?: { [k: string]: string } | undefined;
  developmentStatus?: string | undefined;
  knownIssues?: Array<string> | undefined;
  roadmapUrl?: string | undefined;
  lastSecurityAudit?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesWebhooks = {
  id?: string | undefined;
  appId?: string | undefined;
  url?: string | undefined;
  subscribedEvents?: Array<string> | undefined;
  secretKey?: string | undefined;
  retryCount?: number | undefined;
  timeoutSeconds?: number | undefined;
  isActive?: boolean | undefined;
  headers?: { [k: string]: string } | undefined;
  lastTriggered?: Date | undefined;
  createdAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesPermissions = {
  id?: string | undefined;
  appId?: string | undefined;
  scope?: string | undefined;
  description?: string | undefined;
  isRequired?: boolean | undefined;
  accessLevels?: Array<string> | undefined;
  constraints?: { [k: string]: string } | undefined;
  requiresApproval?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesInstalledApps = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  developerId?: string | undefined;
  category?: PostApiWorkspaceServiceV1WorkspacesCategory | undefined;
  supportedContractTypes?: Array<string> | undefined;
  features?: Array<string> | undefined;
  pricingModel?: PostApiWorkspaceServiceV1WorkspacesPricingModel | undefined;
  pricingTiers?: { [k: string]: number } | undefined;
  supportedIntegrations?: Array<string> | undefined;
  isVerified?: boolean | undefined;
  rating?: number | undefined;
  installationCount?: number | undefined;
  requiredPermissions?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  documentationUrl?: string | undefined;
  supportEmail?: string | undefined;
  screenshots?: Array<string> | undefined;
  privacyPolicyUrl?: string | undefined;
  termsUrl?: string | undefined;
  publishedAt?: Date | undefined;
  lastUpdated?: Date | undefined;
  versions?:
    | Array<PostApiWorkspaceServiceV1WorkspacesWorkspacesVersions>
    | undefined;
  installations?:
    | Array<PostApiWorkspaceServiceV1WorkspacesInstallations>
    | undefined;
  analytics?: Array<PostApiWorkspaceServiceV1WorkspacesAnalytics> | undefined;
  reviews?: Array<PostApiWorkspaceServiceV1WorkspacesReviews> | undefined;
  info?: PostApiWorkspaceServiceV1WorkspacesInfo | undefined;
  webhooks?: Array<PostApiWorkspaceServiceV1WorkspacesWebhooks> | undefined;
  permissions?:
    | Array<PostApiWorkspaceServiceV1WorkspacesPermissions>
    | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesWorkspace = {
  id?: string | undefined;
  name?: string | undefined;
  uniqueIdentifier?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  storageQuota?: string | undefined;
  usedStorage?: string | undefined;
  allowPublicSharing?: boolean | undefined;
  requireApproval?: boolean | undefined;
  gdprCompliant?: boolean | undefined;
  hipaaCompliant?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  folders?: Array<PostApiWorkspaceServiceV1WorkspacesFolders> | undefined;
  templates?: Array<PostApiWorkspaceServiceV1WorkspacesTemplates> | undefined;
  sharing?: Array<PostApiWorkspaceServiceV1WorkspacesSharing> | undefined;
  activities?: Array<PostApiWorkspaceServiceV1WorkspacesActivities> | undefined;
  compliance?: Array<PostApiWorkspaceServiceV1WorkspacesCompliance> | undefined;
  installedApps?:
    | Array<PostApiWorkspaceServiceV1WorkspacesInstalledApps>
    | undefined;
};

export type PostApiWorkspaceServiceV1WorkspacesResponseBody = {
  workspace?: PostApiWorkspaceServiceV1WorkspacesWorkspace | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesRequestBody$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    accountId: z.string().optional(),
    name: z.string(),
    storageQuota: z.string().optional(),
    allowPublicSharing: z.boolean().optional(),
    requireApproval: z.boolean().optional(),
    gdprCompliant: z.boolean().optional(),
    hipaaCompliant: z.boolean().optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesRequestBody$Outbound = {
  accountId?: string | undefined;
  name: string;
  storageQuota?: string | undefined;
  allowPublicSharing?: boolean | undefined;
  requireApproval?: boolean | undefined;
  gdprCompliant?: boolean | undefined;
  hipaaCompliant?: boolean | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesRequestBody$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesRequestBody$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesRequestBody
  > = z.object({
    accountId: z.string().optional(),
    name: z.string(),
    storageQuota: z.string().optional(),
    allowPublicSharing: z.boolean().optional(),
    requireApproval: z.boolean().optional(),
    gdprCompliant: z.boolean().optional(),
    hipaaCompliant: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesRequestBody$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesRequestBody$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesRequestBody$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesRequestBody$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1WorkspacesRequestBody$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesRequestBodyToJSON(
  postApiWorkspaceServiceV1WorkspacesRequestBody:
    PostApiWorkspaceServiceV1WorkspacesRequestBody,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesRequestBody$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesRequestBody,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesRequestBody' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesEmbeddings$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesEmbeddings,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    embeddings: z.array(z.number()).optional(),
    modelVersion: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesEmbeddings$Outbound = {
  id?: string | undefined;
  embeddings?: Array<number> | undefined;
  modelVersion?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesEmbeddings$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesEmbeddings$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesEmbeddings
  > = z.object({
    id: z.string().optional(),
    embeddings: z.array(z.number()).optional(),
    modelVersion: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesEmbeddings$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesEmbeddings$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesEmbeddings$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesEmbeddings$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesEmbeddings$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesEmbeddings$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1WorkspacesEmbeddings$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesEmbeddingsToJSON(
  postApiWorkspaceServiceV1WorkspacesEmbeddings:
    PostApiWorkspaceServiceV1WorkspacesEmbeddings,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesEmbeddings$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesEmbeddings,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesEmbeddingsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesEmbeddings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesEmbeddings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesEmbeddings' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    versionNumber: z.number().int().optional(),
    s3Key: z.string().optional(),
    size: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$Outbound =
  {
    id?: string | undefined;
    fileId?: string | undefined;
    versionNumber?: number | undefined;
    s3Key?: string | undefined;
    size?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    createdAt?: string | undefined;
  };

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    versionNumber: z.number().int().optional(),
    s3Key: z.string().optional(),
    size: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesWorkspacesResponse200VersionsToJSON(
  postApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions:
    PostApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$outboundSchema
      .parse(postApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions),
  );
}

export function postApiWorkspaceServiceV1WorkspacesWorkspacesResponse200VersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesComments$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesComments,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    authorId: z.string().optional(),
    content: z.string().optional(),
    startPosition: z.number().int().optional(),
    endPosition: z.number().int().optional(),
    resolved: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesComments$Outbound = {
  id?: string | undefined;
  authorId?: string | undefined;
  content?: string | undefined;
  startPosition?: number | undefined;
  endPosition?: number | undefined;
  resolved?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesComments$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesComments$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesComments
  > = z.object({
    id: z.string().optional(),
    authorId: z.string().optional(),
    content: z.string().optional(),
    startPosition: z.number().int().optional(),
    endPosition: z.number().int().optional(),
    resolved: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesComments$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesComments$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesComments$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesComments$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesComments$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesComments$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1WorkspacesComments$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesCommentsToJSON(
  postApiWorkspaceServiceV1WorkspacesComments:
    PostApiWorkspaceServiceV1WorkspacesComments,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesComments$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesComments,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesCommentsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesComments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesComments$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesComments' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesWorkspacesSharing$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesWorkspacesSharing,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesWorkspacesSharing$Outbound = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesWorkspacesSharing$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesWorkspacesSharing$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesWorkspacesSharing
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesWorkspacesSharing$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesWorkspacesSharing$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesWorkspacesSharing$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesWorkspacesSharing$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesWorkspacesSharing$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesWorkspacesSharing$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1WorkspacesWorkspacesSharing$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesWorkspacesSharingToJSON(
  postApiWorkspaceServiceV1WorkspacesWorkspacesSharing:
    PostApiWorkspaceServiceV1WorkspacesWorkspacesSharing,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesWorkspacesSharing$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesWorkspacesSharing,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesWorkspacesSharingFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesWorkspacesSharing,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesWorkspacesSharing$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesWorkspacesSharing' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesSnapshots$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesSnapshots,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    snapshotHash: z.string().optional(),
    content: z.string().optional(),
    authorId: z.string().optional(),
    reason: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesSnapshots$Outbound = {
  id?: string | undefined;
  fileId?: string | undefined;
  snapshotHash?: string | undefined;
  content?: string | undefined;
  authorId?: string | undefined;
  reason?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesSnapshots$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesSnapshots$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesSnapshots
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    snapshotHash: z.string().optional(),
    content: z.string().optional(),
    authorId: z.string().optional(),
    reason: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesSnapshots$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesSnapshots$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesSnapshots$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesSnapshots$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesSnapshots$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesSnapshots$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1WorkspacesSnapshots$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesSnapshotsToJSON(
  postApiWorkspaceServiceV1WorkspacesSnapshots:
    PostApiWorkspaceServiceV1WorkspacesSnapshots,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesSnapshots$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesSnapshots,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesSnapshotsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesSnapshots,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesSnapshots$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesSnapshots' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesFiles$inboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1WorkspacesFiles,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  size: z.string().optional(),
  s3Key: z.string().optional(),
  s3BucketName: z.string().optional(),
  isDeleted: z.boolean().optional(),
  version: z.number().int().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  embeddings: z.lazy(() =>
    PostApiWorkspaceServiceV1WorkspacesEmbeddings$inboundSchema
  ).optional(),
  versions: z.array(
    z.lazy(() =>
      PostApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$inboundSchema
    ),
  ).optional(),
  comments: z.array(
    z.lazy(() => PostApiWorkspaceServiceV1WorkspacesComments$inboundSchema),
  ).optional(),
  sharing: z.array(
    z.lazy(() =>
      PostApiWorkspaceServiceV1WorkspacesWorkspacesSharing$inboundSchema
    ),
  ).optional(),
  snapshots: z.array(
    z.lazy(() => PostApiWorkspaceServiceV1WorkspacesSnapshots$inboundSchema),
  ).optional(),
});

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesFiles$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  size?: string | undefined;
  s3Key?: string | undefined;
  s3BucketName?: string | undefined;
  isDeleted?: boolean | undefined;
  version?: number | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  embeddings?:
    | PostApiWorkspaceServiceV1WorkspacesEmbeddings$Outbound
    | undefined;
  versions?:
    | Array<
      PostApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$Outbound
    >
    | undefined;
  comments?:
    | Array<PostApiWorkspaceServiceV1WorkspacesComments$Outbound>
    | undefined;
  sharing?:
    | Array<PostApiWorkspaceServiceV1WorkspacesWorkspacesSharing$Outbound>
    | undefined;
  snapshots?:
    | Array<PostApiWorkspaceServiceV1WorkspacesSnapshots$Outbound>
    | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesFiles$outboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1WorkspacesFiles$Outbound,
  z.ZodTypeDef,
  PostApiWorkspaceServiceV1WorkspacesFiles
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  size: z.string().optional(),
  s3Key: z.string().optional(),
  s3BucketName: z.string().optional(),
  isDeleted: z.boolean().optional(),
  version: z.number().int().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  deletedAt: z.date().transform(v => v.toISOString()).optional(),
  embeddings: z.lazy(() =>
    PostApiWorkspaceServiceV1WorkspacesEmbeddings$outboundSchema
  ).optional(),
  versions: z.array(
    z.lazy(() =>
      PostApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$outboundSchema
    ),
  ).optional(),
  comments: z.array(
    z.lazy(() => PostApiWorkspaceServiceV1WorkspacesComments$outboundSchema),
  ).optional(),
  sharing: z.array(
    z.lazy(() =>
      PostApiWorkspaceServiceV1WorkspacesWorkspacesSharing$outboundSchema
    ),
  ).optional(),
  snapshots: z.array(
    z.lazy(() => PostApiWorkspaceServiceV1WorkspacesSnapshots$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesFiles$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesFiles$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesFiles$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesFiles$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesFiles$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesFiles$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1WorkspacesFiles$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesFilesToJSON(
  postApiWorkspaceServiceV1WorkspacesFiles:
    PostApiWorkspaceServiceV1WorkspacesFiles,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesFiles$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesFiles,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesFilesFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesFiles,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesFiles$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesFiles' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesFolders$inboundSchema:
  z.ZodType<PostApiWorkspaceServiceV1WorkspacesFolders, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      s3BucketName: z.string().optional(),
      s3FolderPath: z.string().optional(),
      isDeleted: z.boolean().optional(),
      parentFolderId: z.string().optional(),
      createdAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      updatedAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      deletedAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      files: z.array(
        z.lazy(() => PostApiWorkspaceServiceV1WorkspacesFiles$inboundSchema),
      ).optional(),
    });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesFolders$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  isDeleted?: boolean | undefined;
  parentFolderId?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  files?: Array<PostApiWorkspaceServiceV1WorkspacesFiles$Outbound> | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesFolders$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesFolders$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesFolders
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    isDeleted: z.boolean().optional(),
    parentFolderId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    files: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesFiles$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesFolders$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesFolders$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesFolders$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesFolders$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesFolders$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesFolders$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1WorkspacesFolders$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesFoldersToJSON(
  postApiWorkspaceServiceV1WorkspacesFolders:
    PostApiWorkspaceServiceV1WorkspacesFolders,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesFolders$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesFolders,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesFoldersFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesFolders,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesFolders$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesFolders' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesTemplateType$inboundSchema:
  z.ZodNativeEnum<typeof PostApiWorkspaceServiceV1WorkspacesTemplateType> = z
    .nativeEnum(PostApiWorkspaceServiceV1WorkspacesTemplateType);

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesTemplateType$outboundSchema:
  z.ZodNativeEnum<typeof PostApiWorkspaceServiceV1WorkspacesTemplateType> =
    PostApiWorkspaceServiceV1WorkspacesTemplateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesTemplateType$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesTemplateType$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesTemplateType$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesTemplateType$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesTemplateType$outboundSchema;
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesVersions$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    version: z.string().optional(),
    baseContent: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    authorId: z.string().optional(),
    changeDescription: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesVersions$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  version?: string | undefined;
  baseContent?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  authorId?: string | undefined;
  changeDescription?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesVersions$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesVersions$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesVersions
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    version: z.string().optional(),
    baseContent: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    authorId: z.string().optional(),
    changeDescription: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesVersions$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesVersions$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesVersions$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesVersions$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesVersions$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesVersions$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1WorkspacesVersions$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesVersionsToJSON(
  postApiWorkspaceServiceV1WorkspacesVersions:
    PostApiWorkspaceServiceV1WorkspacesVersions,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesVersions$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesVersions,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesVersions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesVersions' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesVariables$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesVariables,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    variableType: z.string().optional(),
    defaultValue: z.string().optional(),
    isRequired: z.boolean().optional(),
    validationRules: z.string().optional(),
    dataSource: z.string().optional(),
    aiExtractionRules: z.string().optional(),
    alternatives: z.array(z.string()).optional(),
    templateId: z.string().optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesVariables$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  variableType?: string | undefined;
  defaultValue?: string | undefined;
  isRequired?: boolean | undefined;
  validationRules?: string | undefined;
  dataSource?: string | undefined;
  aiExtractionRules?: string | undefined;
  alternatives?: Array<string> | undefined;
  templateId?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesVariables$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesVariables$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesVariables
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    variableType: z.string().optional(),
    defaultValue: z.string().optional(),
    isRequired: z.boolean().optional(),
    validationRules: z.string().optional(),
    dataSource: z.string().optional(),
    aiExtractionRules: z.string().optional(),
    alternatives: z.array(z.string()).optional(),
    templateId: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesVariables$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesVariables$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesVariables$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesVariables$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesVariables$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesVariables$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1WorkspacesVariables$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesVariablesToJSON(
  postApiWorkspaceServiceV1WorkspacesVariables:
    PostApiWorkspaceServiceV1WorkspacesVariables,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesVariables$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesVariables,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesVariablesFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesVariables,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesVariables$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesVariables' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesStatus$inboundSchema:
  z.ZodNativeEnum<typeof PostApiWorkspaceServiceV1WorkspacesStatus> = z
    .nativeEnum(PostApiWorkspaceServiceV1WorkspacesStatus);

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesStatus$outboundSchema:
  z.ZodNativeEnum<typeof PostApiWorkspaceServiceV1WorkspacesStatus> =
    PostApiWorkspaceServiceV1WorkspacesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesStatus$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesStatus$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesStatus$outboundSchema;
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesWorkspacesStatus$inboundSchema:
  z.ZodNativeEnum<typeof PostApiWorkspaceServiceV1WorkspacesWorkspacesStatus> =
    z.nativeEnum(PostApiWorkspaceServiceV1WorkspacesWorkspacesStatus);

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesWorkspacesStatus$outboundSchema:
  z.ZodNativeEnum<typeof PostApiWorkspaceServiceV1WorkspacesWorkspacesStatus> =
    PostApiWorkspaceServiceV1WorkspacesWorkspacesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesWorkspacesStatus$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesWorkspacesStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesWorkspacesStatus$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesWorkspacesStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesWorkspacesStatus$outboundSchema;
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesSignatureBlocks$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesSignatureBlocks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    blockType: z.string().optional(),
    pageNumber: z.number().int().optional(),
    xPosition: z.number().optional(),
    yPosition: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    isRequired: z.boolean().optional(),
    signatureData: z.string().optional(),
    signedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesSignatureBlocks$Outbound = {
  id?: string | undefined;
  requestId?: string | undefined;
  blockType?: string | undefined;
  pageNumber?: number | undefined;
  xPosition?: number | undefined;
  yPosition?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
  isRequired?: boolean | undefined;
  signatureData?: string | undefined;
  signedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesSignatureBlocks$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesSignatureBlocks$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesSignatureBlocks
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    blockType: z.string().optional(),
    pageNumber: z.number().int().optional(),
    xPosition: z.number().optional(),
    yPosition: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    isRequired: z.boolean().optional(),
    signatureData: z.string().optional(),
    signedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesSignatureBlocks$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesSignatureBlocks$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesSignatureBlocks$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesSignatureBlocks$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesSignatureBlocks$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesSignatureBlocks$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1WorkspacesSignatureBlocks$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesSignatureBlocksToJSON(
  postApiWorkspaceServiceV1WorkspacesSignatureBlocks:
    PostApiWorkspaceServiceV1WorkspacesSignatureBlocks,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesSignatureBlocks$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesSignatureBlocks,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesSignatureBlocksFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesSignatureBlocks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesSignatureBlocks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesSignatureBlocks' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesWorkflow$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesWorkflow,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    signingOrder: z.array(z.string()).optional(),
    currentSigner: z.string().optional(),
    workflowStatus: z.string().optional(),
    parallelSigning: z.boolean().optional(),
    requireAllSignatures: z.boolean().optional(),
    deadline: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesWorkflow$Outbound = {
  id?: string | undefined;
  requestId?: string | undefined;
  signingOrder?: Array<string> | undefined;
  currentSigner?: string | undefined;
  workflowStatus?: string | undefined;
  parallelSigning?: boolean | undefined;
  requireAllSignatures?: boolean | undefined;
  deadline?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesWorkflow$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesWorkflow$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesWorkflow
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    signingOrder: z.array(z.string()).optional(),
    currentSigner: z.string().optional(),
    workflowStatus: z.string().optional(),
    parallelSigning: z.boolean().optional(),
    requireAllSignatures: z.boolean().optional(),
    deadline: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesWorkflow$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesWorkflow$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesWorkflow$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesWorkflow$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesWorkflow$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesWorkflow$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1WorkspacesWorkflow$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesWorkflowToJSON(
  postApiWorkspaceServiceV1WorkspacesWorkflow:
    PostApiWorkspaceServiceV1WorkspacesWorkflow,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesWorkflow$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesWorkflow,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesWorkflowFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesWorkflow,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesWorkflow$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesWorkflow' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesSignatureRequests$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesSignatureRequests,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    status: PostApiWorkspaceServiceV1WorkspacesWorkspacesStatus$inboundSchema
      .default("SIGNATURE_STATUS_UNSPECIFIED"),
    signerEmail: z.string().optional(),
    signerName: z.string().optional(),
    role: z.string().optional(),
    authenticationMethod: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    requiresMfa: z.boolean().optional(),
    signatureType: z.string().optional(),
    reminderSchedule: z.array(z.string()).optional(),
    documentId: z.string().optional(),
    signatureBlocks: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1WorkspacesSignatureBlocks$inboundSchema
      ),
    ).optional(),
    workflow: z.lazy(() =>
      PostApiWorkspaceServiceV1WorkspacesWorkflow$inboundSchema
    ).optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesSignatureRequests$Outbound = {
  id?: string | undefined;
  status: string;
  signerEmail?: string | undefined;
  signerName?: string | undefined;
  role?: string | undefined;
  authenticationMethod?: string | undefined;
  expiresAt?: string | undefined;
  requiresMfa?: boolean | undefined;
  signatureType?: string | undefined;
  reminderSchedule?: Array<string> | undefined;
  documentId?: string | undefined;
  signatureBlocks?:
    | Array<PostApiWorkspaceServiceV1WorkspacesSignatureBlocks$Outbound>
    | undefined;
  workflow?: PostApiWorkspaceServiceV1WorkspacesWorkflow$Outbound | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesSignatureRequests$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesSignatureRequests$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesSignatureRequests
  > = z.object({
    id: z.string().optional(),
    status: PostApiWorkspaceServiceV1WorkspacesWorkspacesStatus$outboundSchema
      .default("SIGNATURE_STATUS_UNSPECIFIED"),
    signerEmail: z.string().optional(),
    signerName: z.string().optional(),
    role: z.string().optional(),
    authenticationMethod: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    requiresMfa: z.boolean().optional(),
    signatureType: z.string().optional(),
    reminderSchedule: z.array(z.string()).optional(),
    documentId: z.string().optional(),
    signatureBlocks: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1WorkspacesSignatureBlocks$outboundSchema
      ),
    ).optional(),
    workflow: z.lazy(() =>
      PostApiWorkspaceServiceV1WorkspacesWorkflow$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesSignatureRequests$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesSignatureRequests$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesSignatureRequests$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesSignatureRequests$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesSignatureRequests$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesSignatureRequests$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1WorkspacesSignatureRequests$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesSignatureRequestsToJSON(
  postApiWorkspaceServiceV1WorkspacesSignatureRequests:
    PostApiWorkspaceServiceV1WorkspacesSignatureRequests,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesSignatureRequests$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesSignatureRequests,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesSignatureRequestsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesSignatureRequests,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesSignatureRequests$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesSignatureRequests' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesAiAssistance$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesAiAssistance,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    interactionType: z.string().optional(),
    userQuery: z.string().optional(),
    aiResponse: z.string().optional(),
    context: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesAiAssistance$Outbound = {
  id?: string | undefined;
  documentId?: string | undefined;
  interactionType?: string | undefined;
  userQuery?: string | undefined;
  aiResponse?: string | undefined;
  context?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesAiAssistance$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesAiAssistance$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesAiAssistance
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    interactionType: z.string().optional(),
    userQuery: z.string().optional(),
    aiResponse: z.string().optional(),
    context: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesAiAssistance$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesAiAssistance$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesAiAssistance$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesAiAssistance$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesAiAssistance$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesAiAssistance$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1WorkspacesAiAssistance$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesAiAssistanceToJSON(
  postApiWorkspaceServiceV1WorkspacesAiAssistance:
    PostApiWorkspaceServiceV1WorkspacesAiAssistance,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesAiAssistance$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesAiAssistance,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesAiAssistanceFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesAiAssistance,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesAiAssistance$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesAiAssistance' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesRounds$inboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1WorkspacesRounds,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  historyId: z.string().optional(),
  roundNumber: z.number().int().optional(),
  proposerId: z.string().optional(),
  proposalContent: z.string().optional(),
  responseContent: z.string().optional(),
  status: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesRounds$Outbound = {
  id?: string | undefined;
  historyId?: string | undefined;
  roundNumber?: number | undefined;
  proposerId?: string | undefined;
  proposalContent?: string | undefined;
  responseContent?: string | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesRounds$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesRounds$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesRounds
  > = z.object({
    id: z.string().optional(),
    historyId: z.string().optional(),
    roundNumber: z.number().int().optional(),
    proposerId: z.string().optional(),
    proposalContent: z.string().optional(),
    responseContent: z.string().optional(),
    status: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesRounds$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesRounds$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesRounds$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesRounds$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesRounds$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesRounds$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1WorkspacesRounds$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesRoundsToJSON(
  postApiWorkspaceServiceV1WorkspacesRounds:
    PostApiWorkspaceServiceV1WorkspacesRounds,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesRounds$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesRounds,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesRoundsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesRounds,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesRounds$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesRounds' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesNegotiation$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesNegotiation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    rounds: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesRounds$inboundSchema),
    ).optional(),
    currentStatus: z.string().optional(),
    startedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesNegotiation$Outbound = {
  id?: string | undefined;
  documentId?: string | undefined;
  rounds?:
    | Array<PostApiWorkspaceServiceV1WorkspacesRounds$Outbound>
    | undefined;
  currentStatus?: string | undefined;
  startedAt?: string | undefined;
  lastUpdated?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesNegotiation$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesNegotiation$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesNegotiation
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    rounds: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesRounds$outboundSchema),
    ).optional(),
    currentStatus: z.string().optional(),
    startedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesNegotiation$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesNegotiation$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesNegotiation$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesNegotiation$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesNegotiation$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesNegotiation$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1WorkspacesNegotiation$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesNegotiationToJSON(
  postApiWorkspaceServiceV1WorkspacesNegotiation:
    PostApiWorkspaceServiceV1WorkspacesNegotiation,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesNegotiation$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesNegotiation,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesNegotiationFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesNegotiation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesNegotiation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesNegotiation' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesMerges$inboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1WorkspacesMerges,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  branchId: z.string().optional(),
  sourceBranch: z.string().optional(),
  targetBranch: z.string().optional(),
  mergeStatus: z.string().optional(),
  mergeStrategy: z.string().optional(),
  conflicts: z.array(z.string()).optional(),
  mergerId: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  completedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesMerges$Outbound = {
  id?: string | undefined;
  branchId?: string | undefined;
  sourceBranch?: string | undefined;
  targetBranch?: string | undefined;
  mergeStatus?: string | undefined;
  mergeStrategy?: string | undefined;
  conflicts?: Array<string> | undefined;
  mergerId?: string | undefined;
  createdAt?: string | undefined;
  completedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesMerges$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesMerges$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesMerges
  > = z.object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    sourceBranch: z.string().optional(),
    targetBranch: z.string().optional(),
    mergeStatus: z.string().optional(),
    mergeStrategy: z.string().optional(),
    conflicts: z.array(z.string()).optional(),
    mergerId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    completedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesMerges$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesMerges$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesMerges$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesMerges$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesMerges$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesMerges$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1WorkspacesMerges$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesMergesToJSON(
  postApiWorkspaceServiceV1WorkspacesMerges:
    PostApiWorkspaceServiceV1WorkspacesMerges,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesMerges$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesMerges,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesMergesFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesMerges,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesMerges$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesMerges' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesPolicy$inboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1WorkspacesPolicy,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  branchId: z.string().optional(),
  requiredApprovers: z.array(z.string()).optional(),
  minimumApprovals: z.number().int().optional(),
  enforceLinearHistory: z.boolean().optional(),
  allowForcePush: z.boolean().optional(),
  protectedPaths: z.array(z.string()).optional(),
  mergeRules: z.record(z.string()).optional(),
  automatedChecks: z.array(z.string()).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesPolicy$Outbound = {
  id?: string | undefined;
  branchId?: string | undefined;
  requiredApprovers?: Array<string> | undefined;
  minimumApprovals?: number | undefined;
  enforceLinearHistory?: boolean | undefined;
  allowForcePush?: boolean | undefined;
  protectedPaths?: Array<string> | undefined;
  mergeRules?: { [k: string]: string } | undefined;
  automatedChecks?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesPolicy$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesPolicy$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesPolicy
  > = z.object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    requiredApprovers: z.array(z.string()).optional(),
    minimumApprovals: z.number().int().optional(),
    enforceLinearHistory: z.boolean().optional(),
    allowForcePush: z.boolean().optional(),
    protectedPaths: z.array(z.string()).optional(),
    mergeRules: z.record(z.string()).optional(),
    automatedChecks: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesPolicy$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesPolicy$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesPolicy$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesPolicy$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesPolicy$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesPolicy$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1WorkspacesPolicy$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesPolicyToJSON(
  postApiWorkspaceServiceV1WorkspacesPolicy:
    PostApiWorkspaceServiceV1WorkspacesPolicy,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesPolicy$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesPolicy,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesPolicyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesPolicy,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesPolicy$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesPolicy' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesMergeRequests$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesMergeRequests,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sourceBranchId: z.string().optional(),
    targetBranchId: z.string().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    authorId: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    status: z.string().optional(),
    labels: z.array(z.string()).optional(),
    hasConflicts: z.boolean().optional(),
    automatedCheckResults: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesMergeRequests$Outbound = {
  id?: string | undefined;
  sourceBranchId?: string | undefined;
  targetBranchId?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  authorId?: string | undefined;
  reviewers?: Array<string> | undefined;
  status?: string | undefined;
  labels?: Array<string> | undefined;
  hasConflicts?: boolean | undefined;
  automatedCheckResults?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesMergeRequests$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesMergeRequests$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesMergeRequests
  > = z.object({
    id: z.string().optional(),
    sourceBranchId: z.string().optional(),
    targetBranchId: z.string().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    authorId: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    status: z.string().optional(),
    labels: z.array(z.string()).optional(),
    hasConflicts: z.boolean().optional(),
    automatedCheckResults: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesMergeRequests$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesMergeRequests$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesMergeRequests$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesMergeRequests$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesMergeRequests$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesMergeRequests$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1WorkspacesMergeRequests$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesMergeRequestsToJSON(
  postApiWorkspaceServiceV1WorkspacesMergeRequests:
    PostApiWorkspaceServiceV1WorkspacesMergeRequests,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesMergeRequests$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesMergeRequests,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesMergeRequestsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesMergeRequests,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesMergeRequests$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesMergeRequests' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesBranches$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesBranches,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    baseVersionHash: z.string().optional(),
    currentHeadHash: z.string().optional(),
    purpose: z.string().optional(),
    status: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    branchMetadata: z.record(z.string()).optional(),
    isLocked: z.boolean().optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    merges: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesMerges$inboundSchema),
    ).optional(),
    policy: z.lazy(() =>
      PostApiWorkspaceServiceV1WorkspacesPolicy$inboundSchema
    ).optional(),
    mergeRequests: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1WorkspacesMergeRequests$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesBranches$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  baseVersionHash?: string | undefined;
  currentHeadHash?: string | undefined;
  purpose?: string | undefined;
  status?: string | undefined;
  reviewers?: Array<string> | undefined;
  branchMetadata?: { [k: string]: string } | undefined;
  isLocked?: boolean | undefined;
  lastUpdated?: string | undefined;
  merges?:
    | Array<PostApiWorkspaceServiceV1WorkspacesMerges$Outbound>
    | undefined;
  policy?: PostApiWorkspaceServiceV1WorkspacesPolicy$Outbound | undefined;
  mergeRequests?:
    | Array<PostApiWorkspaceServiceV1WorkspacesMergeRequests$Outbound>
    | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesBranches$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesBranches$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesBranches
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    baseVersionHash: z.string().optional(),
    currentHeadHash: z.string().optional(),
    purpose: z.string().optional(),
    status: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    branchMetadata: z.record(z.string()).optional(),
    isLocked: z.boolean().optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
    merges: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesMerges$outboundSchema),
    ).optional(),
    policy: z.lazy(() =>
      PostApiWorkspaceServiceV1WorkspacesPolicy$outboundSchema
    ).optional(),
    mergeRequests: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1WorkspacesMergeRequests$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesBranches$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesBranches$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesBranches$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesBranches$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesBranches$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesBranches$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1WorkspacesBranches$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesBranchesToJSON(
  postApiWorkspaceServiceV1WorkspacesBranches:
    PostApiWorkspaceServiceV1WorkspacesBranches,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesBranches$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesBranches,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesBranchesFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesBranches,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesBranches$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesBranches' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesChanges$inboundSchema:
  z.ZodType<PostApiWorkspaceServiceV1WorkspacesChanges, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      versionId: z.string().optional(),
      changeType: z.string().optional(),
      contentBefore: z.string().optional(),
      contentAfter: z.string().optional(),
      metadata: z.record(z.string()).optional(),
      createdAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
    });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesChanges$Outbound = {
  id?: string | undefined;
  versionId?: string | undefined;
  changeType?: string | undefined;
  contentBefore?: string | undefined;
  contentAfter?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesChanges$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesChanges$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesChanges
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    changeType: z.string().optional(),
    contentBefore: z.string().optional(),
    contentAfter: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesChanges$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesChanges$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesChanges$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesChanges$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesChanges$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesChanges$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1WorkspacesChanges$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesChangesToJSON(
  postApiWorkspaceServiceV1WorkspacesChanges:
    PostApiWorkspaceServiceV1WorkspacesChanges,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesChanges$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesChanges,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesChangesFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesChanges,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesChanges$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesChanges' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesSummaries$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesSummaries,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    summaryType: z.string().optional(),
    content: z.string().optional(),
    targetAudience: z.string().optional(),
    keyPoints: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesSummaries$Outbound = {
  id?: string | undefined;
  versionId?: string | undefined;
  summaryType?: string | undefined;
  content?: string | undefined;
  targetAudience?: string | undefined;
  keyPoints?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesSummaries$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesSummaries$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesSummaries
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    summaryType: z.string().optional(),
    content: z.string().optional(),
    targetAudience: z.string().optional(),
    keyPoints: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesSummaries$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesSummaries$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesSummaries$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesSummaries$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesSummaries$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesSummaries$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1WorkspacesSummaries$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesSummariesToJSON(
  postApiWorkspaceServiceV1WorkspacesSummaries:
    PostApiWorkspaceServiceV1WorkspacesSummaries,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesSummaries$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesSummaries,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesSummariesFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesSummaries,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesSummaries$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesSummaries' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionHash: z.string().optional(),
    parentHash: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    branchName: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    isApproved: z.boolean().optional(),
    approvalChain: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    branches: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesBranches$inboundSchema),
    ).optional(),
    changes: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesChanges$inboundSchema),
    ).optional(),
    summaries: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesSummaries$inboundSchema),
    ).optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$Outbound =
  {
    id?: string | undefined;
    versionHash?: string | undefined;
    parentHash?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    branchName?: string | undefined;
    metadata?: { [k: string]: string } | undefined;
    tags?: Array<string> | undefined;
    isApproved?: boolean | undefined;
    approvalChain?: string | undefined;
    createdAt?: string | undefined;
    branches?:
      | Array<PostApiWorkspaceServiceV1WorkspacesBranches$Outbound>
      | undefined;
    changes?:
      | Array<PostApiWorkspaceServiceV1WorkspacesChanges$Outbound>
      | undefined;
    summaries?:
      | Array<PostApiWorkspaceServiceV1WorkspacesSummaries$Outbound>
      | undefined;
  };

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions
  > = z.object({
    id: z.string().optional(),
    versionHash: z.string().optional(),
    parentHash: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    branchName: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    isApproved: z.boolean().optional(),
    approvalChain: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    branches: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesBranches$outboundSchema),
    ).optional(),
    changes: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesChanges$outboundSchema),
    ).optional(),
    summaries: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesSummaries$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersionsToJSON(
  postApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions:
    PostApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$outboundSchema
      .parse(postApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions),
  );
}

export function postApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesInstances$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesInstances,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    status: PostApiWorkspaceServiceV1WorkspacesStatus$inboundSchema.default(
      "DOCUMENT_STATUS_UNSPECIFIED",
    ),
    fieldValues: z.record(z.string()).optional(),
    signers: z.array(z.string()).optional(),
    language: z.string().optional(),
    isCompleted: z.boolean().optional(),
    dueDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    generatedContent: z.string().optional(),
    attachments: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    signatureRequests: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1WorkspacesSignatureRequests$inboundSchema
      ),
    ).optional(),
    aiAssistance: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1WorkspacesAiAssistance$inboundSchema
      ),
    ).optional(),
    negotiation: z.lazy(() =>
      PostApiWorkspaceServiceV1WorkspacesNegotiation$inboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesInstances$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  status: string;
  fieldValues?: { [k: string]: string } | undefined;
  signers?: Array<string> | undefined;
  language?: string | undefined;
  isCompleted?: boolean | undefined;
  dueDate?: string | undefined;
  generatedContent?: string | undefined;
  attachments?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  signatureRequests?:
    | Array<PostApiWorkspaceServiceV1WorkspacesSignatureRequests$Outbound>
    | undefined;
  aiAssistance?:
    | Array<PostApiWorkspaceServiceV1WorkspacesAiAssistance$Outbound>
    | undefined;
  negotiation?:
    | PostApiWorkspaceServiceV1WorkspacesNegotiation$Outbound
    | undefined;
  versions?:
    | Array<
      PostApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$Outbound
    >
    | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesInstances$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesInstances$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesInstances
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    status: PostApiWorkspaceServiceV1WorkspacesStatus$outboundSchema.default(
      "DOCUMENT_STATUS_UNSPECIFIED",
    ),
    fieldValues: z.record(z.string()).optional(),
    signers: z.array(z.string()).optional(),
    language: z.string().optional(),
    isCompleted: z.boolean().optional(),
    dueDate: z.date().transform(v => v.toISOString()).optional(),
    generatedContent: z.string().optional(),
    attachments: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    signatureRequests: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1WorkspacesSignatureRequests$outboundSchema
      ),
    ).optional(),
    aiAssistance: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1WorkspacesAiAssistance$outboundSchema
      ),
    ).optional(),
    negotiation: z.lazy(() =>
      PostApiWorkspaceServiceV1WorkspacesNegotiation$outboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesInstances$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesInstances$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesInstances$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesInstances$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesInstances$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesInstances$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1WorkspacesInstances$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesInstancesToJSON(
  postApiWorkspaceServiceV1WorkspacesInstances:
    PostApiWorkspaceServiceV1WorkspacesInstances,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesInstances$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesInstances,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesInstancesFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesInstances,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesInstances$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesInstances' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesExplanations$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesExplanations,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    sectionIdentifier: z.string().optional(),
    explanationText: z.string().optional(),
    complexityLevel: z.string().optional(),
    relatedTerms: z.array(z.string()).optional(),
    legalReferences: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesExplanations$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  sectionIdentifier?: string | undefined;
  explanationText?: string | undefined;
  complexityLevel?: string | undefined;
  relatedTerms?: Array<string> | undefined;
  legalReferences?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesExplanations$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesExplanations$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesExplanations
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    sectionIdentifier: z.string().optional(),
    explanationText: z.string().optional(),
    complexityLevel: z.string().optional(),
    relatedTerms: z.array(z.string()).optional(),
    legalReferences: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesExplanations$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesExplanations$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesExplanations$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesExplanations$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesExplanations$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesExplanations$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1WorkspacesExplanations$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesExplanationsToJSON(
  postApiWorkspaceServiceV1WorkspacesExplanations:
    PostApiWorkspaceServiceV1WorkspacesExplanations,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesExplanations$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesExplanations,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesExplanationsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesExplanations,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesExplanations$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesExplanations' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesRiskAssessments$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesRiskAssessments,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    riskType: z.string().optional(),
    riskScore: z.number().optional(),
    assessmentDetails: z.string().optional(),
    mitigationSuggestions: z.array(z.string()).optional(),
    assessorId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesRiskAssessments$Outbound = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  riskType?: string | undefined;
  riskScore?: number | undefined;
  assessmentDetails?: string | undefined;
  mitigationSuggestions?: Array<string> | undefined;
  assessorId?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesRiskAssessments$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesRiskAssessments$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesRiskAssessments
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    riskType: z.string().optional(),
    riskScore: z.number().optional(),
    assessmentDetails: z.string().optional(),
    mitigationSuggestions: z.array(z.string()).optional(),
    assessorId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesRiskAssessments$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesRiskAssessments$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesRiskAssessments$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesRiskAssessments$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesRiskAssessments$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesRiskAssessments$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1WorkspacesRiskAssessments$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesRiskAssessmentsToJSON(
  postApiWorkspaceServiceV1WorkspacesRiskAssessments:
    PostApiWorkspaceServiceV1WorkspacesRiskAssessments,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesRiskAssessments$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesRiskAssessments,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesRiskAssessmentsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesRiskAssessments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesRiskAssessments$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesRiskAssessments' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesComplianceChecks$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesComplianceChecks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    complianceStandard: z.string().optional(),
    checkResult: z.string().optional(),
    violations: z.array(z.string()).optional(),
    remediationSteps: z.string().optional(),
    checkDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesComplianceChecks$Outbound = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  complianceStandard?: string | undefined;
  checkResult?: string | undefined;
  violations?: Array<string> | undefined;
  remediationSteps?: string | undefined;
  checkDate?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesComplianceChecks$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesComplianceChecks$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesComplianceChecks
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    complianceStandard: z.string().optional(),
    checkResult: z.string().optional(),
    violations: z.array(z.string()).optional(),
    remediationSteps: z.string().optional(),
    checkDate: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesComplianceChecks$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesComplianceChecks$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesComplianceChecks$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesComplianceChecks$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesComplianceChecks$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesComplianceChecks$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1WorkspacesComplianceChecks$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesComplianceChecksToJSON(
  postApiWorkspaceServiceV1WorkspacesComplianceChecks:
    PostApiWorkspaceServiceV1WorkspacesComplianceChecks,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesComplianceChecks$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesComplianceChecks,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesComplianceChecksFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesComplianceChecks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesComplianceChecks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesComplianceChecks' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesIntelligence$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesIntelligence,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    contractType: z.string().optional(),
    riskScores: z.record(z.number()).optional(),
    detectedClauses: z.record(z.string()).optional(),
    keyObligations: z.array(z.string()).optional(),
    complianceScores: z.record(z.number()).optional(),
    jurisdiction: z.string().optional(),
    governingLaws: z.array(z.string()).optional(),
    semanticAnalysis: z.record(z.string()).optional(),
    analysisDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    riskAssessments: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1WorkspacesRiskAssessments$inboundSchema
      ),
    ).optional(),
    complianceChecks: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1WorkspacesComplianceChecks$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesIntelligence$Outbound = {
  id?: string | undefined;
  contractType?: string | undefined;
  riskScores?: { [k: string]: number } | undefined;
  detectedClauses?: { [k: string]: string } | undefined;
  keyObligations?: Array<string> | undefined;
  complianceScores?: { [k: string]: number } | undefined;
  jurisdiction?: string | undefined;
  governingLaws?: Array<string> | undefined;
  semanticAnalysis?: { [k: string]: string } | undefined;
  analysisDate?: string | undefined;
  riskAssessments?:
    | Array<PostApiWorkspaceServiceV1WorkspacesRiskAssessments$Outbound>
    | undefined;
  complianceChecks?:
    | Array<PostApiWorkspaceServiceV1WorkspacesComplianceChecks$Outbound>
    | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesIntelligence$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesIntelligence$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesIntelligence
  > = z.object({
    id: z.string().optional(),
    contractType: z.string().optional(),
    riskScores: z.record(z.number()).optional(),
    detectedClauses: z.record(z.string()).optional(),
    keyObligations: z.array(z.string()).optional(),
    complianceScores: z.record(z.number()).optional(),
    jurisdiction: z.string().optional(),
    governingLaws: z.array(z.string()).optional(),
    semanticAnalysis: z.record(z.string()).optional(),
    analysisDate: z.date().transform(v => v.toISOString()).optional(),
    riskAssessments: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1WorkspacesRiskAssessments$outboundSchema
      ),
    ).optional(),
    complianceChecks: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1WorkspacesComplianceChecks$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesIntelligence$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesIntelligence$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesIntelligence$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesIntelligence$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesIntelligence$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesIntelligence$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1WorkspacesIntelligence$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesIntelligenceToJSON(
  postApiWorkspaceServiceV1WorkspacesIntelligence:
    PostApiWorkspaceServiceV1WorkspacesIntelligence,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesIntelligence$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesIntelligence,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesIntelligenceFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesIntelligence,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesIntelligence$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesIntelligence' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesTemplates$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesTemplates,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    industryType: z.string().optional(),
    documentType: z.string().optional(),
    baseContent: z.string().optional(),
    isAdaptive: z.boolean().optional(),
    metadata: z.record(z.string()).optional(),
    supportedLanguages: z.array(z.string()).optional(),
    requiredDataFields: z.array(z.string()).optional(),
    version: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    templateType: PostApiWorkspaceServiceV1WorkspacesTemplateType$inboundSchema
      .default("TEMPLATE_TYPE_UNSPECIFIED"),
    content: z.string().optional(),
    detectedVariables: z.array(z.string()).optional(),
    variableMappings: z.record(z.string()).optional(),
    isContextAware: z.boolean().optional(),
    supportedContexts: z.array(z.string()).optional(),
    formattingRules: z.record(z.string()).optional(),
    conditionalSections: z.array(z.string()).optional(),
    versions: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesVersions$inboundSchema),
    ).optional(),
    variables: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesVariables$inboundSchema),
    ).optional(),
    instances: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesInstances$inboundSchema),
    ).optional(),
    explanations: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1WorkspacesExplanations$inboundSchema
      ),
    ).optional(),
    intelligence: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1WorkspacesIntelligence$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesTemplates$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  industryType?: string | undefined;
  documentType?: string | undefined;
  baseContent?: string | undefined;
  isAdaptive?: boolean | undefined;
  metadata?: { [k: string]: string } | undefined;
  supportedLanguages?: Array<string> | undefined;
  requiredDataFields?: Array<string> | undefined;
  version?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  templateType: string;
  content?: string | undefined;
  detectedVariables?: Array<string> | undefined;
  variableMappings?: { [k: string]: string } | undefined;
  isContextAware?: boolean | undefined;
  supportedContexts?: Array<string> | undefined;
  formattingRules?: { [k: string]: string } | undefined;
  conditionalSections?: Array<string> | undefined;
  versions?:
    | Array<PostApiWorkspaceServiceV1WorkspacesVersions$Outbound>
    | undefined;
  variables?:
    | Array<PostApiWorkspaceServiceV1WorkspacesVariables$Outbound>
    | undefined;
  instances?:
    | Array<PostApiWorkspaceServiceV1WorkspacesInstances$Outbound>
    | undefined;
  explanations?:
    | Array<PostApiWorkspaceServiceV1WorkspacesExplanations$Outbound>
    | undefined;
  intelligence?:
    | Array<PostApiWorkspaceServiceV1WorkspacesIntelligence$Outbound>
    | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesTemplates$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesTemplates$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesTemplates
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    industryType: z.string().optional(),
    documentType: z.string().optional(),
    baseContent: z.string().optional(),
    isAdaptive: z.boolean().optional(),
    metadata: z.record(z.string()).optional(),
    supportedLanguages: z.array(z.string()).optional(),
    requiredDataFields: z.array(z.string()).optional(),
    version: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    templateType: PostApiWorkspaceServiceV1WorkspacesTemplateType$outboundSchema
      .default("TEMPLATE_TYPE_UNSPECIFIED"),
    content: z.string().optional(),
    detectedVariables: z.array(z.string()).optional(),
    variableMappings: z.record(z.string()).optional(),
    isContextAware: z.boolean().optional(),
    supportedContexts: z.array(z.string()).optional(),
    formattingRules: z.record(z.string()).optional(),
    conditionalSections: z.array(z.string()).optional(),
    versions: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesVersions$outboundSchema),
    ).optional(),
    variables: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesVariables$outboundSchema),
    ).optional(),
    instances: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesInstances$outboundSchema),
    ).optional(),
    explanations: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1WorkspacesExplanations$outboundSchema
      ),
    ).optional(),
    intelligence: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1WorkspacesIntelligence$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesTemplates$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesTemplates$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesTemplates$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesTemplates$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesTemplates$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesTemplates$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1WorkspacesTemplates$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesTemplatesToJSON(
  postApiWorkspaceServiceV1WorkspacesTemplates:
    PostApiWorkspaceServiceV1WorkspacesTemplates,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesTemplates$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesTemplates,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesTemplatesFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesTemplates,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesTemplates$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesTemplates' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesSharing$inboundSchema:
  z.ZodType<PostApiWorkspaceServiceV1WorkspacesSharing, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      sharedWithEmail: z.string().optional(),
      permissionLevel: z.string().optional(),
      expiresAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      createdAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      updatedAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
    });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesSharing$Outbound = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesSharing$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesSharing$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesSharing
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesSharing$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesSharing$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesSharing$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesSharing$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesSharing$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesSharing$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1WorkspacesSharing$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesSharingToJSON(
  postApiWorkspaceServiceV1WorkspacesSharing:
    PostApiWorkspaceServiceV1WorkspacesSharing,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesSharing$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesSharing,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesSharingFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesSharing,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesSharing$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesSharing' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesActivities$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesActivities,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    activityType: z.string().optional(),
    userId: z.string().optional(),
    description: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesActivities$Outbound = {
  id?: string | undefined;
  activityType?: string | undefined;
  userId?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesActivities$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesActivities$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesActivities
  > = z.object({
    id: z.string().optional(),
    activityType: z.string().optional(),
    userId: z.string().optional(),
    description: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesActivities$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesActivities$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesActivities$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesActivities$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesActivities$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesActivities$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1WorkspacesActivities$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesActivitiesToJSON(
  postApiWorkspaceServiceV1WorkspacesActivities:
    PostApiWorkspaceServiceV1WorkspacesActivities,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesActivities$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesActivities,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesActivitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesActivities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesActivities$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesActivities' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesCompliance$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesCompliance,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    complianceType: z.string().optional(),
    status: z.string().optional(),
    certificationId: z.string().optional(),
    validUntil: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesCompliance$Outbound = {
  id?: string | undefined;
  complianceType?: string | undefined;
  status?: string | undefined;
  certificationId?: string | undefined;
  validUntil?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesCompliance$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesCompliance$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesCompliance
  > = z.object({
    id: z.string().optional(),
    complianceType: z.string().optional(),
    status: z.string().optional(),
    certificationId: z.string().optional(),
    validUntil: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesCompliance$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesCompliance$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesCompliance$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesCompliance$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesCompliance$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesCompliance$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1WorkspacesCompliance$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesComplianceToJSON(
  postApiWorkspaceServiceV1WorkspacesCompliance:
    PostApiWorkspaceServiceV1WorkspacesCompliance,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesCompliance$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesCompliance,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesComplianceFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesCompliance,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesCompliance$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesCompliance' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesCategory$inboundSchema:
  z.ZodNativeEnum<typeof PostApiWorkspaceServiceV1WorkspacesCategory> = z
    .nativeEnum(PostApiWorkspaceServiceV1WorkspacesCategory);

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesCategory$outboundSchema:
  z.ZodNativeEnum<typeof PostApiWorkspaceServiceV1WorkspacesCategory> =
    PostApiWorkspaceServiceV1WorkspacesCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesCategory$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesCategory$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesCategory$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesCategory$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesCategory$outboundSchema;
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesPricingModel$inboundSchema:
  z.ZodNativeEnum<typeof PostApiWorkspaceServiceV1WorkspacesPricingModel> = z
    .nativeEnum(PostApiWorkspaceServiceV1WorkspacesPricingModel);

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesPricingModel$outboundSchema:
  z.ZodNativeEnum<typeof PostApiWorkspaceServiceV1WorkspacesPricingModel> =
    PostApiWorkspaceServiceV1WorkspacesPricingModel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesPricingModel$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesPricingModel$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesPricingModel$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesPricingModel$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesPricingModel$outboundSchema;
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesWorkspacesVersions$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesWorkspacesVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    versionNumber: z.string().optional(),
    changelog: z.string().optional(),
    requirements: z.record(z.string()).optional(),
    isPublic: z.boolean().optional(),
    releaseDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesWorkspacesVersions$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  versionNumber?: string | undefined;
  changelog?: string | undefined;
  requirements?: { [k: string]: string } | undefined;
  isPublic?: boolean | undefined;
  releaseDate?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesWorkspacesVersions$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesWorkspacesVersions$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesWorkspacesVersions
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    versionNumber: z.string().optional(),
    changelog: z.string().optional(),
    requirements: z.record(z.string()).optional(),
    isPublic: z.boolean().optional(),
    releaseDate: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesWorkspacesVersions$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesWorkspacesVersions$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesWorkspacesVersions$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesWorkspacesVersions$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesWorkspacesVersions$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesWorkspacesVersions$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1WorkspacesWorkspacesVersions$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesWorkspacesVersionsToJSON(
  postApiWorkspaceServiceV1WorkspacesWorkspacesVersions:
    PostApiWorkspaceServiceV1WorkspacesWorkspacesVersions,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesWorkspacesVersions$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesWorkspacesVersions,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesWorkspacesVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesWorkspacesVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesWorkspacesVersions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesWorkspacesVersions' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesInstallations$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesInstallations,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    workspaceId: z.string().optional(),
    versionInstalled: z.string().optional(),
    configuration: z.record(z.string()).optional(),
    installationStatus: z.string().optional(),
    installedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    lastUsed: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesInstallations$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  workspaceId?: string | undefined;
  versionInstalled?: string | undefined;
  configuration?: { [k: string]: string } | undefined;
  installationStatus?: string | undefined;
  installedAt?: string | undefined;
  lastUsed?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesInstallations$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesInstallations$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesInstallations
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    workspaceId: z.string().optional(),
    versionInstalled: z.string().optional(),
    configuration: z.record(z.string()).optional(),
    installationStatus: z.string().optional(),
    installedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUsed: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesInstallations$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesInstallations$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesInstallations$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesInstallations$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesInstallations$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesInstallations$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1WorkspacesInstallations$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesInstallationsToJSON(
  postApiWorkspaceServiceV1WorkspacesInstallations:
    PostApiWorkspaceServiceV1WorkspacesInstallations,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesInstallations$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesInstallations,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesInstallationsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesInstallations,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesInstallations$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesInstallations' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesAnalytics$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesAnalytics,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    metricName: z.string().optional(),
    metricValue: z.number().optional(),
    dimensions: z.record(z.string()).optional(),
    recordedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesAnalytics$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  metricName?: string | undefined;
  metricValue?: number | undefined;
  dimensions?: { [k: string]: string } | undefined;
  recordedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesAnalytics$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesAnalytics$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesAnalytics
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    metricName: z.string().optional(),
    metricValue: z.number().optional(),
    dimensions: z.record(z.string()).optional(),
    recordedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesAnalytics$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesAnalytics$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesAnalytics$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesAnalytics$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesAnalytics$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesAnalytics$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1WorkspacesAnalytics$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesAnalyticsToJSON(
  postApiWorkspaceServiceV1WorkspacesAnalytics:
    PostApiWorkspaceServiceV1WorkspacesAnalytics,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesAnalytics$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesAnalytics,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesAnalytics,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesAnalytics$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesAnalytics' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesReviews$inboundSchema:
  z.ZodType<PostApiWorkspaceServiceV1WorkspacesReviews, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      appId: z.string().optional(),
      reviewerId: z.string().optional(),
      rating: z.number().optional(),
      reviewText: z.string().optional(),
      createdAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      updatedAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
    });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesReviews$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  reviewerId?: string | undefined;
  rating?: number | undefined;
  reviewText?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesReviews$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesReviews$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesReviews
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    reviewerId: z.string().optional(),
    rating: z.number().optional(),
    reviewText: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesReviews$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesReviews$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesReviews$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesReviews$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesReviews$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesReviews$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1WorkspacesReviews$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesReviewsToJSON(
  postApiWorkspaceServiceV1WorkspacesReviews:
    PostApiWorkspaceServiceV1WorkspacesReviews,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesReviews$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesReviews,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesReviewsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesReviews,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesReviews$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesReviews' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesInfo$inboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1WorkspacesInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  appId: z.string().optional(),
  supportedLanguages: z.array(z.string()).optional(),
  sdkFeatures: z.array(z.string()).optional(),
  testCoverage: z.record(z.number()).optional(),
  securityScans: z.array(z.string()).optional(),
  performanceMetrics: z.record(z.string()).optional(),
  developmentStatus: z.string().optional(),
  knownIssues: z.array(z.string()).optional(),
  roadmapUrl: z.string().optional(),
  lastSecurityAudit: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesInfo$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  supportedLanguages?: Array<string> | undefined;
  sdkFeatures?: Array<string> | undefined;
  testCoverage?: { [k: string]: number } | undefined;
  securityScans?: Array<string> | undefined;
  performanceMetrics?: { [k: string]: string } | undefined;
  developmentStatus?: string | undefined;
  knownIssues?: Array<string> | undefined;
  roadmapUrl?: string | undefined;
  lastSecurityAudit?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesInfo$outboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1WorkspacesInfo$Outbound,
  z.ZodTypeDef,
  PostApiWorkspaceServiceV1WorkspacesInfo
> = z.object({
  id: z.string().optional(),
  appId: z.string().optional(),
  supportedLanguages: z.array(z.string()).optional(),
  sdkFeatures: z.array(z.string()).optional(),
  testCoverage: z.record(z.number()).optional(),
  securityScans: z.array(z.string()).optional(),
  performanceMetrics: z.record(z.string()).optional(),
  developmentStatus: z.string().optional(),
  knownIssues: z.array(z.string()).optional(),
  roadmapUrl: z.string().optional(),
  lastSecurityAudit: z.date().transform(v => v.toISOString()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesInfo$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesInfo$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesInfo$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesInfo$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesInfo$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesInfo$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1WorkspacesInfo$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesInfoToJSON(
  postApiWorkspaceServiceV1WorkspacesInfo:
    PostApiWorkspaceServiceV1WorkspacesInfo,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesInfo$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesInfo,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesInfoFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesInfo,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesInfo$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesInfo' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesWebhooks$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesWebhooks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    url: z.string().optional(),
    subscribedEvents: z.array(z.string()).optional(),
    secretKey: z.string().optional(),
    retryCount: z.number().int().optional(),
    timeoutSeconds: z.number().int().optional(),
    isActive: z.boolean().optional(),
    headers: z.record(z.string()).optional(),
    lastTriggered: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesWebhooks$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  url?: string | undefined;
  subscribedEvents?: Array<string> | undefined;
  secretKey?: string | undefined;
  retryCount?: number | undefined;
  timeoutSeconds?: number | undefined;
  isActive?: boolean | undefined;
  headers?: { [k: string]: string } | undefined;
  lastTriggered?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesWebhooks$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesWebhooks$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesWebhooks
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    url: z.string().optional(),
    subscribedEvents: z.array(z.string()).optional(),
    secretKey: z.string().optional(),
    retryCount: z.number().int().optional(),
    timeoutSeconds: z.number().int().optional(),
    isActive: z.boolean().optional(),
    headers: z.record(z.string()).optional(),
    lastTriggered: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesWebhooks$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesWebhooks$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesWebhooks$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesWebhooks$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesWebhooks$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesWebhooks$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1WorkspacesWebhooks$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesWebhooksToJSON(
  postApiWorkspaceServiceV1WorkspacesWebhooks:
    PostApiWorkspaceServiceV1WorkspacesWebhooks,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesWebhooks$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesWebhooks,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesWebhooksFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesWebhooks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesWebhooks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesWebhooks' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesPermissions$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesPermissions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    scope: z.string().optional(),
    description: z.string().optional(),
    isRequired: z.boolean().optional(),
    accessLevels: z.array(z.string()).optional(),
    constraints: z.record(z.string()).optional(),
    requiresApproval: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesPermissions$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  scope?: string | undefined;
  description?: string | undefined;
  isRequired?: boolean | undefined;
  accessLevels?: Array<string> | undefined;
  constraints?: { [k: string]: string } | undefined;
  requiresApproval?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesPermissions$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesPermissions$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesPermissions
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    scope: z.string().optional(),
    description: z.string().optional(),
    isRequired: z.boolean().optional(),
    accessLevels: z.array(z.string()).optional(),
    constraints: z.record(z.string()).optional(),
    requiresApproval: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesPermissions$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesPermissions$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesPermissions$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesPermissions$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesPermissions$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesPermissions$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1WorkspacesPermissions$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesPermissionsToJSON(
  postApiWorkspaceServiceV1WorkspacesPermissions:
    PostApiWorkspaceServiceV1WorkspacesPermissions,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesPermissions$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesPermissions,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesPermissionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesPermissions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesPermissions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesPermissions' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesInstalledApps$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesInstalledApps,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    developerId: z.string().optional(),
    category: PostApiWorkspaceServiceV1WorkspacesCategory$inboundSchema.default(
      "APP_CATEGORY_UNSPECIFIED",
    ),
    supportedContractTypes: z.array(z.string()).optional(),
    features: z.array(z.string()).optional(),
    pricingModel: PostApiWorkspaceServiceV1WorkspacesPricingModel$inboundSchema
      .default("PRICING_MODEL_UNSPECIFIED"),
    pricingTiers: z.record(z.number()).optional(),
    supportedIntegrations: z.array(z.string()).optional(),
    isVerified: z.boolean().optional(),
    rating: z.number().optional(),
    installationCount: z.number().int().optional(),
    requiredPermissions: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    documentationUrl: z.string().optional(),
    supportEmail: z.string().optional(),
    screenshots: z.array(z.string()).optional(),
    privacyPolicyUrl: z.string().optional(),
    termsUrl: z.string().optional(),
    publishedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1WorkspacesWorkspacesVersions$inboundSchema
      ),
    ).optional(),
    installations: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1WorkspacesInstallations$inboundSchema
      ),
    ).optional(),
    analytics: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesAnalytics$inboundSchema),
    ).optional(),
    reviews: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesReviews$inboundSchema),
    ).optional(),
    info: z.lazy(() => PostApiWorkspaceServiceV1WorkspacesInfo$inboundSchema)
      .optional(),
    webhooks: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesWebhooks$inboundSchema),
    ).optional(),
    permissions: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1WorkspacesPermissions$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesInstalledApps$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  developerId?: string | undefined;
  category: string;
  supportedContractTypes?: Array<string> | undefined;
  features?: Array<string> | undefined;
  pricingModel: string;
  pricingTiers?: { [k: string]: number } | undefined;
  supportedIntegrations?: Array<string> | undefined;
  isVerified?: boolean | undefined;
  rating?: number | undefined;
  installationCount?: number | undefined;
  requiredPermissions?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  documentationUrl?: string | undefined;
  supportEmail?: string | undefined;
  screenshots?: Array<string> | undefined;
  privacyPolicyUrl?: string | undefined;
  termsUrl?: string | undefined;
  publishedAt?: string | undefined;
  lastUpdated?: string | undefined;
  versions?:
    | Array<PostApiWorkspaceServiceV1WorkspacesWorkspacesVersions$Outbound>
    | undefined;
  installations?:
    | Array<PostApiWorkspaceServiceV1WorkspacesInstallations$Outbound>
    | undefined;
  analytics?:
    | Array<PostApiWorkspaceServiceV1WorkspacesAnalytics$Outbound>
    | undefined;
  reviews?:
    | Array<PostApiWorkspaceServiceV1WorkspacesReviews$Outbound>
    | undefined;
  info?: PostApiWorkspaceServiceV1WorkspacesInfo$Outbound | undefined;
  webhooks?:
    | Array<PostApiWorkspaceServiceV1WorkspacesWebhooks$Outbound>
    | undefined;
  permissions?:
    | Array<PostApiWorkspaceServiceV1WorkspacesPermissions$Outbound>
    | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesInstalledApps$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesInstalledApps$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesInstalledApps
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    developerId: z.string().optional(),
    category: PostApiWorkspaceServiceV1WorkspacesCategory$outboundSchema
      .default("APP_CATEGORY_UNSPECIFIED"),
    supportedContractTypes: z.array(z.string()).optional(),
    features: z.array(z.string()).optional(),
    pricingModel: PostApiWorkspaceServiceV1WorkspacesPricingModel$outboundSchema
      .default("PRICING_MODEL_UNSPECIFIED"),
    pricingTiers: z.record(z.number()).optional(),
    supportedIntegrations: z.array(z.string()).optional(),
    isVerified: z.boolean().optional(),
    rating: z.number().optional(),
    installationCount: z.number().int().optional(),
    requiredPermissions: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    documentationUrl: z.string().optional(),
    supportEmail: z.string().optional(),
    screenshots: z.array(z.string()).optional(),
    privacyPolicyUrl: z.string().optional(),
    termsUrl: z.string().optional(),
    publishedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
    versions: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1WorkspacesWorkspacesVersions$outboundSchema
      ),
    ).optional(),
    installations: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1WorkspacesInstallations$outboundSchema
      ),
    ).optional(),
    analytics: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesAnalytics$outboundSchema),
    ).optional(),
    reviews: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesReviews$outboundSchema),
    ).optional(),
    info: z.lazy(() => PostApiWorkspaceServiceV1WorkspacesInfo$outboundSchema)
      .optional(),
    webhooks: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesWebhooks$outboundSchema),
    ).optional(),
    permissions: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1WorkspacesPermissions$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesInstalledApps$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesInstalledApps$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesInstalledApps$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesInstalledApps$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesInstalledApps$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesInstalledApps$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1WorkspacesInstalledApps$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesInstalledAppsToJSON(
  postApiWorkspaceServiceV1WorkspacesInstalledApps:
    PostApiWorkspaceServiceV1WorkspacesInstalledApps,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesInstalledApps$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesInstalledApps,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesInstalledAppsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesInstalledApps,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesInstalledApps$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesInstalledApps' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesWorkspace$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesWorkspace,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    uniqueIdentifier: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    storageQuota: z.string().optional(),
    usedStorage: z.string().optional(),
    allowPublicSharing: z.boolean().optional(),
    requireApproval: z.boolean().optional(),
    gdprCompliant: z.boolean().optional(),
    hipaaCompliant: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    folders: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesFolders$inboundSchema),
    ).optional(),
    templates: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesTemplates$inboundSchema),
    ).optional(),
    sharing: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesSharing$inboundSchema),
    ).optional(),
    activities: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesActivities$inboundSchema),
    ).optional(),
    compliance: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesCompliance$inboundSchema),
    ).optional(),
    installedApps: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1WorkspacesInstalledApps$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesWorkspace$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  uniqueIdentifier?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  storageQuota?: string | undefined;
  usedStorage?: string | undefined;
  allowPublicSharing?: boolean | undefined;
  requireApproval?: boolean | undefined;
  gdprCompliant?: boolean | undefined;
  hipaaCompliant?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  folders?:
    | Array<PostApiWorkspaceServiceV1WorkspacesFolders$Outbound>
    | undefined;
  templates?:
    | Array<PostApiWorkspaceServiceV1WorkspacesTemplates$Outbound>
    | undefined;
  sharing?:
    | Array<PostApiWorkspaceServiceV1WorkspacesSharing$Outbound>
    | undefined;
  activities?:
    | Array<PostApiWorkspaceServiceV1WorkspacesActivities$Outbound>
    | undefined;
  compliance?:
    | Array<PostApiWorkspaceServiceV1WorkspacesCompliance$Outbound>
    | undefined;
  installedApps?:
    | Array<PostApiWorkspaceServiceV1WorkspacesInstalledApps$Outbound>
    | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesWorkspace$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesWorkspace$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesWorkspace
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    uniqueIdentifier: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    storageQuota: z.string().optional(),
    usedStorage: z.string().optional(),
    allowPublicSharing: z.boolean().optional(),
    requireApproval: z.boolean().optional(),
    gdprCompliant: z.boolean().optional(),
    hipaaCompliant: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    folders: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesFolders$outboundSchema),
    ).optional(),
    templates: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesTemplates$outboundSchema),
    ).optional(),
    sharing: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1WorkspacesSharing$outboundSchema),
    ).optional(),
    activities: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1WorkspacesActivities$outboundSchema
      ),
    ).optional(),
    compliance: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1WorkspacesCompliance$outboundSchema
      ),
    ).optional(),
    installedApps: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1WorkspacesInstalledApps$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesWorkspace$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesWorkspace$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesWorkspace$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesWorkspace$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesWorkspace$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesWorkspace$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1WorkspacesWorkspace$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesWorkspaceToJSON(
  postApiWorkspaceServiceV1WorkspacesWorkspace:
    PostApiWorkspaceServiceV1WorkspacesWorkspace,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesWorkspace$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesWorkspace,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesWorkspaceFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesWorkspace,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesWorkspace$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesWorkspace' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesResponseBody$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    workspace: z.lazy(() =>
      PostApiWorkspaceServiceV1WorkspacesWorkspace$inboundSchema
    ).optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1WorkspacesResponseBody$Outbound = {
  workspace?: PostApiWorkspaceServiceV1WorkspacesWorkspace$Outbound | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1WorkspacesResponseBody$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1WorkspacesResponseBody$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1WorkspacesResponseBody
  > = z.object({
    workspace: z.lazy(() =>
      PostApiWorkspaceServiceV1WorkspacesWorkspace$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1WorkspacesResponseBody$ {
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1WorkspacesResponseBody$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1WorkspacesResponseBody$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1WorkspacesResponseBody$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1WorkspacesResponseBody$Outbound;
}

export function postApiWorkspaceServiceV1WorkspacesResponseBodyToJSON(
  postApiWorkspaceServiceV1WorkspacesResponseBody:
    PostApiWorkspaceServiceV1WorkspacesResponseBody,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1WorkspacesResponseBody$outboundSchema.parse(
      postApiWorkspaceServiceV1WorkspacesResponseBody,
    ),
  );
}

export function postApiWorkspaceServiceV1WorkspacesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1WorkspacesResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1WorkspacesResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1WorkspacesResponseBody' from JSON`,
  );
}
