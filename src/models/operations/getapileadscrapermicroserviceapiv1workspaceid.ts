/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdRequest = {
  id: string;
  organizationId?: string | undefined;
  tenantId?: string | undefined;
  accountId?: string | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdEmbeddings = {
  id?: string | undefined;
  embeddings?: Array<number> | undefined;
  modelVersion?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponse200Versions =
  {
    id?: string | undefined;
    fileId?: string | undefined;
    versionNumber?: number | undefined;
    s3Key?: string | undefined;
    size?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    createdAt?: Date | undefined;
  };

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdComments = {
  id?: string | undefined;
  authorId?: string | undefined;
  content?: string | undefined;
  startPosition?: number | undefined;
  endPosition?: number | undefined;
  resolved?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesSharing = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdSnapshots = {
  id?: string | undefined;
  fileId?: string | undefined;
  snapshotHash?: string | undefined;
  content?: string | undefined;
  authorId?: string | undefined;
  reason?: string | undefined;
  createdAt?: Date | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdFiles = {
  id?: string | undefined;
  name?: string | undefined;
  size?: string | undefined;
  s3Key?: string | undefined;
  s3BucketName?: string | undefined;
  isDeleted?: boolean | undefined;
  version?: number | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  embeddings?:
    | GetApiLeadScraperMicroserviceApiV1WorkspaceIdEmbeddings
    | undefined;
  versions?:
    | Array<
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponse200Versions
    >
    | undefined;
  comments?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdComments>
    | undefined;
  sharing?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesSharing>
    | undefined;
  snapshots?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdSnapshots>
    | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdFolders = {
  id?: string | undefined;
  name?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  isDeleted?: boolean | undefined;
  parentFolderId?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  files?: Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdFiles> | undefined;
};

export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplateType = {
  TemplateTypeUnspecified: "TEMPLATE_TYPE_UNSPECIFIED",
  TemplateTypeStandard: "TEMPLATE_TYPE_STANDARD",
  TemplateTypeSmart: "TEMPLATE_TYPE_SMART",
  TemplateTypeAdaptive: "TEMPLATE_TYPE_ADAPTIVE",
  TemplateTypeAiGenerated: "TEMPLATE_TYPE_AI_GENERATED",
} as const;
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplateType =
  ClosedEnum<typeof GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplateType>;

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdVersions = {
  id?: string | undefined;
  templateId?: string | undefined;
  version?: string | undefined;
  baseContent?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  authorId?: string | undefined;
  changeDescription?: string | undefined;
  createdAt?: Date | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdVariables = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  variableType?: string | undefined;
  defaultValue?: string | undefined;
  isRequired?: boolean | undefined;
  validationRules?: string | undefined;
  dataSource?: string | undefined;
  aiExtractionRules?: string | undefined;
  alternatives?: Array<string> | undefined;
  templateId?: string | undefined;
};

export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdStatus = {
  DocumentStatusUnspecified: "DOCUMENT_STATUS_UNSPECIFIED",
  DocumentStatusDraft: "DOCUMENT_STATUS_DRAFT",
  DocumentStatusInReview: "DOCUMENT_STATUS_IN_REVIEW",
  DocumentStatusApproved: "DOCUMENT_STATUS_APPROVED",
  DocumentStatusRejected: "DOCUMENT_STATUS_REJECTED",
  DocumentStatusExpired: "DOCUMENT_STATUS_EXPIRED",
  DocumentStatusArchived: "DOCUMENT_STATUS_ARCHIVED",
} as const;
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdStatus = ClosedEnum<
  typeof GetApiLeadScraperMicroserviceApiV1WorkspaceIdStatus
>;

export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesStatus = {
  SignatureStatusUnspecified: "SIGNATURE_STATUS_UNSPECIFIED",
  SignatureStatusPending: "SIGNATURE_STATUS_PENDING",
  SignatureStatusSigned: "SIGNATURE_STATUS_SIGNED",
  SignatureStatusRejected: "SIGNATURE_STATUS_REJECTED",
  SignatureStatusExpired: "SIGNATURE_STATUS_EXPIRED",
  SignatureStatusRevoked: "SIGNATURE_STATUS_REVOKED",
} as const;
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesStatus =
  ClosedEnum<
    typeof GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesStatus
  >;

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureBlocks = {
  id?: string | undefined;
  requestId?: string | undefined;
  blockType?: string | undefined;
  pageNumber?: number | undefined;
  xPosition?: number | undefined;
  yPosition?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
  isRequired?: boolean | undefined;
  signatureData?: string | undefined;
  signedAt?: Date | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkflow = {
  id?: string | undefined;
  requestId?: string | undefined;
  signingOrder?: Array<string> | undefined;
  currentSigner?: string | undefined;
  workflowStatus?: string | undefined;
  parallelSigning?: boolean | undefined;
  requireAllSignatures?: boolean | undefined;
  deadline?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureRequests = {
  id?: string | undefined;
  status?:
    | GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesStatus
    | undefined;
  signerEmail?: string | undefined;
  signerName?: string | undefined;
  role?: string | undefined;
  authenticationMethod?: string | undefined;
  expiresAt?: Date | undefined;
  requiresMfa?: boolean | undefined;
  signatureType?: string | undefined;
  reminderSchedule?: Array<string> | undefined;
  documentId?: string | undefined;
  signatureBlocks?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureBlocks>
    | undefined;
  workflow?: GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkflow | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdAiAssistance = {
  id?: string | undefined;
  documentId?: string | undefined;
  interactionType?: string | undefined;
  userQuery?: string | undefined;
  aiResponse?: string | undefined;
  context?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdRounds = {
  id?: string | undefined;
  historyId?: string | undefined;
  roundNumber?: number | undefined;
  proposerId?: string | undefined;
  proposalContent?: string | undefined;
  responseContent?: string | undefined;
  status?: string | undefined;
  createdAt?: Date | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdNegotiation = {
  id?: string | undefined;
  documentId?: string | undefined;
  rounds?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdRounds>
    | undefined;
  currentStatus?: string | undefined;
  startedAt?: Date | undefined;
  lastUpdated?: Date | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdMerges = {
  id?: string | undefined;
  branchId?: string | undefined;
  sourceBranch?: string | undefined;
  targetBranch?: string | undefined;
  mergeStatus?: string | undefined;
  mergeStrategy?: string | undefined;
  conflicts?: Array<string> | undefined;
  mergerId?: string | undefined;
  createdAt?: Date | undefined;
  completedAt?: Date | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdPolicy = {
  id?: string | undefined;
  branchId?: string | undefined;
  requiredApprovers?: Array<string> | undefined;
  minimumApprovals?: number | undefined;
  enforceLinearHistory?: boolean | undefined;
  allowForcePush?: boolean | undefined;
  protectedPaths?: Array<string> | undefined;
  mergeRules?: { [k: string]: string } | undefined;
  automatedChecks?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdMergeRequests = {
  id?: string | undefined;
  sourceBranchId?: string | undefined;
  targetBranchId?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  authorId?: string | undefined;
  reviewers?: Array<string> | undefined;
  status?: string | undefined;
  labels?: Array<string> | undefined;
  hasConflicts?: boolean | undefined;
  automatedCheckResults?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdBranches = {
  id?: string | undefined;
  name?: string | undefined;
  baseVersionHash?: string | undefined;
  currentHeadHash?: string | undefined;
  purpose?: string | undefined;
  status?: string | undefined;
  reviewers?: Array<string> | undefined;
  branchMetadata?: { [k: string]: string } | undefined;
  isLocked?: boolean | undefined;
  lastUpdated?: Date | undefined;
  merges?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdMerges>
    | undefined;
  policy?: GetApiLeadScraperMicroserviceApiV1WorkspaceIdPolicy | undefined;
  mergeRequests?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdMergeRequests>
    | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdChanges = {
  id?: string | undefined;
  versionId?: string | undefined;
  changeType?: string | undefined;
  contentBefore?: string | undefined;
  contentAfter?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdSummaries = {
  id?: string | undefined;
  versionId?: string | undefined;
  summaryType?: string | undefined;
  content?: string | undefined;
  targetAudience?: string | undefined;
  keyPoints?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponseVersions =
  {
    id?: string | undefined;
    versionHash?: string | undefined;
    parentHash?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    branchName?: string | undefined;
    metadata?: { [k: string]: string } | undefined;
    tags?: Array<string> | undefined;
    isApproved?: boolean | undefined;
    approvalChain?: string | undefined;
    createdAt?: Date | undefined;
    branches?:
      | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdBranches>
      | undefined;
    changes?:
      | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdChanges>
      | undefined;
    summaries?:
      | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdSummaries>
      | undefined;
  };

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstances = {
  id?: string | undefined;
  templateId?: string | undefined;
  status?: GetApiLeadScraperMicroserviceApiV1WorkspaceIdStatus | undefined;
  fieldValues?: { [k: string]: string } | undefined;
  signers?: Array<string> | undefined;
  language?: string | undefined;
  isCompleted?: boolean | undefined;
  dueDate?: Date | undefined;
  generatedContent?: string | undefined;
  attachments?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  signatureRequests?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureRequests>
    | undefined;
  aiAssistance?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdAiAssistance>
    | undefined;
  negotiation?:
    | GetApiLeadScraperMicroserviceApiV1WorkspaceIdNegotiation
    | undefined;
  versions?:
    | Array<
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponseVersions
    >
    | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdExplanations = {
  id?: string | undefined;
  templateId?: string | undefined;
  sectionIdentifier?: string | undefined;
  explanationText?: string | undefined;
  complexityLevel?: string | undefined;
  relatedTerms?: Array<string> | undefined;
  legalReferences?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdRiskAssessments = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  riskType?: string | undefined;
  riskScore?: number | undefined;
  assessmentDetails?: string | undefined;
  mitigationSuggestions?: Array<string> | undefined;
  assessorId?: string | undefined;
  createdAt?: Date | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceChecks = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  complianceStandard?: string | undefined;
  checkResult?: string | undefined;
  violations?: Array<string> | undefined;
  remediationSteps?: string | undefined;
  checkDate?: Date | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdIntelligence = {
  id?: string | undefined;
  contractType?: string | undefined;
  riskScores?: { [k: string]: number } | undefined;
  detectedClauses?: { [k: string]: string } | undefined;
  keyObligations?: Array<string> | undefined;
  complianceScores?: { [k: string]: number } | undefined;
  jurisdiction?: string | undefined;
  governingLaws?: Array<string> | undefined;
  semanticAnalysis?: { [k: string]: string } | undefined;
  analysisDate?: Date | undefined;
  riskAssessments?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdRiskAssessments>
    | undefined;
  complianceChecks?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceChecks>
    | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplates = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  industryType?: string | undefined;
  documentType?: string | undefined;
  baseContent?: string | undefined;
  isAdaptive?: boolean | undefined;
  metadata?: { [k: string]: string } | undefined;
  supportedLanguages?: Array<string> | undefined;
  requiredDataFields?: Array<string> | undefined;
  version?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  templateType?:
    | GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplateType
    | undefined;
  content?: string | undefined;
  detectedVariables?: Array<string> | undefined;
  variableMappings?: { [k: string]: string } | undefined;
  isContextAware?: boolean | undefined;
  supportedContexts?: Array<string> | undefined;
  formattingRules?: { [k: string]: string } | undefined;
  conditionalSections?: Array<string> | undefined;
  versions?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdVersions>
    | undefined;
  variables?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdVariables>
    | undefined;
  instances?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstances>
    | undefined;
  explanations?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdExplanations>
    | undefined;
  intelligence?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdIntelligence>
    | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdSharing = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdActivities = {
  id?: string | undefined;
  activityType?: string | undefined;
  userId?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdCompliance = {
  id?: string | undefined;
  complianceType?: string | undefined;
  status?: string | undefined;
  certificationId?: string | undefined;
  validUntil?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdCategory = {
  AppCategoryUnspecified: "APP_CATEGORY_UNSPECIFIED",
  AppCategoryContractAutomation: "APP_CATEGORY_CONTRACT_AUTOMATION",
  AppCategoryContractAnalysis: "APP_CATEGORY_CONTRACT_ANALYSIS",
  AppCategoryIntegration: "APP_CATEGORY_INTEGRATION",
  AppCategoryAiPowered: "APP_CATEGORY_AI_POWERED",
  AppCategoryWorkflow: "APP_CATEGORY_WORKFLOW",
  AppCategoryCompliance: "APP_CATEGORY_COMPLIANCE",
} as const;
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdCategory = ClosedEnum<
  typeof GetApiLeadScraperMicroserviceApiV1WorkspaceIdCategory
>;

export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdPricingModel = {
  PricingModelUnspecified: "PRICING_MODEL_UNSPECIFIED",
  PricingModelFree: "PRICING_MODEL_FREE",
  PricingModelSubscription: "PRICING_MODEL_SUBSCRIPTION",
  PricingModelUsageBased: "PRICING_MODEL_USAGE_BASED",
  PricingModelEnterprise: "PRICING_MODEL_ENTERPRISE",
} as const;
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdPricingModel =
  ClosedEnum<typeof GetApiLeadScraperMicroserviceApiV1WorkspaceIdPricingModel>;

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesVersions = {
  id?: string | undefined;
  appId?: string | undefined;
  versionNumber?: string | undefined;
  changelog?: string | undefined;
  requirements?: { [k: string]: string } | undefined;
  isPublic?: boolean | undefined;
  releaseDate?: Date | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstallations = {
  id?: string | undefined;
  appId?: string | undefined;
  workspaceId?: string | undefined;
  versionInstalled?: string | undefined;
  configuration?: { [k: string]: string } | undefined;
  installationStatus?: string | undefined;
  installedAt?: Date | undefined;
  lastUsed?: Date | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdAnalytics = {
  id?: string | undefined;
  appId?: string | undefined;
  metricName?: string | undefined;
  metricValue?: number | undefined;
  dimensions?: { [k: string]: string } | undefined;
  recordedAt?: Date | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdReviews = {
  id?: string | undefined;
  appId?: string | undefined;
  reviewerId?: string | undefined;
  rating?: number | undefined;
  reviewText?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdInfo = {
  id?: string | undefined;
  appId?: string | undefined;
  supportedLanguages?: Array<string> | undefined;
  sdkFeatures?: Array<string> | undefined;
  testCoverage?: { [k: string]: number } | undefined;
  securityScans?: Array<string> | undefined;
  performanceMetrics?: { [k: string]: string } | undefined;
  developmentStatus?: string | undefined;
  knownIssues?: Array<string> | undefined;
  roadmapUrl?: string | undefined;
  lastSecurityAudit?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdWebhooks = {
  id?: string | undefined;
  appId?: string | undefined;
  url?: string | undefined;
  subscribedEvents?: Array<string> | undefined;
  secretKey?: string | undefined;
  retryCount?: number | undefined;
  timeoutSeconds?: number | undefined;
  isActive?: boolean | undefined;
  headers?: { [k: string]: string } | undefined;
  lastTriggered?: Date | undefined;
  createdAt?: Date | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdPermissions = {
  id?: string | undefined;
  appId?: string | undefined;
  scope?: string | undefined;
  description?: string | undefined;
  isRequired?: boolean | undefined;
  accessLevels?: Array<string> | undefined;
  constraints?: { [k: string]: string } | undefined;
  requiresApproval?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstalledApps = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  developerId?: string | undefined;
  category?: GetApiLeadScraperMicroserviceApiV1WorkspaceIdCategory | undefined;
  supportedContractTypes?: Array<string> | undefined;
  features?: Array<string> | undefined;
  pricingModel?:
    | GetApiLeadScraperMicroserviceApiV1WorkspaceIdPricingModel
    | undefined;
  pricingTiers?: { [k: string]: number } | undefined;
  supportedIntegrations?: Array<string> | undefined;
  isVerified?: boolean | undefined;
  rating?: number | undefined;
  installationCount?: number | undefined;
  requiredPermissions?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  documentationUrl?: string | undefined;
  supportEmail?: string | undefined;
  screenshots?: Array<string> | undefined;
  privacyPolicyUrl?: string | undefined;
  termsUrl?: string | undefined;
  publishedAt?: Date | undefined;
  lastUpdated?: Date | undefined;
  versions?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesVersions>
    | undefined;
  installations?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstallations>
    | undefined;
  analytics?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdAnalytics>
    | undefined;
  reviews?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdReviews>
    | undefined;
  info?: GetApiLeadScraperMicroserviceApiV1WorkspaceIdInfo | undefined;
  webhooks?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdWebhooks>
    | undefined;
  permissions?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdPermissions>
    | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspace = {
  id?: string | undefined;
  name?: string | undefined;
  uniqueIdentifier?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  storageQuota?: string | undefined;
  usedStorage?: string | undefined;
  allowPublicSharing?: boolean | undefined;
  requireApproval?: boolean | undefined;
  gdprCompliant?: boolean | undefined;
  hipaaCompliant?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  folders?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdFolders>
    | undefined;
  templates?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplates>
    | undefined;
  sharing?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdSharing>
    | undefined;
  activities?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdActivities>
    | undefined;
  compliance?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdCompliance>
    | undefined;
  installedApps?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstalledApps>
    | undefined;
};

export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdData = {
  workspace?:
    | GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspace
    | undefined;
};

/**
 * Retrieves details of a specific workspace
 */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdResponseBody = {
  data: GetApiLeadScraperMicroserviceApiV1WorkspaceIdData;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdRequest$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    organizationId: z.string().optional(),
    tenantId: z.string().optional(),
    accountId: z.string().optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdRequest$Outbound = {
  id: string;
  organizationId?: string | undefined;
  tenantId?: string | undefined;
  accountId?: string | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdRequest$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdRequest$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdRequest
  > = z.object({
    id: z.string(),
    organizationId: z.string().optional(),
    tenantId: z.string().optional(),
    accountId: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdRequest$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdRequest$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdRequest$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdRequest$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdRequest$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdRequestToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdRequest:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdRequest,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdRequest$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1WorkspaceIdRequest,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdRequest' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdEmbeddings$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdEmbeddings,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    embeddings: z.array(z.number()).optional(),
    modelVersion: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdEmbeddings$Outbound = {
  id?: string | undefined;
  embeddings?: Array<number> | undefined;
  modelVersion?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdEmbeddings$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdEmbeddings$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdEmbeddings
  > = z.object({
    id: z.string().optional(),
    embeddings: z.array(z.number()).optional(),
    modelVersion: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdEmbeddings$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdEmbeddings$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdEmbeddings$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdEmbeddings$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdEmbeddings$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdEmbeddings$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdEmbeddings$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdEmbeddingsToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdEmbeddings:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdEmbeddings,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdEmbeddings$outboundSchema
      .parse(getApiLeadScraperMicroserviceApiV1WorkspaceIdEmbeddings),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdEmbeddingsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdEmbeddings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdEmbeddings$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdEmbeddings' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponse200Versions$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponse200Versions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    versionNumber: z.number().int().optional(),
    s3Key: z.string().optional(),
    size: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponse200Versions$Outbound =
  {
    id?: string | undefined;
    fileId?: string | undefined;
    versionNumber?: number | undefined;
    s3Key?: string | undefined;
    size?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    createdAt?: string | undefined;
  };

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponse200Versions$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponse200Versions$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponse200Versions
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    versionNumber: z.number().int().optional(),
    s3Key: z.string().optional(),
    size: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponse200Versions$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponse200Versions$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponse200Versions$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponse200Versions$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponse200Versions$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponse200Versions$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponse200Versions$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponse200VersionsToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponse200Versions:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponse200Versions,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponse200Versions$outboundSchema
      .parse(
        getApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponse200Versions,
      ),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponse200VersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponse200Versions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponse200Versions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponse200Versions' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdComments$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdComments,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    authorId: z.string().optional(),
    content: z.string().optional(),
    startPosition: z.number().int().optional(),
    endPosition: z.number().int().optional(),
    resolved: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdComments$Outbound = {
  id?: string | undefined;
  authorId?: string | undefined;
  content?: string | undefined;
  startPosition?: number | undefined;
  endPosition?: number | undefined;
  resolved?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdComments$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdComments$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdComments
  > = z.object({
    id: z.string().optional(),
    authorId: z.string().optional(),
    content: z.string().optional(),
    startPosition: z.number().int().optional(),
    endPosition: z.number().int().optional(),
    resolved: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdComments$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdComments$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdComments$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdComments$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdComments$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdComments$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdComments$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdCommentsToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdComments:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdComments,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdComments$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1WorkspaceIdComments,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdCommentsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdComments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdComments$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdComments' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesSharing$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesSharing,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesSharing$Outbound =
  {
    id?: string | undefined;
    sharedWithEmail?: string | undefined;
    permissionLevel?: string | undefined;
    expiresAt?: string | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
  };

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesSharing$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesSharing$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesSharing
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesSharing$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesSharing$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesSharing$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesSharing$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesSharing$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesSharing$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesSharing$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesSharingToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesSharing:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesSharing,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesSharing$outboundSchema
      .parse(getApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesSharing),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesSharingFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesSharing,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesSharing$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesSharing' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdSnapshots$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSnapshots,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    snapshotHash: z.string().optional(),
    content: z.string().optional(),
    authorId: z.string().optional(),
    reason: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdSnapshots$Outbound = {
  id?: string | undefined;
  fileId?: string | undefined;
  snapshotHash?: string | undefined;
  content?: string | undefined;
  authorId?: string | undefined;
  reason?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdSnapshots$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSnapshots$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSnapshots
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    snapshotHash: z.string().optional(),
    content: z.string().optional(),
    authorId: z.string().optional(),
    reason: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdSnapshots$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdSnapshots$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSnapshots$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdSnapshots$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSnapshots$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdSnapshots$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSnapshots$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdSnapshotsToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdSnapshots:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSnapshots,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSnapshots$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1WorkspaceIdSnapshots,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdSnapshotsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdSnapshots,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdSnapshots$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdSnapshots' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdFiles$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdFiles,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    size: z.string().optional(),
    s3Key: z.string().optional(),
    s3BucketName: z.string().optional(),
    isDeleted: z.boolean().optional(),
    version: z.number().int().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    embeddings: z.lazy(() =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdEmbeddings$inboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponse200Versions$inboundSchema
      ),
    ).optional(),
    comments: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdComments$inboundSchema
      ),
    ).optional(),
    sharing: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesSharing$inboundSchema
      ),
    ).optional(),
    snapshots: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdSnapshots$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdFiles$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  size?: string | undefined;
  s3Key?: string | undefined;
  s3BucketName?: string | undefined;
  isDeleted?: boolean | undefined;
  version?: number | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  embeddings?:
    | GetApiLeadScraperMicroserviceApiV1WorkspaceIdEmbeddings$Outbound
    | undefined;
  versions?:
    | Array<
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponse200Versions$Outbound
    >
    | undefined;
  comments?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdComments$Outbound>
    | undefined;
  sharing?:
    | Array<
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesSharing$Outbound
    >
    | undefined;
  snapshots?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdSnapshots$Outbound>
    | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdFiles$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdFiles$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdFiles
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    size: z.string().optional(),
    s3Key: z.string().optional(),
    s3BucketName: z.string().optional(),
    isDeleted: z.boolean().optional(),
    version: z.number().int().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    embeddings: z.lazy(() =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdEmbeddings$outboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponse200Versions$outboundSchema
      ),
    ).optional(),
    comments: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdComments$outboundSchema
      ),
    ).optional(),
    sharing: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesSharing$outboundSchema
      ),
    ).optional(),
    snapshots: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdSnapshots$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdFiles$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdFiles$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdFiles$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdFiles$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdFiles$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdFiles$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdFiles$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdFilesToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdFiles:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdFiles,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdFiles$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1WorkspaceIdFiles,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdFilesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdFiles,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdFiles$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdFiles' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdFolders$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdFolders,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    isDeleted: z.boolean().optional(),
    parentFolderId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    files: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdFiles$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdFolders$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  isDeleted?: boolean | undefined;
  parentFolderId?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  files?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdFiles$Outbound>
    | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdFolders$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdFolders$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdFolders
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    isDeleted: z.boolean().optional(),
    parentFolderId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    files: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdFiles$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdFolders$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdFolders$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdFolders$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdFolders$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdFolders$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdFolders$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdFolders$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdFoldersToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdFolders:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdFolders,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdFolders$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1WorkspaceIdFolders,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdFoldersFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdFolders,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdFolders$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdFolders' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplateType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplateType
  > = z.nativeEnum(GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplateType);

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplateType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplateType
  > = GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplateType$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplateType$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplateType$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplateType$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplateType$outboundSchema;
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdVersions$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    version: z.string().optional(),
    baseContent: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    authorId: z.string().optional(),
    changeDescription: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdVersions$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  version?: string | undefined;
  baseContent?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  authorId?: string | undefined;
  changeDescription?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdVersions$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdVersions$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdVersions
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    version: z.string().optional(),
    baseContent: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    authorId: z.string().optional(),
    changeDescription: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdVersions$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdVersions$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdVersions$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdVersions$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdVersions$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdVersions$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdVersions$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdVersionsToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdVersions:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdVersions,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdVersions$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1WorkspaceIdVersions,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdVersions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdVersions' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdVariables$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdVariables,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    variableType: z.string().optional(),
    defaultValue: z.string().optional(),
    isRequired: z.boolean().optional(),
    validationRules: z.string().optional(),
    dataSource: z.string().optional(),
    aiExtractionRules: z.string().optional(),
    alternatives: z.array(z.string()).optional(),
    templateId: z.string().optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdVariables$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  variableType?: string | undefined;
  defaultValue?: string | undefined;
  isRequired?: boolean | undefined;
  validationRules?: string | undefined;
  dataSource?: string | undefined;
  aiExtractionRules?: string | undefined;
  alternatives?: Array<string> | undefined;
  templateId?: string | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdVariables$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdVariables$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdVariables
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    variableType: z.string().optional(),
    defaultValue: z.string().optional(),
    isRequired: z.boolean().optional(),
    validationRules: z.string().optional(),
    dataSource: z.string().optional(),
    aiExtractionRules: z.string().optional(),
    alternatives: z.array(z.string()).optional(),
    templateId: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdVariables$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdVariables$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdVariables$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdVariables$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdVariables$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdVariables$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdVariables$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdVariablesToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdVariables:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdVariables,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdVariables$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1WorkspaceIdVariables,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdVariablesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdVariables,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdVariables$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdVariables' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdStatus$inboundSchema:
  z.ZodNativeEnum<typeof GetApiLeadScraperMicroserviceApiV1WorkspaceIdStatus> =
    z.nativeEnum(GetApiLeadScraperMicroserviceApiV1WorkspaceIdStatus);

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdStatus$outboundSchema:
  z.ZodNativeEnum<typeof GetApiLeadScraperMicroserviceApiV1WorkspaceIdStatus> =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdStatus$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdStatus$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdStatus$outboundSchema;
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesStatus
  > = z.nativeEnum(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesStatus,
  );

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesStatus
  > =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesStatus$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesStatus$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesStatus$outboundSchema;
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureBlocks$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureBlocks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    blockType: z.string().optional(),
    pageNumber: z.number().int().optional(),
    xPosition: z.number().optional(),
    yPosition: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    isRequired: z.boolean().optional(),
    signatureData: z.string().optional(),
    signedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureBlocks$Outbound =
  {
    id?: string | undefined;
    requestId?: string | undefined;
    blockType?: string | undefined;
    pageNumber?: number | undefined;
    xPosition?: number | undefined;
    yPosition?: number | undefined;
    width?: number | undefined;
    height?: number | undefined;
    isRequired?: boolean | undefined;
    signatureData?: string | undefined;
    signedAt?: string | undefined;
  };

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureBlocks$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureBlocks$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureBlocks
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    blockType: z.string().optional(),
    pageNumber: z.number().int().optional(),
    xPosition: z.number().optional(),
    yPosition: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    isRequired: z.boolean().optional(),
    signatureData: z.string().optional(),
    signedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureBlocks$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureBlocks$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureBlocks$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureBlocks$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureBlocks$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureBlocks$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureBlocks$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureBlocksToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureBlocks:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureBlocks,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureBlocks$outboundSchema
      .parse(getApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureBlocks),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureBlocksFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureBlocks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureBlocks$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureBlocks' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkflow$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkflow,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    signingOrder: z.array(z.string()).optional(),
    currentSigner: z.string().optional(),
    workflowStatus: z.string().optional(),
    parallelSigning: z.boolean().optional(),
    requireAllSignatures: z.boolean().optional(),
    deadline: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkflow$Outbound = {
  id?: string | undefined;
  requestId?: string | undefined;
  signingOrder?: Array<string> | undefined;
  currentSigner?: string | undefined;
  workflowStatus?: string | undefined;
  parallelSigning?: boolean | undefined;
  requireAllSignatures?: boolean | undefined;
  deadline?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkflow$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkflow$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkflow
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    signingOrder: z.array(z.string()).optional(),
    currentSigner: z.string().optional(),
    workflowStatus: z.string().optional(),
    parallelSigning: z.boolean().optional(),
    requireAllSignatures: z.boolean().optional(),
    deadline: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkflow$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkflow$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkflow$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkflow$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkflow$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkflow$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkflow$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdWorkflowToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdWorkflow:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkflow,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkflow$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1WorkspaceIdWorkflow,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdWorkflowFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkflow,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkflow$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkflow' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureRequests$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureRequests,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    status:
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesStatus$inboundSchema
        .default("SIGNATURE_STATUS_UNSPECIFIED"),
    signerEmail: z.string().optional(),
    signerName: z.string().optional(),
    role: z.string().optional(),
    authenticationMethod: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    requiresMfa: z.boolean().optional(),
    signatureType: z.string().optional(),
    reminderSchedule: z.array(z.string()).optional(),
    documentId: z.string().optional(),
    signatureBlocks: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureBlocks$inboundSchema
      ),
    ).optional(),
    workflow: z.lazy(() =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkflow$inboundSchema
    ).optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureRequests$Outbound =
  {
    id?: string | undefined;
    status: string;
    signerEmail?: string | undefined;
    signerName?: string | undefined;
    role?: string | undefined;
    authenticationMethod?: string | undefined;
    expiresAt?: string | undefined;
    requiresMfa?: boolean | undefined;
    signatureType?: string | undefined;
    reminderSchedule?: Array<string> | undefined;
    documentId?: string | undefined;
    signatureBlocks?:
      | Array<
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureBlocks$Outbound
      >
      | undefined;
    workflow?:
      | GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkflow$Outbound
      | undefined;
  };

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureRequests$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureRequests$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureRequests
  > = z.object({
    id: z.string().optional(),
    status:
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesStatus$outboundSchema
        .default("SIGNATURE_STATUS_UNSPECIFIED"),
    signerEmail: z.string().optional(),
    signerName: z.string().optional(),
    role: z.string().optional(),
    authenticationMethod: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    requiresMfa: z.boolean().optional(),
    signatureType: z.string().optional(),
    reminderSchedule: z.array(z.string()).optional(),
    documentId: z.string().optional(),
    signatureBlocks: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureBlocks$outboundSchema
      ),
    ).optional(),
    workflow: z.lazy(() =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkflow$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureRequests$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureRequests$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureRequests$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureRequests$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureRequests$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureRequests$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureRequests$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureRequestsToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureRequests:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureRequests,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureRequests$outboundSchema
      .parse(getApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureRequests),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureRequestsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureRequests,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureRequests$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureRequests' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdAiAssistance$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdAiAssistance,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    interactionType: z.string().optional(),
    userQuery: z.string().optional(),
    aiResponse: z.string().optional(),
    context: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdAiAssistance$Outbound =
  {
    id?: string | undefined;
    documentId?: string | undefined;
    interactionType?: string | undefined;
    userQuery?: string | undefined;
    aiResponse?: string | undefined;
    context?: { [k: string]: string } | undefined;
    createdAt?: string | undefined;
  };

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdAiAssistance$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdAiAssistance$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdAiAssistance
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    interactionType: z.string().optional(),
    userQuery: z.string().optional(),
    aiResponse: z.string().optional(),
    context: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdAiAssistance$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdAiAssistance$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdAiAssistance$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdAiAssistance$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdAiAssistance$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdAiAssistance$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdAiAssistance$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdAiAssistanceToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdAiAssistance:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdAiAssistance,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdAiAssistance$outboundSchema
      .parse(getApiLeadScraperMicroserviceApiV1WorkspaceIdAiAssistance),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdAiAssistanceFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdAiAssistance,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdAiAssistance$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdAiAssistance' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdRounds$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdRounds,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    historyId: z.string().optional(),
    roundNumber: z.number().int().optional(),
    proposerId: z.string().optional(),
    proposalContent: z.string().optional(),
    responseContent: z.string().optional(),
    status: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdRounds$Outbound = {
  id?: string | undefined;
  historyId?: string | undefined;
  roundNumber?: number | undefined;
  proposerId?: string | undefined;
  proposalContent?: string | undefined;
  responseContent?: string | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdRounds$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdRounds$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdRounds
  > = z.object({
    id: z.string().optional(),
    historyId: z.string().optional(),
    roundNumber: z.number().int().optional(),
    proposerId: z.string().optional(),
    proposalContent: z.string().optional(),
    responseContent: z.string().optional(),
    status: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdRounds$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdRounds$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdRounds$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdRounds$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdRounds$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdRounds$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdRounds$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdRoundsToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdRounds:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdRounds,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdRounds$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1WorkspaceIdRounds,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdRoundsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdRounds,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdRounds$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdRounds' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdNegotiation$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdNegotiation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    rounds: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdRounds$inboundSchema
      ),
    ).optional(),
    currentStatus: z.string().optional(),
    startedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdNegotiation$Outbound =
  {
    id?: string | undefined;
    documentId?: string | undefined;
    rounds?:
      | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdRounds$Outbound>
      | undefined;
    currentStatus?: string | undefined;
    startedAt?: string | undefined;
    lastUpdated?: string | undefined;
  };

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdNegotiation$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdNegotiation$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdNegotiation
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    rounds: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdRounds$outboundSchema
      ),
    ).optional(),
    currentStatus: z.string().optional(),
    startedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdNegotiation$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdNegotiation$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdNegotiation$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdNegotiation$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdNegotiation$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdNegotiation$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdNegotiation$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdNegotiationToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdNegotiation:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdNegotiation,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdNegotiation$outboundSchema
      .parse(getApiLeadScraperMicroserviceApiV1WorkspaceIdNegotiation),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdNegotiationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdNegotiation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdNegotiation$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdNegotiation' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdMerges$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdMerges,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    sourceBranch: z.string().optional(),
    targetBranch: z.string().optional(),
    mergeStatus: z.string().optional(),
    mergeStrategy: z.string().optional(),
    conflicts: z.array(z.string()).optional(),
    mergerId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    completedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdMerges$Outbound = {
  id?: string | undefined;
  branchId?: string | undefined;
  sourceBranch?: string | undefined;
  targetBranch?: string | undefined;
  mergeStatus?: string | undefined;
  mergeStrategy?: string | undefined;
  conflicts?: Array<string> | undefined;
  mergerId?: string | undefined;
  createdAt?: string | undefined;
  completedAt?: string | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdMerges$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdMerges$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdMerges
  > = z.object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    sourceBranch: z.string().optional(),
    targetBranch: z.string().optional(),
    mergeStatus: z.string().optional(),
    mergeStrategy: z.string().optional(),
    conflicts: z.array(z.string()).optional(),
    mergerId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    completedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdMerges$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdMerges$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdMerges$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdMerges$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdMerges$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdMerges$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdMerges$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdMergesToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdMerges:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdMerges,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdMerges$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1WorkspaceIdMerges,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdMergesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdMerges,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdMerges$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdMerges' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdPolicy$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdPolicy,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    requiredApprovers: z.array(z.string()).optional(),
    minimumApprovals: z.number().int().optional(),
    enforceLinearHistory: z.boolean().optional(),
    allowForcePush: z.boolean().optional(),
    protectedPaths: z.array(z.string()).optional(),
    mergeRules: z.record(z.string()).optional(),
    automatedChecks: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdPolicy$Outbound = {
  id?: string | undefined;
  branchId?: string | undefined;
  requiredApprovers?: Array<string> | undefined;
  minimumApprovals?: number | undefined;
  enforceLinearHistory?: boolean | undefined;
  allowForcePush?: boolean | undefined;
  protectedPaths?: Array<string> | undefined;
  mergeRules?: { [k: string]: string } | undefined;
  automatedChecks?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdPolicy$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdPolicy$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdPolicy
  > = z.object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    requiredApprovers: z.array(z.string()).optional(),
    minimumApprovals: z.number().int().optional(),
    enforceLinearHistory: z.boolean().optional(),
    allowForcePush: z.boolean().optional(),
    protectedPaths: z.array(z.string()).optional(),
    mergeRules: z.record(z.string()).optional(),
    automatedChecks: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdPolicy$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdPolicy$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdPolicy$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdPolicy$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdPolicy$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdPolicy$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdPolicy$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdPolicyToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdPolicy:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdPolicy,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdPolicy$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1WorkspaceIdPolicy,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdPolicyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdPolicy,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdPolicy$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdPolicy' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdMergeRequests$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdMergeRequests,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sourceBranchId: z.string().optional(),
    targetBranchId: z.string().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    authorId: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    status: z.string().optional(),
    labels: z.array(z.string()).optional(),
    hasConflicts: z.boolean().optional(),
    automatedCheckResults: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdMergeRequests$Outbound =
  {
    id?: string | undefined;
    sourceBranchId?: string | undefined;
    targetBranchId?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    authorId?: string | undefined;
    reviewers?: Array<string> | undefined;
    status?: string | undefined;
    labels?: Array<string> | undefined;
    hasConflicts?: boolean | undefined;
    automatedCheckResults?: Array<string> | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
  };

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdMergeRequests$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdMergeRequests$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdMergeRequests
  > = z.object({
    id: z.string().optional(),
    sourceBranchId: z.string().optional(),
    targetBranchId: z.string().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    authorId: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    status: z.string().optional(),
    labels: z.array(z.string()).optional(),
    hasConflicts: z.boolean().optional(),
    automatedCheckResults: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdMergeRequests$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdMergeRequests$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdMergeRequests$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdMergeRequests$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdMergeRequests$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdMergeRequests$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdMergeRequests$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdMergeRequestsToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdMergeRequests:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdMergeRequests,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdMergeRequests$outboundSchema
      .parse(getApiLeadScraperMicroserviceApiV1WorkspaceIdMergeRequests),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdMergeRequestsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdMergeRequests,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdMergeRequests$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdMergeRequests' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdBranches$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdBranches,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    baseVersionHash: z.string().optional(),
    currentHeadHash: z.string().optional(),
    purpose: z.string().optional(),
    status: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    branchMetadata: z.record(z.string()).optional(),
    isLocked: z.boolean().optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    merges: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdMerges$inboundSchema
      ),
    ).optional(),
    policy: z.lazy(() =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdPolicy$inboundSchema
    ).optional(),
    mergeRequests: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdMergeRequests$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdBranches$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  baseVersionHash?: string | undefined;
  currentHeadHash?: string | undefined;
  purpose?: string | undefined;
  status?: string | undefined;
  reviewers?: Array<string> | undefined;
  branchMetadata?: { [k: string]: string } | undefined;
  isLocked?: boolean | undefined;
  lastUpdated?: string | undefined;
  merges?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdMerges$Outbound>
    | undefined;
  policy?:
    | GetApiLeadScraperMicroserviceApiV1WorkspaceIdPolicy$Outbound
    | undefined;
  mergeRequests?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdMergeRequests$Outbound>
    | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdBranches$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdBranches$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdBranches
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    baseVersionHash: z.string().optional(),
    currentHeadHash: z.string().optional(),
    purpose: z.string().optional(),
    status: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    branchMetadata: z.record(z.string()).optional(),
    isLocked: z.boolean().optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
    merges: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdMerges$outboundSchema
      ),
    ).optional(),
    policy: z.lazy(() =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdPolicy$outboundSchema
    ).optional(),
    mergeRequests: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdMergeRequests$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdBranches$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdBranches$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdBranches$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdBranches$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdBranches$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdBranches$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdBranches$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdBranchesToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdBranches:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdBranches,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdBranches$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1WorkspaceIdBranches,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdBranchesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdBranches,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdBranches$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdBranches' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdChanges$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdChanges,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    changeType: z.string().optional(),
    contentBefore: z.string().optional(),
    contentAfter: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdChanges$Outbound = {
  id?: string | undefined;
  versionId?: string | undefined;
  changeType?: string | undefined;
  contentBefore?: string | undefined;
  contentAfter?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdChanges$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdChanges$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdChanges
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    changeType: z.string().optional(),
    contentBefore: z.string().optional(),
    contentAfter: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdChanges$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdChanges$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdChanges$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdChanges$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdChanges$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdChanges$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdChanges$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdChangesToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdChanges:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdChanges,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdChanges$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1WorkspaceIdChanges,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdChangesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdChanges,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdChanges$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdChanges' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdSummaries$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSummaries,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    summaryType: z.string().optional(),
    content: z.string().optional(),
    targetAudience: z.string().optional(),
    keyPoints: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdSummaries$Outbound = {
  id?: string | undefined;
  versionId?: string | undefined;
  summaryType?: string | undefined;
  content?: string | undefined;
  targetAudience?: string | undefined;
  keyPoints?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdSummaries$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSummaries$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSummaries
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    summaryType: z.string().optional(),
    content: z.string().optional(),
    targetAudience: z.string().optional(),
    keyPoints: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdSummaries$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdSummaries$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSummaries$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdSummaries$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSummaries$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdSummaries$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSummaries$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdSummariesToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdSummaries:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSummaries,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSummaries$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1WorkspaceIdSummaries,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdSummariesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdSummaries,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdSummaries$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdSummaries' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponseVersions$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponseVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionHash: z.string().optional(),
    parentHash: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    branchName: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    isApproved: z.boolean().optional(),
    approvalChain: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    branches: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdBranches$inboundSchema
      ),
    ).optional(),
    changes: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdChanges$inboundSchema
      ),
    ).optional(),
    summaries: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdSummaries$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponseVersions$Outbound =
  {
    id?: string | undefined;
    versionHash?: string | undefined;
    parentHash?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    branchName?: string | undefined;
    metadata?: { [k: string]: string } | undefined;
    tags?: Array<string> | undefined;
    isApproved?: boolean | undefined;
    approvalChain?: string | undefined;
    createdAt?: string | undefined;
    branches?:
      | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdBranches$Outbound>
      | undefined;
    changes?:
      | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdChanges$Outbound>
      | undefined;
    summaries?:
      | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdSummaries$Outbound>
      | undefined;
  };

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponseVersions$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponseVersions$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponseVersions
  > = z.object({
    id: z.string().optional(),
    versionHash: z.string().optional(),
    parentHash: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    branchName: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    isApproved: z.boolean().optional(),
    approvalChain: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    branches: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdBranches$outboundSchema
      ),
    ).optional(),
    changes: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdChanges$outboundSchema
      ),
    ).optional(),
    summaries: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdSummaries$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponseVersions$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponseVersions$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponseVersions$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponseVersions$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponseVersions$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponseVersions$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponseVersions$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponseVersionsToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponseVersions:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponseVersions,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponseVersions$outboundSchema
      .parse(
        getApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponseVersions,
      ),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponseVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponseVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponseVersions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponseVersions' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstances$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstances,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    status: GetApiLeadScraperMicroserviceApiV1WorkspaceIdStatus$inboundSchema
      .default("DOCUMENT_STATUS_UNSPECIFIED"),
    fieldValues: z.record(z.string()).optional(),
    signers: z.array(z.string()).optional(),
    language: z.string().optional(),
    isCompleted: z.boolean().optional(),
    dueDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    generatedContent: z.string().optional(),
    attachments: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    signatureRequests: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureRequests$inboundSchema
      ),
    ).optional(),
    aiAssistance: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdAiAssistance$inboundSchema
      ),
    ).optional(),
    negotiation: z.lazy(() =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdNegotiation$inboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponseVersions$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstances$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  status: string;
  fieldValues?: { [k: string]: string } | undefined;
  signers?: Array<string> | undefined;
  language?: string | undefined;
  isCompleted?: boolean | undefined;
  dueDate?: string | undefined;
  generatedContent?: string | undefined;
  attachments?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  signatureRequests?:
    | Array<
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureRequests$Outbound
    >
    | undefined;
  aiAssistance?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdAiAssistance$Outbound>
    | undefined;
  negotiation?:
    | GetApiLeadScraperMicroserviceApiV1WorkspaceIdNegotiation$Outbound
    | undefined;
  versions?:
    | Array<
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponseVersions$Outbound
    >
    | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstances$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstances$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstances
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    status: GetApiLeadScraperMicroserviceApiV1WorkspaceIdStatus$outboundSchema
      .default("DOCUMENT_STATUS_UNSPECIFIED"),
    fieldValues: z.record(z.string()).optional(),
    signers: z.array(z.string()).optional(),
    language: z.string().optional(),
    isCompleted: z.boolean().optional(),
    dueDate: z.date().transform(v => v.toISOString()).optional(),
    generatedContent: z.string().optional(),
    attachments: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    signatureRequests: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdSignatureRequests$outboundSchema
      ),
    ).optional(),
    aiAssistance: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdAiAssistance$outboundSchema
      ),
    ).optional(),
    negotiation: z.lazy(() =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdNegotiation$outboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesResponseVersions$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstances$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstances$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstances$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstances$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstances$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstances$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstances$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdInstancesToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdInstances:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstances,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstances$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1WorkspaceIdInstances,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdInstancesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstances,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstances$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstances' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdExplanations$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdExplanations,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    sectionIdentifier: z.string().optional(),
    explanationText: z.string().optional(),
    complexityLevel: z.string().optional(),
    relatedTerms: z.array(z.string()).optional(),
    legalReferences: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdExplanations$Outbound =
  {
    id?: string | undefined;
    templateId?: string | undefined;
    sectionIdentifier?: string | undefined;
    explanationText?: string | undefined;
    complexityLevel?: string | undefined;
    relatedTerms?: Array<string> | undefined;
    legalReferences?: Array<string> | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
  };

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdExplanations$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdExplanations$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdExplanations
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    sectionIdentifier: z.string().optional(),
    explanationText: z.string().optional(),
    complexityLevel: z.string().optional(),
    relatedTerms: z.array(z.string()).optional(),
    legalReferences: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdExplanations$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdExplanations$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdExplanations$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdExplanations$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdExplanations$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdExplanations$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdExplanations$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdExplanationsToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdExplanations:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdExplanations,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdExplanations$outboundSchema
      .parse(getApiLeadScraperMicroserviceApiV1WorkspaceIdExplanations),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdExplanationsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdExplanations,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdExplanations$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdExplanations' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdRiskAssessments$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdRiskAssessments,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    riskType: z.string().optional(),
    riskScore: z.number().optional(),
    assessmentDetails: z.string().optional(),
    mitigationSuggestions: z.array(z.string()).optional(),
    assessorId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdRiskAssessments$Outbound =
  {
    id?: string | undefined;
    intelligenceId?: string | undefined;
    riskType?: string | undefined;
    riskScore?: number | undefined;
    assessmentDetails?: string | undefined;
    mitigationSuggestions?: Array<string> | undefined;
    assessorId?: string | undefined;
    createdAt?: string | undefined;
  };

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdRiskAssessments$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdRiskAssessments$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdRiskAssessments
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    riskType: z.string().optional(),
    riskScore: z.number().optional(),
    assessmentDetails: z.string().optional(),
    mitigationSuggestions: z.array(z.string()).optional(),
    assessorId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdRiskAssessments$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdRiskAssessments$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdRiskAssessments$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdRiskAssessments$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdRiskAssessments$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdRiskAssessments$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdRiskAssessments$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdRiskAssessmentsToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdRiskAssessments:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdRiskAssessments,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdRiskAssessments$outboundSchema
      .parse(getApiLeadScraperMicroserviceApiV1WorkspaceIdRiskAssessments),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdRiskAssessmentsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdRiskAssessments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdRiskAssessments$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdRiskAssessments' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceChecks$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceChecks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    complianceStandard: z.string().optional(),
    checkResult: z.string().optional(),
    violations: z.array(z.string()).optional(),
    remediationSteps: z.string().optional(),
    checkDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceChecks$Outbound =
  {
    id?: string | undefined;
    intelligenceId?: string | undefined;
    complianceStandard?: string | undefined;
    checkResult?: string | undefined;
    violations?: Array<string> | undefined;
    remediationSteps?: string | undefined;
    checkDate?: string | undefined;
  };

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceChecks$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceChecks$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceChecks
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    complianceStandard: z.string().optional(),
    checkResult: z.string().optional(),
    violations: z.array(z.string()).optional(),
    remediationSteps: z.string().optional(),
    checkDate: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceChecks$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceChecks$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceChecks$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceChecks$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceChecks$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceChecks$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceChecks$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceChecksToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceChecks:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceChecks,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceChecks$outboundSchema
      .parse(getApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceChecks),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceChecksFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceChecks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceChecks$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceChecks' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdIntelligence$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdIntelligence,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    contractType: z.string().optional(),
    riskScores: z.record(z.number()).optional(),
    detectedClauses: z.record(z.string()).optional(),
    keyObligations: z.array(z.string()).optional(),
    complianceScores: z.record(z.number()).optional(),
    jurisdiction: z.string().optional(),
    governingLaws: z.array(z.string()).optional(),
    semanticAnalysis: z.record(z.string()).optional(),
    analysisDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    riskAssessments: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdRiskAssessments$inboundSchema
      ),
    ).optional(),
    complianceChecks: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceChecks$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdIntelligence$Outbound =
  {
    id?: string | undefined;
    contractType?: string | undefined;
    riskScores?: { [k: string]: number } | undefined;
    detectedClauses?: { [k: string]: string } | undefined;
    keyObligations?: Array<string> | undefined;
    complianceScores?: { [k: string]: number } | undefined;
    jurisdiction?: string | undefined;
    governingLaws?: Array<string> | undefined;
    semanticAnalysis?: { [k: string]: string } | undefined;
    analysisDate?: string | undefined;
    riskAssessments?:
      | Array<
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdRiskAssessments$Outbound
      >
      | undefined;
    complianceChecks?:
      | Array<
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceChecks$Outbound
      >
      | undefined;
  };

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdIntelligence$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdIntelligence$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdIntelligence
  > = z.object({
    id: z.string().optional(),
    contractType: z.string().optional(),
    riskScores: z.record(z.number()).optional(),
    detectedClauses: z.record(z.string()).optional(),
    keyObligations: z.array(z.string()).optional(),
    complianceScores: z.record(z.number()).optional(),
    jurisdiction: z.string().optional(),
    governingLaws: z.array(z.string()).optional(),
    semanticAnalysis: z.record(z.string()).optional(),
    analysisDate: z.date().transform(v => v.toISOString()).optional(),
    riskAssessments: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdRiskAssessments$outboundSchema
      ),
    ).optional(),
    complianceChecks: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceChecks$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdIntelligence$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdIntelligence$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdIntelligence$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdIntelligence$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdIntelligence$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdIntelligence$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdIntelligence$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdIntelligenceToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdIntelligence:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdIntelligence,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdIntelligence$outboundSchema
      .parse(getApiLeadScraperMicroserviceApiV1WorkspaceIdIntelligence),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdIntelligenceFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdIntelligence,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdIntelligence$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdIntelligence' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplates$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplates,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    industryType: z.string().optional(),
    documentType: z.string().optional(),
    baseContent: z.string().optional(),
    isAdaptive: z.boolean().optional(),
    metadata: z.record(z.string()).optional(),
    supportedLanguages: z.array(z.string()).optional(),
    requiredDataFields: z.array(z.string()).optional(),
    version: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    templateType:
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplateType$inboundSchema
        .default("TEMPLATE_TYPE_UNSPECIFIED"),
    content: z.string().optional(),
    detectedVariables: z.array(z.string()).optional(),
    variableMappings: z.record(z.string()).optional(),
    isContextAware: z.boolean().optional(),
    supportedContexts: z.array(z.string()).optional(),
    formattingRules: z.record(z.string()).optional(),
    conditionalSections: z.array(z.string()).optional(),
    versions: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdVersions$inboundSchema
      ),
    ).optional(),
    variables: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdVariables$inboundSchema
      ),
    ).optional(),
    instances: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstances$inboundSchema
      ),
    ).optional(),
    explanations: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdExplanations$inboundSchema
      ),
    ).optional(),
    intelligence: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdIntelligence$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplates$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  industryType?: string | undefined;
  documentType?: string | undefined;
  baseContent?: string | undefined;
  isAdaptive?: boolean | undefined;
  metadata?: { [k: string]: string } | undefined;
  supportedLanguages?: Array<string> | undefined;
  requiredDataFields?: Array<string> | undefined;
  version?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  templateType: string;
  content?: string | undefined;
  detectedVariables?: Array<string> | undefined;
  variableMappings?: { [k: string]: string } | undefined;
  isContextAware?: boolean | undefined;
  supportedContexts?: Array<string> | undefined;
  formattingRules?: { [k: string]: string } | undefined;
  conditionalSections?: Array<string> | undefined;
  versions?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdVersions$Outbound>
    | undefined;
  variables?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdVariables$Outbound>
    | undefined;
  instances?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstances$Outbound>
    | undefined;
  explanations?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdExplanations$Outbound>
    | undefined;
  intelligence?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdIntelligence$Outbound>
    | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplates$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplates$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplates
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    industryType: z.string().optional(),
    documentType: z.string().optional(),
    baseContent: z.string().optional(),
    isAdaptive: z.boolean().optional(),
    metadata: z.record(z.string()).optional(),
    supportedLanguages: z.array(z.string()).optional(),
    requiredDataFields: z.array(z.string()).optional(),
    version: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    templateType:
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplateType$outboundSchema
        .default("TEMPLATE_TYPE_UNSPECIFIED"),
    content: z.string().optional(),
    detectedVariables: z.array(z.string()).optional(),
    variableMappings: z.record(z.string()).optional(),
    isContextAware: z.boolean().optional(),
    supportedContexts: z.array(z.string()).optional(),
    formattingRules: z.record(z.string()).optional(),
    conditionalSections: z.array(z.string()).optional(),
    versions: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdVersions$outboundSchema
      ),
    ).optional(),
    variables: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdVariables$outboundSchema
      ),
    ).optional(),
    instances: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstances$outboundSchema
      ),
    ).optional(),
    explanations: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdExplanations$outboundSchema
      ),
    ).optional(),
    intelligence: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdIntelligence$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplates$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplates$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplates$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplates$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplates$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplates$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplates$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdTemplatesToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdTemplates:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplates,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplates$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1WorkspaceIdTemplates,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdTemplatesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplates,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplates$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplates' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdSharing$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSharing,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdSharing$Outbound = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdSharing$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSharing$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSharing
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdSharing$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdSharing$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSharing$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdSharing$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSharing$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdSharing$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSharing$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdSharingToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdSharing:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSharing,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdSharing$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1WorkspaceIdSharing,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdSharingFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdSharing,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdSharing$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdSharing' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdActivities$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdActivities,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    activityType: z.string().optional(),
    userId: z.string().optional(),
    description: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdActivities$Outbound = {
  id?: string | undefined;
  activityType?: string | undefined;
  userId?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdActivities$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdActivities$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdActivities
  > = z.object({
    id: z.string().optional(),
    activityType: z.string().optional(),
    userId: z.string().optional(),
    description: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdActivities$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdActivities$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdActivities$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdActivities$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdActivities$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdActivities$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdActivities$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdActivitiesToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdActivities:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdActivities,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdActivities$outboundSchema
      .parse(getApiLeadScraperMicroserviceApiV1WorkspaceIdActivities),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdActivitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdActivities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdActivities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdActivities' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdCompliance$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdCompliance,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    complianceType: z.string().optional(),
    status: z.string().optional(),
    certificationId: z.string().optional(),
    validUntil: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdCompliance$Outbound = {
  id?: string | undefined;
  complianceType?: string | undefined;
  status?: string | undefined;
  certificationId?: string | undefined;
  validUntil?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdCompliance$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdCompliance$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdCompliance
  > = z.object({
    id: z.string().optional(),
    complianceType: z.string().optional(),
    status: z.string().optional(),
    certificationId: z.string().optional(),
    validUntil: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdCompliance$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdCompliance$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdCompliance$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdCompliance$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdCompliance$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdCompliance$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdCompliance$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdCompliance:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdCompliance,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdCompliance$outboundSchema
      .parse(getApiLeadScraperMicroserviceApiV1WorkspaceIdCompliance),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdComplianceFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdCompliance,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdCompliance$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdCompliance' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdCategory$inboundSchema:
  z.ZodNativeEnum<
    typeof GetApiLeadScraperMicroserviceApiV1WorkspaceIdCategory
  > = z.nativeEnum(GetApiLeadScraperMicroserviceApiV1WorkspaceIdCategory);

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdCategory$outboundSchema:
  z.ZodNativeEnum<
    typeof GetApiLeadScraperMicroserviceApiV1WorkspaceIdCategory
  > = GetApiLeadScraperMicroserviceApiV1WorkspaceIdCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdCategory$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdCategory$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdCategory$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdCategory$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdCategory$outboundSchema;
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdPricingModel$inboundSchema:
  z.ZodNativeEnum<
    typeof GetApiLeadScraperMicroserviceApiV1WorkspaceIdPricingModel
  > = z.nativeEnum(GetApiLeadScraperMicroserviceApiV1WorkspaceIdPricingModel);

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdPricingModel$outboundSchema:
  z.ZodNativeEnum<
    typeof GetApiLeadScraperMicroserviceApiV1WorkspaceIdPricingModel
  > = GetApiLeadScraperMicroserviceApiV1WorkspaceIdPricingModel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdPricingModel$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdPricingModel$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdPricingModel$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdPricingModel$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdPricingModel$outboundSchema;
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesVersions$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    versionNumber: z.string().optional(),
    changelog: z.string().optional(),
    requirements: z.record(z.string()).optional(),
    isPublic: z.boolean().optional(),
    releaseDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesVersions$Outbound =
  {
    id?: string | undefined;
    appId?: string | undefined;
    versionNumber?: string | undefined;
    changelog?: string | undefined;
    requirements?: { [k: string]: string } | undefined;
    isPublic?: boolean | undefined;
    releaseDate?: string | undefined;
  };

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesVersions$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesVersions$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesVersions
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    versionNumber: z.string().optional(),
    changelog: z.string().optional(),
    requirements: z.record(z.string()).optional(),
    isPublic: z.boolean().optional(),
    releaseDate: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesVersions$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesVersions$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesVersions$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesVersions$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesVersions$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesVersions$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesVersions$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesVersionsToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesVersions:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesVersions,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesVersions$outboundSchema
      .parse(getApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesVersions),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesVersions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesVersions' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstallations$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstallations,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    workspaceId: z.string().optional(),
    versionInstalled: z.string().optional(),
    configuration: z.record(z.string()).optional(),
    installationStatus: z.string().optional(),
    installedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    lastUsed: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstallations$Outbound =
  {
    id?: string | undefined;
    appId?: string | undefined;
    workspaceId?: string | undefined;
    versionInstalled?: string | undefined;
    configuration?: { [k: string]: string } | undefined;
    installationStatus?: string | undefined;
    installedAt?: string | undefined;
    lastUsed?: string | undefined;
  };

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstallations$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstallations$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstallations
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    workspaceId: z.string().optional(),
    versionInstalled: z.string().optional(),
    configuration: z.record(z.string()).optional(),
    installationStatus: z.string().optional(),
    installedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUsed: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstallations$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstallations$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstallations$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstallations$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstallations$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstallations$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstallations$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdInstallationsToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdInstallations:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstallations,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstallations$outboundSchema
      .parse(getApiLeadScraperMicroserviceApiV1WorkspaceIdInstallations),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdInstallationsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstallations,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstallations$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstallations' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdAnalytics$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdAnalytics,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    metricName: z.string().optional(),
    metricValue: z.number().optional(),
    dimensions: z.record(z.string()).optional(),
    recordedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdAnalytics$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  metricName?: string | undefined;
  metricValue?: number | undefined;
  dimensions?: { [k: string]: string } | undefined;
  recordedAt?: string | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdAnalytics$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdAnalytics$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdAnalytics
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    metricName: z.string().optional(),
    metricValue: z.number().optional(),
    dimensions: z.record(z.string()).optional(),
    recordedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdAnalytics$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdAnalytics$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdAnalytics$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdAnalytics$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdAnalytics$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdAnalytics$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdAnalytics$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdAnalyticsToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdAnalytics:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdAnalytics,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdAnalytics$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1WorkspaceIdAnalytics,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdAnalytics,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdAnalytics$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdAnalytics' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdReviews$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdReviews,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    reviewerId: z.string().optional(),
    rating: z.number().optional(),
    reviewText: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdReviews$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  reviewerId?: string | undefined;
  rating?: number | undefined;
  reviewText?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdReviews$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdReviews$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdReviews
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    reviewerId: z.string().optional(),
    rating: z.number().optional(),
    reviewText: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdReviews$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdReviews$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdReviews$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdReviews$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdReviews$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdReviews$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdReviews$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdReviewsToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdReviews:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdReviews,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdReviews$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1WorkspaceIdReviews,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdReviewsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdReviews,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdReviews$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdReviews' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdInfo$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInfo,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    supportedLanguages: z.array(z.string()).optional(),
    sdkFeatures: z.array(z.string()).optional(),
    testCoverage: z.record(z.number()).optional(),
    securityScans: z.array(z.string()).optional(),
    performanceMetrics: z.record(z.string()).optional(),
    developmentStatus: z.string().optional(),
    knownIssues: z.array(z.string()).optional(),
    roadmapUrl: z.string().optional(),
    lastSecurityAudit: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdInfo$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  supportedLanguages?: Array<string> | undefined;
  sdkFeatures?: Array<string> | undefined;
  testCoverage?: { [k: string]: number } | undefined;
  securityScans?: Array<string> | undefined;
  performanceMetrics?: { [k: string]: string } | undefined;
  developmentStatus?: string | undefined;
  knownIssues?: Array<string> | undefined;
  roadmapUrl?: string | undefined;
  lastSecurityAudit?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdInfo$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInfo$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInfo
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    supportedLanguages: z.array(z.string()).optional(),
    sdkFeatures: z.array(z.string()).optional(),
    testCoverage: z.record(z.number()).optional(),
    securityScans: z.array(z.string()).optional(),
    performanceMetrics: z.record(z.string()).optional(),
    developmentStatus: z.string().optional(),
    knownIssues: z.array(z.string()).optional(),
    roadmapUrl: z.string().optional(),
    lastSecurityAudit: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdInfo$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdInfo$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInfo$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdInfo$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInfo$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdInfo$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInfo$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdInfoToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdInfo:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInfo,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInfo$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1WorkspaceIdInfo,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdInfoFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdInfo,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdInfo$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdInfo' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdWebhooks$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWebhooks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    url: z.string().optional(),
    subscribedEvents: z.array(z.string()).optional(),
    secretKey: z.string().optional(),
    retryCount: z.number().int().optional(),
    timeoutSeconds: z.number().int().optional(),
    isActive: z.boolean().optional(),
    headers: z.record(z.string()).optional(),
    lastTriggered: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdWebhooks$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  url?: string | undefined;
  subscribedEvents?: Array<string> | undefined;
  secretKey?: string | undefined;
  retryCount?: number | undefined;
  timeoutSeconds?: number | undefined;
  isActive?: boolean | undefined;
  headers?: { [k: string]: string } | undefined;
  lastTriggered?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdWebhooks$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWebhooks$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWebhooks
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    url: z.string().optional(),
    subscribedEvents: z.array(z.string()).optional(),
    secretKey: z.string().optional(),
    retryCount: z.number().int().optional(),
    timeoutSeconds: z.number().int().optional(),
    isActive: z.boolean().optional(),
    headers: z.record(z.string()).optional(),
    lastTriggered: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdWebhooks$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdWebhooks$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWebhooks$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdWebhooks$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWebhooks$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdWebhooks$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWebhooks$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdWebhooksToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdWebhooks:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWebhooks,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWebhooks$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1WorkspaceIdWebhooks,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdWebhooksFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdWebhooks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdWebhooks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdWebhooks' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdPermissions$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdPermissions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    scope: z.string().optional(),
    description: z.string().optional(),
    isRequired: z.boolean().optional(),
    accessLevels: z.array(z.string()).optional(),
    constraints: z.record(z.string()).optional(),
    requiresApproval: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdPermissions$Outbound =
  {
    id?: string | undefined;
    appId?: string | undefined;
    scope?: string | undefined;
    description?: string | undefined;
    isRequired?: boolean | undefined;
    accessLevels?: Array<string> | undefined;
    constraints?: { [k: string]: string } | undefined;
    requiresApproval?: boolean | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
  };

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdPermissions$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdPermissions$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdPermissions
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    scope: z.string().optional(),
    description: z.string().optional(),
    isRequired: z.boolean().optional(),
    accessLevels: z.array(z.string()).optional(),
    constraints: z.record(z.string()).optional(),
    requiresApproval: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdPermissions$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdPermissions$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdPermissions$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdPermissions$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdPermissions$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdPermissions$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdPermissions$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdPermissionsToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdPermissions:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdPermissions,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdPermissions$outboundSchema
      .parse(getApiLeadScraperMicroserviceApiV1WorkspaceIdPermissions),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdPermissionsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdPermissions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdPermissions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdPermissions' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstalledApps$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstalledApps,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    developerId: z.string().optional(),
    category:
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdCategory$inboundSchema
        .default("APP_CATEGORY_UNSPECIFIED"),
    supportedContractTypes: z.array(z.string()).optional(),
    features: z.array(z.string()).optional(),
    pricingModel:
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdPricingModel$inboundSchema
        .default("PRICING_MODEL_UNSPECIFIED"),
    pricingTiers: z.record(z.number()).optional(),
    supportedIntegrations: z.array(z.string()).optional(),
    isVerified: z.boolean().optional(),
    rating: z.number().optional(),
    installationCount: z.number().int().optional(),
    requiredPermissions: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    documentationUrl: z.string().optional(),
    supportEmail: z.string().optional(),
    screenshots: z.array(z.string()).optional(),
    privacyPolicyUrl: z.string().optional(),
    termsUrl: z.string().optional(),
    publishedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesVersions$inboundSchema
      ),
    ).optional(),
    installations: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstallations$inboundSchema
      ),
    ).optional(),
    analytics: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdAnalytics$inboundSchema
      ),
    ).optional(),
    reviews: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdReviews$inboundSchema
      ),
    ).optional(),
    info: z.lazy(() =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdInfo$inboundSchema
    ).optional(),
    webhooks: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdWebhooks$inboundSchema
      ),
    ).optional(),
    permissions: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdPermissions$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstalledApps$Outbound =
  {
    id?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    developerId?: string | undefined;
    category: string;
    supportedContractTypes?: Array<string> | undefined;
    features?: Array<string> | undefined;
    pricingModel: string;
    pricingTiers?: { [k: string]: number } | undefined;
    supportedIntegrations?: Array<string> | undefined;
    isVerified?: boolean | undefined;
    rating?: number | undefined;
    installationCount?: number | undefined;
    requiredPermissions?: Array<string> | undefined;
    metadata?: { [k: string]: string } | undefined;
    documentationUrl?: string | undefined;
    supportEmail?: string | undefined;
    screenshots?: Array<string> | undefined;
    privacyPolicyUrl?: string | undefined;
    termsUrl?: string | undefined;
    publishedAt?: string | undefined;
    lastUpdated?: string | undefined;
    versions?:
      | Array<
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesVersions$Outbound
      >
      | undefined;
    installations?:
      | Array<
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstallations$Outbound
      >
      | undefined;
    analytics?:
      | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdAnalytics$Outbound>
      | undefined;
    reviews?:
      | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdReviews$Outbound>
      | undefined;
    info?:
      | GetApiLeadScraperMicroserviceApiV1WorkspaceIdInfo$Outbound
      | undefined;
    webhooks?:
      | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdWebhooks$Outbound>
      | undefined;
    permissions?:
      | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdPermissions$Outbound>
      | undefined;
  };

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstalledApps$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstalledApps$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstalledApps
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    developerId: z.string().optional(),
    category:
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdCategory$outboundSchema
        .default("APP_CATEGORY_UNSPECIFIED"),
    supportedContractTypes: z.array(z.string()).optional(),
    features: z.array(z.string()).optional(),
    pricingModel:
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdPricingModel$outboundSchema
        .default("PRICING_MODEL_UNSPECIFIED"),
    pricingTiers: z.record(z.number()).optional(),
    supportedIntegrations: z.array(z.string()).optional(),
    isVerified: z.boolean().optional(),
    rating: z.number().optional(),
    installationCount: z.number().int().optional(),
    requiredPermissions: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    documentationUrl: z.string().optional(),
    supportEmail: z.string().optional(),
    screenshots: z.array(z.string()).optional(),
    privacyPolicyUrl: z.string().optional(),
    termsUrl: z.string().optional(),
    publishedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
    versions: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspacesVersions$outboundSchema
      ),
    ).optional(),
    installations: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstallations$outboundSchema
      ),
    ).optional(),
    analytics: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdAnalytics$outboundSchema
      ),
    ).optional(),
    reviews: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdReviews$outboundSchema
      ),
    ).optional(),
    info: z.lazy(() =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdInfo$outboundSchema
    ).optional(),
    webhooks: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdWebhooks$outboundSchema
      ),
    ).optional(),
    permissions: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdPermissions$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstalledApps$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstalledApps$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstalledApps$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstalledApps$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstalledApps$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstalledApps$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstalledApps$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdInstalledAppsToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdInstalledApps:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstalledApps,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstalledApps$outboundSchema
      .parse(getApiLeadScraperMicroserviceApiV1WorkspaceIdInstalledApps),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdInstalledAppsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstalledApps,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstalledApps$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstalledApps' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspace$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspace,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    uniqueIdentifier: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    storageQuota: z.string().optional(),
    usedStorage: z.string().optional(),
    allowPublicSharing: z.boolean().optional(),
    requireApproval: z.boolean().optional(),
    gdprCompliant: z.boolean().optional(),
    hipaaCompliant: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    folders: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdFolders$inboundSchema
      ),
    ).optional(),
    templates: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplates$inboundSchema
      ),
    ).optional(),
    sharing: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdSharing$inboundSchema
      ),
    ).optional(),
    activities: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdActivities$inboundSchema
      ),
    ).optional(),
    compliance: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdCompliance$inboundSchema
      ),
    ).optional(),
    installedApps: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstalledApps$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspace$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  uniqueIdentifier?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  storageQuota?: string | undefined;
  usedStorage?: string | undefined;
  allowPublicSharing?: boolean | undefined;
  requireApproval?: boolean | undefined;
  gdprCompliant?: boolean | undefined;
  hipaaCompliant?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  folders?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdFolders$Outbound>
    | undefined;
  templates?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplates$Outbound>
    | undefined;
  sharing?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdSharing$Outbound>
    | undefined;
  activities?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdActivities$Outbound>
    | undefined;
  compliance?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdCompliance$Outbound>
    | undefined;
  installedApps?:
    | Array<GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstalledApps$Outbound>
    | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspace$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspace$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspace
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    uniqueIdentifier: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    storageQuota: z.string().optional(),
    usedStorage: z.string().optional(),
    allowPublicSharing: z.boolean().optional(),
    requireApproval: z.boolean().optional(),
    gdprCompliant: z.boolean().optional(),
    hipaaCompliant: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    folders: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdFolders$outboundSchema
      ),
    ).optional(),
    templates: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdTemplates$outboundSchema
      ),
    ).optional(),
    sharing: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdSharing$outboundSchema
      ),
    ).optional(),
    activities: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdActivities$outboundSchema
      ),
    ).optional(),
    compliance: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdCompliance$outboundSchema
      ),
    ).optional(),
    installedApps: z.array(
      z.lazy(() =>
        GetApiLeadScraperMicroserviceApiV1WorkspaceIdInstalledApps$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspace$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspace$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspace$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspace$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspace$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspace$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspace$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspaceToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspace:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspace,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspace$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspace,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspaceFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspace,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspace$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspace' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdData$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdData,
    z.ZodTypeDef,
    unknown
  > = z.object({
    workspace: z.lazy(() =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspace$inboundSchema
    ).optional(),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdData$Outbound = {
  workspace?:
    | GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspace$Outbound
    | undefined;
};

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdData$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdData$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdData
  > = z.object({
    workspace: z.lazy(() =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdWorkspace$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdData$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdData$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdData$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdData$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdData$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdData$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdData$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdDataToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdData:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdData,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdData$outboundSchema.parse(
      getApiLeadScraperMicroserviceApiV1WorkspaceIdData,
    ),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdDataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdData' from JSON`,
  );
}

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdResponseBody$inboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.lazy(() =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdData$inboundSchema
    ),
  });

/** @internal */
export type GetApiLeadScraperMicroserviceApiV1WorkspaceIdResponseBody$Outbound =
  {
    data: GetApiLeadScraperMicroserviceApiV1WorkspaceIdData$Outbound;
  };

/** @internal */
export const GetApiLeadScraperMicroserviceApiV1WorkspaceIdResponseBody$outboundSchema:
  z.ZodType<
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdResponseBody$Outbound,
    z.ZodTypeDef,
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdResponseBody
  > = z.object({
    data: z.lazy(() =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdData$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiLeadScraperMicroserviceApiV1WorkspaceIdResponseBody$ {
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdResponseBody$inboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdResponseBody$outboundSchema;
  /** @deprecated use `GetApiLeadScraperMicroserviceApiV1WorkspaceIdResponseBody$Outbound` instead. */
  export type Outbound =
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdResponseBody$Outbound;
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdResponseBodyToJSON(
  getApiLeadScraperMicroserviceApiV1WorkspaceIdResponseBody:
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdResponseBody,
): string {
  return JSON.stringify(
    GetApiLeadScraperMicroserviceApiV1WorkspaceIdResponseBody$outboundSchema
      .parse(getApiLeadScraperMicroserviceApiV1WorkspaceIdResponseBody),
  );
}

export function getApiLeadScraperMicroserviceApiV1WorkspaceIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiLeadScraperMicroserviceApiV1WorkspaceIdResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiLeadScraperMicroserviceApiV1WorkspaceIdResponseBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiLeadScraperMicroserviceApiV1WorkspaceIdResponseBody' from JSON`,
  );
}
