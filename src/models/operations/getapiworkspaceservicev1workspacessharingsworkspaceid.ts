/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdRequest = {
  workspaceId: string;
  pageSize?: number | undefined;
  pageToken?: string | undefined;
};

export type Sharings = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdData = {
  sharings?: Array<Sharings> | undefined;
  nextPageToken?: string | undefined;
  totalSize?: number | undefined;
};

export type GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdResponseBody =
  {
    data: GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdData;
  };

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdRequest$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    workspaceId: z.string(),
    pageSize: z.number().optional(),
    pageToken: z.string().optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdRequest$Outbound =
  {
    workspaceId: string;
    pageSize?: number | undefined;
    pageToken?: string | undefined;
  };

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdRequest$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdRequest$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdRequest
  > = z.object({
    workspaceId: z.string(),
    pageSize: z.number().optional(),
    pageToken: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdRequest$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdRequest$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdRequest$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdRequest$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdRequest$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdRequestToJSON(
  getApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdRequest:
    GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdRequest,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdRequest$outboundSchema
      .parse(getApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdRequest),
  );
}

export function getApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdRequest' from JSON`,
  );
}

/** @internal */
export const Sharings$inboundSchema: z.ZodType<
  Sharings,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  sharedWithEmail: z.string().optional(),
  permissionLevel: z.string().optional(),
  expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type Sharings$Outbound = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const Sharings$outboundSchema: z.ZodType<
  Sharings$Outbound,
  z.ZodTypeDef,
  Sharings
> = z.object({
  id: z.string().optional(),
  sharedWithEmail: z.string().optional(),
  permissionLevel: z.string().optional(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sharings$ {
  /** @deprecated use `Sharings$inboundSchema` instead. */
  export const inboundSchema = Sharings$inboundSchema;
  /** @deprecated use `Sharings$outboundSchema` instead. */
  export const outboundSchema = Sharings$outboundSchema;
  /** @deprecated use `Sharings$Outbound` instead. */
  export type Outbound = Sharings$Outbound;
}

export function sharingsToJSON(sharings: Sharings): string {
  return JSON.stringify(Sharings$outboundSchema.parse(sharings));
}

export function sharingsFromJSON(
  jsonString: string,
): SafeParseResult<Sharings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Sharings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Sharings' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdData$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdData,
    z.ZodTypeDef,
    unknown
  > = z.object({
    sharings: z.array(z.lazy(() => Sharings$inboundSchema)).optional(),
    nextPageToken: z.string().optional(),
    totalSize: z.number().int().optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdData$Outbound =
  {
    sharings?: Array<Sharings$Outbound> | undefined;
    nextPageToken?: string | undefined;
    totalSize?: number | undefined;
  };

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdData$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdData$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdData
  > = z.object({
    sharings: z.array(z.lazy(() => Sharings$outboundSchema)).optional(),
    nextPageToken: z.string().optional(),
    totalSize: z.number().int().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdData$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdData$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdData$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdData$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdData$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdData$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdData$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdDataToJSON(
  getApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdData:
    GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdData,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdData$outboundSchema
      .parse(getApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdData),
  );
}

export function getApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdDataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdData$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdData' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdResponseBody$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.lazy(() =>
      GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdData$inboundSchema
    ),
  });

/** @internal */
export type GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdResponseBody$Outbound =
  {
    data: GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdData$Outbound;
  };

/** @internal */
export const GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdResponseBody$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdResponseBody$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdResponseBody
  > = z.object({
    data: z.lazy(() =>
      GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdData$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdResponseBody$ {
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdResponseBody$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdResponseBody$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdResponseBody$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdResponseBody$Outbound;
}

export function getApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdResponseBodyToJSON(
  getApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdResponseBody:
    GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdResponseBody,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdResponseBody$outboundSchema
      .parse(getApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdResponseBody),
  );
}

export function getApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdResponseBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiWorkspaceServiceV1WorkspacesSharingsWorkspaceIdResponseBody' from JSON`,
  );
}
