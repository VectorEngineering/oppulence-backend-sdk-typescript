/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetApiWorkspaceServiceV1AccountsIdRequest = {
  id: string;
};

export const GetApiWorkspaceServiceV1AccountsIdComplianceLevel = {
  ComplianceLevelUnspecified: "COMPLIANCE_LEVEL_UNSPECIFIED",
  ComplianceLevelNone: "COMPLIANCE_LEVEL_NONE",
  ComplianceLevelBasic: "COMPLIANCE_LEVEL_BASIC",
  ComplianceLevelAdvanced: "COMPLIANCE_LEVEL_ADVANCED",
  ComplianceLevelEnterprise: "COMPLIANCE_LEVEL_ENTERPRISE",
} as const;
export type GetApiWorkspaceServiceV1AccountsIdComplianceLevel = ClosedEnum<
  typeof GetApiWorkspaceServiceV1AccountsIdComplianceLevel
>;

export type GetApiWorkspaceServiceV1AccountsIdEmbeddings = {
  id?: string | undefined;
  embeddings?: Array<number> | undefined;
  modelVersion?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdAccountsResponse200Versions = {
  id?: string | undefined;
  fileId?: string | undefined;
  versionNumber?: number | undefined;
  s3Key?: string | undefined;
  size?: string | undefined;
  commitMessage?: string | undefined;
  authorId?: string | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdComments = {
  id?: string | undefined;
  authorId?: string | undefined;
  content?: string | undefined;
  startPosition?: number | undefined;
  endPosition?: number | undefined;
  resolved?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdAccountsSharing = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdSnapshots = {
  id?: string | undefined;
  fileId?: string | undefined;
  snapshotHash?: string | undefined;
  content?: string | undefined;
  authorId?: string | undefined;
  reason?: string | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdFiles = {
  id?: string | undefined;
  name?: string | undefined;
  size?: string | undefined;
  s3Key?: string | undefined;
  s3BucketName?: string | undefined;
  isDeleted?: boolean | undefined;
  version?: number | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  embeddings?: GetApiWorkspaceServiceV1AccountsIdEmbeddings | undefined;
  versions?:
    | Array<GetApiWorkspaceServiceV1AccountsIdAccountsResponse200Versions>
    | undefined;
  comments?: Array<GetApiWorkspaceServiceV1AccountsIdComments> | undefined;
  sharing?:
    | Array<GetApiWorkspaceServiceV1AccountsIdAccountsSharing>
    | undefined;
  snapshots?: Array<GetApiWorkspaceServiceV1AccountsIdSnapshots> | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdFolders = {
  id?: string | undefined;
  name?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  isDeleted?: boolean | undefined;
  parentFolderId?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  files?: Array<GetApiWorkspaceServiceV1AccountsIdFiles> | undefined;
};

export const GetApiWorkspaceServiceV1AccountsIdTemplateType = {
  TemplateTypeUnspecified: "TEMPLATE_TYPE_UNSPECIFIED",
  TemplateTypeStandard: "TEMPLATE_TYPE_STANDARD",
  TemplateTypeSmart: "TEMPLATE_TYPE_SMART",
  TemplateTypeAdaptive: "TEMPLATE_TYPE_ADAPTIVE",
  TemplateTypeAiGenerated: "TEMPLATE_TYPE_AI_GENERATED",
} as const;
export type GetApiWorkspaceServiceV1AccountsIdTemplateType = ClosedEnum<
  typeof GetApiWorkspaceServiceV1AccountsIdTemplateType
>;

export type GetApiWorkspaceServiceV1AccountsIdVersions = {
  id?: string | undefined;
  templateId?: string | undefined;
  version?: string | undefined;
  baseContent?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  authorId?: string | undefined;
  changeDescription?: string | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdVariables = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  variableType?: string | undefined;
  defaultValue?: string | undefined;
  isRequired?: boolean | undefined;
  validationRules?: string | undefined;
  dataSource?: string | undefined;
  aiExtractionRules?: string | undefined;
  alternatives?: Array<string> | undefined;
  templateId?: string | undefined;
};

export const GetApiWorkspaceServiceV1AccountsIdStatus = {
  DocumentStatusUnspecified: "DOCUMENT_STATUS_UNSPECIFIED",
  DocumentStatusDraft: "DOCUMENT_STATUS_DRAFT",
  DocumentStatusInReview: "DOCUMENT_STATUS_IN_REVIEW",
  DocumentStatusApproved: "DOCUMENT_STATUS_APPROVED",
  DocumentStatusRejected: "DOCUMENT_STATUS_REJECTED",
  DocumentStatusExpired: "DOCUMENT_STATUS_EXPIRED",
  DocumentStatusArchived: "DOCUMENT_STATUS_ARCHIVED",
} as const;
export type GetApiWorkspaceServiceV1AccountsIdStatus = ClosedEnum<
  typeof GetApiWorkspaceServiceV1AccountsIdStatus
>;

export const GetApiWorkspaceServiceV1AccountsIdAccountsStatus = {
  SignatureStatusUnspecified: "SIGNATURE_STATUS_UNSPECIFIED",
  SignatureStatusPending: "SIGNATURE_STATUS_PENDING",
  SignatureStatusSigned: "SIGNATURE_STATUS_SIGNED",
  SignatureStatusRejected: "SIGNATURE_STATUS_REJECTED",
  SignatureStatusExpired: "SIGNATURE_STATUS_EXPIRED",
  SignatureStatusRevoked: "SIGNATURE_STATUS_REVOKED",
} as const;
export type GetApiWorkspaceServiceV1AccountsIdAccountsStatus = ClosedEnum<
  typeof GetApiWorkspaceServiceV1AccountsIdAccountsStatus
>;

export type GetApiWorkspaceServiceV1AccountsIdSignatureBlocks = {
  id?: string | undefined;
  requestId?: string | undefined;
  blockType?: string | undefined;
  pageNumber?: number | undefined;
  xPosition?: number | undefined;
  yPosition?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
  isRequired?: boolean | undefined;
  signatureData?: string | undefined;
  signedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdWorkflow = {
  id?: string | undefined;
  requestId?: string | undefined;
  signingOrder?: Array<string> | undefined;
  currentSigner?: string | undefined;
  workflowStatus?: string | undefined;
  parallelSigning?: boolean | undefined;
  requireAllSignatures?: boolean | undefined;
  deadline?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdSignatureRequests = {
  id?: string | undefined;
  status?: GetApiWorkspaceServiceV1AccountsIdAccountsStatus | undefined;
  signerEmail?: string | undefined;
  signerName?: string | undefined;
  role?: string | undefined;
  authenticationMethod?: string | undefined;
  expiresAt?: Date | undefined;
  requiresMfa?: boolean | undefined;
  signatureType?: string | undefined;
  reminderSchedule?: Array<string> | undefined;
  documentId?: string | undefined;
  signatureBlocks?:
    | Array<GetApiWorkspaceServiceV1AccountsIdSignatureBlocks>
    | undefined;
  workflow?: GetApiWorkspaceServiceV1AccountsIdWorkflow | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdAiAssistance = {
  id?: string | undefined;
  documentId?: string | undefined;
  interactionType?: string | undefined;
  userQuery?: string | undefined;
  aiResponse?: string | undefined;
  context?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdRounds = {
  id?: string | undefined;
  historyId?: string | undefined;
  roundNumber?: number | undefined;
  proposerId?: string | undefined;
  proposalContent?: string | undefined;
  responseContent?: string | undefined;
  status?: string | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdNegotiation = {
  id?: string | undefined;
  documentId?: string | undefined;
  rounds?: Array<GetApiWorkspaceServiceV1AccountsIdRounds> | undefined;
  currentStatus?: string | undefined;
  startedAt?: Date | undefined;
  lastUpdated?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdMerges = {
  id?: string | undefined;
  branchId?: string | undefined;
  sourceBranch?: string | undefined;
  targetBranch?: string | undefined;
  mergeStatus?: string | undefined;
  mergeStrategy?: string | undefined;
  conflicts?: Array<string> | undefined;
  mergerId?: string | undefined;
  createdAt?: Date | undefined;
  completedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdPolicy = {
  id?: string | undefined;
  branchId?: string | undefined;
  requiredApprovers?: Array<string> | undefined;
  minimumApprovals?: number | undefined;
  enforceLinearHistory?: boolean | undefined;
  allowForcePush?: boolean | undefined;
  protectedPaths?: Array<string> | undefined;
  mergeRules?: { [k: string]: string } | undefined;
  automatedChecks?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdMergeRequests = {
  id?: string | undefined;
  sourceBranchId?: string | undefined;
  targetBranchId?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  authorId?: string | undefined;
  reviewers?: Array<string> | undefined;
  status?: string | undefined;
  labels?: Array<string> | undefined;
  hasConflicts?: boolean | undefined;
  automatedCheckResults?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdBranches = {
  id?: string | undefined;
  name?: string | undefined;
  baseVersionHash?: string | undefined;
  currentHeadHash?: string | undefined;
  purpose?: string | undefined;
  status?: string | undefined;
  reviewers?: Array<string> | undefined;
  branchMetadata?: { [k: string]: string } | undefined;
  isLocked?: boolean | undefined;
  lastUpdated?: Date | undefined;
  merges?: Array<GetApiWorkspaceServiceV1AccountsIdMerges> | undefined;
  policy?: GetApiWorkspaceServiceV1AccountsIdPolicy | undefined;
  mergeRequests?:
    | Array<GetApiWorkspaceServiceV1AccountsIdMergeRequests>
    | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdChanges = {
  id?: string | undefined;
  versionId?: string | undefined;
  changeType?: string | undefined;
  contentBefore?: string | undefined;
  contentAfter?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdSummaries = {
  id?: string | undefined;
  versionId?: string | undefined;
  summaryType?: string | undefined;
  content?: string | undefined;
  targetAudience?: string | undefined;
  keyPoints?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdAccountsResponseVersions = {
  id?: string | undefined;
  versionHash?: string | undefined;
  parentHash?: string | undefined;
  commitMessage?: string | undefined;
  authorId?: string | undefined;
  branchName?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  tags?: Array<string> | undefined;
  isApproved?: boolean | undefined;
  approvalChain?: string | undefined;
  createdAt?: Date | undefined;
  branches?: Array<GetApiWorkspaceServiceV1AccountsIdBranches> | undefined;
  changes?: Array<GetApiWorkspaceServiceV1AccountsIdChanges> | undefined;
  summaries?: Array<GetApiWorkspaceServiceV1AccountsIdSummaries> | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdInstances = {
  id?: string | undefined;
  templateId?: string | undefined;
  status?: GetApiWorkspaceServiceV1AccountsIdStatus | undefined;
  fieldValues?: { [k: string]: string } | undefined;
  signers?: Array<string> | undefined;
  language?: string | undefined;
  isCompleted?: boolean | undefined;
  dueDate?: Date | undefined;
  generatedContent?: string | undefined;
  attachments?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  signatureRequests?:
    | Array<GetApiWorkspaceServiceV1AccountsIdSignatureRequests>
    | undefined;
  aiAssistance?:
    | Array<GetApiWorkspaceServiceV1AccountsIdAiAssistance>
    | undefined;
  negotiation?: GetApiWorkspaceServiceV1AccountsIdNegotiation | undefined;
  versions?:
    | Array<GetApiWorkspaceServiceV1AccountsIdAccountsResponseVersions>
    | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdExplanations = {
  id?: string | undefined;
  templateId?: string | undefined;
  sectionIdentifier?: string | undefined;
  explanationText?: string | undefined;
  complexityLevel?: string | undefined;
  relatedTerms?: Array<string> | undefined;
  legalReferences?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdRiskAssessments = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  riskType?: string | undefined;
  riskScore?: number | undefined;
  assessmentDetails?: string | undefined;
  mitigationSuggestions?: Array<string> | undefined;
  assessorId?: string | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdComplianceChecks = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  complianceStandard?: string | undefined;
  checkResult?: string | undefined;
  violations?: Array<string> | undefined;
  remediationSteps?: string | undefined;
  checkDate?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdIntelligence = {
  id?: string | undefined;
  contractType?: string | undefined;
  riskScores?: { [k: string]: number } | undefined;
  detectedClauses?: { [k: string]: string } | undefined;
  keyObligations?: Array<string> | undefined;
  complianceScores?: { [k: string]: number } | undefined;
  jurisdiction?: string | undefined;
  governingLaws?: Array<string> | undefined;
  semanticAnalysis?: { [k: string]: string } | undefined;
  analysisDate?: Date | undefined;
  riskAssessments?:
    | Array<GetApiWorkspaceServiceV1AccountsIdRiskAssessments>
    | undefined;
  complianceChecks?:
    | Array<GetApiWorkspaceServiceV1AccountsIdComplianceChecks>
    | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdTemplates = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  industryType?: string | undefined;
  documentType?: string | undefined;
  baseContent?: string | undefined;
  isAdaptive?: boolean | undefined;
  metadata?: { [k: string]: string } | undefined;
  supportedLanguages?: Array<string> | undefined;
  requiredDataFields?: Array<string> | undefined;
  version?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  templateType?: GetApiWorkspaceServiceV1AccountsIdTemplateType | undefined;
  content?: string | undefined;
  detectedVariables?: Array<string> | undefined;
  variableMappings?: { [k: string]: string } | undefined;
  isContextAware?: boolean | undefined;
  supportedContexts?: Array<string> | undefined;
  formattingRules?: { [k: string]: string } | undefined;
  conditionalSections?: Array<string> | undefined;
  versions?: Array<GetApiWorkspaceServiceV1AccountsIdVersions> | undefined;
  variables?: Array<GetApiWorkspaceServiceV1AccountsIdVariables> | undefined;
  instances?: Array<GetApiWorkspaceServiceV1AccountsIdInstances> | undefined;
  explanations?:
    | Array<GetApiWorkspaceServiceV1AccountsIdExplanations>
    | undefined;
  intelligence?:
    | Array<GetApiWorkspaceServiceV1AccountsIdIntelligence>
    | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdSharing = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdActivities = {
  id?: string | undefined;
  activityType?: string | undefined;
  userId?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdCompliance = {
  id?: string | undefined;
  complianceType?: string | undefined;
  status?: string | undefined;
  certificationId?: string | undefined;
  validUntil?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export const GetApiWorkspaceServiceV1AccountsIdCategory = {
  AppCategoryUnspecified: "APP_CATEGORY_UNSPECIFIED",
  AppCategoryContractAutomation: "APP_CATEGORY_CONTRACT_AUTOMATION",
  AppCategoryContractAnalysis: "APP_CATEGORY_CONTRACT_ANALYSIS",
  AppCategoryIntegration: "APP_CATEGORY_INTEGRATION",
  AppCategoryAiPowered: "APP_CATEGORY_AI_POWERED",
  AppCategoryWorkflow: "APP_CATEGORY_WORKFLOW",
  AppCategoryCompliance: "APP_CATEGORY_COMPLIANCE",
} as const;
export type GetApiWorkspaceServiceV1AccountsIdCategory = ClosedEnum<
  typeof GetApiWorkspaceServiceV1AccountsIdCategory
>;

export const GetApiWorkspaceServiceV1AccountsIdPricingModel = {
  PricingModelUnspecified: "PRICING_MODEL_UNSPECIFIED",
  PricingModelFree: "PRICING_MODEL_FREE",
  PricingModelSubscription: "PRICING_MODEL_SUBSCRIPTION",
  PricingModelUsageBased: "PRICING_MODEL_USAGE_BASED",
  PricingModelEnterprise: "PRICING_MODEL_ENTERPRISE",
} as const;
export type GetApiWorkspaceServiceV1AccountsIdPricingModel = ClosedEnum<
  typeof GetApiWorkspaceServiceV1AccountsIdPricingModel
>;

export type GetApiWorkspaceServiceV1AccountsIdAccountsVersions = {
  id?: string | undefined;
  appId?: string | undefined;
  versionNumber?: string | undefined;
  changelog?: string | undefined;
  requirements?: { [k: string]: string } | undefined;
  isPublic?: boolean | undefined;
  releaseDate?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdInstallations = {
  id?: string | undefined;
  appId?: string | undefined;
  workspaceId?: string | undefined;
  versionInstalled?: string | undefined;
  configuration?: { [k: string]: string } | undefined;
  installationStatus?: string | undefined;
  installedAt?: Date | undefined;
  lastUsed?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdAnalytics = {
  id?: string | undefined;
  appId?: string | undefined;
  metricName?: string | undefined;
  metricValue?: number | undefined;
  dimensions?: { [k: string]: string } | undefined;
  recordedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdReviews = {
  id?: string | undefined;
  appId?: string | undefined;
  reviewerId?: string | undefined;
  rating?: number | undefined;
  reviewText?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdInfo = {
  id?: string | undefined;
  appId?: string | undefined;
  supportedLanguages?: Array<string> | undefined;
  sdkFeatures?: Array<string> | undefined;
  testCoverage?: { [k: string]: number } | undefined;
  securityScans?: Array<string> | undefined;
  performanceMetrics?: { [k: string]: string } | undefined;
  developmentStatus?: string | undefined;
  knownIssues?: Array<string> | undefined;
  roadmapUrl?: string | undefined;
  lastSecurityAudit?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdWebhooks = {
  id?: string | undefined;
  appId?: string | undefined;
  url?: string | undefined;
  subscribedEvents?: Array<string> | undefined;
  secretKey?: string | undefined;
  retryCount?: number | undefined;
  timeoutSeconds?: number | undefined;
  isActive?: boolean | undefined;
  headers?: { [k: string]: string } | undefined;
  lastTriggered?: Date | undefined;
  createdAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdPermissions = {
  id?: string | undefined;
  appId?: string | undefined;
  scope?: string | undefined;
  description?: string | undefined;
  isRequired?: boolean | undefined;
  accessLevels?: Array<string> | undefined;
  constraints?: { [k: string]: string } | undefined;
  requiresApproval?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdInstalledApps = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  developerId?: string | undefined;
  category?: GetApiWorkspaceServiceV1AccountsIdCategory | undefined;
  supportedContractTypes?: Array<string> | undefined;
  features?: Array<string> | undefined;
  pricingModel?: GetApiWorkspaceServiceV1AccountsIdPricingModel | undefined;
  pricingTiers?: { [k: string]: number } | undefined;
  supportedIntegrations?: Array<string> | undefined;
  isVerified?: boolean | undefined;
  rating?: number | undefined;
  installationCount?: number | undefined;
  requiredPermissions?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  documentationUrl?: string | undefined;
  supportEmail?: string | undefined;
  screenshots?: Array<string> | undefined;
  privacyPolicyUrl?: string | undefined;
  termsUrl?: string | undefined;
  publishedAt?: Date | undefined;
  lastUpdated?: Date | undefined;
  versions?:
    | Array<GetApiWorkspaceServiceV1AccountsIdAccountsVersions>
    | undefined;
  installations?:
    | Array<GetApiWorkspaceServiceV1AccountsIdInstallations>
    | undefined;
  analytics?: Array<GetApiWorkspaceServiceV1AccountsIdAnalytics> | undefined;
  reviews?: Array<GetApiWorkspaceServiceV1AccountsIdReviews> | undefined;
  info?: GetApiWorkspaceServiceV1AccountsIdInfo | undefined;
  webhooks?: Array<GetApiWorkspaceServiceV1AccountsIdWebhooks> | undefined;
  permissions?:
    | Array<GetApiWorkspaceServiceV1AccountsIdPermissions>
    | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdWorkspaces = {
  id?: string | undefined;
  name?: string | undefined;
  uniqueIdentifier?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  storageQuota?: string | undefined;
  usedStorage?: string | undefined;
  allowPublicSharing?: boolean | undefined;
  requireApproval?: boolean | undefined;
  gdprCompliant?: boolean | undefined;
  hipaaCompliant?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  folders?: Array<GetApiWorkspaceServiceV1AccountsIdFolders> | undefined;
  templates?: Array<GetApiWorkspaceServiceV1AccountsIdTemplates> | undefined;
  sharing?: Array<GetApiWorkspaceServiceV1AccountsIdSharing> | undefined;
  activities?: Array<GetApiWorkspaceServiceV1AccountsIdActivities> | undefined;
  compliance?: Array<GetApiWorkspaceServiceV1AccountsIdCompliance> | undefined;
  installedApps?:
    | Array<GetApiWorkspaceServiceV1AccountsIdInstalledApps>
    | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdDataProfiles = {
  id?: string | undefined;
  name?: string | undefined;
  profileType?: string | undefined;
  dataFields?: { [k: string]: string } | undefined;
  isDefault?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdAccount = {
  id?: string | undefined;
  auth0UserId?: string | undefined;
  email?: string | undefined;
  baseDirectory?: string | undefined;
  bucketName?: string | undefined;
  region?: string | undefined;
  orgId?: string | undefined;
  tenantId?: string | undefined;
  roles?: Array<string> | undefined;
  permissions?: Array<string> | undefined;
  mfaEnabled?: boolean | undefined;
  complianceLevel?:
    | GetApiWorkspaceServiceV1AccountsIdComplianceLevel
    | undefined;
  preferences?: { [k: string]: string } | undefined;
  apiKeys?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  workspaces?: Array<GetApiWorkspaceServiceV1AccountsIdWorkspaces> | undefined;
  dataProfiles?:
    | Array<GetApiWorkspaceServiceV1AccountsIdDataProfiles>
    | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdData = {
  account?: GetApiWorkspaceServiceV1AccountsIdAccount | undefined;
};

export type GetApiWorkspaceServiceV1AccountsIdResponseBody = {
  data: GetApiWorkspaceServiceV1AccountsIdData;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdRequest$inboundSchema: z.ZodType<
  GetApiWorkspaceServiceV1AccountsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdRequest$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdRequest$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdRequest
  > = z.object({
    id: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdRequest$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdRequest$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdRequest$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdRequest$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdRequest$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdRequestToJSON(
  getApiWorkspaceServiceV1AccountsIdRequest:
    GetApiWorkspaceServiceV1AccountsIdRequest,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdRequest$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdRequest,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdRequest' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdComplianceLevel$inboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1AccountsIdComplianceLevel> = z
    .nativeEnum(GetApiWorkspaceServiceV1AccountsIdComplianceLevel);

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdComplianceLevel$outboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1AccountsIdComplianceLevel> =
    GetApiWorkspaceServiceV1AccountsIdComplianceLevel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdComplianceLevel$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdComplianceLevel$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdComplianceLevel$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdComplianceLevel$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdComplianceLevel$outboundSchema;
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdEmbeddings$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdEmbeddings,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    embeddings: z.array(z.number()).optional(),
    modelVersion: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdEmbeddings$Outbound = {
  id?: string | undefined;
  embeddings?: Array<number> | undefined;
  modelVersion?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdEmbeddings$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdEmbeddings$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdEmbeddings
  > = z.object({
    id: z.string().optional(),
    embeddings: z.array(z.number()).optional(),
    modelVersion: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdEmbeddings$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdEmbeddings$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdEmbeddings$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdEmbeddings$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdEmbeddings$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdEmbeddings$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdEmbeddings$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdEmbeddingsToJSON(
  getApiWorkspaceServiceV1AccountsIdEmbeddings:
    GetApiWorkspaceServiceV1AccountsIdEmbeddings,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdEmbeddings$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdEmbeddings,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdEmbeddingsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdEmbeddings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdEmbeddings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdEmbeddings' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdAccountsResponse200Versions$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdAccountsResponse200Versions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    versionNumber: z.number().int().optional(),
    s3Key: z.string().optional(),
    size: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdAccountsResponse200Versions$Outbound =
  {
    id?: string | undefined;
    fileId?: string | undefined;
    versionNumber?: number | undefined;
    s3Key?: string | undefined;
    size?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    createdAt?: string | undefined;
  };

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdAccountsResponse200Versions$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdAccountsResponse200Versions$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdAccountsResponse200Versions
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    versionNumber: z.number().int().optional(),
    s3Key: z.string().optional(),
    size: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdAccountsResponse200Versions$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdAccountsResponse200Versions$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdAccountsResponse200Versions$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdAccountsResponse200Versions$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdAccountsResponse200Versions$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdAccountsResponse200Versions$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1AccountsIdAccountsResponse200Versions$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdAccountsResponse200VersionsToJSON(
  getApiWorkspaceServiceV1AccountsIdAccountsResponse200Versions:
    GetApiWorkspaceServiceV1AccountsIdAccountsResponse200Versions,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdAccountsResponse200Versions$outboundSchema
      .parse(getApiWorkspaceServiceV1AccountsIdAccountsResponse200Versions),
  );
}

export function getApiWorkspaceServiceV1AccountsIdAccountsResponse200VersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdAccountsResponse200Versions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdAccountsResponse200Versions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdAccountsResponse200Versions' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdComments$inboundSchema:
  z.ZodType<GetApiWorkspaceServiceV1AccountsIdComments, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      authorId: z.string().optional(),
      content: z.string().optional(),
      startPosition: z.number().int().optional(),
      endPosition: z.number().int().optional(),
      resolved: z.boolean().optional(),
      createdAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      updatedAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
    });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdComments$Outbound = {
  id?: string | undefined;
  authorId?: string | undefined;
  content?: string | undefined;
  startPosition?: number | undefined;
  endPosition?: number | undefined;
  resolved?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdComments$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdComments$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdComments
  > = z.object({
    id: z.string().optional(),
    authorId: z.string().optional(),
    content: z.string().optional(),
    startPosition: z.number().int().optional(),
    endPosition: z.number().int().optional(),
    resolved: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdComments$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdComments$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdComments$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdComments$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdComments$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdComments$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdComments$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdCommentsToJSON(
  getApiWorkspaceServiceV1AccountsIdComments:
    GetApiWorkspaceServiceV1AccountsIdComments,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdComments$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdComments,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdCommentsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdComments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdComments$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdComments' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdAccountsSharing$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdAccountsSharing,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdAccountsSharing$Outbound = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdAccountsSharing$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdAccountsSharing$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdAccountsSharing
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdAccountsSharing$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdAccountsSharing$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdAccountsSharing$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdAccountsSharing$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdAccountsSharing$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdAccountsSharing$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1AccountsIdAccountsSharing$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdAccountsSharingToJSON(
  getApiWorkspaceServiceV1AccountsIdAccountsSharing:
    GetApiWorkspaceServiceV1AccountsIdAccountsSharing,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdAccountsSharing$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdAccountsSharing,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdAccountsSharingFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdAccountsSharing,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdAccountsSharing$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdAccountsSharing' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdSnapshots$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdSnapshots,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    snapshotHash: z.string().optional(),
    content: z.string().optional(),
    authorId: z.string().optional(),
    reason: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdSnapshots$Outbound = {
  id?: string | undefined;
  fileId?: string | undefined;
  snapshotHash?: string | undefined;
  content?: string | undefined;
  authorId?: string | undefined;
  reason?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdSnapshots$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdSnapshots$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdSnapshots
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    snapshotHash: z.string().optional(),
    content: z.string().optional(),
    authorId: z.string().optional(),
    reason: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdSnapshots$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdSnapshots$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdSnapshots$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdSnapshots$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdSnapshots$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdSnapshots$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdSnapshots$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdSnapshotsToJSON(
  getApiWorkspaceServiceV1AccountsIdSnapshots:
    GetApiWorkspaceServiceV1AccountsIdSnapshots,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdSnapshots$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdSnapshots,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdSnapshotsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdSnapshots,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdSnapshots$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdSnapshots' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdFiles$inboundSchema: z.ZodType<
  GetApiWorkspaceServiceV1AccountsIdFiles,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  size: z.string().optional(),
  s3Key: z.string().optional(),
  s3BucketName: z.string().optional(),
  isDeleted: z.boolean().optional(),
  version: z.number().int().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  embeddings: z.lazy(() =>
    GetApiWorkspaceServiceV1AccountsIdEmbeddings$inboundSchema
  ).optional(),
  versions: z.array(
    z.lazy(() =>
      GetApiWorkspaceServiceV1AccountsIdAccountsResponse200Versions$inboundSchema
    ),
  ).optional(),
  comments: z.array(
    z.lazy(() => GetApiWorkspaceServiceV1AccountsIdComments$inboundSchema),
  ).optional(),
  sharing: z.array(
    z.lazy(() =>
      GetApiWorkspaceServiceV1AccountsIdAccountsSharing$inboundSchema
    ),
  ).optional(),
  snapshots: z.array(
    z.lazy(() => GetApiWorkspaceServiceV1AccountsIdSnapshots$inboundSchema),
  ).optional(),
});

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdFiles$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  size?: string | undefined;
  s3Key?: string | undefined;
  s3BucketName?: string | undefined;
  isDeleted?: boolean | undefined;
  version?: number | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  embeddings?:
    | GetApiWorkspaceServiceV1AccountsIdEmbeddings$Outbound
    | undefined;
  versions?:
    | Array<
      GetApiWorkspaceServiceV1AccountsIdAccountsResponse200Versions$Outbound
    >
    | undefined;
  comments?:
    | Array<GetApiWorkspaceServiceV1AccountsIdComments$Outbound>
    | undefined;
  sharing?:
    | Array<GetApiWorkspaceServiceV1AccountsIdAccountsSharing$Outbound>
    | undefined;
  snapshots?:
    | Array<GetApiWorkspaceServiceV1AccountsIdSnapshots$Outbound>
    | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdFiles$outboundSchema: z.ZodType<
  GetApiWorkspaceServiceV1AccountsIdFiles$Outbound,
  z.ZodTypeDef,
  GetApiWorkspaceServiceV1AccountsIdFiles
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  size: z.string().optional(),
  s3Key: z.string().optional(),
  s3BucketName: z.string().optional(),
  isDeleted: z.boolean().optional(),
  version: z.number().int().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  deletedAt: z.date().transform(v => v.toISOString()).optional(),
  embeddings: z.lazy(() =>
    GetApiWorkspaceServiceV1AccountsIdEmbeddings$outboundSchema
  ).optional(),
  versions: z.array(
    z.lazy(() =>
      GetApiWorkspaceServiceV1AccountsIdAccountsResponse200Versions$outboundSchema
    ),
  ).optional(),
  comments: z.array(
    z.lazy(() => GetApiWorkspaceServiceV1AccountsIdComments$outboundSchema),
  ).optional(),
  sharing: z.array(
    z.lazy(() =>
      GetApiWorkspaceServiceV1AccountsIdAccountsSharing$outboundSchema
    ),
  ).optional(),
  snapshots: z.array(
    z.lazy(() => GetApiWorkspaceServiceV1AccountsIdSnapshots$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdFiles$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdFiles$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdFiles$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdFiles$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdFiles$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdFiles$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdFiles$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdFilesToJSON(
  getApiWorkspaceServiceV1AccountsIdFiles:
    GetApiWorkspaceServiceV1AccountsIdFiles,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdFiles$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdFiles,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdFilesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdFiles,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdFiles$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdFiles' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdFolders$inboundSchema: z.ZodType<
  GetApiWorkspaceServiceV1AccountsIdFolders,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  s3BucketName: z.string().optional(),
  s3FolderPath: z.string().optional(),
  isDeleted: z.boolean().optional(),
  parentFolderId: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  files: z.array(
    z.lazy(() => GetApiWorkspaceServiceV1AccountsIdFiles$inboundSchema),
  ).optional(),
});

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdFolders$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  isDeleted?: boolean | undefined;
  parentFolderId?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  files?: Array<GetApiWorkspaceServiceV1AccountsIdFiles$Outbound> | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdFolders$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdFolders$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdFolders
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    isDeleted: z.boolean().optional(),
    parentFolderId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    files: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdFiles$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdFolders$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdFolders$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdFolders$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdFolders$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdFolders$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdFolders$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdFolders$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdFoldersToJSON(
  getApiWorkspaceServiceV1AccountsIdFolders:
    GetApiWorkspaceServiceV1AccountsIdFolders,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdFolders$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdFolders,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdFoldersFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdFolders,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdFolders$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdFolders' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdTemplateType$inboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1AccountsIdTemplateType> = z
    .nativeEnum(GetApiWorkspaceServiceV1AccountsIdTemplateType);

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdTemplateType$outboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1AccountsIdTemplateType> =
    GetApiWorkspaceServiceV1AccountsIdTemplateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdTemplateType$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdTemplateType$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdTemplateType$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdTemplateType$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdTemplateType$outboundSchema;
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdVersions$inboundSchema:
  z.ZodType<GetApiWorkspaceServiceV1AccountsIdVersions, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      templateId: z.string().optional(),
      version: z.string().optional(),
      baseContent: z.string().optional(),
      metadata: z.record(z.string()).optional(),
      authorId: z.string().optional(),
      changeDescription: z.string().optional(),
      createdAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
    });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdVersions$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  version?: string | undefined;
  baseContent?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  authorId?: string | undefined;
  changeDescription?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdVersions$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdVersions$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdVersions
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    version: z.string().optional(),
    baseContent: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    authorId: z.string().optional(),
    changeDescription: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdVersions$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdVersions$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdVersions$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdVersions$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdVersions$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdVersions$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdVersions$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdVersionsToJSON(
  getApiWorkspaceServiceV1AccountsIdVersions:
    GetApiWorkspaceServiceV1AccountsIdVersions,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdVersions$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdVersions,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdVersions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdVersions' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdVariables$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdVariables,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    variableType: z.string().optional(),
    defaultValue: z.string().optional(),
    isRequired: z.boolean().optional(),
    validationRules: z.string().optional(),
    dataSource: z.string().optional(),
    aiExtractionRules: z.string().optional(),
    alternatives: z.array(z.string()).optional(),
    templateId: z.string().optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdVariables$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  variableType?: string | undefined;
  defaultValue?: string | undefined;
  isRequired?: boolean | undefined;
  validationRules?: string | undefined;
  dataSource?: string | undefined;
  aiExtractionRules?: string | undefined;
  alternatives?: Array<string> | undefined;
  templateId?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdVariables$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdVariables$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdVariables
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    variableType: z.string().optional(),
    defaultValue: z.string().optional(),
    isRequired: z.boolean().optional(),
    validationRules: z.string().optional(),
    dataSource: z.string().optional(),
    aiExtractionRules: z.string().optional(),
    alternatives: z.array(z.string()).optional(),
    templateId: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdVariables$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdVariables$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdVariables$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdVariables$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdVariables$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdVariables$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdVariables$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdVariablesToJSON(
  getApiWorkspaceServiceV1AccountsIdVariables:
    GetApiWorkspaceServiceV1AccountsIdVariables,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdVariables$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdVariables,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdVariablesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdVariables,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdVariables$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdVariables' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdStatus$inboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1AccountsIdStatus> = z
    .nativeEnum(GetApiWorkspaceServiceV1AccountsIdStatus);

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdStatus$outboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1AccountsIdStatus> =
    GetApiWorkspaceServiceV1AccountsIdStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdStatus$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdStatus$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdStatus$outboundSchema;
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdAccountsStatus$inboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1AccountsIdAccountsStatus> = z
    .nativeEnum(GetApiWorkspaceServiceV1AccountsIdAccountsStatus);

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdAccountsStatus$outboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1AccountsIdAccountsStatus> =
    GetApiWorkspaceServiceV1AccountsIdAccountsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdAccountsStatus$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdAccountsStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdAccountsStatus$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdAccountsStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdAccountsStatus$outboundSchema;
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdSignatureBlocks$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdSignatureBlocks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    blockType: z.string().optional(),
    pageNumber: z.number().int().optional(),
    xPosition: z.number().optional(),
    yPosition: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    isRequired: z.boolean().optional(),
    signatureData: z.string().optional(),
    signedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdSignatureBlocks$Outbound = {
  id?: string | undefined;
  requestId?: string | undefined;
  blockType?: string | undefined;
  pageNumber?: number | undefined;
  xPosition?: number | undefined;
  yPosition?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
  isRequired?: boolean | undefined;
  signatureData?: string | undefined;
  signedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdSignatureBlocks$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdSignatureBlocks$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdSignatureBlocks
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    blockType: z.string().optional(),
    pageNumber: z.number().int().optional(),
    xPosition: z.number().optional(),
    yPosition: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    isRequired: z.boolean().optional(),
    signatureData: z.string().optional(),
    signedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdSignatureBlocks$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdSignatureBlocks$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdSignatureBlocks$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdSignatureBlocks$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdSignatureBlocks$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdSignatureBlocks$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1AccountsIdSignatureBlocks$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdSignatureBlocksToJSON(
  getApiWorkspaceServiceV1AccountsIdSignatureBlocks:
    GetApiWorkspaceServiceV1AccountsIdSignatureBlocks,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdSignatureBlocks$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdSignatureBlocks,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdSignatureBlocksFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdSignatureBlocks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdSignatureBlocks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdSignatureBlocks' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdWorkflow$inboundSchema:
  z.ZodType<GetApiWorkspaceServiceV1AccountsIdWorkflow, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      requestId: z.string().optional(),
      signingOrder: z.array(z.string()).optional(),
      currentSigner: z.string().optional(),
      workflowStatus: z.string().optional(),
      parallelSigning: z.boolean().optional(),
      requireAllSignatures: z.boolean().optional(),
      deadline: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      createdAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      updatedAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
    });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdWorkflow$Outbound = {
  id?: string | undefined;
  requestId?: string | undefined;
  signingOrder?: Array<string> | undefined;
  currentSigner?: string | undefined;
  workflowStatus?: string | undefined;
  parallelSigning?: boolean | undefined;
  requireAllSignatures?: boolean | undefined;
  deadline?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdWorkflow$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdWorkflow$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdWorkflow
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    signingOrder: z.array(z.string()).optional(),
    currentSigner: z.string().optional(),
    workflowStatus: z.string().optional(),
    parallelSigning: z.boolean().optional(),
    requireAllSignatures: z.boolean().optional(),
    deadline: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdWorkflow$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdWorkflow$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdWorkflow$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdWorkflow$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdWorkflow$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdWorkflow$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdWorkflow$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdWorkflowToJSON(
  getApiWorkspaceServiceV1AccountsIdWorkflow:
    GetApiWorkspaceServiceV1AccountsIdWorkflow,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdWorkflow$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdWorkflow,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdWorkflowFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdWorkflow,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdWorkflow$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdWorkflow' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdSignatureRequests$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdSignatureRequests,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    status: GetApiWorkspaceServiceV1AccountsIdAccountsStatus$inboundSchema
      .default("SIGNATURE_STATUS_UNSPECIFIED"),
    signerEmail: z.string().optional(),
    signerName: z.string().optional(),
    role: z.string().optional(),
    authenticationMethod: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    requiresMfa: z.boolean().optional(),
    signatureType: z.string().optional(),
    reminderSchedule: z.array(z.string()).optional(),
    documentId: z.string().optional(),
    signatureBlocks: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1AccountsIdSignatureBlocks$inboundSchema
      ),
    ).optional(),
    workflow: z.lazy(() =>
      GetApiWorkspaceServiceV1AccountsIdWorkflow$inboundSchema
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdSignatureRequests$Outbound = {
  id?: string | undefined;
  status: string;
  signerEmail?: string | undefined;
  signerName?: string | undefined;
  role?: string | undefined;
  authenticationMethod?: string | undefined;
  expiresAt?: string | undefined;
  requiresMfa?: boolean | undefined;
  signatureType?: string | undefined;
  reminderSchedule?: Array<string> | undefined;
  documentId?: string | undefined;
  signatureBlocks?:
    | Array<GetApiWorkspaceServiceV1AccountsIdSignatureBlocks$Outbound>
    | undefined;
  workflow?: GetApiWorkspaceServiceV1AccountsIdWorkflow$Outbound | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdSignatureRequests$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdSignatureRequests$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdSignatureRequests
  > = z.object({
    id: z.string().optional(),
    status: GetApiWorkspaceServiceV1AccountsIdAccountsStatus$outboundSchema
      .default("SIGNATURE_STATUS_UNSPECIFIED"),
    signerEmail: z.string().optional(),
    signerName: z.string().optional(),
    role: z.string().optional(),
    authenticationMethod: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    requiresMfa: z.boolean().optional(),
    signatureType: z.string().optional(),
    reminderSchedule: z.array(z.string()).optional(),
    documentId: z.string().optional(),
    signatureBlocks: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1AccountsIdSignatureBlocks$outboundSchema
      ),
    ).optional(),
    workflow: z.lazy(() =>
      GetApiWorkspaceServiceV1AccountsIdWorkflow$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdSignatureRequests$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdSignatureRequests$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdSignatureRequests$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdSignatureRequests$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdSignatureRequests$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdSignatureRequests$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1AccountsIdSignatureRequests$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdSignatureRequestsToJSON(
  getApiWorkspaceServiceV1AccountsIdSignatureRequests:
    GetApiWorkspaceServiceV1AccountsIdSignatureRequests,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdSignatureRequests$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdSignatureRequests,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdSignatureRequestsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdSignatureRequests,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdSignatureRequests$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdSignatureRequests' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdAiAssistance$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdAiAssistance,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    interactionType: z.string().optional(),
    userQuery: z.string().optional(),
    aiResponse: z.string().optional(),
    context: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdAiAssistance$Outbound = {
  id?: string | undefined;
  documentId?: string | undefined;
  interactionType?: string | undefined;
  userQuery?: string | undefined;
  aiResponse?: string | undefined;
  context?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdAiAssistance$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdAiAssistance$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdAiAssistance
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    interactionType: z.string().optional(),
    userQuery: z.string().optional(),
    aiResponse: z.string().optional(),
    context: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdAiAssistance$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdAiAssistance$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdAiAssistance$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdAiAssistance$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdAiAssistance$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdAiAssistance$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1AccountsIdAiAssistance$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdAiAssistanceToJSON(
  getApiWorkspaceServiceV1AccountsIdAiAssistance:
    GetApiWorkspaceServiceV1AccountsIdAiAssistance,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdAiAssistance$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdAiAssistance,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdAiAssistanceFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdAiAssistance,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdAiAssistance$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdAiAssistance' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdRounds$inboundSchema: z.ZodType<
  GetApiWorkspaceServiceV1AccountsIdRounds,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  historyId: z.string().optional(),
  roundNumber: z.number().int().optional(),
  proposerId: z.string().optional(),
  proposalContent: z.string().optional(),
  responseContent: z.string().optional(),
  status: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdRounds$Outbound = {
  id?: string | undefined;
  historyId?: string | undefined;
  roundNumber?: number | undefined;
  proposerId?: string | undefined;
  proposalContent?: string | undefined;
  responseContent?: string | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdRounds$outboundSchema: z.ZodType<
  GetApiWorkspaceServiceV1AccountsIdRounds$Outbound,
  z.ZodTypeDef,
  GetApiWorkspaceServiceV1AccountsIdRounds
> = z.object({
  id: z.string().optional(),
  historyId: z.string().optional(),
  roundNumber: z.number().int().optional(),
  proposerId: z.string().optional(),
  proposalContent: z.string().optional(),
  responseContent: z.string().optional(),
  status: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdRounds$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdRounds$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdRounds$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdRounds$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdRounds$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdRounds$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdRounds$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdRoundsToJSON(
  getApiWorkspaceServiceV1AccountsIdRounds:
    GetApiWorkspaceServiceV1AccountsIdRounds,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdRounds$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdRounds,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdRoundsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdRounds,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdRounds$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdRounds' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdNegotiation$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdNegotiation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    rounds: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdRounds$inboundSchema),
    ).optional(),
    currentStatus: z.string().optional(),
    startedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdNegotiation$Outbound = {
  id?: string | undefined;
  documentId?: string | undefined;
  rounds?: Array<GetApiWorkspaceServiceV1AccountsIdRounds$Outbound> | undefined;
  currentStatus?: string | undefined;
  startedAt?: string | undefined;
  lastUpdated?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdNegotiation$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdNegotiation$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdNegotiation
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    rounds: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdRounds$outboundSchema),
    ).optional(),
    currentStatus: z.string().optional(),
    startedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdNegotiation$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdNegotiation$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdNegotiation$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdNegotiation$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdNegotiation$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdNegotiation$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdNegotiation$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdNegotiationToJSON(
  getApiWorkspaceServiceV1AccountsIdNegotiation:
    GetApiWorkspaceServiceV1AccountsIdNegotiation,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdNegotiation$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdNegotiation,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdNegotiationFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdNegotiation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdNegotiation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdNegotiation' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdMerges$inboundSchema: z.ZodType<
  GetApiWorkspaceServiceV1AccountsIdMerges,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  branchId: z.string().optional(),
  sourceBranch: z.string().optional(),
  targetBranch: z.string().optional(),
  mergeStatus: z.string().optional(),
  mergeStrategy: z.string().optional(),
  conflicts: z.array(z.string()).optional(),
  mergerId: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  completedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdMerges$Outbound = {
  id?: string | undefined;
  branchId?: string | undefined;
  sourceBranch?: string | undefined;
  targetBranch?: string | undefined;
  mergeStatus?: string | undefined;
  mergeStrategy?: string | undefined;
  conflicts?: Array<string> | undefined;
  mergerId?: string | undefined;
  createdAt?: string | undefined;
  completedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdMerges$outboundSchema: z.ZodType<
  GetApiWorkspaceServiceV1AccountsIdMerges$Outbound,
  z.ZodTypeDef,
  GetApiWorkspaceServiceV1AccountsIdMerges
> = z.object({
  id: z.string().optional(),
  branchId: z.string().optional(),
  sourceBranch: z.string().optional(),
  targetBranch: z.string().optional(),
  mergeStatus: z.string().optional(),
  mergeStrategy: z.string().optional(),
  conflicts: z.array(z.string()).optional(),
  mergerId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  completedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdMerges$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdMerges$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdMerges$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdMerges$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdMerges$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdMerges$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdMerges$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdMergesToJSON(
  getApiWorkspaceServiceV1AccountsIdMerges:
    GetApiWorkspaceServiceV1AccountsIdMerges,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdMerges$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdMerges,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdMergesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdMerges,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdMerges$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdMerges' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdPolicy$inboundSchema: z.ZodType<
  GetApiWorkspaceServiceV1AccountsIdPolicy,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  branchId: z.string().optional(),
  requiredApprovers: z.array(z.string()).optional(),
  minimumApprovals: z.number().int().optional(),
  enforceLinearHistory: z.boolean().optional(),
  allowForcePush: z.boolean().optional(),
  protectedPaths: z.array(z.string()).optional(),
  mergeRules: z.record(z.string()).optional(),
  automatedChecks: z.array(z.string()).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdPolicy$Outbound = {
  id?: string | undefined;
  branchId?: string | undefined;
  requiredApprovers?: Array<string> | undefined;
  minimumApprovals?: number | undefined;
  enforceLinearHistory?: boolean | undefined;
  allowForcePush?: boolean | undefined;
  protectedPaths?: Array<string> | undefined;
  mergeRules?: { [k: string]: string } | undefined;
  automatedChecks?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdPolicy$outboundSchema: z.ZodType<
  GetApiWorkspaceServiceV1AccountsIdPolicy$Outbound,
  z.ZodTypeDef,
  GetApiWorkspaceServiceV1AccountsIdPolicy
> = z.object({
  id: z.string().optional(),
  branchId: z.string().optional(),
  requiredApprovers: z.array(z.string()).optional(),
  minimumApprovals: z.number().int().optional(),
  enforceLinearHistory: z.boolean().optional(),
  allowForcePush: z.boolean().optional(),
  protectedPaths: z.array(z.string()).optional(),
  mergeRules: z.record(z.string()).optional(),
  automatedChecks: z.array(z.string()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdPolicy$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdPolicy$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdPolicy$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdPolicy$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdPolicy$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdPolicy$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdPolicy$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdPolicyToJSON(
  getApiWorkspaceServiceV1AccountsIdPolicy:
    GetApiWorkspaceServiceV1AccountsIdPolicy,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdPolicy$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdPolicy,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdPolicyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdPolicy,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdPolicy$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdPolicy' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdMergeRequests$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdMergeRequests,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sourceBranchId: z.string().optional(),
    targetBranchId: z.string().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    authorId: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    status: z.string().optional(),
    labels: z.array(z.string()).optional(),
    hasConflicts: z.boolean().optional(),
    automatedCheckResults: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdMergeRequests$Outbound = {
  id?: string | undefined;
  sourceBranchId?: string | undefined;
  targetBranchId?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  authorId?: string | undefined;
  reviewers?: Array<string> | undefined;
  status?: string | undefined;
  labels?: Array<string> | undefined;
  hasConflicts?: boolean | undefined;
  automatedCheckResults?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdMergeRequests$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdMergeRequests$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdMergeRequests
  > = z.object({
    id: z.string().optional(),
    sourceBranchId: z.string().optional(),
    targetBranchId: z.string().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    authorId: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    status: z.string().optional(),
    labels: z.array(z.string()).optional(),
    hasConflicts: z.boolean().optional(),
    automatedCheckResults: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdMergeRequests$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdMergeRequests$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdMergeRequests$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdMergeRequests$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdMergeRequests$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdMergeRequests$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1AccountsIdMergeRequests$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdMergeRequestsToJSON(
  getApiWorkspaceServiceV1AccountsIdMergeRequests:
    GetApiWorkspaceServiceV1AccountsIdMergeRequests,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdMergeRequests$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdMergeRequests,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdMergeRequestsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdMergeRequests,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdMergeRequests$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdMergeRequests' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdBranches$inboundSchema:
  z.ZodType<GetApiWorkspaceServiceV1AccountsIdBranches, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      baseVersionHash: z.string().optional(),
      currentHeadHash: z.string().optional(),
      purpose: z.string().optional(),
      status: z.string().optional(),
      reviewers: z.array(z.string()).optional(),
      branchMetadata: z.record(z.string()).optional(),
      isLocked: z.boolean().optional(),
      lastUpdated: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      merges: z.array(
        z.lazy(() => GetApiWorkspaceServiceV1AccountsIdMerges$inboundSchema),
      ).optional(),
      policy: z.lazy(() =>
        GetApiWorkspaceServiceV1AccountsIdPolicy$inboundSchema
      ).optional(),
      mergeRequests: z.array(
        z.lazy(() =>
          GetApiWorkspaceServiceV1AccountsIdMergeRequests$inboundSchema
        ),
      ).optional(),
    });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdBranches$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  baseVersionHash?: string | undefined;
  currentHeadHash?: string | undefined;
  purpose?: string | undefined;
  status?: string | undefined;
  reviewers?: Array<string> | undefined;
  branchMetadata?: { [k: string]: string } | undefined;
  isLocked?: boolean | undefined;
  lastUpdated?: string | undefined;
  merges?: Array<GetApiWorkspaceServiceV1AccountsIdMerges$Outbound> | undefined;
  policy?: GetApiWorkspaceServiceV1AccountsIdPolicy$Outbound | undefined;
  mergeRequests?:
    | Array<GetApiWorkspaceServiceV1AccountsIdMergeRequests$Outbound>
    | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdBranches$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdBranches$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdBranches
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    baseVersionHash: z.string().optional(),
    currentHeadHash: z.string().optional(),
    purpose: z.string().optional(),
    status: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    branchMetadata: z.record(z.string()).optional(),
    isLocked: z.boolean().optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
    merges: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdMerges$outboundSchema),
    ).optional(),
    policy: z.lazy(() =>
      GetApiWorkspaceServiceV1AccountsIdPolicy$outboundSchema
    ).optional(),
    mergeRequests: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1AccountsIdMergeRequests$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdBranches$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdBranches$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdBranches$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdBranches$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdBranches$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdBranches$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdBranches$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdBranchesToJSON(
  getApiWorkspaceServiceV1AccountsIdBranches:
    GetApiWorkspaceServiceV1AccountsIdBranches,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdBranches$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdBranches,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdBranchesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdBranches,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdBranches$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdBranches' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdChanges$inboundSchema: z.ZodType<
  GetApiWorkspaceServiceV1AccountsIdChanges,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  versionId: z.string().optional(),
  changeType: z.string().optional(),
  contentBefore: z.string().optional(),
  contentAfter: z.string().optional(),
  metadata: z.record(z.string()).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdChanges$Outbound = {
  id?: string | undefined;
  versionId?: string | undefined;
  changeType?: string | undefined;
  contentBefore?: string | undefined;
  contentAfter?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdChanges$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdChanges$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdChanges
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    changeType: z.string().optional(),
    contentBefore: z.string().optional(),
    contentAfter: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdChanges$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdChanges$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdChanges$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdChanges$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdChanges$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdChanges$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdChanges$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdChangesToJSON(
  getApiWorkspaceServiceV1AccountsIdChanges:
    GetApiWorkspaceServiceV1AccountsIdChanges,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdChanges$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdChanges,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdChangesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdChanges,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdChanges$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdChanges' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdSummaries$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdSummaries,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    summaryType: z.string().optional(),
    content: z.string().optional(),
    targetAudience: z.string().optional(),
    keyPoints: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdSummaries$Outbound = {
  id?: string | undefined;
  versionId?: string | undefined;
  summaryType?: string | undefined;
  content?: string | undefined;
  targetAudience?: string | undefined;
  keyPoints?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdSummaries$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdSummaries$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdSummaries
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    summaryType: z.string().optional(),
    content: z.string().optional(),
    targetAudience: z.string().optional(),
    keyPoints: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdSummaries$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdSummaries$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdSummaries$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdSummaries$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdSummaries$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdSummaries$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdSummaries$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdSummariesToJSON(
  getApiWorkspaceServiceV1AccountsIdSummaries:
    GetApiWorkspaceServiceV1AccountsIdSummaries,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdSummaries$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdSummaries,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdSummariesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdSummaries,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdSummaries$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdSummaries' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdAccountsResponseVersions$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdAccountsResponseVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionHash: z.string().optional(),
    parentHash: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    branchName: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    isApproved: z.boolean().optional(),
    approvalChain: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    branches: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdBranches$inboundSchema),
    ).optional(),
    changes: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdChanges$inboundSchema),
    ).optional(),
    summaries: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdSummaries$inboundSchema),
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdAccountsResponseVersions$Outbound =
  {
    id?: string | undefined;
    versionHash?: string | undefined;
    parentHash?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    branchName?: string | undefined;
    metadata?: { [k: string]: string } | undefined;
    tags?: Array<string> | undefined;
    isApproved?: boolean | undefined;
    approvalChain?: string | undefined;
    createdAt?: string | undefined;
    branches?:
      | Array<GetApiWorkspaceServiceV1AccountsIdBranches$Outbound>
      | undefined;
    changes?:
      | Array<GetApiWorkspaceServiceV1AccountsIdChanges$Outbound>
      | undefined;
    summaries?:
      | Array<GetApiWorkspaceServiceV1AccountsIdSummaries$Outbound>
      | undefined;
  };

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdAccountsResponseVersions$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdAccountsResponseVersions$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdAccountsResponseVersions
  > = z.object({
    id: z.string().optional(),
    versionHash: z.string().optional(),
    parentHash: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    branchName: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    isApproved: z.boolean().optional(),
    approvalChain: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    branches: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdBranches$outboundSchema),
    ).optional(),
    changes: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdChanges$outboundSchema),
    ).optional(),
    summaries: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdSummaries$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdAccountsResponseVersions$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdAccountsResponseVersions$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdAccountsResponseVersions$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdAccountsResponseVersions$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdAccountsResponseVersions$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdAccountsResponseVersions$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1AccountsIdAccountsResponseVersions$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdAccountsResponseVersionsToJSON(
  getApiWorkspaceServiceV1AccountsIdAccountsResponseVersions:
    GetApiWorkspaceServiceV1AccountsIdAccountsResponseVersions,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdAccountsResponseVersions$outboundSchema
      .parse(getApiWorkspaceServiceV1AccountsIdAccountsResponseVersions),
  );
}

export function getApiWorkspaceServiceV1AccountsIdAccountsResponseVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdAccountsResponseVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdAccountsResponseVersions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdAccountsResponseVersions' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdInstances$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdInstances,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    status: GetApiWorkspaceServiceV1AccountsIdStatus$inboundSchema.default(
      "DOCUMENT_STATUS_UNSPECIFIED",
    ),
    fieldValues: z.record(z.string()).optional(),
    signers: z.array(z.string()).optional(),
    language: z.string().optional(),
    isCompleted: z.boolean().optional(),
    dueDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    generatedContent: z.string().optional(),
    attachments: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    signatureRequests: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1AccountsIdSignatureRequests$inboundSchema
      ),
    ).optional(),
    aiAssistance: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1AccountsIdAiAssistance$inboundSchema
      ),
    ).optional(),
    negotiation: z.lazy(() =>
      GetApiWorkspaceServiceV1AccountsIdNegotiation$inboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1AccountsIdAccountsResponseVersions$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdInstances$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  status: string;
  fieldValues?: { [k: string]: string } | undefined;
  signers?: Array<string> | undefined;
  language?: string | undefined;
  isCompleted?: boolean | undefined;
  dueDate?: string | undefined;
  generatedContent?: string | undefined;
  attachments?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  signatureRequests?:
    | Array<GetApiWorkspaceServiceV1AccountsIdSignatureRequests$Outbound>
    | undefined;
  aiAssistance?:
    | Array<GetApiWorkspaceServiceV1AccountsIdAiAssistance$Outbound>
    | undefined;
  negotiation?:
    | GetApiWorkspaceServiceV1AccountsIdNegotiation$Outbound
    | undefined;
  versions?:
    | Array<GetApiWorkspaceServiceV1AccountsIdAccountsResponseVersions$Outbound>
    | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdInstances$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdInstances$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdInstances
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    status: GetApiWorkspaceServiceV1AccountsIdStatus$outboundSchema.default(
      "DOCUMENT_STATUS_UNSPECIFIED",
    ),
    fieldValues: z.record(z.string()).optional(),
    signers: z.array(z.string()).optional(),
    language: z.string().optional(),
    isCompleted: z.boolean().optional(),
    dueDate: z.date().transform(v => v.toISOString()).optional(),
    generatedContent: z.string().optional(),
    attachments: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    signatureRequests: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1AccountsIdSignatureRequests$outboundSchema
      ),
    ).optional(),
    aiAssistance: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1AccountsIdAiAssistance$outboundSchema
      ),
    ).optional(),
    negotiation: z.lazy(() =>
      GetApiWorkspaceServiceV1AccountsIdNegotiation$outboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1AccountsIdAccountsResponseVersions$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdInstances$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdInstances$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdInstances$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdInstances$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdInstances$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdInstances$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdInstances$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdInstancesToJSON(
  getApiWorkspaceServiceV1AccountsIdInstances:
    GetApiWorkspaceServiceV1AccountsIdInstances,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdInstances$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdInstances,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdInstancesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdInstances,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdInstances$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdInstances' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdExplanations$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdExplanations,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    sectionIdentifier: z.string().optional(),
    explanationText: z.string().optional(),
    complexityLevel: z.string().optional(),
    relatedTerms: z.array(z.string()).optional(),
    legalReferences: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdExplanations$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  sectionIdentifier?: string | undefined;
  explanationText?: string | undefined;
  complexityLevel?: string | undefined;
  relatedTerms?: Array<string> | undefined;
  legalReferences?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdExplanations$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdExplanations$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdExplanations
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    sectionIdentifier: z.string().optional(),
    explanationText: z.string().optional(),
    complexityLevel: z.string().optional(),
    relatedTerms: z.array(z.string()).optional(),
    legalReferences: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdExplanations$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdExplanations$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdExplanations$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdExplanations$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdExplanations$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdExplanations$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1AccountsIdExplanations$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdExplanationsToJSON(
  getApiWorkspaceServiceV1AccountsIdExplanations:
    GetApiWorkspaceServiceV1AccountsIdExplanations,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdExplanations$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdExplanations,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdExplanationsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdExplanations,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdExplanations$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdExplanations' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdRiskAssessments$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdRiskAssessments,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    riskType: z.string().optional(),
    riskScore: z.number().optional(),
    assessmentDetails: z.string().optional(),
    mitigationSuggestions: z.array(z.string()).optional(),
    assessorId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdRiskAssessments$Outbound = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  riskType?: string | undefined;
  riskScore?: number | undefined;
  assessmentDetails?: string | undefined;
  mitigationSuggestions?: Array<string> | undefined;
  assessorId?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdRiskAssessments$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdRiskAssessments$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdRiskAssessments
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    riskType: z.string().optional(),
    riskScore: z.number().optional(),
    assessmentDetails: z.string().optional(),
    mitigationSuggestions: z.array(z.string()).optional(),
    assessorId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdRiskAssessments$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdRiskAssessments$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdRiskAssessments$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdRiskAssessments$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdRiskAssessments$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdRiskAssessments$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1AccountsIdRiskAssessments$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdRiskAssessmentsToJSON(
  getApiWorkspaceServiceV1AccountsIdRiskAssessments:
    GetApiWorkspaceServiceV1AccountsIdRiskAssessments,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdRiskAssessments$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdRiskAssessments,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdRiskAssessmentsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdRiskAssessments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdRiskAssessments$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdRiskAssessments' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdComplianceChecks$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdComplianceChecks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    complianceStandard: z.string().optional(),
    checkResult: z.string().optional(),
    violations: z.array(z.string()).optional(),
    remediationSteps: z.string().optional(),
    checkDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdComplianceChecks$Outbound = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  complianceStandard?: string | undefined;
  checkResult?: string | undefined;
  violations?: Array<string> | undefined;
  remediationSteps?: string | undefined;
  checkDate?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdComplianceChecks$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdComplianceChecks$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdComplianceChecks
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    complianceStandard: z.string().optional(),
    checkResult: z.string().optional(),
    violations: z.array(z.string()).optional(),
    remediationSteps: z.string().optional(),
    checkDate: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdComplianceChecks$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdComplianceChecks$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdComplianceChecks$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdComplianceChecks$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdComplianceChecks$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdComplianceChecks$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1AccountsIdComplianceChecks$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdComplianceChecksToJSON(
  getApiWorkspaceServiceV1AccountsIdComplianceChecks:
    GetApiWorkspaceServiceV1AccountsIdComplianceChecks,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdComplianceChecks$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdComplianceChecks,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdComplianceChecksFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdComplianceChecks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdComplianceChecks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdComplianceChecks' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdIntelligence$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdIntelligence,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    contractType: z.string().optional(),
    riskScores: z.record(z.number()).optional(),
    detectedClauses: z.record(z.string()).optional(),
    keyObligations: z.array(z.string()).optional(),
    complianceScores: z.record(z.number()).optional(),
    jurisdiction: z.string().optional(),
    governingLaws: z.array(z.string()).optional(),
    semanticAnalysis: z.record(z.string()).optional(),
    analysisDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    riskAssessments: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1AccountsIdRiskAssessments$inboundSchema
      ),
    ).optional(),
    complianceChecks: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1AccountsIdComplianceChecks$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdIntelligence$Outbound = {
  id?: string | undefined;
  contractType?: string | undefined;
  riskScores?: { [k: string]: number } | undefined;
  detectedClauses?: { [k: string]: string } | undefined;
  keyObligations?: Array<string> | undefined;
  complianceScores?: { [k: string]: number } | undefined;
  jurisdiction?: string | undefined;
  governingLaws?: Array<string> | undefined;
  semanticAnalysis?: { [k: string]: string } | undefined;
  analysisDate?: string | undefined;
  riskAssessments?:
    | Array<GetApiWorkspaceServiceV1AccountsIdRiskAssessments$Outbound>
    | undefined;
  complianceChecks?:
    | Array<GetApiWorkspaceServiceV1AccountsIdComplianceChecks$Outbound>
    | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdIntelligence$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdIntelligence$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdIntelligence
  > = z.object({
    id: z.string().optional(),
    contractType: z.string().optional(),
    riskScores: z.record(z.number()).optional(),
    detectedClauses: z.record(z.string()).optional(),
    keyObligations: z.array(z.string()).optional(),
    complianceScores: z.record(z.number()).optional(),
    jurisdiction: z.string().optional(),
    governingLaws: z.array(z.string()).optional(),
    semanticAnalysis: z.record(z.string()).optional(),
    analysisDate: z.date().transform(v => v.toISOString()).optional(),
    riskAssessments: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1AccountsIdRiskAssessments$outboundSchema
      ),
    ).optional(),
    complianceChecks: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1AccountsIdComplianceChecks$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdIntelligence$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdIntelligence$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdIntelligence$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdIntelligence$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdIntelligence$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdIntelligence$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1AccountsIdIntelligence$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdIntelligenceToJSON(
  getApiWorkspaceServiceV1AccountsIdIntelligence:
    GetApiWorkspaceServiceV1AccountsIdIntelligence,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdIntelligence$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdIntelligence,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdIntelligenceFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdIntelligence,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdIntelligence$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdIntelligence' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdTemplates$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdTemplates,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    industryType: z.string().optional(),
    documentType: z.string().optional(),
    baseContent: z.string().optional(),
    isAdaptive: z.boolean().optional(),
    metadata: z.record(z.string()).optional(),
    supportedLanguages: z.array(z.string()).optional(),
    requiredDataFields: z.array(z.string()).optional(),
    version: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    templateType: GetApiWorkspaceServiceV1AccountsIdTemplateType$inboundSchema
      .default("TEMPLATE_TYPE_UNSPECIFIED"),
    content: z.string().optional(),
    detectedVariables: z.array(z.string()).optional(),
    variableMappings: z.record(z.string()).optional(),
    isContextAware: z.boolean().optional(),
    supportedContexts: z.array(z.string()).optional(),
    formattingRules: z.record(z.string()).optional(),
    conditionalSections: z.array(z.string()).optional(),
    versions: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdVersions$inboundSchema),
    ).optional(),
    variables: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdVariables$inboundSchema),
    ).optional(),
    instances: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdInstances$inboundSchema),
    ).optional(),
    explanations: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1AccountsIdExplanations$inboundSchema
      ),
    ).optional(),
    intelligence: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1AccountsIdIntelligence$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdTemplates$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  industryType?: string | undefined;
  documentType?: string | undefined;
  baseContent?: string | undefined;
  isAdaptive?: boolean | undefined;
  metadata?: { [k: string]: string } | undefined;
  supportedLanguages?: Array<string> | undefined;
  requiredDataFields?: Array<string> | undefined;
  version?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  templateType: string;
  content?: string | undefined;
  detectedVariables?: Array<string> | undefined;
  variableMappings?: { [k: string]: string } | undefined;
  isContextAware?: boolean | undefined;
  supportedContexts?: Array<string> | undefined;
  formattingRules?: { [k: string]: string } | undefined;
  conditionalSections?: Array<string> | undefined;
  versions?:
    | Array<GetApiWorkspaceServiceV1AccountsIdVersions$Outbound>
    | undefined;
  variables?:
    | Array<GetApiWorkspaceServiceV1AccountsIdVariables$Outbound>
    | undefined;
  instances?:
    | Array<GetApiWorkspaceServiceV1AccountsIdInstances$Outbound>
    | undefined;
  explanations?:
    | Array<GetApiWorkspaceServiceV1AccountsIdExplanations$Outbound>
    | undefined;
  intelligence?:
    | Array<GetApiWorkspaceServiceV1AccountsIdIntelligence$Outbound>
    | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdTemplates$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdTemplates$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdTemplates
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    industryType: z.string().optional(),
    documentType: z.string().optional(),
    baseContent: z.string().optional(),
    isAdaptive: z.boolean().optional(),
    metadata: z.record(z.string()).optional(),
    supportedLanguages: z.array(z.string()).optional(),
    requiredDataFields: z.array(z.string()).optional(),
    version: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    templateType: GetApiWorkspaceServiceV1AccountsIdTemplateType$outboundSchema
      .default("TEMPLATE_TYPE_UNSPECIFIED"),
    content: z.string().optional(),
    detectedVariables: z.array(z.string()).optional(),
    variableMappings: z.record(z.string()).optional(),
    isContextAware: z.boolean().optional(),
    supportedContexts: z.array(z.string()).optional(),
    formattingRules: z.record(z.string()).optional(),
    conditionalSections: z.array(z.string()).optional(),
    versions: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdVersions$outboundSchema),
    ).optional(),
    variables: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdVariables$outboundSchema),
    ).optional(),
    instances: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdInstances$outboundSchema),
    ).optional(),
    explanations: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1AccountsIdExplanations$outboundSchema
      ),
    ).optional(),
    intelligence: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1AccountsIdIntelligence$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdTemplates$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdTemplates$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdTemplates$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdTemplates$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdTemplates$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdTemplates$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdTemplates$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdTemplatesToJSON(
  getApiWorkspaceServiceV1AccountsIdTemplates:
    GetApiWorkspaceServiceV1AccountsIdTemplates,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdTemplates$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdTemplates,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdTemplatesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdTemplates,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdTemplates$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdTemplates' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdSharing$inboundSchema: z.ZodType<
  GetApiWorkspaceServiceV1AccountsIdSharing,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  sharedWithEmail: z.string().optional(),
  permissionLevel: z.string().optional(),
  expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdSharing$Outbound = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdSharing$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdSharing$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdSharing
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdSharing$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdSharing$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdSharing$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdSharing$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdSharing$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdSharing$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdSharing$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdSharingToJSON(
  getApiWorkspaceServiceV1AccountsIdSharing:
    GetApiWorkspaceServiceV1AccountsIdSharing,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdSharing$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdSharing,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdSharingFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdSharing,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdSharing$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdSharing' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdActivities$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdActivities,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    activityType: z.string().optional(),
    userId: z.string().optional(),
    description: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdActivities$Outbound = {
  id?: string | undefined;
  activityType?: string | undefined;
  userId?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdActivities$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdActivities$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdActivities
  > = z.object({
    id: z.string().optional(),
    activityType: z.string().optional(),
    userId: z.string().optional(),
    description: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdActivities$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdActivities$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdActivities$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdActivities$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdActivities$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdActivities$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdActivities$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdActivitiesToJSON(
  getApiWorkspaceServiceV1AccountsIdActivities:
    GetApiWorkspaceServiceV1AccountsIdActivities,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdActivities$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdActivities,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdActivitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdActivities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdActivities$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdActivities' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdCompliance$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdCompliance,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    complianceType: z.string().optional(),
    status: z.string().optional(),
    certificationId: z.string().optional(),
    validUntil: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdCompliance$Outbound = {
  id?: string | undefined;
  complianceType?: string | undefined;
  status?: string | undefined;
  certificationId?: string | undefined;
  validUntil?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdCompliance$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdCompliance$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdCompliance
  > = z.object({
    id: z.string().optional(),
    complianceType: z.string().optional(),
    status: z.string().optional(),
    certificationId: z.string().optional(),
    validUntil: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdCompliance$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdCompliance$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdCompliance$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdCompliance$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdCompliance$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdCompliance$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdCompliance$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdComplianceToJSON(
  getApiWorkspaceServiceV1AccountsIdCompliance:
    GetApiWorkspaceServiceV1AccountsIdCompliance,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdCompliance$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdCompliance,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdComplianceFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdCompliance,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdCompliance$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdCompliance' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdCategory$inboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1AccountsIdCategory> = z
    .nativeEnum(GetApiWorkspaceServiceV1AccountsIdCategory);

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdCategory$outboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1AccountsIdCategory> =
    GetApiWorkspaceServiceV1AccountsIdCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdCategory$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdCategory$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdCategory$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdCategory$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdCategory$outboundSchema;
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdPricingModel$inboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1AccountsIdPricingModel> = z
    .nativeEnum(GetApiWorkspaceServiceV1AccountsIdPricingModel);

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdPricingModel$outboundSchema:
  z.ZodNativeEnum<typeof GetApiWorkspaceServiceV1AccountsIdPricingModel> =
    GetApiWorkspaceServiceV1AccountsIdPricingModel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdPricingModel$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdPricingModel$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdPricingModel$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdPricingModel$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdPricingModel$outboundSchema;
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdAccountsVersions$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdAccountsVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    versionNumber: z.string().optional(),
    changelog: z.string().optional(),
    requirements: z.record(z.string()).optional(),
    isPublic: z.boolean().optional(),
    releaseDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdAccountsVersions$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  versionNumber?: string | undefined;
  changelog?: string | undefined;
  requirements?: { [k: string]: string } | undefined;
  isPublic?: boolean | undefined;
  releaseDate?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdAccountsVersions$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdAccountsVersions$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdAccountsVersions
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    versionNumber: z.string().optional(),
    changelog: z.string().optional(),
    requirements: z.record(z.string()).optional(),
    isPublic: z.boolean().optional(),
    releaseDate: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdAccountsVersions$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdAccountsVersions$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdAccountsVersions$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdAccountsVersions$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdAccountsVersions$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdAccountsVersions$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1AccountsIdAccountsVersions$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdAccountsVersionsToJSON(
  getApiWorkspaceServiceV1AccountsIdAccountsVersions:
    GetApiWorkspaceServiceV1AccountsIdAccountsVersions,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdAccountsVersions$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdAccountsVersions,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdAccountsVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdAccountsVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdAccountsVersions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdAccountsVersions' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdInstallations$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdInstallations,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    workspaceId: z.string().optional(),
    versionInstalled: z.string().optional(),
    configuration: z.record(z.string()).optional(),
    installationStatus: z.string().optional(),
    installedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    lastUsed: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdInstallations$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  workspaceId?: string | undefined;
  versionInstalled?: string | undefined;
  configuration?: { [k: string]: string } | undefined;
  installationStatus?: string | undefined;
  installedAt?: string | undefined;
  lastUsed?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdInstallations$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdInstallations$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdInstallations
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    workspaceId: z.string().optional(),
    versionInstalled: z.string().optional(),
    configuration: z.record(z.string()).optional(),
    installationStatus: z.string().optional(),
    installedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUsed: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdInstallations$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdInstallations$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdInstallations$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdInstallations$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdInstallations$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdInstallations$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1AccountsIdInstallations$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdInstallationsToJSON(
  getApiWorkspaceServiceV1AccountsIdInstallations:
    GetApiWorkspaceServiceV1AccountsIdInstallations,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdInstallations$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdInstallations,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdInstallationsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdInstallations,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdInstallations$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdInstallations' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdAnalytics$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdAnalytics,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    metricName: z.string().optional(),
    metricValue: z.number().optional(),
    dimensions: z.record(z.string()).optional(),
    recordedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdAnalytics$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  metricName?: string | undefined;
  metricValue?: number | undefined;
  dimensions?: { [k: string]: string } | undefined;
  recordedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdAnalytics$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdAnalytics$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdAnalytics
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    metricName: z.string().optional(),
    metricValue: z.number().optional(),
    dimensions: z.record(z.string()).optional(),
    recordedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdAnalytics$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdAnalytics$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdAnalytics$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdAnalytics$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdAnalytics$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdAnalytics$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdAnalytics$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdAnalyticsToJSON(
  getApiWorkspaceServiceV1AccountsIdAnalytics:
    GetApiWorkspaceServiceV1AccountsIdAnalytics,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdAnalytics$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdAnalytics,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdAnalytics,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdAnalytics$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdAnalytics' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdReviews$inboundSchema: z.ZodType<
  GetApiWorkspaceServiceV1AccountsIdReviews,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  appId: z.string().optional(),
  reviewerId: z.string().optional(),
  rating: z.number().optional(),
  reviewText: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdReviews$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  reviewerId?: string | undefined;
  rating?: number | undefined;
  reviewText?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdReviews$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdReviews$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdReviews
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    reviewerId: z.string().optional(),
    rating: z.number().optional(),
    reviewText: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdReviews$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdReviews$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdReviews$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdReviews$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdReviews$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdReviews$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdReviews$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdReviewsToJSON(
  getApiWorkspaceServiceV1AccountsIdReviews:
    GetApiWorkspaceServiceV1AccountsIdReviews,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdReviews$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdReviews,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdReviewsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdReviews,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdReviews$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdReviews' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdInfo$inboundSchema: z.ZodType<
  GetApiWorkspaceServiceV1AccountsIdInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  appId: z.string().optional(),
  supportedLanguages: z.array(z.string()).optional(),
  sdkFeatures: z.array(z.string()).optional(),
  testCoverage: z.record(z.number()).optional(),
  securityScans: z.array(z.string()).optional(),
  performanceMetrics: z.record(z.string()).optional(),
  developmentStatus: z.string().optional(),
  knownIssues: z.array(z.string()).optional(),
  roadmapUrl: z.string().optional(),
  lastSecurityAudit: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdInfo$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  supportedLanguages?: Array<string> | undefined;
  sdkFeatures?: Array<string> | undefined;
  testCoverage?: { [k: string]: number } | undefined;
  securityScans?: Array<string> | undefined;
  performanceMetrics?: { [k: string]: string } | undefined;
  developmentStatus?: string | undefined;
  knownIssues?: Array<string> | undefined;
  roadmapUrl?: string | undefined;
  lastSecurityAudit?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdInfo$outboundSchema: z.ZodType<
  GetApiWorkspaceServiceV1AccountsIdInfo$Outbound,
  z.ZodTypeDef,
  GetApiWorkspaceServiceV1AccountsIdInfo
> = z.object({
  id: z.string().optional(),
  appId: z.string().optional(),
  supportedLanguages: z.array(z.string()).optional(),
  sdkFeatures: z.array(z.string()).optional(),
  testCoverage: z.record(z.number()).optional(),
  securityScans: z.array(z.string()).optional(),
  performanceMetrics: z.record(z.string()).optional(),
  developmentStatus: z.string().optional(),
  knownIssues: z.array(z.string()).optional(),
  roadmapUrl: z.string().optional(),
  lastSecurityAudit: z.date().transform(v => v.toISOString()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdInfo$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdInfo$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdInfo$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdInfo$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdInfo$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdInfo$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdInfo$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdInfoToJSON(
  getApiWorkspaceServiceV1AccountsIdInfo:
    GetApiWorkspaceServiceV1AccountsIdInfo,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdInfo$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdInfo,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdInfoFromJSON(
  jsonString: string,
): SafeParseResult<GetApiWorkspaceServiceV1AccountsIdInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdInfo' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdWebhooks$inboundSchema:
  z.ZodType<GetApiWorkspaceServiceV1AccountsIdWebhooks, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      appId: z.string().optional(),
      url: z.string().optional(),
      subscribedEvents: z.array(z.string()).optional(),
      secretKey: z.string().optional(),
      retryCount: z.number().int().optional(),
      timeoutSeconds: z.number().int().optional(),
      isActive: z.boolean().optional(),
      headers: z.record(z.string()).optional(),
      lastTriggered: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      createdAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
    });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdWebhooks$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  url?: string | undefined;
  subscribedEvents?: Array<string> | undefined;
  secretKey?: string | undefined;
  retryCount?: number | undefined;
  timeoutSeconds?: number | undefined;
  isActive?: boolean | undefined;
  headers?: { [k: string]: string } | undefined;
  lastTriggered?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdWebhooks$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdWebhooks$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdWebhooks
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    url: z.string().optional(),
    subscribedEvents: z.array(z.string()).optional(),
    secretKey: z.string().optional(),
    retryCount: z.number().int().optional(),
    timeoutSeconds: z.number().int().optional(),
    isActive: z.boolean().optional(),
    headers: z.record(z.string()).optional(),
    lastTriggered: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdWebhooks$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdWebhooks$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdWebhooks$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdWebhooks$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdWebhooks$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdWebhooks$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdWebhooks$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdWebhooksToJSON(
  getApiWorkspaceServiceV1AccountsIdWebhooks:
    GetApiWorkspaceServiceV1AccountsIdWebhooks,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdWebhooks$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdWebhooks,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdWebhooksFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdWebhooks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdWebhooks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdWebhooks' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdPermissions$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdPermissions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    scope: z.string().optional(),
    description: z.string().optional(),
    isRequired: z.boolean().optional(),
    accessLevels: z.array(z.string()).optional(),
    constraints: z.record(z.string()).optional(),
    requiresApproval: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdPermissions$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  scope?: string | undefined;
  description?: string | undefined;
  isRequired?: boolean | undefined;
  accessLevels?: Array<string> | undefined;
  constraints?: { [k: string]: string } | undefined;
  requiresApproval?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdPermissions$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdPermissions$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdPermissions
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    scope: z.string().optional(),
    description: z.string().optional(),
    isRequired: z.boolean().optional(),
    accessLevels: z.array(z.string()).optional(),
    constraints: z.record(z.string()).optional(),
    requiresApproval: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdPermissions$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdPermissions$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdPermissions$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdPermissions$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdPermissions$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdPermissions$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdPermissions$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdPermissionsToJSON(
  getApiWorkspaceServiceV1AccountsIdPermissions:
    GetApiWorkspaceServiceV1AccountsIdPermissions,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdPermissions$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdPermissions,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdPermissionsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdPermissions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdPermissions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdPermissions' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdInstalledApps$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdInstalledApps,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    developerId: z.string().optional(),
    category: GetApiWorkspaceServiceV1AccountsIdCategory$inboundSchema.default(
      "APP_CATEGORY_UNSPECIFIED",
    ),
    supportedContractTypes: z.array(z.string()).optional(),
    features: z.array(z.string()).optional(),
    pricingModel: GetApiWorkspaceServiceV1AccountsIdPricingModel$inboundSchema
      .default("PRICING_MODEL_UNSPECIFIED"),
    pricingTiers: z.record(z.number()).optional(),
    supportedIntegrations: z.array(z.string()).optional(),
    isVerified: z.boolean().optional(),
    rating: z.number().optional(),
    installationCount: z.number().int().optional(),
    requiredPermissions: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    documentationUrl: z.string().optional(),
    supportEmail: z.string().optional(),
    screenshots: z.array(z.string()).optional(),
    privacyPolicyUrl: z.string().optional(),
    termsUrl: z.string().optional(),
    publishedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1AccountsIdAccountsVersions$inboundSchema
      ),
    ).optional(),
    installations: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1AccountsIdInstallations$inboundSchema
      ),
    ).optional(),
    analytics: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdAnalytics$inboundSchema),
    ).optional(),
    reviews: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdReviews$inboundSchema),
    ).optional(),
    info: z.lazy(() => GetApiWorkspaceServiceV1AccountsIdInfo$inboundSchema)
      .optional(),
    webhooks: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdWebhooks$inboundSchema),
    ).optional(),
    permissions: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdPermissions$inboundSchema),
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdInstalledApps$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  developerId?: string | undefined;
  category: string;
  supportedContractTypes?: Array<string> | undefined;
  features?: Array<string> | undefined;
  pricingModel: string;
  pricingTiers?: { [k: string]: number } | undefined;
  supportedIntegrations?: Array<string> | undefined;
  isVerified?: boolean | undefined;
  rating?: number | undefined;
  installationCount?: number | undefined;
  requiredPermissions?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  documentationUrl?: string | undefined;
  supportEmail?: string | undefined;
  screenshots?: Array<string> | undefined;
  privacyPolicyUrl?: string | undefined;
  termsUrl?: string | undefined;
  publishedAt?: string | undefined;
  lastUpdated?: string | undefined;
  versions?:
    | Array<GetApiWorkspaceServiceV1AccountsIdAccountsVersions$Outbound>
    | undefined;
  installations?:
    | Array<GetApiWorkspaceServiceV1AccountsIdInstallations$Outbound>
    | undefined;
  analytics?:
    | Array<GetApiWorkspaceServiceV1AccountsIdAnalytics$Outbound>
    | undefined;
  reviews?:
    | Array<GetApiWorkspaceServiceV1AccountsIdReviews$Outbound>
    | undefined;
  info?: GetApiWorkspaceServiceV1AccountsIdInfo$Outbound | undefined;
  webhooks?:
    | Array<GetApiWorkspaceServiceV1AccountsIdWebhooks$Outbound>
    | undefined;
  permissions?:
    | Array<GetApiWorkspaceServiceV1AccountsIdPermissions$Outbound>
    | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdInstalledApps$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdInstalledApps$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdInstalledApps
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    developerId: z.string().optional(),
    category: GetApiWorkspaceServiceV1AccountsIdCategory$outboundSchema.default(
      "APP_CATEGORY_UNSPECIFIED",
    ),
    supportedContractTypes: z.array(z.string()).optional(),
    features: z.array(z.string()).optional(),
    pricingModel: GetApiWorkspaceServiceV1AccountsIdPricingModel$outboundSchema
      .default("PRICING_MODEL_UNSPECIFIED"),
    pricingTiers: z.record(z.number()).optional(),
    supportedIntegrations: z.array(z.string()).optional(),
    isVerified: z.boolean().optional(),
    rating: z.number().optional(),
    installationCount: z.number().int().optional(),
    requiredPermissions: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    documentationUrl: z.string().optional(),
    supportEmail: z.string().optional(),
    screenshots: z.array(z.string()).optional(),
    privacyPolicyUrl: z.string().optional(),
    termsUrl: z.string().optional(),
    publishedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
    versions: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1AccountsIdAccountsVersions$outboundSchema
      ),
    ).optional(),
    installations: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1AccountsIdInstallations$outboundSchema
      ),
    ).optional(),
    analytics: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdAnalytics$outboundSchema),
    ).optional(),
    reviews: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdReviews$outboundSchema),
    ).optional(),
    info: z.lazy(() => GetApiWorkspaceServiceV1AccountsIdInfo$outboundSchema)
      .optional(),
    webhooks: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdWebhooks$outboundSchema),
    ).optional(),
    permissions: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1AccountsIdPermissions$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdInstalledApps$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdInstalledApps$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdInstalledApps$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdInstalledApps$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdInstalledApps$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdInstalledApps$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1AccountsIdInstalledApps$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdInstalledAppsToJSON(
  getApiWorkspaceServiceV1AccountsIdInstalledApps:
    GetApiWorkspaceServiceV1AccountsIdInstalledApps,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdInstalledApps$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdInstalledApps,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdInstalledAppsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdInstalledApps,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdInstalledApps$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdInstalledApps' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdWorkspaces$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdWorkspaces,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    uniqueIdentifier: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    storageQuota: z.string().optional(),
    usedStorage: z.string().optional(),
    allowPublicSharing: z.boolean().optional(),
    requireApproval: z.boolean().optional(),
    gdprCompliant: z.boolean().optional(),
    hipaaCompliant: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    folders: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdFolders$inboundSchema),
    ).optional(),
    templates: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdTemplates$inboundSchema),
    ).optional(),
    sharing: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdSharing$inboundSchema),
    ).optional(),
    activities: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdActivities$inboundSchema),
    ).optional(),
    compliance: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdCompliance$inboundSchema),
    ).optional(),
    installedApps: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1AccountsIdInstalledApps$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdWorkspaces$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  uniqueIdentifier?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  storageQuota?: string | undefined;
  usedStorage?: string | undefined;
  allowPublicSharing?: boolean | undefined;
  requireApproval?: boolean | undefined;
  gdprCompliant?: boolean | undefined;
  hipaaCompliant?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  folders?:
    | Array<GetApiWorkspaceServiceV1AccountsIdFolders$Outbound>
    | undefined;
  templates?:
    | Array<GetApiWorkspaceServiceV1AccountsIdTemplates$Outbound>
    | undefined;
  sharing?:
    | Array<GetApiWorkspaceServiceV1AccountsIdSharing$Outbound>
    | undefined;
  activities?:
    | Array<GetApiWorkspaceServiceV1AccountsIdActivities$Outbound>
    | undefined;
  compliance?:
    | Array<GetApiWorkspaceServiceV1AccountsIdCompliance$Outbound>
    | undefined;
  installedApps?:
    | Array<GetApiWorkspaceServiceV1AccountsIdInstalledApps$Outbound>
    | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdWorkspaces$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdWorkspaces$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdWorkspaces
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    uniqueIdentifier: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    storageQuota: z.string().optional(),
    usedStorage: z.string().optional(),
    allowPublicSharing: z.boolean().optional(),
    requireApproval: z.boolean().optional(),
    gdprCompliant: z.boolean().optional(),
    hipaaCompliant: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    folders: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdFolders$outboundSchema),
    ).optional(),
    templates: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdTemplates$outboundSchema),
    ).optional(),
    sharing: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdSharing$outboundSchema),
    ).optional(),
    activities: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdActivities$outboundSchema),
    ).optional(),
    compliance: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdCompliance$outboundSchema),
    ).optional(),
    installedApps: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1AccountsIdInstalledApps$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdWorkspaces$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdWorkspaces$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdWorkspaces$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdWorkspaces$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdWorkspaces$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdWorkspaces$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdWorkspaces$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdWorkspacesToJSON(
  getApiWorkspaceServiceV1AccountsIdWorkspaces:
    GetApiWorkspaceServiceV1AccountsIdWorkspaces,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdWorkspaces$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdWorkspaces,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdWorkspacesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdWorkspaces,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdWorkspaces$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdWorkspaces' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdDataProfiles$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdDataProfiles,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    profileType: z.string().optional(),
    dataFields: z.record(z.string()).optional(),
    isDefault: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdDataProfiles$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  profileType?: string | undefined;
  dataFields?: { [k: string]: string } | undefined;
  isDefault?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdDataProfiles$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdDataProfiles$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdDataProfiles
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    profileType: z.string().optional(),
    dataFields: z.record(z.string()).optional(),
    isDefault: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdDataProfiles$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdDataProfiles$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdDataProfiles$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdDataProfiles$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdDataProfiles$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdDataProfiles$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1AccountsIdDataProfiles$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdDataProfilesToJSON(
  getApiWorkspaceServiceV1AccountsIdDataProfiles:
    GetApiWorkspaceServiceV1AccountsIdDataProfiles,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdDataProfiles$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdDataProfiles,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdDataProfilesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdDataProfiles,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdDataProfiles$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdDataProfiles' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdAccount$inboundSchema: z.ZodType<
  GetApiWorkspaceServiceV1AccountsIdAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  auth0UserId: z.string().optional(),
  email: z.string().optional(),
  baseDirectory: z.string().optional(),
  bucketName: z.string().optional(),
  region: z.string().optional(),
  orgId: z.string().optional(),
  tenantId: z.string().optional(),
  roles: z.array(z.string()).optional(),
  permissions: z.array(z.string()).optional(),
  mfaEnabled: z.boolean().optional(),
  complianceLevel:
    GetApiWorkspaceServiceV1AccountsIdComplianceLevel$inboundSchema.default(
      "COMPLIANCE_LEVEL_UNSPECIFIED",
    ),
  preferences: z.record(z.string()).optional(),
  apiKeys: z.array(z.string()).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  workspaces: z.array(
    z.lazy(() => GetApiWorkspaceServiceV1AccountsIdWorkspaces$inboundSchema),
  ).optional(),
  dataProfiles: z.array(
    z.lazy(() => GetApiWorkspaceServiceV1AccountsIdDataProfiles$inboundSchema),
  ).optional(),
});

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdAccount$Outbound = {
  id?: string | undefined;
  auth0UserId?: string | undefined;
  email?: string | undefined;
  baseDirectory?: string | undefined;
  bucketName?: string | undefined;
  region?: string | undefined;
  orgId?: string | undefined;
  tenantId?: string | undefined;
  roles?: Array<string> | undefined;
  permissions?: Array<string> | undefined;
  mfaEnabled?: boolean | undefined;
  complianceLevel: string;
  preferences?: { [k: string]: string } | undefined;
  apiKeys?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  workspaces?:
    | Array<GetApiWorkspaceServiceV1AccountsIdWorkspaces$Outbound>
    | undefined;
  dataProfiles?:
    | Array<GetApiWorkspaceServiceV1AccountsIdDataProfiles$Outbound>
    | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdAccount$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdAccount$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdAccount
  > = z.object({
    id: z.string().optional(),
    auth0UserId: z.string().optional(),
    email: z.string().optional(),
    baseDirectory: z.string().optional(),
    bucketName: z.string().optional(),
    region: z.string().optional(),
    orgId: z.string().optional(),
    tenantId: z.string().optional(),
    roles: z.array(z.string()).optional(),
    permissions: z.array(z.string()).optional(),
    mfaEnabled: z.boolean().optional(),
    complianceLevel:
      GetApiWorkspaceServiceV1AccountsIdComplianceLevel$outboundSchema.default(
        "COMPLIANCE_LEVEL_UNSPECIFIED",
      ),
    preferences: z.record(z.string()).optional(),
    apiKeys: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    workspaces: z.array(
      z.lazy(() => GetApiWorkspaceServiceV1AccountsIdWorkspaces$outboundSchema),
    ).optional(),
    dataProfiles: z.array(
      z.lazy(() =>
        GetApiWorkspaceServiceV1AccountsIdDataProfiles$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdAccount$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdAccount$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdAccount$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdAccount$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdAccount$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdAccount$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdAccount$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdAccountToJSON(
  getApiWorkspaceServiceV1AccountsIdAccount:
    GetApiWorkspaceServiceV1AccountsIdAccount,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdAccount$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdAccount,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdAccountFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdAccount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdAccount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdAccount' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdData$inboundSchema: z.ZodType<
  GetApiWorkspaceServiceV1AccountsIdData,
  z.ZodTypeDef,
  unknown
> = z.object({
  account: z.lazy(() => GetApiWorkspaceServiceV1AccountsIdAccount$inboundSchema)
    .optional(),
});

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdData$Outbound = {
  account?: GetApiWorkspaceServiceV1AccountsIdAccount$Outbound | undefined;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdData$outboundSchema: z.ZodType<
  GetApiWorkspaceServiceV1AccountsIdData$Outbound,
  z.ZodTypeDef,
  GetApiWorkspaceServiceV1AccountsIdData
> = z.object({
  account: z.lazy(() =>
    GetApiWorkspaceServiceV1AccountsIdAccount$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdData$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdData$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdData$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdData$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdData$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdData$Outbound` instead. */
  export type Outbound = GetApiWorkspaceServiceV1AccountsIdData$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdDataToJSON(
  getApiWorkspaceServiceV1AccountsIdData:
    GetApiWorkspaceServiceV1AccountsIdData,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdData$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdData,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdDataFromJSON(
  jsonString: string,
): SafeParseResult<GetApiWorkspaceServiceV1AccountsIdData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdData' from JSON`,
  );
}

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdResponseBody$inboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: z.lazy(() => GetApiWorkspaceServiceV1AccountsIdData$inboundSchema),
  });

/** @internal */
export type GetApiWorkspaceServiceV1AccountsIdResponseBody$Outbound = {
  data: GetApiWorkspaceServiceV1AccountsIdData$Outbound;
};

/** @internal */
export const GetApiWorkspaceServiceV1AccountsIdResponseBody$outboundSchema:
  z.ZodType<
    GetApiWorkspaceServiceV1AccountsIdResponseBody$Outbound,
    z.ZodTypeDef,
    GetApiWorkspaceServiceV1AccountsIdResponseBody
  > = z.object({
    data: z.lazy(() => GetApiWorkspaceServiceV1AccountsIdData$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiWorkspaceServiceV1AccountsIdResponseBody$ {
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetApiWorkspaceServiceV1AccountsIdResponseBody$inboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetApiWorkspaceServiceV1AccountsIdResponseBody$outboundSchema;
  /** @deprecated use `GetApiWorkspaceServiceV1AccountsIdResponseBody$Outbound` instead. */
  export type Outbound =
    GetApiWorkspaceServiceV1AccountsIdResponseBody$Outbound;
}

export function getApiWorkspaceServiceV1AccountsIdResponseBodyToJSON(
  getApiWorkspaceServiceV1AccountsIdResponseBody:
    GetApiWorkspaceServiceV1AccountsIdResponseBody,
): string {
  return JSON.stringify(
    GetApiWorkspaceServiceV1AccountsIdResponseBody$outboundSchema.parse(
      getApiWorkspaceServiceV1AccountsIdResponseBody,
    ),
  );
}

export function getApiWorkspaceServiceV1AccountsIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetApiWorkspaceServiceV1AccountsIdResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetApiWorkspaceServiceV1AccountsIdResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetApiWorkspaceServiceV1AccountsIdResponseBody' from JSON`,
  );
}
