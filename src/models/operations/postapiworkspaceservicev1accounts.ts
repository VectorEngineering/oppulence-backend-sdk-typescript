/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ComplianceLevel = {
  ComplianceLevelUnspecified: "COMPLIANCE_LEVEL_UNSPECIFIED",
  ComplianceLevelNone: "COMPLIANCE_LEVEL_NONE",
  ComplianceLevelBasic: "COMPLIANCE_LEVEL_BASIC",
  ComplianceLevelAdvanced: "COMPLIANCE_LEVEL_ADVANCED",
  ComplianceLevelEnterprise: "COMPLIANCE_LEVEL_ENTERPRISE",
} as const;
export type ComplianceLevel = ClosedEnum<typeof ComplianceLevel>;

export type PostApiWorkspaceServiceV1AccountsRequestBody = {
  auth0UserId: string;
  email: string;
  baseDirectory?: string | undefined;
  region?: string | undefined;
  orgId?: string | undefined;
  tenantId?: string | undefined;
  roles?: Array<string> | undefined;
  permissions?: Array<string> | undefined;
  mfaEnabled?: boolean | undefined;
  complianceLevel?: ComplianceLevel | undefined;
  preferences?: { [k: string]: string } | undefined;
};

export const PostApiWorkspaceServiceV1AccountsComplianceLevel = {
  ComplianceLevelUnspecified: "COMPLIANCE_LEVEL_UNSPECIFIED",
  ComplianceLevelNone: "COMPLIANCE_LEVEL_NONE",
  ComplianceLevelBasic: "COMPLIANCE_LEVEL_BASIC",
  ComplianceLevelAdvanced: "COMPLIANCE_LEVEL_ADVANCED",
  ComplianceLevelEnterprise: "COMPLIANCE_LEVEL_ENTERPRISE",
} as const;
export type PostApiWorkspaceServiceV1AccountsComplianceLevel = ClosedEnum<
  typeof PostApiWorkspaceServiceV1AccountsComplianceLevel
>;

export type PostApiWorkspaceServiceV1AccountsEmbeddings = {
  id?: string | undefined;
  embeddings?: Array<number> | undefined;
  modelVersion?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsAccountsResponse200Versions = {
  id?: string | undefined;
  fileId?: string | undefined;
  versionNumber?: number | undefined;
  s3Key?: string | undefined;
  size?: string | undefined;
  commitMessage?: string | undefined;
  authorId?: string | undefined;
  createdAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsComments = {
  id?: string | undefined;
  authorId?: string | undefined;
  content?: string | undefined;
  startPosition?: number | undefined;
  endPosition?: number | undefined;
  resolved?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsAccountsSharing = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsSnapshots = {
  id?: string | undefined;
  fileId?: string | undefined;
  snapshotHash?: string | undefined;
  content?: string | undefined;
  authorId?: string | undefined;
  reason?: string | undefined;
  createdAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsFiles = {
  id?: string | undefined;
  name?: string | undefined;
  size?: string | undefined;
  s3Key?: string | undefined;
  s3BucketName?: string | undefined;
  isDeleted?: boolean | undefined;
  version?: number | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  embeddings?: PostApiWorkspaceServiceV1AccountsEmbeddings | undefined;
  versions?:
    | Array<PostApiWorkspaceServiceV1AccountsAccountsResponse200Versions>
    | undefined;
  comments?: Array<PostApiWorkspaceServiceV1AccountsComments> | undefined;
  sharing?: Array<PostApiWorkspaceServiceV1AccountsAccountsSharing> | undefined;
  snapshots?: Array<PostApiWorkspaceServiceV1AccountsSnapshots> | undefined;
};

export type PostApiWorkspaceServiceV1AccountsFolders = {
  id?: string | undefined;
  name?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  isDeleted?: boolean | undefined;
  parentFolderId?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  files?: Array<PostApiWorkspaceServiceV1AccountsFiles> | undefined;
};

export const PostApiWorkspaceServiceV1AccountsTemplateType = {
  TemplateTypeUnspecified: "TEMPLATE_TYPE_UNSPECIFIED",
  TemplateTypeStandard: "TEMPLATE_TYPE_STANDARD",
  TemplateTypeSmart: "TEMPLATE_TYPE_SMART",
  TemplateTypeAdaptive: "TEMPLATE_TYPE_ADAPTIVE",
  TemplateTypeAiGenerated: "TEMPLATE_TYPE_AI_GENERATED",
} as const;
export type PostApiWorkspaceServiceV1AccountsTemplateType = ClosedEnum<
  typeof PostApiWorkspaceServiceV1AccountsTemplateType
>;

export type PostApiWorkspaceServiceV1AccountsVersions = {
  id?: string | undefined;
  templateId?: string | undefined;
  version?: string | undefined;
  baseContent?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  authorId?: string | undefined;
  changeDescription?: string | undefined;
  createdAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsVariables = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  variableType?: string | undefined;
  defaultValue?: string | undefined;
  isRequired?: boolean | undefined;
  validationRules?: string | undefined;
  dataSource?: string | undefined;
  aiExtractionRules?: string | undefined;
  alternatives?: Array<string> | undefined;
  templateId?: string | undefined;
};

export const PostApiWorkspaceServiceV1AccountsStatus = {
  DocumentStatusUnspecified: "DOCUMENT_STATUS_UNSPECIFIED",
  DocumentStatusDraft: "DOCUMENT_STATUS_DRAFT",
  DocumentStatusInReview: "DOCUMENT_STATUS_IN_REVIEW",
  DocumentStatusApproved: "DOCUMENT_STATUS_APPROVED",
  DocumentStatusRejected: "DOCUMENT_STATUS_REJECTED",
  DocumentStatusExpired: "DOCUMENT_STATUS_EXPIRED",
  DocumentStatusArchived: "DOCUMENT_STATUS_ARCHIVED",
} as const;
export type PostApiWorkspaceServiceV1AccountsStatus = ClosedEnum<
  typeof PostApiWorkspaceServiceV1AccountsStatus
>;

export const PostApiWorkspaceServiceV1AccountsAccountsStatus = {
  SignatureStatusUnspecified: "SIGNATURE_STATUS_UNSPECIFIED",
  SignatureStatusPending: "SIGNATURE_STATUS_PENDING",
  SignatureStatusSigned: "SIGNATURE_STATUS_SIGNED",
  SignatureStatusRejected: "SIGNATURE_STATUS_REJECTED",
  SignatureStatusExpired: "SIGNATURE_STATUS_EXPIRED",
  SignatureStatusRevoked: "SIGNATURE_STATUS_REVOKED",
} as const;
export type PostApiWorkspaceServiceV1AccountsAccountsStatus = ClosedEnum<
  typeof PostApiWorkspaceServiceV1AccountsAccountsStatus
>;

export type PostApiWorkspaceServiceV1AccountsSignatureBlocks = {
  id?: string | undefined;
  requestId?: string | undefined;
  blockType?: string | undefined;
  pageNumber?: number | undefined;
  xPosition?: number | undefined;
  yPosition?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
  isRequired?: boolean | undefined;
  signatureData?: string | undefined;
  signedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsWorkflow = {
  id?: string | undefined;
  requestId?: string | undefined;
  signingOrder?: Array<string> | undefined;
  currentSigner?: string | undefined;
  workflowStatus?: string | undefined;
  parallelSigning?: boolean | undefined;
  requireAllSignatures?: boolean | undefined;
  deadline?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsSignatureRequests = {
  id?: string | undefined;
  status?: PostApiWorkspaceServiceV1AccountsAccountsStatus | undefined;
  signerEmail?: string | undefined;
  signerName?: string | undefined;
  role?: string | undefined;
  authenticationMethod?: string | undefined;
  expiresAt?: Date | undefined;
  requiresMfa?: boolean | undefined;
  signatureType?: string | undefined;
  reminderSchedule?: Array<string> | undefined;
  documentId?: string | undefined;
  signatureBlocks?:
    | Array<PostApiWorkspaceServiceV1AccountsSignatureBlocks>
    | undefined;
  workflow?: PostApiWorkspaceServiceV1AccountsWorkflow | undefined;
};

export type PostApiWorkspaceServiceV1AccountsAiAssistance = {
  id?: string | undefined;
  documentId?: string | undefined;
  interactionType?: string | undefined;
  userQuery?: string | undefined;
  aiResponse?: string | undefined;
  context?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsRounds = {
  id?: string | undefined;
  historyId?: string | undefined;
  roundNumber?: number | undefined;
  proposerId?: string | undefined;
  proposalContent?: string | undefined;
  responseContent?: string | undefined;
  status?: string | undefined;
  createdAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsNegotiation = {
  id?: string | undefined;
  documentId?: string | undefined;
  rounds?: Array<PostApiWorkspaceServiceV1AccountsRounds> | undefined;
  currentStatus?: string | undefined;
  startedAt?: Date | undefined;
  lastUpdated?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsMerges = {
  id?: string | undefined;
  branchId?: string | undefined;
  sourceBranch?: string | undefined;
  targetBranch?: string | undefined;
  mergeStatus?: string | undefined;
  mergeStrategy?: string | undefined;
  conflicts?: Array<string> | undefined;
  mergerId?: string | undefined;
  createdAt?: Date | undefined;
  completedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsPolicy = {
  id?: string | undefined;
  branchId?: string | undefined;
  requiredApprovers?: Array<string> | undefined;
  minimumApprovals?: number | undefined;
  enforceLinearHistory?: boolean | undefined;
  allowForcePush?: boolean | undefined;
  protectedPaths?: Array<string> | undefined;
  mergeRules?: { [k: string]: string } | undefined;
  automatedChecks?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsMergeRequests = {
  id?: string | undefined;
  sourceBranchId?: string | undefined;
  targetBranchId?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  authorId?: string | undefined;
  reviewers?: Array<string> | undefined;
  status?: string | undefined;
  labels?: Array<string> | undefined;
  hasConflicts?: boolean | undefined;
  automatedCheckResults?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsBranches = {
  id?: string | undefined;
  name?: string | undefined;
  baseVersionHash?: string | undefined;
  currentHeadHash?: string | undefined;
  purpose?: string | undefined;
  status?: string | undefined;
  reviewers?: Array<string> | undefined;
  branchMetadata?: { [k: string]: string } | undefined;
  isLocked?: boolean | undefined;
  lastUpdated?: Date | undefined;
  merges?: Array<PostApiWorkspaceServiceV1AccountsMerges> | undefined;
  policy?: PostApiWorkspaceServiceV1AccountsPolicy | undefined;
  mergeRequests?:
    | Array<PostApiWorkspaceServiceV1AccountsMergeRequests>
    | undefined;
};

export type PostApiWorkspaceServiceV1AccountsChanges = {
  id?: string | undefined;
  versionId?: string | undefined;
  changeType?: string | undefined;
  contentBefore?: string | undefined;
  contentAfter?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsSummaries = {
  id?: string | undefined;
  versionId?: string | undefined;
  summaryType?: string | undefined;
  content?: string | undefined;
  targetAudience?: string | undefined;
  keyPoints?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsAccountsResponseVersions = {
  id?: string | undefined;
  versionHash?: string | undefined;
  parentHash?: string | undefined;
  commitMessage?: string | undefined;
  authorId?: string | undefined;
  branchName?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  tags?: Array<string> | undefined;
  isApproved?: boolean | undefined;
  approvalChain?: string | undefined;
  createdAt?: Date | undefined;
  branches?: Array<PostApiWorkspaceServiceV1AccountsBranches> | undefined;
  changes?: Array<PostApiWorkspaceServiceV1AccountsChanges> | undefined;
  summaries?: Array<PostApiWorkspaceServiceV1AccountsSummaries> | undefined;
};

export type PostApiWorkspaceServiceV1AccountsInstances = {
  id?: string | undefined;
  templateId?: string | undefined;
  status?: PostApiWorkspaceServiceV1AccountsStatus | undefined;
  fieldValues?: { [k: string]: string } | undefined;
  signers?: Array<string> | undefined;
  language?: string | undefined;
  isCompleted?: boolean | undefined;
  dueDate?: Date | undefined;
  generatedContent?: string | undefined;
  attachments?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  signatureRequests?:
    | Array<PostApiWorkspaceServiceV1AccountsSignatureRequests>
    | undefined;
  aiAssistance?:
    | Array<PostApiWorkspaceServiceV1AccountsAiAssistance>
    | undefined;
  negotiation?: PostApiWorkspaceServiceV1AccountsNegotiation | undefined;
  versions?:
    | Array<PostApiWorkspaceServiceV1AccountsAccountsResponseVersions>
    | undefined;
};

export type PostApiWorkspaceServiceV1AccountsExplanations = {
  id?: string | undefined;
  templateId?: string | undefined;
  sectionIdentifier?: string | undefined;
  explanationText?: string | undefined;
  complexityLevel?: string | undefined;
  relatedTerms?: Array<string> | undefined;
  legalReferences?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsRiskAssessments = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  riskType?: string | undefined;
  riskScore?: number | undefined;
  assessmentDetails?: string | undefined;
  mitigationSuggestions?: Array<string> | undefined;
  assessorId?: string | undefined;
  createdAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsComplianceChecks = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  complianceStandard?: string | undefined;
  checkResult?: string | undefined;
  violations?: Array<string> | undefined;
  remediationSteps?: string | undefined;
  checkDate?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsIntelligence = {
  id?: string | undefined;
  contractType?: string | undefined;
  riskScores?: { [k: string]: number } | undefined;
  detectedClauses?: { [k: string]: string } | undefined;
  keyObligations?: Array<string> | undefined;
  complianceScores?: { [k: string]: number } | undefined;
  jurisdiction?: string | undefined;
  governingLaws?: Array<string> | undefined;
  semanticAnalysis?: { [k: string]: string } | undefined;
  analysisDate?: Date | undefined;
  riskAssessments?:
    | Array<PostApiWorkspaceServiceV1AccountsRiskAssessments>
    | undefined;
  complianceChecks?:
    | Array<PostApiWorkspaceServiceV1AccountsComplianceChecks>
    | undefined;
};

export type PostApiWorkspaceServiceV1AccountsTemplates = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  industryType?: string | undefined;
  documentType?: string | undefined;
  baseContent?: string | undefined;
  isAdaptive?: boolean | undefined;
  metadata?: { [k: string]: string } | undefined;
  supportedLanguages?: Array<string> | undefined;
  requiredDataFields?: Array<string> | undefined;
  version?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  templateType?: PostApiWorkspaceServiceV1AccountsTemplateType | undefined;
  content?: string | undefined;
  detectedVariables?: Array<string> | undefined;
  variableMappings?: { [k: string]: string } | undefined;
  isContextAware?: boolean | undefined;
  supportedContexts?: Array<string> | undefined;
  formattingRules?: { [k: string]: string } | undefined;
  conditionalSections?: Array<string> | undefined;
  versions?: Array<PostApiWorkspaceServiceV1AccountsVersions> | undefined;
  variables?: Array<PostApiWorkspaceServiceV1AccountsVariables> | undefined;
  instances?: Array<PostApiWorkspaceServiceV1AccountsInstances> | undefined;
  explanations?:
    | Array<PostApiWorkspaceServiceV1AccountsExplanations>
    | undefined;
  intelligence?:
    | Array<PostApiWorkspaceServiceV1AccountsIntelligence>
    | undefined;
};

export type PostApiWorkspaceServiceV1AccountsSharing = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsActivities = {
  id?: string | undefined;
  activityType?: string | undefined;
  userId?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsCompliance = {
  id?: string | undefined;
  complianceType?: string | undefined;
  status?: string | undefined;
  certificationId?: string | undefined;
  validUntil?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export const PostApiWorkspaceServiceV1AccountsCategory = {
  AppCategoryUnspecified: "APP_CATEGORY_UNSPECIFIED",
  AppCategoryContractAutomation: "APP_CATEGORY_CONTRACT_AUTOMATION",
  AppCategoryContractAnalysis: "APP_CATEGORY_CONTRACT_ANALYSIS",
  AppCategoryIntegration: "APP_CATEGORY_INTEGRATION",
  AppCategoryAiPowered: "APP_CATEGORY_AI_POWERED",
  AppCategoryWorkflow: "APP_CATEGORY_WORKFLOW",
  AppCategoryCompliance: "APP_CATEGORY_COMPLIANCE",
} as const;
export type PostApiWorkspaceServiceV1AccountsCategory = ClosedEnum<
  typeof PostApiWorkspaceServiceV1AccountsCategory
>;

export const PostApiWorkspaceServiceV1AccountsPricingModel = {
  PricingModelUnspecified: "PRICING_MODEL_UNSPECIFIED",
  PricingModelFree: "PRICING_MODEL_FREE",
  PricingModelSubscription: "PRICING_MODEL_SUBSCRIPTION",
  PricingModelUsageBased: "PRICING_MODEL_USAGE_BASED",
  PricingModelEnterprise: "PRICING_MODEL_ENTERPRISE",
} as const;
export type PostApiWorkspaceServiceV1AccountsPricingModel = ClosedEnum<
  typeof PostApiWorkspaceServiceV1AccountsPricingModel
>;

export type PostApiWorkspaceServiceV1AccountsAccountsVersions = {
  id?: string | undefined;
  appId?: string | undefined;
  versionNumber?: string | undefined;
  changelog?: string | undefined;
  requirements?: { [k: string]: string } | undefined;
  isPublic?: boolean | undefined;
  releaseDate?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsInstallations = {
  id?: string | undefined;
  appId?: string | undefined;
  workspaceId?: string | undefined;
  versionInstalled?: string | undefined;
  configuration?: { [k: string]: string } | undefined;
  installationStatus?: string | undefined;
  installedAt?: Date | undefined;
  lastUsed?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsAnalytics = {
  id?: string | undefined;
  appId?: string | undefined;
  metricName?: string | undefined;
  metricValue?: number | undefined;
  dimensions?: { [k: string]: string } | undefined;
  recordedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsReviews = {
  id?: string | undefined;
  appId?: string | undefined;
  reviewerId?: string | undefined;
  rating?: number | undefined;
  reviewText?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsInfo = {
  id?: string | undefined;
  appId?: string | undefined;
  supportedLanguages?: Array<string> | undefined;
  sdkFeatures?: Array<string> | undefined;
  testCoverage?: { [k: string]: number } | undefined;
  securityScans?: Array<string> | undefined;
  performanceMetrics?: { [k: string]: string } | undefined;
  developmentStatus?: string | undefined;
  knownIssues?: Array<string> | undefined;
  roadmapUrl?: string | undefined;
  lastSecurityAudit?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsWebhooks = {
  id?: string | undefined;
  appId?: string | undefined;
  url?: string | undefined;
  subscribedEvents?: Array<string> | undefined;
  secretKey?: string | undefined;
  retryCount?: number | undefined;
  timeoutSeconds?: number | undefined;
  isActive?: boolean | undefined;
  headers?: { [k: string]: string } | undefined;
  lastTriggered?: Date | undefined;
  createdAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsPermissions = {
  id?: string | undefined;
  appId?: string | undefined;
  scope?: string | undefined;
  description?: string | undefined;
  isRequired?: boolean | undefined;
  accessLevels?: Array<string> | undefined;
  constraints?: { [k: string]: string } | undefined;
  requiresApproval?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsInstalledApps = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  developerId?: string | undefined;
  category?: PostApiWorkspaceServiceV1AccountsCategory | undefined;
  supportedContractTypes?: Array<string> | undefined;
  features?: Array<string> | undefined;
  pricingModel?: PostApiWorkspaceServiceV1AccountsPricingModel | undefined;
  pricingTiers?: { [k: string]: number } | undefined;
  supportedIntegrations?: Array<string> | undefined;
  isVerified?: boolean | undefined;
  rating?: number | undefined;
  installationCount?: number | undefined;
  requiredPermissions?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  documentationUrl?: string | undefined;
  supportEmail?: string | undefined;
  screenshots?: Array<string> | undefined;
  privacyPolicyUrl?: string | undefined;
  termsUrl?: string | undefined;
  publishedAt?: Date | undefined;
  lastUpdated?: Date | undefined;
  versions?:
    | Array<PostApiWorkspaceServiceV1AccountsAccountsVersions>
    | undefined;
  installations?:
    | Array<PostApiWorkspaceServiceV1AccountsInstallations>
    | undefined;
  analytics?: Array<PostApiWorkspaceServiceV1AccountsAnalytics> | undefined;
  reviews?: Array<PostApiWorkspaceServiceV1AccountsReviews> | undefined;
  info?: PostApiWorkspaceServiceV1AccountsInfo | undefined;
  webhooks?: Array<PostApiWorkspaceServiceV1AccountsWebhooks> | undefined;
  permissions?: Array<PostApiWorkspaceServiceV1AccountsPermissions> | undefined;
};

export type PostApiWorkspaceServiceV1AccountsWorkspaces = {
  id?: string | undefined;
  name?: string | undefined;
  uniqueIdentifier?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  storageQuota?: string | undefined;
  usedStorage?: string | undefined;
  allowPublicSharing?: boolean | undefined;
  requireApproval?: boolean | undefined;
  gdprCompliant?: boolean | undefined;
  hipaaCompliant?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  folders?: Array<PostApiWorkspaceServiceV1AccountsFolders> | undefined;
  templates?: Array<PostApiWorkspaceServiceV1AccountsTemplates> | undefined;
  sharing?: Array<PostApiWorkspaceServiceV1AccountsSharing> | undefined;
  activities?: Array<PostApiWorkspaceServiceV1AccountsActivities> | undefined;
  compliance?: Array<PostApiWorkspaceServiceV1AccountsCompliance> | undefined;
  installedApps?:
    | Array<PostApiWorkspaceServiceV1AccountsInstalledApps>
    | undefined;
};

export type PostApiWorkspaceServiceV1AccountsDataProfiles = {
  id?: string | undefined;
  name?: string | undefined;
  profileType?: string | undefined;
  dataFields?: { [k: string]: string } | undefined;
  isDefault?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PostApiWorkspaceServiceV1AccountsAccount = {
  id?: string | undefined;
  auth0UserId?: string | undefined;
  email?: string | undefined;
  baseDirectory?: string | undefined;
  bucketName?: string | undefined;
  region?: string | undefined;
  orgId?: string | undefined;
  tenantId?: string | undefined;
  roles?: Array<string> | undefined;
  permissions?: Array<string> | undefined;
  mfaEnabled?: boolean | undefined;
  complianceLevel?:
    | PostApiWorkspaceServiceV1AccountsComplianceLevel
    | undefined;
  preferences?: { [k: string]: string } | undefined;
  apiKeys?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  workspaces?: Array<PostApiWorkspaceServiceV1AccountsWorkspaces> | undefined;
  dataProfiles?:
    | Array<PostApiWorkspaceServiceV1AccountsDataProfiles>
    | undefined;
};

/**
 * Creates a new user account with initial workspace
 */
export type PostApiWorkspaceServiceV1AccountsResponseBody = {
  account?: PostApiWorkspaceServiceV1AccountsAccount | undefined;
  initialWorkspaceName?: string | undefined;
};

/** @internal */
export const ComplianceLevel$inboundSchema: z.ZodNativeEnum<
  typeof ComplianceLevel
> = z.nativeEnum(ComplianceLevel);

/** @internal */
export const ComplianceLevel$outboundSchema: z.ZodNativeEnum<
  typeof ComplianceLevel
> = ComplianceLevel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComplianceLevel$ {
  /** @deprecated use `ComplianceLevel$inboundSchema` instead. */
  export const inboundSchema = ComplianceLevel$inboundSchema;
  /** @deprecated use `ComplianceLevel$outboundSchema` instead. */
  export const outboundSchema = ComplianceLevel$outboundSchema;
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsRequestBody$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    auth0UserId: z.string(),
    email: z.string(),
    baseDirectory: z.string().optional(),
    region: z.string().optional(),
    orgId: z.string().optional(),
    tenantId: z.string().optional(),
    roles: z.array(z.string()).optional(),
    permissions: z.array(z.string()).optional(),
    mfaEnabled: z.boolean().optional(),
    complianceLevel: ComplianceLevel$inboundSchema.default(
      "COMPLIANCE_LEVEL_UNSPECIFIED",
    ),
    preferences: z.record(z.string()).optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsRequestBody$Outbound = {
  auth0UserId: string;
  email: string;
  baseDirectory?: string | undefined;
  region?: string | undefined;
  orgId?: string | undefined;
  tenantId?: string | undefined;
  roles?: Array<string> | undefined;
  permissions?: Array<string> | undefined;
  mfaEnabled?: boolean | undefined;
  complianceLevel: string;
  preferences?: { [k: string]: string } | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsRequestBody$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsRequestBody$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsRequestBody
  > = z.object({
    auth0UserId: z.string(),
    email: z.string(),
    baseDirectory: z.string().optional(),
    region: z.string().optional(),
    orgId: z.string().optional(),
    tenantId: z.string().optional(),
    roles: z.array(z.string()).optional(),
    permissions: z.array(z.string()).optional(),
    mfaEnabled: z.boolean().optional(),
    complianceLevel: ComplianceLevel$outboundSchema.default(
      "COMPLIANCE_LEVEL_UNSPECIFIED",
    ),
    preferences: z.record(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsRequestBody$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsRequestBody$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsRequestBody$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsRequestBody$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsRequestBody$Outbound;
}

export function postApiWorkspaceServiceV1AccountsRequestBodyToJSON(
  postApiWorkspaceServiceV1AccountsRequestBody:
    PostApiWorkspaceServiceV1AccountsRequestBody,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsRequestBody$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsRequestBody,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsRequestBody' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsComplianceLevel$inboundSchema:
  z.ZodNativeEnum<typeof PostApiWorkspaceServiceV1AccountsComplianceLevel> = z
    .nativeEnum(PostApiWorkspaceServiceV1AccountsComplianceLevel);

/** @internal */
export const PostApiWorkspaceServiceV1AccountsComplianceLevel$outboundSchema:
  z.ZodNativeEnum<typeof PostApiWorkspaceServiceV1AccountsComplianceLevel> =
    PostApiWorkspaceServiceV1AccountsComplianceLevel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsComplianceLevel$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsComplianceLevel$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsComplianceLevel$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsComplianceLevel$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsComplianceLevel$outboundSchema;
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsEmbeddings$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsEmbeddings,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    embeddings: z.array(z.number()).optional(),
    modelVersion: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsEmbeddings$Outbound = {
  id?: string | undefined;
  embeddings?: Array<number> | undefined;
  modelVersion?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsEmbeddings$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsEmbeddings$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsEmbeddings
  > = z.object({
    id: z.string().optional(),
    embeddings: z.array(z.number()).optional(),
    modelVersion: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsEmbeddings$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsEmbeddings$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsEmbeddings$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsEmbeddings$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsEmbeddings$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsEmbeddings$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsEmbeddings$Outbound;
}

export function postApiWorkspaceServiceV1AccountsEmbeddingsToJSON(
  postApiWorkspaceServiceV1AccountsEmbeddings:
    PostApiWorkspaceServiceV1AccountsEmbeddings,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsEmbeddings$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsEmbeddings,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsEmbeddingsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsEmbeddings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsEmbeddings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsEmbeddings' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsAccountsResponse200Versions$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsAccountsResponse200Versions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    versionNumber: z.number().int().optional(),
    s3Key: z.string().optional(),
    size: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsAccountsResponse200Versions$Outbound =
  {
    id?: string | undefined;
    fileId?: string | undefined;
    versionNumber?: number | undefined;
    s3Key?: string | undefined;
    size?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    createdAt?: string | undefined;
  };

/** @internal */
export const PostApiWorkspaceServiceV1AccountsAccountsResponse200Versions$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsAccountsResponse200Versions$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsAccountsResponse200Versions
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    versionNumber: z.number().int().optional(),
    s3Key: z.string().optional(),
    size: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsAccountsResponse200Versions$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsAccountsResponse200Versions$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsAccountsResponse200Versions$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsAccountsResponse200Versions$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsAccountsResponse200Versions$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsAccountsResponse200Versions$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1AccountsAccountsResponse200Versions$Outbound;
}

export function postApiWorkspaceServiceV1AccountsAccountsResponse200VersionsToJSON(
  postApiWorkspaceServiceV1AccountsAccountsResponse200Versions:
    PostApiWorkspaceServiceV1AccountsAccountsResponse200Versions,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsAccountsResponse200Versions$outboundSchema
      .parse(postApiWorkspaceServiceV1AccountsAccountsResponse200Versions),
  );
}

export function postApiWorkspaceServiceV1AccountsAccountsResponse200VersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsAccountsResponse200Versions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsAccountsResponse200Versions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsAccountsResponse200Versions' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsComments$inboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1AccountsComments,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  authorId: z.string().optional(),
  content: z.string().optional(),
  startPosition: z.number().int().optional(),
  endPosition: z.number().int().optional(),
  resolved: z.boolean().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PostApiWorkspaceServiceV1AccountsComments$Outbound = {
  id?: string | undefined;
  authorId?: string | undefined;
  content?: string | undefined;
  startPosition?: number | undefined;
  endPosition?: number | undefined;
  resolved?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsComments$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsComments$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsComments
  > = z.object({
    id: z.string().optional(),
    authorId: z.string().optional(),
    content: z.string().optional(),
    startPosition: z.number().int().optional(),
    endPosition: z.number().int().optional(),
    resolved: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsComments$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsComments$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsComments$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsComments$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsComments$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsComments$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsComments$Outbound;
}

export function postApiWorkspaceServiceV1AccountsCommentsToJSON(
  postApiWorkspaceServiceV1AccountsComments:
    PostApiWorkspaceServiceV1AccountsComments,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsComments$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsComments,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsCommentsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsComments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsComments$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsComments' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsAccountsSharing$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsAccountsSharing,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsAccountsSharing$Outbound = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsAccountsSharing$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsAccountsSharing$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsAccountsSharing
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsAccountsSharing$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsAccountsSharing$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsAccountsSharing$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsAccountsSharing$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsAccountsSharing$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsAccountsSharing$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1AccountsAccountsSharing$Outbound;
}

export function postApiWorkspaceServiceV1AccountsAccountsSharingToJSON(
  postApiWorkspaceServiceV1AccountsAccountsSharing:
    PostApiWorkspaceServiceV1AccountsAccountsSharing,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsAccountsSharing$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsAccountsSharing,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsAccountsSharingFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsAccountsSharing,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsAccountsSharing$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsAccountsSharing' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsSnapshots$inboundSchema:
  z.ZodType<PostApiWorkspaceServiceV1AccountsSnapshots, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      fileId: z.string().optional(),
      snapshotHash: z.string().optional(),
      content: z.string().optional(),
      authorId: z.string().optional(),
      reason: z.string().optional(),
      createdAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
    });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsSnapshots$Outbound = {
  id?: string | undefined;
  fileId?: string | undefined;
  snapshotHash?: string | undefined;
  content?: string | undefined;
  authorId?: string | undefined;
  reason?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsSnapshots$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsSnapshots$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsSnapshots
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    snapshotHash: z.string().optional(),
    content: z.string().optional(),
    authorId: z.string().optional(),
    reason: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsSnapshots$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsSnapshots$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsSnapshots$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsSnapshots$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsSnapshots$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsSnapshots$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsSnapshots$Outbound;
}

export function postApiWorkspaceServiceV1AccountsSnapshotsToJSON(
  postApiWorkspaceServiceV1AccountsSnapshots:
    PostApiWorkspaceServiceV1AccountsSnapshots,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsSnapshots$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsSnapshots,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsSnapshotsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsSnapshots,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsSnapshots$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsSnapshots' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsFiles$inboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1AccountsFiles,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  size: z.string().optional(),
  s3Key: z.string().optional(),
  s3BucketName: z.string().optional(),
  isDeleted: z.boolean().optional(),
  version: z.number().int().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  embeddings: z.lazy(() =>
    PostApiWorkspaceServiceV1AccountsEmbeddings$inboundSchema
  ).optional(),
  versions: z.array(
    z.lazy(() =>
      PostApiWorkspaceServiceV1AccountsAccountsResponse200Versions$inboundSchema
    ),
  ).optional(),
  comments: z.array(
    z.lazy(() => PostApiWorkspaceServiceV1AccountsComments$inboundSchema),
  ).optional(),
  sharing: z.array(
    z.lazy(() =>
      PostApiWorkspaceServiceV1AccountsAccountsSharing$inboundSchema
    ),
  ).optional(),
  snapshots: z.array(
    z.lazy(() => PostApiWorkspaceServiceV1AccountsSnapshots$inboundSchema),
  ).optional(),
});

/** @internal */
export type PostApiWorkspaceServiceV1AccountsFiles$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  size?: string | undefined;
  s3Key?: string | undefined;
  s3BucketName?: string | undefined;
  isDeleted?: boolean | undefined;
  version?: number | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  embeddings?: PostApiWorkspaceServiceV1AccountsEmbeddings$Outbound | undefined;
  versions?:
    | Array<
      PostApiWorkspaceServiceV1AccountsAccountsResponse200Versions$Outbound
    >
    | undefined;
  comments?:
    | Array<PostApiWorkspaceServiceV1AccountsComments$Outbound>
    | undefined;
  sharing?:
    | Array<PostApiWorkspaceServiceV1AccountsAccountsSharing$Outbound>
    | undefined;
  snapshots?:
    | Array<PostApiWorkspaceServiceV1AccountsSnapshots$Outbound>
    | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsFiles$outboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1AccountsFiles$Outbound,
  z.ZodTypeDef,
  PostApiWorkspaceServiceV1AccountsFiles
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  size: z.string().optional(),
  s3Key: z.string().optional(),
  s3BucketName: z.string().optional(),
  isDeleted: z.boolean().optional(),
  version: z.number().int().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  deletedAt: z.date().transform(v => v.toISOString()).optional(),
  embeddings: z.lazy(() =>
    PostApiWorkspaceServiceV1AccountsEmbeddings$outboundSchema
  ).optional(),
  versions: z.array(
    z.lazy(() =>
      PostApiWorkspaceServiceV1AccountsAccountsResponse200Versions$outboundSchema
    ),
  ).optional(),
  comments: z.array(
    z.lazy(() => PostApiWorkspaceServiceV1AccountsComments$outboundSchema),
  ).optional(),
  sharing: z.array(
    z.lazy(() =>
      PostApiWorkspaceServiceV1AccountsAccountsSharing$outboundSchema
    ),
  ).optional(),
  snapshots: z.array(
    z.lazy(() => PostApiWorkspaceServiceV1AccountsSnapshots$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsFiles$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsFiles$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsFiles$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsFiles$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsFiles$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsFiles$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsFiles$Outbound;
}

export function postApiWorkspaceServiceV1AccountsFilesToJSON(
  postApiWorkspaceServiceV1AccountsFiles:
    PostApiWorkspaceServiceV1AccountsFiles,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsFiles$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsFiles,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsFilesFromJSON(
  jsonString: string,
): SafeParseResult<PostApiWorkspaceServiceV1AccountsFiles, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsFiles$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsFiles' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsFolders$inboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1AccountsFolders,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  s3BucketName: z.string().optional(),
  s3FolderPath: z.string().optional(),
  isDeleted: z.boolean().optional(),
  parentFolderId: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  files: z.array(
    z.lazy(() => PostApiWorkspaceServiceV1AccountsFiles$inboundSchema),
  ).optional(),
});

/** @internal */
export type PostApiWorkspaceServiceV1AccountsFolders$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  isDeleted?: boolean | undefined;
  parentFolderId?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  files?: Array<PostApiWorkspaceServiceV1AccountsFiles$Outbound> | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsFolders$outboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1AccountsFolders$Outbound,
  z.ZodTypeDef,
  PostApiWorkspaceServiceV1AccountsFolders
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  s3BucketName: z.string().optional(),
  s3FolderPath: z.string().optional(),
  isDeleted: z.boolean().optional(),
  parentFolderId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  deletedAt: z.date().transform(v => v.toISOString()).optional(),
  files: z.array(
    z.lazy(() => PostApiWorkspaceServiceV1AccountsFiles$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsFolders$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsFolders$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsFolders$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsFolders$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsFolders$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsFolders$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsFolders$Outbound;
}

export function postApiWorkspaceServiceV1AccountsFoldersToJSON(
  postApiWorkspaceServiceV1AccountsFolders:
    PostApiWorkspaceServiceV1AccountsFolders,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsFolders$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsFolders,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsFoldersFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsFolders,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsFolders$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsFolders' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsTemplateType$inboundSchema:
  z.ZodNativeEnum<typeof PostApiWorkspaceServiceV1AccountsTemplateType> = z
    .nativeEnum(PostApiWorkspaceServiceV1AccountsTemplateType);

/** @internal */
export const PostApiWorkspaceServiceV1AccountsTemplateType$outboundSchema:
  z.ZodNativeEnum<typeof PostApiWorkspaceServiceV1AccountsTemplateType> =
    PostApiWorkspaceServiceV1AccountsTemplateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsTemplateType$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsTemplateType$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsTemplateType$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsTemplateType$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsTemplateType$outboundSchema;
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsVersions$inboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1AccountsVersions,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  templateId: z.string().optional(),
  version: z.string().optional(),
  baseContent: z.string().optional(),
  metadata: z.record(z.string()).optional(),
  authorId: z.string().optional(),
  changeDescription: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PostApiWorkspaceServiceV1AccountsVersions$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  version?: string | undefined;
  baseContent?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  authorId?: string | undefined;
  changeDescription?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsVersions$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsVersions$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsVersions
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    version: z.string().optional(),
    baseContent: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    authorId: z.string().optional(),
    changeDescription: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsVersions$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsVersions$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsVersions$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsVersions$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsVersions$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsVersions$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsVersions$Outbound;
}

export function postApiWorkspaceServiceV1AccountsVersionsToJSON(
  postApiWorkspaceServiceV1AccountsVersions:
    PostApiWorkspaceServiceV1AccountsVersions,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsVersions$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsVersions,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsVersions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsVersions' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsVariables$inboundSchema:
  z.ZodType<PostApiWorkspaceServiceV1AccountsVariables, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      description: z.string().optional(),
      variableType: z.string().optional(),
      defaultValue: z.string().optional(),
      isRequired: z.boolean().optional(),
      validationRules: z.string().optional(),
      dataSource: z.string().optional(),
      aiExtractionRules: z.string().optional(),
      alternatives: z.array(z.string()).optional(),
      templateId: z.string().optional(),
    });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsVariables$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  variableType?: string | undefined;
  defaultValue?: string | undefined;
  isRequired?: boolean | undefined;
  validationRules?: string | undefined;
  dataSource?: string | undefined;
  aiExtractionRules?: string | undefined;
  alternatives?: Array<string> | undefined;
  templateId?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsVariables$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsVariables$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsVariables
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    variableType: z.string().optional(),
    defaultValue: z.string().optional(),
    isRequired: z.boolean().optional(),
    validationRules: z.string().optional(),
    dataSource: z.string().optional(),
    aiExtractionRules: z.string().optional(),
    alternatives: z.array(z.string()).optional(),
    templateId: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsVariables$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsVariables$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsVariables$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsVariables$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsVariables$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsVariables$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsVariables$Outbound;
}

export function postApiWorkspaceServiceV1AccountsVariablesToJSON(
  postApiWorkspaceServiceV1AccountsVariables:
    PostApiWorkspaceServiceV1AccountsVariables,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsVariables$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsVariables,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsVariablesFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsVariables,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsVariables$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsVariables' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsStatus$inboundSchema:
  z.ZodNativeEnum<typeof PostApiWorkspaceServiceV1AccountsStatus> = z
    .nativeEnum(PostApiWorkspaceServiceV1AccountsStatus);

/** @internal */
export const PostApiWorkspaceServiceV1AccountsStatus$outboundSchema:
  z.ZodNativeEnum<typeof PostApiWorkspaceServiceV1AccountsStatus> =
    PostApiWorkspaceServiceV1AccountsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsStatus$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsStatus$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsStatus$outboundSchema;
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsAccountsStatus$inboundSchema:
  z.ZodNativeEnum<typeof PostApiWorkspaceServiceV1AccountsAccountsStatus> = z
    .nativeEnum(PostApiWorkspaceServiceV1AccountsAccountsStatus);

/** @internal */
export const PostApiWorkspaceServiceV1AccountsAccountsStatus$outboundSchema:
  z.ZodNativeEnum<typeof PostApiWorkspaceServiceV1AccountsAccountsStatus> =
    PostApiWorkspaceServiceV1AccountsAccountsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsAccountsStatus$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsAccountsStatus$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsAccountsStatus$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsAccountsStatus$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsAccountsStatus$outboundSchema;
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsSignatureBlocks$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsSignatureBlocks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    blockType: z.string().optional(),
    pageNumber: z.number().int().optional(),
    xPosition: z.number().optional(),
    yPosition: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    isRequired: z.boolean().optional(),
    signatureData: z.string().optional(),
    signedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsSignatureBlocks$Outbound = {
  id?: string | undefined;
  requestId?: string | undefined;
  blockType?: string | undefined;
  pageNumber?: number | undefined;
  xPosition?: number | undefined;
  yPosition?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
  isRequired?: boolean | undefined;
  signatureData?: string | undefined;
  signedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsSignatureBlocks$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsSignatureBlocks$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsSignatureBlocks
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    blockType: z.string().optional(),
    pageNumber: z.number().int().optional(),
    xPosition: z.number().optional(),
    yPosition: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    isRequired: z.boolean().optional(),
    signatureData: z.string().optional(),
    signedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsSignatureBlocks$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsSignatureBlocks$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsSignatureBlocks$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsSignatureBlocks$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsSignatureBlocks$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsSignatureBlocks$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1AccountsSignatureBlocks$Outbound;
}

export function postApiWorkspaceServiceV1AccountsSignatureBlocksToJSON(
  postApiWorkspaceServiceV1AccountsSignatureBlocks:
    PostApiWorkspaceServiceV1AccountsSignatureBlocks,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsSignatureBlocks$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsSignatureBlocks,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsSignatureBlocksFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsSignatureBlocks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsSignatureBlocks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsSignatureBlocks' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsWorkflow$inboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1AccountsWorkflow,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  requestId: z.string().optional(),
  signingOrder: z.array(z.string()).optional(),
  currentSigner: z.string().optional(),
  workflowStatus: z.string().optional(),
  parallelSigning: z.boolean().optional(),
  requireAllSignatures: z.boolean().optional(),
  deadline: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PostApiWorkspaceServiceV1AccountsWorkflow$Outbound = {
  id?: string | undefined;
  requestId?: string | undefined;
  signingOrder?: Array<string> | undefined;
  currentSigner?: string | undefined;
  workflowStatus?: string | undefined;
  parallelSigning?: boolean | undefined;
  requireAllSignatures?: boolean | undefined;
  deadline?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsWorkflow$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsWorkflow$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsWorkflow
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    signingOrder: z.array(z.string()).optional(),
    currentSigner: z.string().optional(),
    workflowStatus: z.string().optional(),
    parallelSigning: z.boolean().optional(),
    requireAllSignatures: z.boolean().optional(),
    deadline: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsWorkflow$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsWorkflow$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsWorkflow$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsWorkflow$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsWorkflow$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsWorkflow$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsWorkflow$Outbound;
}

export function postApiWorkspaceServiceV1AccountsWorkflowToJSON(
  postApiWorkspaceServiceV1AccountsWorkflow:
    PostApiWorkspaceServiceV1AccountsWorkflow,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsWorkflow$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsWorkflow,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsWorkflowFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsWorkflow,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsWorkflow$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsWorkflow' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsSignatureRequests$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsSignatureRequests,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    status: PostApiWorkspaceServiceV1AccountsAccountsStatus$inboundSchema
      .default("SIGNATURE_STATUS_UNSPECIFIED"),
    signerEmail: z.string().optional(),
    signerName: z.string().optional(),
    role: z.string().optional(),
    authenticationMethod: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    requiresMfa: z.boolean().optional(),
    signatureType: z.string().optional(),
    reminderSchedule: z.array(z.string()).optional(),
    documentId: z.string().optional(),
    signatureBlocks: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1AccountsSignatureBlocks$inboundSchema
      ),
    ).optional(),
    workflow: z.lazy(() =>
      PostApiWorkspaceServiceV1AccountsWorkflow$inboundSchema
    ).optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsSignatureRequests$Outbound = {
  id?: string | undefined;
  status: string;
  signerEmail?: string | undefined;
  signerName?: string | undefined;
  role?: string | undefined;
  authenticationMethod?: string | undefined;
  expiresAt?: string | undefined;
  requiresMfa?: boolean | undefined;
  signatureType?: string | undefined;
  reminderSchedule?: Array<string> | undefined;
  documentId?: string | undefined;
  signatureBlocks?:
    | Array<PostApiWorkspaceServiceV1AccountsSignatureBlocks$Outbound>
    | undefined;
  workflow?: PostApiWorkspaceServiceV1AccountsWorkflow$Outbound | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsSignatureRequests$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsSignatureRequests$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsSignatureRequests
  > = z.object({
    id: z.string().optional(),
    status: PostApiWorkspaceServiceV1AccountsAccountsStatus$outboundSchema
      .default("SIGNATURE_STATUS_UNSPECIFIED"),
    signerEmail: z.string().optional(),
    signerName: z.string().optional(),
    role: z.string().optional(),
    authenticationMethod: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    requiresMfa: z.boolean().optional(),
    signatureType: z.string().optional(),
    reminderSchedule: z.array(z.string()).optional(),
    documentId: z.string().optional(),
    signatureBlocks: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1AccountsSignatureBlocks$outboundSchema
      ),
    ).optional(),
    workflow: z.lazy(() =>
      PostApiWorkspaceServiceV1AccountsWorkflow$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsSignatureRequests$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsSignatureRequests$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsSignatureRequests$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsSignatureRequests$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsSignatureRequests$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsSignatureRequests$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1AccountsSignatureRequests$Outbound;
}

export function postApiWorkspaceServiceV1AccountsSignatureRequestsToJSON(
  postApiWorkspaceServiceV1AccountsSignatureRequests:
    PostApiWorkspaceServiceV1AccountsSignatureRequests,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsSignatureRequests$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsSignatureRequests,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsSignatureRequestsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsSignatureRequests,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsSignatureRequests$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsSignatureRequests' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsAiAssistance$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsAiAssistance,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    interactionType: z.string().optional(),
    userQuery: z.string().optional(),
    aiResponse: z.string().optional(),
    context: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsAiAssistance$Outbound = {
  id?: string | undefined;
  documentId?: string | undefined;
  interactionType?: string | undefined;
  userQuery?: string | undefined;
  aiResponse?: string | undefined;
  context?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsAiAssistance$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsAiAssistance$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsAiAssistance
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    interactionType: z.string().optional(),
    userQuery: z.string().optional(),
    aiResponse: z.string().optional(),
    context: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsAiAssistance$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsAiAssistance$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsAiAssistance$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsAiAssistance$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsAiAssistance$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsAiAssistance$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsAiAssistance$Outbound;
}

export function postApiWorkspaceServiceV1AccountsAiAssistanceToJSON(
  postApiWorkspaceServiceV1AccountsAiAssistance:
    PostApiWorkspaceServiceV1AccountsAiAssistance,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsAiAssistance$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsAiAssistance,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsAiAssistanceFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsAiAssistance,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsAiAssistance$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsAiAssistance' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsRounds$inboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1AccountsRounds,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  historyId: z.string().optional(),
  roundNumber: z.number().int().optional(),
  proposerId: z.string().optional(),
  proposalContent: z.string().optional(),
  responseContent: z.string().optional(),
  status: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PostApiWorkspaceServiceV1AccountsRounds$Outbound = {
  id?: string | undefined;
  historyId?: string | undefined;
  roundNumber?: number | undefined;
  proposerId?: string | undefined;
  proposalContent?: string | undefined;
  responseContent?: string | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsRounds$outboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1AccountsRounds$Outbound,
  z.ZodTypeDef,
  PostApiWorkspaceServiceV1AccountsRounds
> = z.object({
  id: z.string().optional(),
  historyId: z.string().optional(),
  roundNumber: z.number().int().optional(),
  proposerId: z.string().optional(),
  proposalContent: z.string().optional(),
  responseContent: z.string().optional(),
  status: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsRounds$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsRounds$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsRounds$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsRounds$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsRounds$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsRounds$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsRounds$Outbound;
}

export function postApiWorkspaceServiceV1AccountsRoundsToJSON(
  postApiWorkspaceServiceV1AccountsRounds:
    PostApiWorkspaceServiceV1AccountsRounds,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsRounds$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsRounds,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsRoundsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsRounds,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsRounds$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsRounds' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsNegotiation$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsNegotiation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    rounds: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsRounds$inboundSchema),
    ).optional(),
    currentStatus: z.string().optional(),
    startedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsNegotiation$Outbound = {
  id?: string | undefined;
  documentId?: string | undefined;
  rounds?: Array<PostApiWorkspaceServiceV1AccountsRounds$Outbound> | undefined;
  currentStatus?: string | undefined;
  startedAt?: string | undefined;
  lastUpdated?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsNegotiation$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsNegotiation$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsNegotiation
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    rounds: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsRounds$outboundSchema),
    ).optional(),
    currentStatus: z.string().optional(),
    startedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsNegotiation$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsNegotiation$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsNegotiation$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsNegotiation$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsNegotiation$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsNegotiation$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsNegotiation$Outbound;
}

export function postApiWorkspaceServiceV1AccountsNegotiationToJSON(
  postApiWorkspaceServiceV1AccountsNegotiation:
    PostApiWorkspaceServiceV1AccountsNegotiation,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsNegotiation$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsNegotiation,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsNegotiationFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsNegotiation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsNegotiation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsNegotiation' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsMerges$inboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1AccountsMerges,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  branchId: z.string().optional(),
  sourceBranch: z.string().optional(),
  targetBranch: z.string().optional(),
  mergeStatus: z.string().optional(),
  mergeStrategy: z.string().optional(),
  conflicts: z.array(z.string()).optional(),
  mergerId: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  completedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PostApiWorkspaceServiceV1AccountsMerges$Outbound = {
  id?: string | undefined;
  branchId?: string | undefined;
  sourceBranch?: string | undefined;
  targetBranch?: string | undefined;
  mergeStatus?: string | undefined;
  mergeStrategy?: string | undefined;
  conflicts?: Array<string> | undefined;
  mergerId?: string | undefined;
  createdAt?: string | undefined;
  completedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsMerges$outboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1AccountsMerges$Outbound,
  z.ZodTypeDef,
  PostApiWorkspaceServiceV1AccountsMerges
> = z.object({
  id: z.string().optional(),
  branchId: z.string().optional(),
  sourceBranch: z.string().optional(),
  targetBranch: z.string().optional(),
  mergeStatus: z.string().optional(),
  mergeStrategy: z.string().optional(),
  conflicts: z.array(z.string()).optional(),
  mergerId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  completedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsMerges$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsMerges$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsMerges$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsMerges$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsMerges$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsMerges$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsMerges$Outbound;
}

export function postApiWorkspaceServiceV1AccountsMergesToJSON(
  postApiWorkspaceServiceV1AccountsMerges:
    PostApiWorkspaceServiceV1AccountsMerges,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsMerges$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsMerges,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsMergesFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsMerges,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsMerges$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsMerges' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsPolicy$inboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1AccountsPolicy,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  branchId: z.string().optional(),
  requiredApprovers: z.array(z.string()).optional(),
  minimumApprovals: z.number().int().optional(),
  enforceLinearHistory: z.boolean().optional(),
  allowForcePush: z.boolean().optional(),
  protectedPaths: z.array(z.string()).optional(),
  mergeRules: z.record(z.string()).optional(),
  automatedChecks: z.array(z.string()).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PostApiWorkspaceServiceV1AccountsPolicy$Outbound = {
  id?: string | undefined;
  branchId?: string | undefined;
  requiredApprovers?: Array<string> | undefined;
  minimumApprovals?: number | undefined;
  enforceLinearHistory?: boolean | undefined;
  allowForcePush?: boolean | undefined;
  protectedPaths?: Array<string> | undefined;
  mergeRules?: { [k: string]: string } | undefined;
  automatedChecks?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsPolicy$outboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1AccountsPolicy$Outbound,
  z.ZodTypeDef,
  PostApiWorkspaceServiceV1AccountsPolicy
> = z.object({
  id: z.string().optional(),
  branchId: z.string().optional(),
  requiredApprovers: z.array(z.string()).optional(),
  minimumApprovals: z.number().int().optional(),
  enforceLinearHistory: z.boolean().optional(),
  allowForcePush: z.boolean().optional(),
  protectedPaths: z.array(z.string()).optional(),
  mergeRules: z.record(z.string()).optional(),
  automatedChecks: z.array(z.string()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsPolicy$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsPolicy$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsPolicy$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsPolicy$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsPolicy$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsPolicy$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsPolicy$Outbound;
}

export function postApiWorkspaceServiceV1AccountsPolicyToJSON(
  postApiWorkspaceServiceV1AccountsPolicy:
    PostApiWorkspaceServiceV1AccountsPolicy,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsPolicy$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsPolicy,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsPolicyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsPolicy,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsPolicy$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsPolicy' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsMergeRequests$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsMergeRequests,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sourceBranchId: z.string().optional(),
    targetBranchId: z.string().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    authorId: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    status: z.string().optional(),
    labels: z.array(z.string()).optional(),
    hasConflicts: z.boolean().optional(),
    automatedCheckResults: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsMergeRequests$Outbound = {
  id?: string | undefined;
  sourceBranchId?: string | undefined;
  targetBranchId?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  authorId?: string | undefined;
  reviewers?: Array<string> | undefined;
  status?: string | undefined;
  labels?: Array<string> | undefined;
  hasConflicts?: boolean | undefined;
  automatedCheckResults?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsMergeRequests$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsMergeRequests$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsMergeRequests
  > = z.object({
    id: z.string().optional(),
    sourceBranchId: z.string().optional(),
    targetBranchId: z.string().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    authorId: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    status: z.string().optional(),
    labels: z.array(z.string()).optional(),
    hasConflicts: z.boolean().optional(),
    automatedCheckResults: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsMergeRequests$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsMergeRequests$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsMergeRequests$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsMergeRequests$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsMergeRequests$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsMergeRequests$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1AccountsMergeRequests$Outbound;
}

export function postApiWorkspaceServiceV1AccountsMergeRequestsToJSON(
  postApiWorkspaceServiceV1AccountsMergeRequests:
    PostApiWorkspaceServiceV1AccountsMergeRequests,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsMergeRequests$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsMergeRequests,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsMergeRequestsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsMergeRequests,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsMergeRequests$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsMergeRequests' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsBranches$inboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1AccountsBranches,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  baseVersionHash: z.string().optional(),
  currentHeadHash: z.string().optional(),
  purpose: z.string().optional(),
  status: z.string().optional(),
  reviewers: z.array(z.string()).optional(),
  branchMetadata: z.record(z.string()).optional(),
  isLocked: z.boolean().optional(),
  lastUpdated: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  merges: z.array(
    z.lazy(() => PostApiWorkspaceServiceV1AccountsMerges$inboundSchema),
  ).optional(),
  policy: z.lazy(() => PostApiWorkspaceServiceV1AccountsPolicy$inboundSchema)
    .optional(),
  mergeRequests: z.array(
    z.lazy(() => PostApiWorkspaceServiceV1AccountsMergeRequests$inboundSchema),
  ).optional(),
});

/** @internal */
export type PostApiWorkspaceServiceV1AccountsBranches$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  baseVersionHash?: string | undefined;
  currentHeadHash?: string | undefined;
  purpose?: string | undefined;
  status?: string | undefined;
  reviewers?: Array<string> | undefined;
  branchMetadata?: { [k: string]: string } | undefined;
  isLocked?: boolean | undefined;
  lastUpdated?: string | undefined;
  merges?: Array<PostApiWorkspaceServiceV1AccountsMerges$Outbound> | undefined;
  policy?: PostApiWorkspaceServiceV1AccountsPolicy$Outbound | undefined;
  mergeRequests?:
    | Array<PostApiWorkspaceServiceV1AccountsMergeRequests$Outbound>
    | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsBranches$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsBranches$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsBranches
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    baseVersionHash: z.string().optional(),
    currentHeadHash: z.string().optional(),
    purpose: z.string().optional(),
    status: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    branchMetadata: z.record(z.string()).optional(),
    isLocked: z.boolean().optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
    merges: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsMerges$outboundSchema),
    ).optional(),
    policy: z.lazy(() => PostApiWorkspaceServiceV1AccountsPolicy$outboundSchema)
      .optional(),
    mergeRequests: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1AccountsMergeRequests$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsBranches$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsBranches$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsBranches$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsBranches$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsBranches$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsBranches$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsBranches$Outbound;
}

export function postApiWorkspaceServiceV1AccountsBranchesToJSON(
  postApiWorkspaceServiceV1AccountsBranches:
    PostApiWorkspaceServiceV1AccountsBranches,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsBranches$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsBranches,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsBranchesFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsBranches,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsBranches$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsBranches' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsChanges$inboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1AccountsChanges,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  versionId: z.string().optional(),
  changeType: z.string().optional(),
  contentBefore: z.string().optional(),
  contentAfter: z.string().optional(),
  metadata: z.record(z.string()).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PostApiWorkspaceServiceV1AccountsChanges$Outbound = {
  id?: string | undefined;
  versionId?: string | undefined;
  changeType?: string | undefined;
  contentBefore?: string | undefined;
  contentAfter?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsChanges$outboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1AccountsChanges$Outbound,
  z.ZodTypeDef,
  PostApiWorkspaceServiceV1AccountsChanges
> = z.object({
  id: z.string().optional(),
  versionId: z.string().optional(),
  changeType: z.string().optional(),
  contentBefore: z.string().optional(),
  contentAfter: z.string().optional(),
  metadata: z.record(z.string()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsChanges$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsChanges$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsChanges$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsChanges$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsChanges$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsChanges$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsChanges$Outbound;
}

export function postApiWorkspaceServiceV1AccountsChangesToJSON(
  postApiWorkspaceServiceV1AccountsChanges:
    PostApiWorkspaceServiceV1AccountsChanges,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsChanges$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsChanges,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsChangesFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsChanges,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsChanges$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsChanges' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsSummaries$inboundSchema:
  z.ZodType<PostApiWorkspaceServiceV1AccountsSummaries, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      versionId: z.string().optional(),
      summaryType: z.string().optional(),
      content: z.string().optional(),
      targetAudience: z.string().optional(),
      keyPoints: z.array(z.string()).optional(),
      metadata: z.record(z.string()).optional(),
      createdAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
    });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsSummaries$Outbound = {
  id?: string | undefined;
  versionId?: string | undefined;
  summaryType?: string | undefined;
  content?: string | undefined;
  targetAudience?: string | undefined;
  keyPoints?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsSummaries$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsSummaries$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsSummaries
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    summaryType: z.string().optional(),
    content: z.string().optional(),
    targetAudience: z.string().optional(),
    keyPoints: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsSummaries$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsSummaries$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsSummaries$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsSummaries$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsSummaries$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsSummaries$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsSummaries$Outbound;
}

export function postApiWorkspaceServiceV1AccountsSummariesToJSON(
  postApiWorkspaceServiceV1AccountsSummaries:
    PostApiWorkspaceServiceV1AccountsSummaries,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsSummaries$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsSummaries,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsSummariesFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsSummaries,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsSummaries$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsSummaries' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsAccountsResponseVersions$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsAccountsResponseVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionHash: z.string().optional(),
    parentHash: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    branchName: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    isApproved: z.boolean().optional(),
    approvalChain: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    branches: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsBranches$inboundSchema),
    ).optional(),
    changes: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsChanges$inboundSchema),
    ).optional(),
    summaries: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsSummaries$inboundSchema),
    ).optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsAccountsResponseVersions$Outbound =
  {
    id?: string | undefined;
    versionHash?: string | undefined;
    parentHash?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    branchName?: string | undefined;
    metadata?: { [k: string]: string } | undefined;
    tags?: Array<string> | undefined;
    isApproved?: boolean | undefined;
    approvalChain?: string | undefined;
    createdAt?: string | undefined;
    branches?:
      | Array<PostApiWorkspaceServiceV1AccountsBranches$Outbound>
      | undefined;
    changes?:
      | Array<PostApiWorkspaceServiceV1AccountsChanges$Outbound>
      | undefined;
    summaries?:
      | Array<PostApiWorkspaceServiceV1AccountsSummaries$Outbound>
      | undefined;
  };

/** @internal */
export const PostApiWorkspaceServiceV1AccountsAccountsResponseVersions$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsAccountsResponseVersions$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsAccountsResponseVersions
  > = z.object({
    id: z.string().optional(),
    versionHash: z.string().optional(),
    parentHash: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    branchName: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    isApproved: z.boolean().optional(),
    approvalChain: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    branches: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsBranches$outboundSchema),
    ).optional(),
    changes: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsChanges$outboundSchema),
    ).optional(),
    summaries: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsSummaries$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsAccountsResponseVersions$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsAccountsResponseVersions$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsAccountsResponseVersions$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsAccountsResponseVersions$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsAccountsResponseVersions$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsAccountsResponseVersions$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1AccountsAccountsResponseVersions$Outbound;
}

export function postApiWorkspaceServiceV1AccountsAccountsResponseVersionsToJSON(
  postApiWorkspaceServiceV1AccountsAccountsResponseVersions:
    PostApiWorkspaceServiceV1AccountsAccountsResponseVersions,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsAccountsResponseVersions$outboundSchema
      .parse(postApiWorkspaceServiceV1AccountsAccountsResponseVersions),
  );
}

export function postApiWorkspaceServiceV1AccountsAccountsResponseVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsAccountsResponseVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsAccountsResponseVersions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsAccountsResponseVersions' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsInstances$inboundSchema:
  z.ZodType<PostApiWorkspaceServiceV1AccountsInstances, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      templateId: z.string().optional(),
      status: PostApiWorkspaceServiceV1AccountsStatus$inboundSchema.default(
        "DOCUMENT_STATUS_UNSPECIFIED",
      ),
      fieldValues: z.record(z.string()).optional(),
      signers: z.array(z.string()).optional(),
      language: z.string().optional(),
      isCompleted: z.boolean().optional(),
      dueDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
      generatedContent: z.string().optional(),
      attachments: z.array(z.string()).optional(),
      createdAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      updatedAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      signatureRequests: z.array(
        z.lazy(() =>
          PostApiWorkspaceServiceV1AccountsSignatureRequests$inboundSchema
        ),
      ).optional(),
      aiAssistance: z.array(
        z.lazy(() =>
          PostApiWorkspaceServiceV1AccountsAiAssistance$inboundSchema
        ),
      ).optional(),
      negotiation: z.lazy(() =>
        PostApiWorkspaceServiceV1AccountsNegotiation$inboundSchema
      ).optional(),
      versions: z.array(
        z.lazy(() =>
          PostApiWorkspaceServiceV1AccountsAccountsResponseVersions$inboundSchema
        ),
      ).optional(),
    });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsInstances$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  status: string;
  fieldValues?: { [k: string]: string } | undefined;
  signers?: Array<string> | undefined;
  language?: string | undefined;
  isCompleted?: boolean | undefined;
  dueDate?: string | undefined;
  generatedContent?: string | undefined;
  attachments?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  signatureRequests?:
    | Array<PostApiWorkspaceServiceV1AccountsSignatureRequests$Outbound>
    | undefined;
  aiAssistance?:
    | Array<PostApiWorkspaceServiceV1AccountsAiAssistance$Outbound>
    | undefined;
  negotiation?:
    | PostApiWorkspaceServiceV1AccountsNegotiation$Outbound
    | undefined;
  versions?:
    | Array<PostApiWorkspaceServiceV1AccountsAccountsResponseVersions$Outbound>
    | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsInstances$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsInstances$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsInstances
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    status: PostApiWorkspaceServiceV1AccountsStatus$outboundSchema.default(
      "DOCUMENT_STATUS_UNSPECIFIED",
    ),
    fieldValues: z.record(z.string()).optional(),
    signers: z.array(z.string()).optional(),
    language: z.string().optional(),
    isCompleted: z.boolean().optional(),
    dueDate: z.date().transform(v => v.toISOString()).optional(),
    generatedContent: z.string().optional(),
    attachments: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    signatureRequests: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1AccountsSignatureRequests$outboundSchema
      ),
    ).optional(),
    aiAssistance: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1AccountsAiAssistance$outboundSchema
      ),
    ).optional(),
    negotiation: z.lazy(() =>
      PostApiWorkspaceServiceV1AccountsNegotiation$outboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1AccountsAccountsResponseVersions$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsInstances$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsInstances$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsInstances$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsInstances$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsInstances$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsInstances$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsInstances$Outbound;
}

export function postApiWorkspaceServiceV1AccountsInstancesToJSON(
  postApiWorkspaceServiceV1AccountsInstances:
    PostApiWorkspaceServiceV1AccountsInstances,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsInstances$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsInstances,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsInstancesFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsInstances,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsInstances$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsInstances' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsExplanations$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsExplanations,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    sectionIdentifier: z.string().optional(),
    explanationText: z.string().optional(),
    complexityLevel: z.string().optional(),
    relatedTerms: z.array(z.string()).optional(),
    legalReferences: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsExplanations$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  sectionIdentifier?: string | undefined;
  explanationText?: string | undefined;
  complexityLevel?: string | undefined;
  relatedTerms?: Array<string> | undefined;
  legalReferences?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsExplanations$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsExplanations$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsExplanations
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    sectionIdentifier: z.string().optional(),
    explanationText: z.string().optional(),
    complexityLevel: z.string().optional(),
    relatedTerms: z.array(z.string()).optional(),
    legalReferences: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsExplanations$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsExplanations$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsExplanations$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsExplanations$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsExplanations$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsExplanations$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsExplanations$Outbound;
}

export function postApiWorkspaceServiceV1AccountsExplanationsToJSON(
  postApiWorkspaceServiceV1AccountsExplanations:
    PostApiWorkspaceServiceV1AccountsExplanations,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsExplanations$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsExplanations,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsExplanationsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsExplanations,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsExplanations$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsExplanations' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsRiskAssessments$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsRiskAssessments,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    riskType: z.string().optional(),
    riskScore: z.number().optional(),
    assessmentDetails: z.string().optional(),
    mitigationSuggestions: z.array(z.string()).optional(),
    assessorId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsRiskAssessments$Outbound = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  riskType?: string | undefined;
  riskScore?: number | undefined;
  assessmentDetails?: string | undefined;
  mitigationSuggestions?: Array<string> | undefined;
  assessorId?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsRiskAssessments$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsRiskAssessments$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsRiskAssessments
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    riskType: z.string().optional(),
    riskScore: z.number().optional(),
    assessmentDetails: z.string().optional(),
    mitigationSuggestions: z.array(z.string()).optional(),
    assessorId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsRiskAssessments$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsRiskAssessments$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsRiskAssessments$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsRiskAssessments$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsRiskAssessments$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsRiskAssessments$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1AccountsRiskAssessments$Outbound;
}

export function postApiWorkspaceServiceV1AccountsRiskAssessmentsToJSON(
  postApiWorkspaceServiceV1AccountsRiskAssessments:
    PostApiWorkspaceServiceV1AccountsRiskAssessments,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsRiskAssessments$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsRiskAssessments,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsRiskAssessmentsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsRiskAssessments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsRiskAssessments$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsRiskAssessments' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsComplianceChecks$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsComplianceChecks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    complianceStandard: z.string().optional(),
    checkResult: z.string().optional(),
    violations: z.array(z.string()).optional(),
    remediationSteps: z.string().optional(),
    checkDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsComplianceChecks$Outbound = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  complianceStandard?: string | undefined;
  checkResult?: string | undefined;
  violations?: Array<string> | undefined;
  remediationSteps?: string | undefined;
  checkDate?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsComplianceChecks$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsComplianceChecks$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsComplianceChecks
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    complianceStandard: z.string().optional(),
    checkResult: z.string().optional(),
    violations: z.array(z.string()).optional(),
    remediationSteps: z.string().optional(),
    checkDate: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsComplianceChecks$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsComplianceChecks$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsComplianceChecks$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsComplianceChecks$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsComplianceChecks$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsComplianceChecks$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1AccountsComplianceChecks$Outbound;
}

export function postApiWorkspaceServiceV1AccountsComplianceChecksToJSON(
  postApiWorkspaceServiceV1AccountsComplianceChecks:
    PostApiWorkspaceServiceV1AccountsComplianceChecks,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsComplianceChecks$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsComplianceChecks,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsComplianceChecksFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsComplianceChecks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsComplianceChecks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsComplianceChecks' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsIntelligence$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsIntelligence,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    contractType: z.string().optional(),
    riskScores: z.record(z.number()).optional(),
    detectedClauses: z.record(z.string()).optional(),
    keyObligations: z.array(z.string()).optional(),
    complianceScores: z.record(z.number()).optional(),
    jurisdiction: z.string().optional(),
    governingLaws: z.array(z.string()).optional(),
    semanticAnalysis: z.record(z.string()).optional(),
    analysisDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    riskAssessments: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1AccountsRiskAssessments$inboundSchema
      ),
    ).optional(),
    complianceChecks: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1AccountsComplianceChecks$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsIntelligence$Outbound = {
  id?: string | undefined;
  contractType?: string | undefined;
  riskScores?: { [k: string]: number } | undefined;
  detectedClauses?: { [k: string]: string } | undefined;
  keyObligations?: Array<string> | undefined;
  complianceScores?: { [k: string]: number } | undefined;
  jurisdiction?: string | undefined;
  governingLaws?: Array<string> | undefined;
  semanticAnalysis?: { [k: string]: string } | undefined;
  analysisDate?: string | undefined;
  riskAssessments?:
    | Array<PostApiWorkspaceServiceV1AccountsRiskAssessments$Outbound>
    | undefined;
  complianceChecks?:
    | Array<PostApiWorkspaceServiceV1AccountsComplianceChecks$Outbound>
    | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsIntelligence$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsIntelligence$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsIntelligence
  > = z.object({
    id: z.string().optional(),
    contractType: z.string().optional(),
    riskScores: z.record(z.number()).optional(),
    detectedClauses: z.record(z.string()).optional(),
    keyObligations: z.array(z.string()).optional(),
    complianceScores: z.record(z.number()).optional(),
    jurisdiction: z.string().optional(),
    governingLaws: z.array(z.string()).optional(),
    semanticAnalysis: z.record(z.string()).optional(),
    analysisDate: z.date().transform(v => v.toISOString()).optional(),
    riskAssessments: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1AccountsRiskAssessments$outboundSchema
      ),
    ).optional(),
    complianceChecks: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1AccountsComplianceChecks$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsIntelligence$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsIntelligence$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsIntelligence$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsIntelligence$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsIntelligence$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsIntelligence$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsIntelligence$Outbound;
}

export function postApiWorkspaceServiceV1AccountsIntelligenceToJSON(
  postApiWorkspaceServiceV1AccountsIntelligence:
    PostApiWorkspaceServiceV1AccountsIntelligence,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsIntelligence$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsIntelligence,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsIntelligenceFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsIntelligence,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsIntelligence$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsIntelligence' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsTemplates$inboundSchema:
  z.ZodType<PostApiWorkspaceServiceV1AccountsTemplates, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      description: z.string().optional(),
      industryType: z.string().optional(),
      documentType: z.string().optional(),
      baseContent: z.string().optional(),
      isAdaptive: z.boolean().optional(),
      metadata: z.record(z.string()).optional(),
      supportedLanguages: z.array(z.string()).optional(),
      requiredDataFields: z.array(z.string()).optional(),
      version: z.string().optional(),
      createdAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      updatedAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      templateType: PostApiWorkspaceServiceV1AccountsTemplateType$inboundSchema
        .default("TEMPLATE_TYPE_UNSPECIFIED"),
      content: z.string().optional(),
      detectedVariables: z.array(z.string()).optional(),
      variableMappings: z.record(z.string()).optional(),
      isContextAware: z.boolean().optional(),
      supportedContexts: z.array(z.string()).optional(),
      formattingRules: z.record(z.string()).optional(),
      conditionalSections: z.array(z.string()).optional(),
      versions: z.array(
        z.lazy(() => PostApiWorkspaceServiceV1AccountsVersions$inboundSchema),
      ).optional(),
      variables: z.array(
        z.lazy(() => PostApiWorkspaceServiceV1AccountsVariables$inboundSchema),
      ).optional(),
      instances: z.array(
        z.lazy(() => PostApiWorkspaceServiceV1AccountsInstances$inboundSchema),
      ).optional(),
      explanations: z.array(
        z.lazy(() =>
          PostApiWorkspaceServiceV1AccountsExplanations$inboundSchema
        ),
      ).optional(),
      intelligence: z.array(
        z.lazy(() =>
          PostApiWorkspaceServiceV1AccountsIntelligence$inboundSchema
        ),
      ).optional(),
    });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsTemplates$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  industryType?: string | undefined;
  documentType?: string | undefined;
  baseContent?: string | undefined;
  isAdaptive?: boolean | undefined;
  metadata?: { [k: string]: string } | undefined;
  supportedLanguages?: Array<string> | undefined;
  requiredDataFields?: Array<string> | undefined;
  version?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  templateType: string;
  content?: string | undefined;
  detectedVariables?: Array<string> | undefined;
  variableMappings?: { [k: string]: string } | undefined;
  isContextAware?: boolean | undefined;
  supportedContexts?: Array<string> | undefined;
  formattingRules?: { [k: string]: string } | undefined;
  conditionalSections?: Array<string> | undefined;
  versions?:
    | Array<PostApiWorkspaceServiceV1AccountsVersions$Outbound>
    | undefined;
  variables?:
    | Array<PostApiWorkspaceServiceV1AccountsVariables$Outbound>
    | undefined;
  instances?:
    | Array<PostApiWorkspaceServiceV1AccountsInstances$Outbound>
    | undefined;
  explanations?:
    | Array<PostApiWorkspaceServiceV1AccountsExplanations$Outbound>
    | undefined;
  intelligence?:
    | Array<PostApiWorkspaceServiceV1AccountsIntelligence$Outbound>
    | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsTemplates$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsTemplates$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsTemplates
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    industryType: z.string().optional(),
    documentType: z.string().optional(),
    baseContent: z.string().optional(),
    isAdaptive: z.boolean().optional(),
    metadata: z.record(z.string()).optional(),
    supportedLanguages: z.array(z.string()).optional(),
    requiredDataFields: z.array(z.string()).optional(),
    version: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    templateType: PostApiWorkspaceServiceV1AccountsTemplateType$outboundSchema
      .default("TEMPLATE_TYPE_UNSPECIFIED"),
    content: z.string().optional(),
    detectedVariables: z.array(z.string()).optional(),
    variableMappings: z.record(z.string()).optional(),
    isContextAware: z.boolean().optional(),
    supportedContexts: z.array(z.string()).optional(),
    formattingRules: z.record(z.string()).optional(),
    conditionalSections: z.array(z.string()).optional(),
    versions: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsVersions$outboundSchema),
    ).optional(),
    variables: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsVariables$outboundSchema),
    ).optional(),
    instances: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsInstances$outboundSchema),
    ).optional(),
    explanations: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1AccountsExplanations$outboundSchema
      ),
    ).optional(),
    intelligence: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1AccountsIntelligence$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsTemplates$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsTemplates$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsTemplates$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsTemplates$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsTemplates$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsTemplates$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsTemplates$Outbound;
}

export function postApiWorkspaceServiceV1AccountsTemplatesToJSON(
  postApiWorkspaceServiceV1AccountsTemplates:
    PostApiWorkspaceServiceV1AccountsTemplates,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsTemplates$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsTemplates,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsTemplatesFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsTemplates,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsTemplates$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsTemplates' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsSharing$inboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1AccountsSharing,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  sharedWithEmail: z.string().optional(),
  permissionLevel: z.string().optional(),
  expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PostApiWorkspaceServiceV1AccountsSharing$Outbound = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsSharing$outboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1AccountsSharing$Outbound,
  z.ZodTypeDef,
  PostApiWorkspaceServiceV1AccountsSharing
> = z.object({
  id: z.string().optional(),
  sharedWithEmail: z.string().optional(),
  permissionLevel: z.string().optional(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsSharing$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsSharing$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsSharing$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsSharing$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsSharing$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsSharing$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsSharing$Outbound;
}

export function postApiWorkspaceServiceV1AccountsSharingToJSON(
  postApiWorkspaceServiceV1AccountsSharing:
    PostApiWorkspaceServiceV1AccountsSharing,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsSharing$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsSharing,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsSharingFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsSharing,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsSharing$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsSharing' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsActivities$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsActivities,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    activityType: z.string().optional(),
    userId: z.string().optional(),
    description: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsActivities$Outbound = {
  id?: string | undefined;
  activityType?: string | undefined;
  userId?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsActivities$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsActivities$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsActivities
  > = z.object({
    id: z.string().optional(),
    activityType: z.string().optional(),
    userId: z.string().optional(),
    description: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsActivities$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsActivities$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsActivities$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsActivities$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsActivities$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsActivities$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsActivities$Outbound;
}

export function postApiWorkspaceServiceV1AccountsActivitiesToJSON(
  postApiWorkspaceServiceV1AccountsActivities:
    PostApiWorkspaceServiceV1AccountsActivities,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsActivities$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsActivities,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsActivitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsActivities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsActivities$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsActivities' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsCompliance$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsCompliance,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    complianceType: z.string().optional(),
    status: z.string().optional(),
    certificationId: z.string().optional(),
    validUntil: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsCompliance$Outbound = {
  id?: string | undefined;
  complianceType?: string | undefined;
  status?: string | undefined;
  certificationId?: string | undefined;
  validUntil?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsCompliance$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsCompliance$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsCompliance
  > = z.object({
    id: z.string().optional(),
    complianceType: z.string().optional(),
    status: z.string().optional(),
    certificationId: z.string().optional(),
    validUntil: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsCompliance$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsCompliance$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsCompliance$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsCompliance$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsCompliance$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsCompliance$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsCompliance$Outbound;
}

export function postApiWorkspaceServiceV1AccountsComplianceToJSON(
  postApiWorkspaceServiceV1AccountsCompliance:
    PostApiWorkspaceServiceV1AccountsCompliance,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsCompliance$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsCompliance,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsComplianceFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsCompliance,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsCompliance$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsCompliance' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsCategory$inboundSchema:
  z.ZodNativeEnum<typeof PostApiWorkspaceServiceV1AccountsCategory> = z
    .nativeEnum(PostApiWorkspaceServiceV1AccountsCategory);

/** @internal */
export const PostApiWorkspaceServiceV1AccountsCategory$outboundSchema:
  z.ZodNativeEnum<typeof PostApiWorkspaceServiceV1AccountsCategory> =
    PostApiWorkspaceServiceV1AccountsCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsCategory$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsCategory$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsCategory$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsCategory$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsCategory$outboundSchema;
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsPricingModel$inboundSchema:
  z.ZodNativeEnum<typeof PostApiWorkspaceServiceV1AccountsPricingModel> = z
    .nativeEnum(PostApiWorkspaceServiceV1AccountsPricingModel);

/** @internal */
export const PostApiWorkspaceServiceV1AccountsPricingModel$outboundSchema:
  z.ZodNativeEnum<typeof PostApiWorkspaceServiceV1AccountsPricingModel> =
    PostApiWorkspaceServiceV1AccountsPricingModel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsPricingModel$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsPricingModel$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsPricingModel$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsPricingModel$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsPricingModel$outboundSchema;
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsAccountsVersions$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsAccountsVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    versionNumber: z.string().optional(),
    changelog: z.string().optional(),
    requirements: z.record(z.string()).optional(),
    isPublic: z.boolean().optional(),
    releaseDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsAccountsVersions$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  versionNumber?: string | undefined;
  changelog?: string | undefined;
  requirements?: { [k: string]: string } | undefined;
  isPublic?: boolean | undefined;
  releaseDate?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsAccountsVersions$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsAccountsVersions$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsAccountsVersions
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    versionNumber: z.string().optional(),
    changelog: z.string().optional(),
    requirements: z.record(z.string()).optional(),
    isPublic: z.boolean().optional(),
    releaseDate: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsAccountsVersions$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsAccountsVersions$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsAccountsVersions$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsAccountsVersions$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsAccountsVersions$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsAccountsVersions$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1AccountsAccountsVersions$Outbound;
}

export function postApiWorkspaceServiceV1AccountsAccountsVersionsToJSON(
  postApiWorkspaceServiceV1AccountsAccountsVersions:
    PostApiWorkspaceServiceV1AccountsAccountsVersions,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsAccountsVersions$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsAccountsVersions,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsAccountsVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsAccountsVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsAccountsVersions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsAccountsVersions' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsInstallations$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsInstallations,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    workspaceId: z.string().optional(),
    versionInstalled: z.string().optional(),
    configuration: z.record(z.string()).optional(),
    installationStatus: z.string().optional(),
    installedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    lastUsed: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsInstallations$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  workspaceId?: string | undefined;
  versionInstalled?: string | undefined;
  configuration?: { [k: string]: string } | undefined;
  installationStatus?: string | undefined;
  installedAt?: string | undefined;
  lastUsed?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsInstallations$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsInstallations$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsInstallations
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    workspaceId: z.string().optional(),
    versionInstalled: z.string().optional(),
    configuration: z.record(z.string()).optional(),
    installationStatus: z.string().optional(),
    installedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUsed: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsInstallations$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsInstallations$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsInstallations$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsInstallations$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsInstallations$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsInstallations$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1AccountsInstallations$Outbound;
}

export function postApiWorkspaceServiceV1AccountsInstallationsToJSON(
  postApiWorkspaceServiceV1AccountsInstallations:
    PostApiWorkspaceServiceV1AccountsInstallations,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsInstallations$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsInstallations,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsInstallationsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsInstallations,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsInstallations$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsInstallations' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsAnalytics$inboundSchema:
  z.ZodType<PostApiWorkspaceServiceV1AccountsAnalytics, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      appId: z.string().optional(),
      metricName: z.string().optional(),
      metricValue: z.number().optional(),
      dimensions: z.record(z.string()).optional(),
      recordedAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
    });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsAnalytics$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  metricName?: string | undefined;
  metricValue?: number | undefined;
  dimensions?: { [k: string]: string } | undefined;
  recordedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsAnalytics$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsAnalytics$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsAnalytics
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    metricName: z.string().optional(),
    metricValue: z.number().optional(),
    dimensions: z.record(z.string()).optional(),
    recordedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsAnalytics$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsAnalytics$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsAnalytics$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsAnalytics$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsAnalytics$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsAnalytics$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsAnalytics$Outbound;
}

export function postApiWorkspaceServiceV1AccountsAnalyticsToJSON(
  postApiWorkspaceServiceV1AccountsAnalytics:
    PostApiWorkspaceServiceV1AccountsAnalytics,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsAnalytics$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsAnalytics,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsAnalytics,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsAnalytics$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsAnalytics' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsReviews$inboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1AccountsReviews,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  appId: z.string().optional(),
  reviewerId: z.string().optional(),
  rating: z.number().optional(),
  reviewText: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PostApiWorkspaceServiceV1AccountsReviews$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  reviewerId?: string | undefined;
  rating?: number | undefined;
  reviewText?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsReviews$outboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1AccountsReviews$Outbound,
  z.ZodTypeDef,
  PostApiWorkspaceServiceV1AccountsReviews
> = z.object({
  id: z.string().optional(),
  appId: z.string().optional(),
  reviewerId: z.string().optional(),
  rating: z.number().optional(),
  reviewText: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsReviews$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsReviews$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsReviews$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsReviews$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsReviews$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsReviews$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsReviews$Outbound;
}

export function postApiWorkspaceServiceV1AccountsReviewsToJSON(
  postApiWorkspaceServiceV1AccountsReviews:
    PostApiWorkspaceServiceV1AccountsReviews,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsReviews$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsReviews,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsReviewsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsReviews,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsReviews$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsReviews' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsInfo$inboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1AccountsInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  appId: z.string().optional(),
  supportedLanguages: z.array(z.string()).optional(),
  sdkFeatures: z.array(z.string()).optional(),
  testCoverage: z.record(z.number()).optional(),
  securityScans: z.array(z.string()).optional(),
  performanceMetrics: z.record(z.string()).optional(),
  developmentStatus: z.string().optional(),
  knownIssues: z.array(z.string()).optional(),
  roadmapUrl: z.string().optional(),
  lastSecurityAudit: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PostApiWorkspaceServiceV1AccountsInfo$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  supportedLanguages?: Array<string> | undefined;
  sdkFeatures?: Array<string> | undefined;
  testCoverage?: { [k: string]: number } | undefined;
  securityScans?: Array<string> | undefined;
  performanceMetrics?: { [k: string]: string } | undefined;
  developmentStatus?: string | undefined;
  knownIssues?: Array<string> | undefined;
  roadmapUrl?: string | undefined;
  lastSecurityAudit?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsInfo$outboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1AccountsInfo$Outbound,
  z.ZodTypeDef,
  PostApiWorkspaceServiceV1AccountsInfo
> = z.object({
  id: z.string().optional(),
  appId: z.string().optional(),
  supportedLanguages: z.array(z.string()).optional(),
  sdkFeatures: z.array(z.string()).optional(),
  testCoverage: z.record(z.number()).optional(),
  securityScans: z.array(z.string()).optional(),
  performanceMetrics: z.record(z.string()).optional(),
  developmentStatus: z.string().optional(),
  knownIssues: z.array(z.string()).optional(),
  roadmapUrl: z.string().optional(),
  lastSecurityAudit: z.date().transform(v => v.toISOString()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsInfo$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsInfo$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsInfo$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsInfo$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsInfo$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsInfo$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsInfo$Outbound;
}

export function postApiWorkspaceServiceV1AccountsInfoToJSON(
  postApiWorkspaceServiceV1AccountsInfo: PostApiWorkspaceServiceV1AccountsInfo,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsInfo$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsInfo,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsInfoFromJSON(
  jsonString: string,
): SafeParseResult<PostApiWorkspaceServiceV1AccountsInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsInfo' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsWebhooks$inboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1AccountsWebhooks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  appId: z.string().optional(),
  url: z.string().optional(),
  subscribedEvents: z.array(z.string()).optional(),
  secretKey: z.string().optional(),
  retryCount: z.number().int().optional(),
  timeoutSeconds: z.number().int().optional(),
  isActive: z.boolean().optional(),
  headers: z.record(z.string()).optional(),
  lastTriggered: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PostApiWorkspaceServiceV1AccountsWebhooks$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  url?: string | undefined;
  subscribedEvents?: Array<string> | undefined;
  secretKey?: string | undefined;
  retryCount?: number | undefined;
  timeoutSeconds?: number | undefined;
  isActive?: boolean | undefined;
  headers?: { [k: string]: string } | undefined;
  lastTriggered?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsWebhooks$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsWebhooks$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsWebhooks
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    url: z.string().optional(),
    subscribedEvents: z.array(z.string()).optional(),
    secretKey: z.string().optional(),
    retryCount: z.number().int().optional(),
    timeoutSeconds: z.number().int().optional(),
    isActive: z.boolean().optional(),
    headers: z.record(z.string()).optional(),
    lastTriggered: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsWebhooks$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsWebhooks$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsWebhooks$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsWebhooks$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsWebhooks$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsWebhooks$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsWebhooks$Outbound;
}

export function postApiWorkspaceServiceV1AccountsWebhooksToJSON(
  postApiWorkspaceServiceV1AccountsWebhooks:
    PostApiWorkspaceServiceV1AccountsWebhooks,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsWebhooks$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsWebhooks,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsWebhooksFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsWebhooks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsWebhooks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsWebhooks' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsPermissions$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsPermissions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    scope: z.string().optional(),
    description: z.string().optional(),
    isRequired: z.boolean().optional(),
    accessLevels: z.array(z.string()).optional(),
    constraints: z.record(z.string()).optional(),
    requiresApproval: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsPermissions$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  scope?: string | undefined;
  description?: string | undefined;
  isRequired?: boolean | undefined;
  accessLevels?: Array<string> | undefined;
  constraints?: { [k: string]: string } | undefined;
  requiresApproval?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsPermissions$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsPermissions$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsPermissions
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    scope: z.string().optional(),
    description: z.string().optional(),
    isRequired: z.boolean().optional(),
    accessLevels: z.array(z.string()).optional(),
    constraints: z.record(z.string()).optional(),
    requiresApproval: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsPermissions$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsPermissions$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsPermissions$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsPermissions$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsPermissions$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsPermissions$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsPermissions$Outbound;
}

export function postApiWorkspaceServiceV1AccountsPermissionsToJSON(
  postApiWorkspaceServiceV1AccountsPermissions:
    PostApiWorkspaceServiceV1AccountsPermissions,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsPermissions$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsPermissions,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsPermissionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsPermissions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsPermissions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsPermissions' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsInstalledApps$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsInstalledApps,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    developerId: z.string().optional(),
    category: PostApiWorkspaceServiceV1AccountsCategory$inboundSchema.default(
      "APP_CATEGORY_UNSPECIFIED",
    ),
    supportedContractTypes: z.array(z.string()).optional(),
    features: z.array(z.string()).optional(),
    pricingModel: PostApiWorkspaceServiceV1AccountsPricingModel$inboundSchema
      .default("PRICING_MODEL_UNSPECIFIED"),
    pricingTiers: z.record(z.number()).optional(),
    supportedIntegrations: z.array(z.string()).optional(),
    isVerified: z.boolean().optional(),
    rating: z.number().optional(),
    installationCount: z.number().int().optional(),
    requiredPermissions: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    documentationUrl: z.string().optional(),
    supportEmail: z.string().optional(),
    screenshots: z.array(z.string()).optional(),
    privacyPolicyUrl: z.string().optional(),
    termsUrl: z.string().optional(),
    publishedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1AccountsAccountsVersions$inboundSchema
      ),
    ).optional(),
    installations: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1AccountsInstallations$inboundSchema
      ),
    ).optional(),
    analytics: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsAnalytics$inboundSchema),
    ).optional(),
    reviews: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsReviews$inboundSchema),
    ).optional(),
    info: z.lazy(() => PostApiWorkspaceServiceV1AccountsInfo$inboundSchema)
      .optional(),
    webhooks: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsWebhooks$inboundSchema),
    ).optional(),
    permissions: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsPermissions$inboundSchema),
    ).optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsInstalledApps$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  developerId?: string | undefined;
  category: string;
  supportedContractTypes?: Array<string> | undefined;
  features?: Array<string> | undefined;
  pricingModel: string;
  pricingTiers?: { [k: string]: number } | undefined;
  supportedIntegrations?: Array<string> | undefined;
  isVerified?: boolean | undefined;
  rating?: number | undefined;
  installationCount?: number | undefined;
  requiredPermissions?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  documentationUrl?: string | undefined;
  supportEmail?: string | undefined;
  screenshots?: Array<string> | undefined;
  privacyPolicyUrl?: string | undefined;
  termsUrl?: string | undefined;
  publishedAt?: string | undefined;
  lastUpdated?: string | undefined;
  versions?:
    | Array<PostApiWorkspaceServiceV1AccountsAccountsVersions$Outbound>
    | undefined;
  installations?:
    | Array<PostApiWorkspaceServiceV1AccountsInstallations$Outbound>
    | undefined;
  analytics?:
    | Array<PostApiWorkspaceServiceV1AccountsAnalytics$Outbound>
    | undefined;
  reviews?:
    | Array<PostApiWorkspaceServiceV1AccountsReviews$Outbound>
    | undefined;
  info?: PostApiWorkspaceServiceV1AccountsInfo$Outbound | undefined;
  webhooks?:
    | Array<PostApiWorkspaceServiceV1AccountsWebhooks$Outbound>
    | undefined;
  permissions?:
    | Array<PostApiWorkspaceServiceV1AccountsPermissions$Outbound>
    | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsInstalledApps$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsInstalledApps$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsInstalledApps
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    developerId: z.string().optional(),
    category: PostApiWorkspaceServiceV1AccountsCategory$outboundSchema.default(
      "APP_CATEGORY_UNSPECIFIED",
    ),
    supportedContractTypes: z.array(z.string()).optional(),
    features: z.array(z.string()).optional(),
    pricingModel: PostApiWorkspaceServiceV1AccountsPricingModel$outboundSchema
      .default("PRICING_MODEL_UNSPECIFIED"),
    pricingTiers: z.record(z.number()).optional(),
    supportedIntegrations: z.array(z.string()).optional(),
    isVerified: z.boolean().optional(),
    rating: z.number().optional(),
    installationCount: z.number().int().optional(),
    requiredPermissions: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    documentationUrl: z.string().optional(),
    supportEmail: z.string().optional(),
    screenshots: z.array(z.string()).optional(),
    privacyPolicyUrl: z.string().optional(),
    termsUrl: z.string().optional(),
    publishedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
    versions: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1AccountsAccountsVersions$outboundSchema
      ),
    ).optional(),
    installations: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1AccountsInstallations$outboundSchema
      ),
    ).optional(),
    analytics: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsAnalytics$outboundSchema),
    ).optional(),
    reviews: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsReviews$outboundSchema),
    ).optional(),
    info: z.lazy(() => PostApiWorkspaceServiceV1AccountsInfo$outboundSchema)
      .optional(),
    webhooks: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsWebhooks$outboundSchema),
    ).optional(),
    permissions: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsPermissions$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsInstalledApps$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsInstalledApps$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsInstalledApps$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsInstalledApps$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsInstalledApps$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsInstalledApps$Outbound` instead. */
  export type Outbound =
    PostApiWorkspaceServiceV1AccountsInstalledApps$Outbound;
}

export function postApiWorkspaceServiceV1AccountsInstalledAppsToJSON(
  postApiWorkspaceServiceV1AccountsInstalledApps:
    PostApiWorkspaceServiceV1AccountsInstalledApps,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsInstalledApps$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsInstalledApps,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsInstalledAppsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsInstalledApps,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsInstalledApps$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsInstalledApps' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsWorkspaces$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsWorkspaces,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    uniqueIdentifier: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    storageQuota: z.string().optional(),
    usedStorage: z.string().optional(),
    allowPublicSharing: z.boolean().optional(),
    requireApproval: z.boolean().optional(),
    gdprCompliant: z.boolean().optional(),
    hipaaCompliant: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    folders: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsFolders$inboundSchema),
    ).optional(),
    templates: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsTemplates$inboundSchema),
    ).optional(),
    sharing: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsSharing$inboundSchema),
    ).optional(),
    activities: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsActivities$inboundSchema),
    ).optional(),
    compliance: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsCompliance$inboundSchema),
    ).optional(),
    installedApps: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1AccountsInstalledApps$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsWorkspaces$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  uniqueIdentifier?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  storageQuota?: string | undefined;
  usedStorage?: string | undefined;
  allowPublicSharing?: boolean | undefined;
  requireApproval?: boolean | undefined;
  gdprCompliant?: boolean | undefined;
  hipaaCompliant?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  folders?:
    | Array<PostApiWorkspaceServiceV1AccountsFolders$Outbound>
    | undefined;
  templates?:
    | Array<PostApiWorkspaceServiceV1AccountsTemplates$Outbound>
    | undefined;
  sharing?:
    | Array<PostApiWorkspaceServiceV1AccountsSharing$Outbound>
    | undefined;
  activities?:
    | Array<PostApiWorkspaceServiceV1AccountsActivities$Outbound>
    | undefined;
  compliance?:
    | Array<PostApiWorkspaceServiceV1AccountsCompliance$Outbound>
    | undefined;
  installedApps?:
    | Array<PostApiWorkspaceServiceV1AccountsInstalledApps$Outbound>
    | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsWorkspaces$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsWorkspaces$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsWorkspaces
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    uniqueIdentifier: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    storageQuota: z.string().optional(),
    usedStorage: z.string().optional(),
    allowPublicSharing: z.boolean().optional(),
    requireApproval: z.boolean().optional(),
    gdprCompliant: z.boolean().optional(),
    hipaaCompliant: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    folders: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsFolders$outboundSchema),
    ).optional(),
    templates: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsTemplates$outboundSchema),
    ).optional(),
    sharing: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsSharing$outboundSchema),
    ).optional(),
    activities: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsActivities$outboundSchema),
    ).optional(),
    compliance: z.array(
      z.lazy(() => PostApiWorkspaceServiceV1AccountsCompliance$outboundSchema),
    ).optional(),
    installedApps: z.array(
      z.lazy(() =>
        PostApiWorkspaceServiceV1AccountsInstalledApps$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsWorkspaces$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsWorkspaces$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsWorkspaces$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsWorkspaces$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsWorkspaces$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsWorkspaces$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsWorkspaces$Outbound;
}

export function postApiWorkspaceServiceV1AccountsWorkspacesToJSON(
  postApiWorkspaceServiceV1AccountsWorkspaces:
    PostApiWorkspaceServiceV1AccountsWorkspaces,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsWorkspaces$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsWorkspaces,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsWorkspacesFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsWorkspaces,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsWorkspaces$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsWorkspaces' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsDataProfiles$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsDataProfiles,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    profileType: z.string().optional(),
    dataFields: z.record(z.string()).optional(),
    isDefault: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsDataProfiles$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  profileType?: string | undefined;
  dataFields?: { [k: string]: string } | undefined;
  isDefault?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsDataProfiles$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsDataProfiles$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsDataProfiles
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    profileType: z.string().optional(),
    dataFields: z.record(z.string()).optional(),
    isDefault: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsDataProfiles$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsDataProfiles$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsDataProfiles$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsDataProfiles$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsDataProfiles$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsDataProfiles$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsDataProfiles$Outbound;
}

export function postApiWorkspaceServiceV1AccountsDataProfilesToJSON(
  postApiWorkspaceServiceV1AccountsDataProfiles:
    PostApiWorkspaceServiceV1AccountsDataProfiles,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsDataProfiles$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsDataProfiles,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsDataProfilesFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsDataProfiles,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsDataProfiles$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsDataProfiles' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsAccount$inboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1AccountsAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  auth0UserId: z.string().optional(),
  email: z.string().optional(),
  baseDirectory: z.string().optional(),
  bucketName: z.string().optional(),
  region: z.string().optional(),
  orgId: z.string().optional(),
  tenantId: z.string().optional(),
  roles: z.array(z.string()).optional(),
  permissions: z.array(z.string()).optional(),
  mfaEnabled: z.boolean().optional(),
  complianceLevel:
    PostApiWorkspaceServiceV1AccountsComplianceLevel$inboundSchema.default(
      "COMPLIANCE_LEVEL_UNSPECIFIED",
    ),
  preferences: z.record(z.string()).optional(),
  apiKeys: z.array(z.string()).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  workspaces: z.array(
    z.lazy(() => PostApiWorkspaceServiceV1AccountsWorkspaces$inboundSchema),
  ).optional(),
  dataProfiles: z.array(
    z.lazy(() => PostApiWorkspaceServiceV1AccountsDataProfiles$inboundSchema),
  ).optional(),
});

/** @internal */
export type PostApiWorkspaceServiceV1AccountsAccount$Outbound = {
  id?: string | undefined;
  auth0UserId?: string | undefined;
  email?: string | undefined;
  baseDirectory?: string | undefined;
  bucketName?: string | undefined;
  region?: string | undefined;
  orgId?: string | undefined;
  tenantId?: string | undefined;
  roles?: Array<string> | undefined;
  permissions?: Array<string> | undefined;
  mfaEnabled?: boolean | undefined;
  complianceLevel: string;
  preferences?: { [k: string]: string } | undefined;
  apiKeys?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  workspaces?:
    | Array<PostApiWorkspaceServiceV1AccountsWorkspaces$Outbound>
    | undefined;
  dataProfiles?:
    | Array<PostApiWorkspaceServiceV1AccountsDataProfiles$Outbound>
    | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsAccount$outboundSchema: z.ZodType<
  PostApiWorkspaceServiceV1AccountsAccount$Outbound,
  z.ZodTypeDef,
  PostApiWorkspaceServiceV1AccountsAccount
> = z.object({
  id: z.string().optional(),
  auth0UserId: z.string().optional(),
  email: z.string().optional(),
  baseDirectory: z.string().optional(),
  bucketName: z.string().optional(),
  region: z.string().optional(),
  orgId: z.string().optional(),
  tenantId: z.string().optional(),
  roles: z.array(z.string()).optional(),
  permissions: z.array(z.string()).optional(),
  mfaEnabled: z.boolean().optional(),
  complianceLevel:
    PostApiWorkspaceServiceV1AccountsComplianceLevel$outboundSchema.default(
      "COMPLIANCE_LEVEL_UNSPECIFIED",
    ),
  preferences: z.record(z.string()).optional(),
  apiKeys: z.array(z.string()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  deletedAt: z.date().transform(v => v.toISOString()).optional(),
  workspaces: z.array(
    z.lazy(() => PostApiWorkspaceServiceV1AccountsWorkspaces$outboundSchema),
  ).optional(),
  dataProfiles: z.array(
    z.lazy(() => PostApiWorkspaceServiceV1AccountsDataProfiles$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsAccount$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsAccount$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsAccount$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsAccount$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsAccount$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsAccount$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsAccount$Outbound;
}

export function postApiWorkspaceServiceV1AccountsAccountToJSON(
  postApiWorkspaceServiceV1AccountsAccount:
    PostApiWorkspaceServiceV1AccountsAccount,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsAccount$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsAccount,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsAccountFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsAccount,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsAccount$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsAccount' from JSON`,
  );
}

/** @internal */
export const PostApiWorkspaceServiceV1AccountsResponseBody$inboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    account: z.lazy(() =>
      PostApiWorkspaceServiceV1AccountsAccount$inboundSchema
    ).optional(),
    initialWorkspaceName: z.string().optional(),
  });

/** @internal */
export type PostApiWorkspaceServiceV1AccountsResponseBody$Outbound = {
  account?: PostApiWorkspaceServiceV1AccountsAccount$Outbound | undefined;
  initialWorkspaceName?: string | undefined;
};

/** @internal */
export const PostApiWorkspaceServiceV1AccountsResponseBody$outboundSchema:
  z.ZodType<
    PostApiWorkspaceServiceV1AccountsResponseBody$Outbound,
    z.ZodTypeDef,
    PostApiWorkspaceServiceV1AccountsResponseBody
  > = z.object({
    account: z.lazy(() =>
      PostApiWorkspaceServiceV1AccountsAccount$outboundSchema
    ).optional(),
    initialWorkspaceName: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostApiWorkspaceServiceV1AccountsResponseBody$ {
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PostApiWorkspaceServiceV1AccountsResponseBody$inboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostApiWorkspaceServiceV1AccountsResponseBody$outboundSchema;
  /** @deprecated use `PostApiWorkspaceServiceV1AccountsResponseBody$Outbound` instead. */
  export type Outbound = PostApiWorkspaceServiceV1AccountsResponseBody$Outbound;
}

export function postApiWorkspaceServiceV1AccountsResponseBodyToJSON(
  postApiWorkspaceServiceV1AccountsResponseBody:
    PostApiWorkspaceServiceV1AccountsResponseBody,
): string {
  return JSON.stringify(
    PostApiWorkspaceServiceV1AccountsResponseBody$outboundSchema.parse(
      postApiWorkspaceServiceV1AccountsResponseBody,
    ),
  );
}

export function postApiWorkspaceServiceV1AccountsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostApiWorkspaceServiceV1AccountsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostApiWorkspaceServiceV1AccountsResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostApiWorkspaceServiceV1AccountsResponseBody' from JSON`,
  );
}
