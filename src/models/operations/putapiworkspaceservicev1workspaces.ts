/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutApiWorkspaceServiceV1WorkspacesEmbeddings = {
  id?: string | undefined;
  embeddings?: Array<number> | undefined;
  modelVersion?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesVersions = {
  id?: string | undefined;
  fileId?: string | undefined;
  versionNumber?: number | undefined;
  s3Key?: string | undefined;
  size?: string | undefined;
  commitMessage?: string | undefined;
  authorId?: string | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesComments = {
  id?: string | undefined;
  authorId?: string | undefined;
  content?: string | undefined;
  startPosition?: number | undefined;
  endPosition?: number | undefined;
  resolved?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesSharing = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesSnapshots = {
  id?: string | undefined;
  fileId?: string | undefined;
  snapshotHash?: string | undefined;
  content?: string | undefined;
  authorId?: string | undefined;
  reason?: string | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesFiles = {
  id?: string | undefined;
  name?: string | undefined;
  size?: string | undefined;
  s3Key?: string | undefined;
  s3BucketName?: string | undefined;
  isDeleted?: boolean | undefined;
  version?: number | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  embeddings?: PutApiWorkspaceServiceV1WorkspacesEmbeddings | undefined;
  versions?: Array<PutApiWorkspaceServiceV1WorkspacesVersions> | undefined;
  comments?: Array<PutApiWorkspaceServiceV1WorkspacesComments> | undefined;
  sharing?: Array<PutApiWorkspaceServiceV1WorkspacesSharing> | undefined;
  snapshots?: Array<PutApiWorkspaceServiceV1WorkspacesSnapshots> | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesFolders = {
  id?: string | undefined;
  name?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  isDeleted?: boolean | undefined;
  parentFolderId?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  files?: Array<PutApiWorkspaceServiceV1WorkspacesFiles> | undefined;
};

export const PutApiWorkspaceServiceV1WorkspacesTemplateType = {
  TemplateTypeUnspecified: "TEMPLATE_TYPE_UNSPECIFIED",
  TemplateTypeStandard: "TEMPLATE_TYPE_STANDARD",
  TemplateTypeSmart: "TEMPLATE_TYPE_SMART",
  TemplateTypeAdaptive: "TEMPLATE_TYPE_ADAPTIVE",
  TemplateTypeAiGenerated: "TEMPLATE_TYPE_AI_GENERATED",
} as const;
export type PutApiWorkspaceServiceV1WorkspacesTemplateType = ClosedEnum<
  typeof PutApiWorkspaceServiceV1WorkspacesTemplateType
>;

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesVersions = {
  id?: string | undefined;
  templateId?: string | undefined;
  version?: string | undefined;
  baseContent?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  authorId?: string | undefined;
  changeDescription?: string | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesVariables = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  variableType?: string | undefined;
  defaultValue?: string | undefined;
  isRequired?: boolean | undefined;
  validationRules?: string | undefined;
  dataSource?: string | undefined;
  aiExtractionRules?: string | undefined;
  alternatives?: Array<string> | undefined;
  templateId?: string | undefined;
};

export const PutApiWorkspaceServiceV1WorkspacesStatus = {
  DocumentStatusUnspecified: "DOCUMENT_STATUS_UNSPECIFIED",
  DocumentStatusDraft: "DOCUMENT_STATUS_DRAFT",
  DocumentStatusInReview: "DOCUMENT_STATUS_IN_REVIEW",
  DocumentStatusApproved: "DOCUMENT_STATUS_APPROVED",
  DocumentStatusRejected: "DOCUMENT_STATUS_REJECTED",
  DocumentStatusExpired: "DOCUMENT_STATUS_EXPIRED",
  DocumentStatusArchived: "DOCUMENT_STATUS_ARCHIVED",
} as const;
export type PutApiWorkspaceServiceV1WorkspacesStatus = ClosedEnum<
  typeof PutApiWorkspaceServiceV1WorkspacesStatus
>;

export const PutApiWorkspaceServiceV1WorkspacesWorkspacesStatus = {
  SignatureStatusUnspecified: "SIGNATURE_STATUS_UNSPECIFIED",
  SignatureStatusPending: "SIGNATURE_STATUS_PENDING",
  SignatureStatusSigned: "SIGNATURE_STATUS_SIGNED",
  SignatureStatusRejected: "SIGNATURE_STATUS_REJECTED",
  SignatureStatusExpired: "SIGNATURE_STATUS_EXPIRED",
  SignatureStatusRevoked: "SIGNATURE_STATUS_REVOKED",
} as const;
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesStatus = ClosedEnum<
  typeof PutApiWorkspaceServiceV1WorkspacesWorkspacesStatus
>;

export type PutApiWorkspaceServiceV1WorkspacesSignatureBlocks = {
  id?: string | undefined;
  requestId?: string | undefined;
  blockType?: string | undefined;
  pageNumber?: number | undefined;
  xPosition?: number | undefined;
  yPosition?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
  isRequired?: boolean | undefined;
  signatureData?: string | undefined;
  signedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkflow = {
  id?: string | undefined;
  requestId?: string | undefined;
  signingOrder?: Array<string> | undefined;
  currentSigner?: string | undefined;
  workflowStatus?: string | undefined;
  parallelSigning?: boolean | undefined;
  requireAllSignatures?: boolean | undefined;
  deadline?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesSignatureRequests = {
  id?: string | undefined;
  status?: PutApiWorkspaceServiceV1WorkspacesWorkspacesStatus | undefined;
  signerEmail?: string | undefined;
  signerName?: string | undefined;
  role?: string | undefined;
  authenticationMethod?: string | undefined;
  expiresAt?: Date | undefined;
  requiresMfa?: boolean | undefined;
  signatureType?: string | undefined;
  reminderSchedule?: Array<string> | undefined;
  documentId?: string | undefined;
  signatureBlocks?:
    | Array<PutApiWorkspaceServiceV1WorkspacesSignatureBlocks>
    | undefined;
  workflow?: PutApiWorkspaceServiceV1WorkspacesWorkflow | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesAiAssistance = {
  id?: string | undefined;
  documentId?: string | undefined;
  interactionType?: string | undefined;
  userQuery?: string | undefined;
  aiResponse?: string | undefined;
  context?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesRounds = {
  id?: string | undefined;
  historyId?: string | undefined;
  roundNumber?: number | undefined;
  proposerId?: string | undefined;
  proposalContent?: string | undefined;
  responseContent?: string | undefined;
  status?: string | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesNegotiation = {
  id?: string | undefined;
  documentId?: string | undefined;
  rounds?: Array<PutApiWorkspaceServiceV1WorkspacesRounds> | undefined;
  currentStatus?: string | undefined;
  startedAt?: Date | undefined;
  lastUpdated?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesMerges = {
  id?: string | undefined;
  branchId?: string | undefined;
  sourceBranch?: string | undefined;
  targetBranch?: string | undefined;
  mergeStatus?: string | undefined;
  mergeStrategy?: string | undefined;
  conflicts?: Array<string> | undefined;
  mergerId?: string | undefined;
  createdAt?: Date | undefined;
  completedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesPolicy = {
  id?: string | undefined;
  branchId?: string | undefined;
  requiredApprovers?: Array<string> | undefined;
  minimumApprovals?: number | undefined;
  enforceLinearHistory?: boolean | undefined;
  allowForcePush?: boolean | undefined;
  protectedPaths?: Array<string> | undefined;
  mergeRules?: { [k: string]: string } | undefined;
  automatedChecks?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesMergeRequests = {
  id?: string | undefined;
  sourceBranchId?: string | undefined;
  targetBranchId?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  authorId?: string | undefined;
  reviewers?: Array<string> | undefined;
  status?: string | undefined;
  labels?: Array<string> | undefined;
  hasConflicts?: boolean | undefined;
  automatedCheckResults?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesBranches = {
  id?: string | undefined;
  name?: string | undefined;
  baseVersionHash?: string | undefined;
  currentHeadHash?: string | undefined;
  purpose?: string | undefined;
  status?: string | undefined;
  reviewers?: Array<string> | undefined;
  branchMetadata?: { [k: string]: string } | undefined;
  isLocked?: boolean | undefined;
  lastUpdated?: Date | undefined;
  merges?: Array<PutApiWorkspaceServiceV1WorkspacesMerges> | undefined;
  policy?: PutApiWorkspaceServiceV1WorkspacesPolicy | undefined;
  mergeRequests?:
    | Array<PutApiWorkspaceServiceV1WorkspacesMergeRequests>
    | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesChanges = {
  id?: string | undefined;
  versionId?: string | undefined;
  changeType?: string | undefined;
  contentBefore?: string | undefined;
  contentAfter?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesSummaries = {
  id?: string | undefined;
  versionId?: string | undefined;
  summaryType?: string | undefined;
  content?: string | undefined;
  targetAudience?: string | undefined;
  keyPoints?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestVersions = {
  id?: string | undefined;
  versionHash?: string | undefined;
  parentHash?: string | undefined;
  commitMessage?: string | undefined;
  authorId?: string | undefined;
  branchName?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  tags?: Array<string> | undefined;
  isApproved?: boolean | undefined;
  approvalChain?: string | undefined;
  createdAt?: Date | undefined;
  branches?: Array<PutApiWorkspaceServiceV1WorkspacesBranches> | undefined;
  changes?: Array<PutApiWorkspaceServiceV1WorkspacesChanges> | undefined;
  summaries?: Array<PutApiWorkspaceServiceV1WorkspacesSummaries> | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesInstances = {
  id?: string | undefined;
  templateId?: string | undefined;
  status?: PutApiWorkspaceServiceV1WorkspacesStatus | undefined;
  fieldValues?: { [k: string]: string } | undefined;
  signers?: Array<string> | undefined;
  language?: string | undefined;
  isCompleted?: boolean | undefined;
  dueDate?: Date | undefined;
  generatedContent?: string | undefined;
  attachments?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  signatureRequests?:
    | Array<PutApiWorkspaceServiceV1WorkspacesSignatureRequests>
    | undefined;
  aiAssistance?:
    | Array<PutApiWorkspaceServiceV1WorkspacesAiAssistance>
    | undefined;
  negotiation?: PutApiWorkspaceServiceV1WorkspacesNegotiation | undefined;
  versions?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestVersions>
    | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesExplanations = {
  id?: string | undefined;
  templateId?: string | undefined;
  sectionIdentifier?: string | undefined;
  explanationText?: string | undefined;
  complexityLevel?: string | undefined;
  relatedTerms?: Array<string> | undefined;
  legalReferences?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesRiskAssessments = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  riskType?: string | undefined;
  riskScore?: number | undefined;
  assessmentDetails?: string | undefined;
  mitigationSuggestions?: Array<string> | undefined;
  assessorId?: string | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesComplianceChecks = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  complianceStandard?: string | undefined;
  checkResult?: string | undefined;
  violations?: Array<string> | undefined;
  remediationSteps?: string | undefined;
  checkDate?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesIntelligence = {
  id?: string | undefined;
  contractType?: string | undefined;
  riskScores?: { [k: string]: number } | undefined;
  detectedClauses?: { [k: string]: string } | undefined;
  keyObligations?: Array<string> | undefined;
  complianceScores?: { [k: string]: number } | undefined;
  jurisdiction?: string | undefined;
  governingLaws?: Array<string> | undefined;
  semanticAnalysis?: { [k: string]: string } | undefined;
  analysisDate?: Date | undefined;
  riskAssessments?:
    | Array<PutApiWorkspaceServiceV1WorkspacesRiskAssessments>
    | undefined;
  complianceChecks?:
    | Array<PutApiWorkspaceServiceV1WorkspacesComplianceChecks>
    | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesTemplates = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  industryType?: string | undefined;
  documentType?: string | undefined;
  baseContent?: string | undefined;
  isAdaptive?: boolean | undefined;
  metadata?: { [k: string]: string } | undefined;
  supportedLanguages?: Array<string> | undefined;
  requiredDataFields?: Array<string> | undefined;
  version?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  templateType?: PutApiWorkspaceServiceV1WorkspacesTemplateType | undefined;
  content?: string | undefined;
  detectedVariables?: Array<string> | undefined;
  variableMappings?: { [k: string]: string } | undefined;
  isContextAware?: boolean | undefined;
  supportedContexts?: Array<string> | undefined;
  formattingRules?: { [k: string]: string } | undefined;
  conditionalSections?: Array<string> | undefined;
  versions?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesVersions>
    | undefined;
  variables?: Array<PutApiWorkspaceServiceV1WorkspacesVariables> | undefined;
  instances?: Array<PutApiWorkspaceServiceV1WorkspacesInstances> | undefined;
  explanations?:
    | Array<PutApiWorkspaceServiceV1WorkspacesExplanations>
    | undefined;
  intelligence?:
    | Array<PutApiWorkspaceServiceV1WorkspacesIntelligence>
    | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesSharing = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesActivities = {
  id?: string | undefined;
  activityType?: string | undefined;
  userId?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesCompliance = {
  id?: string | undefined;
  complianceType?: string | undefined;
  status?: string | undefined;
  certificationId?: string | undefined;
  validUntil?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export const PutApiWorkspaceServiceV1WorkspacesCategory = {
  AppCategoryUnspecified: "APP_CATEGORY_UNSPECIFIED",
  AppCategoryContractAutomation: "APP_CATEGORY_CONTRACT_AUTOMATION",
  AppCategoryContractAnalysis: "APP_CATEGORY_CONTRACT_ANALYSIS",
  AppCategoryIntegration: "APP_CATEGORY_INTEGRATION",
  AppCategoryAiPowered: "APP_CATEGORY_AI_POWERED",
  AppCategoryWorkflow: "APP_CATEGORY_WORKFLOW",
  AppCategoryCompliance: "APP_CATEGORY_COMPLIANCE",
} as const;
export type PutApiWorkspaceServiceV1WorkspacesCategory = ClosedEnum<
  typeof PutApiWorkspaceServiceV1WorkspacesCategory
>;

export const PutApiWorkspaceServiceV1WorkspacesPricingModel = {
  PricingModelUnspecified: "PRICING_MODEL_UNSPECIFIED",
  PricingModelFree: "PRICING_MODEL_FREE",
  PricingModelSubscription: "PRICING_MODEL_SUBSCRIPTION",
  PricingModelUsageBased: "PRICING_MODEL_USAGE_BASED",
  PricingModelEnterprise: "PRICING_MODEL_ENTERPRISE",
} as const;
export type PutApiWorkspaceServiceV1WorkspacesPricingModel = ClosedEnum<
  typeof PutApiWorkspaceServiceV1WorkspacesPricingModel
>;

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestRequestBodyVersions =
  {
    id?: string | undefined;
    appId?: string | undefined;
    versionNumber?: string | undefined;
    changelog?: string | undefined;
    requirements?: { [k: string]: string } | undefined;
    isPublic?: boolean | undefined;
    releaseDate?: Date | undefined;
  };

export type PutApiWorkspaceServiceV1WorkspacesInstallations = {
  id?: string | undefined;
  appId?: string | undefined;
  workspaceId?: string | undefined;
  versionInstalled?: string | undefined;
  configuration?: { [k: string]: string } | undefined;
  installationStatus?: string | undefined;
  installedAt?: Date | undefined;
  lastUsed?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesAnalytics = {
  id?: string | undefined;
  appId?: string | undefined;
  metricName?: string | undefined;
  metricValue?: number | undefined;
  dimensions?: { [k: string]: string } | undefined;
  recordedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesReviews = {
  id?: string | undefined;
  appId?: string | undefined;
  reviewerId?: string | undefined;
  rating?: number | undefined;
  reviewText?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesInfo = {
  id?: string | undefined;
  appId?: string | undefined;
  supportedLanguages?: Array<string> | undefined;
  sdkFeatures?: Array<string> | undefined;
  testCoverage?: { [k: string]: number } | undefined;
  securityScans?: Array<string> | undefined;
  performanceMetrics?: { [k: string]: string } | undefined;
  developmentStatus?: string | undefined;
  knownIssues?: Array<string> | undefined;
  roadmapUrl?: string | undefined;
  lastSecurityAudit?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWebhooks = {
  id?: string | undefined;
  appId?: string | undefined;
  url?: string | undefined;
  subscribedEvents?: Array<string> | undefined;
  secretKey?: string | undefined;
  retryCount?: number | undefined;
  timeoutSeconds?: number | undefined;
  isActive?: boolean | undefined;
  headers?: { [k: string]: string } | undefined;
  lastTriggered?: Date | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesPermissions = {
  id?: string | undefined;
  appId?: string | undefined;
  scope?: string | undefined;
  description?: string | undefined;
  isRequired?: boolean | undefined;
  accessLevels?: Array<string> | undefined;
  constraints?: { [k: string]: string } | undefined;
  requiresApproval?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesInstalledApps = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  developerId?: string | undefined;
  category?: PutApiWorkspaceServiceV1WorkspacesCategory | undefined;
  supportedContractTypes?: Array<string> | undefined;
  features?: Array<string> | undefined;
  pricingModel?: PutApiWorkspaceServiceV1WorkspacesPricingModel | undefined;
  pricingTiers?: { [k: string]: number } | undefined;
  supportedIntegrations?: Array<string> | undefined;
  isVerified?: boolean | undefined;
  rating?: number | undefined;
  installationCount?: number | undefined;
  requiredPermissions?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  documentationUrl?: string | undefined;
  supportEmail?: string | undefined;
  screenshots?: Array<string> | undefined;
  privacyPolicyUrl?: string | undefined;
  termsUrl?: string | undefined;
  publishedAt?: Date | undefined;
  lastUpdated?: Date | undefined;
  versions?:
    | Array<
      PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestRequestBodyVersions
    >
    | undefined;
  installations?:
    | Array<PutApiWorkspaceServiceV1WorkspacesInstallations>
    | undefined;
  analytics?: Array<PutApiWorkspaceServiceV1WorkspacesAnalytics> | undefined;
  reviews?: Array<PutApiWorkspaceServiceV1WorkspacesReviews> | undefined;
  info?: PutApiWorkspaceServiceV1WorkspacesInfo | undefined;
  webhooks?: Array<PutApiWorkspaceServiceV1WorkspacesWebhooks> | undefined;
  permissions?:
    | Array<PutApiWorkspaceServiceV1WorkspacesPermissions>
    | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspace = {
  id?: string | undefined;
  name?: string | undefined;
  uniqueIdentifier?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  storageQuota?: string | undefined;
  usedStorage?: string | undefined;
  allowPublicSharing?: boolean | undefined;
  requireApproval?: boolean | undefined;
  gdprCompliant?: boolean | undefined;
  hipaaCompliant?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  folders?: Array<PutApiWorkspaceServiceV1WorkspacesFolders> | undefined;
  templates?: Array<PutApiWorkspaceServiceV1WorkspacesTemplates> | undefined;
  sharing?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesSharing>
    | undefined;
  activities?: Array<PutApiWorkspaceServiceV1WorkspacesActivities> | undefined;
  compliance?: Array<PutApiWorkspaceServiceV1WorkspacesCompliance> | undefined;
  installedApps?:
    | Array<PutApiWorkspaceServiceV1WorkspacesInstalledApps>
    | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesRequestBody = {
  workspace?: PutApiWorkspaceServiceV1WorkspacesWorkspace | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesEmbeddings = {
  id?: string | undefined;
  embeddings?: Array<number> | undefined;
  modelVersion?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONResponseBodyVersions =
  {
    id?: string | undefined;
    fileId?: string | undefined;
    versionNumber?: number | undefined;
    s3Key?: string | undefined;
    size?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    createdAt?: Date | undefined;
  };

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesComments = {
  id?: string | undefined;
  authorId?: string | undefined;
  content?: string | undefined;
  startPosition?: number | undefined;
  endPosition?: number | undefined;
  resolved?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Sharing = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesSnapshots = {
  id?: string | undefined;
  fileId?: string | undefined;
  snapshotHash?: string | undefined;
  content?: string | undefined;
  authorId?: string | undefined;
  reason?: string | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesFiles = {
  id?: string | undefined;
  name?: string | undefined;
  size?: string | undefined;
  s3Key?: string | undefined;
  s3BucketName?: string | undefined;
  isDeleted?: boolean | undefined;
  version?: number | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  embeddings?:
    | PutApiWorkspaceServiceV1WorkspacesWorkspacesEmbeddings
    | undefined;
  versions?:
    | Array<
      PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONResponseBodyVersions
    >
    | undefined;
  comments?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesComments>
    | undefined;
  sharing?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Sharing>
    | undefined;
  snapshots?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesSnapshots>
    | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesFolders = {
  id?: string | undefined;
  name?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  isDeleted?: boolean | undefined;
  parentFolderId?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  files?: Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesFiles> | undefined;
};

export const PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplateType = {
  TemplateTypeUnspecified: "TEMPLATE_TYPE_UNSPECIFIED",
  TemplateTypeStandard: "TEMPLATE_TYPE_STANDARD",
  TemplateTypeSmart: "TEMPLATE_TYPE_SMART",
  TemplateTypeAdaptive: "TEMPLATE_TYPE_ADAPTIVE",
  TemplateTypeAiGenerated: "TEMPLATE_TYPE_AI_GENERATED",
} as const;
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplateType =
  ClosedEnum<typeof PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplateType>;

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions = {
  id?: string | undefined;
  templateId?: string | undefined;
  version?: string | undefined;
  baseContent?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  authorId?: string | undefined;
  changeDescription?: string | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesVariables = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  variableType?: string | undefined;
  defaultValue?: string | undefined;
  isRequired?: boolean | undefined;
  validationRules?: string | undefined;
  dataSource?: string | undefined;
  aiExtractionRules?: string | undefined;
  alternatives?: Array<string> | undefined;
  templateId?: string | undefined;
};

export const PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseStatus = {
  DocumentStatusUnspecified: "DOCUMENT_STATUS_UNSPECIFIED",
  DocumentStatusDraft: "DOCUMENT_STATUS_DRAFT",
  DocumentStatusInReview: "DOCUMENT_STATUS_IN_REVIEW",
  DocumentStatusApproved: "DOCUMENT_STATUS_APPROVED",
  DocumentStatusRejected: "DOCUMENT_STATUS_REJECTED",
  DocumentStatusExpired: "DOCUMENT_STATUS_EXPIRED",
  DocumentStatusArchived: "DOCUMENT_STATUS_ARCHIVED",
} as const;
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseStatus =
  ClosedEnum<typeof PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseStatus>;

export const PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Status = {
  SignatureStatusUnspecified: "SIGNATURE_STATUS_UNSPECIFIED",
  SignatureStatusPending: "SIGNATURE_STATUS_PENDING",
  SignatureStatusSigned: "SIGNATURE_STATUS_SIGNED",
  SignatureStatusRejected: "SIGNATURE_STATUS_REJECTED",
  SignatureStatusExpired: "SIGNATURE_STATUS_EXPIRED",
  SignatureStatusRevoked: "SIGNATURE_STATUS_REVOKED",
} as const;
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Status =
  ClosedEnum<
    typeof PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Status
  >;

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureBlocks = {
  id?: string | undefined;
  requestId?: string | undefined;
  blockType?: string | undefined;
  pageNumber?: number | undefined;
  xPosition?: number | undefined;
  yPosition?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
  isRequired?: boolean | undefined;
  signatureData?: string | undefined;
  signedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkflow = {
  id?: string | undefined;
  requestId?: string | undefined;
  signingOrder?: Array<string> | undefined;
  currentSigner?: string | undefined;
  workflowStatus?: string | undefined;
  parallelSigning?: boolean | undefined;
  requireAllSignatures?: boolean | undefined;
  deadline?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureRequests = {
  id?: string | undefined;
  status?:
    | PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Status
    | undefined;
  signerEmail?: string | undefined;
  signerName?: string | undefined;
  role?: string | undefined;
  authenticationMethod?: string | undefined;
  expiresAt?: Date | undefined;
  requiresMfa?: boolean | undefined;
  signatureType?: string | undefined;
  reminderSchedule?: Array<string> | undefined;
  documentId?: string | undefined;
  signatureBlocks?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureBlocks>
    | undefined;
  workflow?: PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkflow | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesAiAssistance = {
  id?: string | undefined;
  documentId?: string | undefined;
  interactionType?: string | undefined;
  userQuery?: string | undefined;
  aiResponse?: string | undefined;
  context?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesRounds = {
  id?: string | undefined;
  historyId?: string | undefined;
  roundNumber?: number | undefined;
  proposerId?: string | undefined;
  proposalContent?: string | undefined;
  responseContent?: string | undefined;
  status?: string | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesNegotiation = {
  id?: string | undefined;
  documentId?: string | undefined;
  rounds?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesRounds>
    | undefined;
  currentStatus?: string | undefined;
  startedAt?: Date | undefined;
  lastUpdated?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesMerges = {
  id?: string | undefined;
  branchId?: string | undefined;
  sourceBranch?: string | undefined;
  targetBranch?: string | undefined;
  mergeStatus?: string | undefined;
  mergeStrategy?: string | undefined;
  conflicts?: Array<string> | undefined;
  mergerId?: string | undefined;
  createdAt?: Date | undefined;
  completedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesPolicy = {
  id?: string | undefined;
  branchId?: string | undefined;
  requiredApprovers?: Array<string> | undefined;
  minimumApprovals?: number | undefined;
  enforceLinearHistory?: boolean | undefined;
  allowForcePush?: boolean | undefined;
  protectedPaths?: Array<string> | undefined;
  mergeRules?: { [k: string]: string } | undefined;
  automatedChecks?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesMergeRequests = {
  id?: string | undefined;
  sourceBranchId?: string | undefined;
  targetBranchId?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  authorId?: string | undefined;
  reviewers?: Array<string> | undefined;
  status?: string | undefined;
  labels?: Array<string> | undefined;
  hasConflicts?: boolean | undefined;
  automatedCheckResults?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesBranches = {
  id?: string | undefined;
  name?: string | undefined;
  baseVersionHash?: string | undefined;
  currentHeadHash?: string | undefined;
  purpose?: string | undefined;
  status?: string | undefined;
  reviewers?: Array<string> | undefined;
  branchMetadata?: { [k: string]: string } | undefined;
  isLocked?: boolean | undefined;
  lastUpdated?: Date | undefined;
  merges?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesMerges>
    | undefined;
  policy?: PutApiWorkspaceServiceV1WorkspacesWorkspacesPolicy | undefined;
  mergeRequests?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesMergeRequests>
    | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesChanges = {
  id?: string | undefined;
  versionId?: string | undefined;
  changeType?: string | undefined;
  contentBefore?: string | undefined;
  contentAfter?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesSummaries = {
  id?: string | undefined;
  versionId?: string | undefined;
  summaryType?: string | undefined;
  content?: string | undefined;
  targetAudience?: string | undefined;
  keyPoints?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONVersions =
  {
    id?: string | undefined;
    versionHash?: string | undefined;
    parentHash?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    branchName?: string | undefined;
    metadata?: { [k: string]: string } | undefined;
    tags?: Array<string> | undefined;
    isApproved?: boolean | undefined;
    approvalChain?: string | undefined;
    createdAt?: Date | undefined;
    branches?:
      | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesBranches>
      | undefined;
    changes?:
      | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesChanges>
      | undefined;
    summaries?:
      | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesSummaries>
      | undefined;
  };

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesInstances = {
  id?: string | undefined;
  templateId?: string | undefined;
  status?:
    | PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseStatus
    | undefined;
  fieldValues?: { [k: string]: string } | undefined;
  signers?: Array<string> | undefined;
  language?: string | undefined;
  isCompleted?: boolean | undefined;
  dueDate?: Date | undefined;
  generatedContent?: string | undefined;
  attachments?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  signatureRequests?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureRequests>
    | undefined;
  aiAssistance?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesAiAssistance>
    | undefined;
  negotiation?:
    | PutApiWorkspaceServiceV1WorkspacesWorkspacesNegotiation
    | undefined;
  versions?:
    | Array<
      PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONVersions
    >
    | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesExplanations = {
  id?: string | undefined;
  templateId?: string | undefined;
  sectionIdentifier?: string | undefined;
  explanationText?: string | undefined;
  complexityLevel?: string | undefined;
  relatedTerms?: Array<string> | undefined;
  legalReferences?: Array<string> | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesRiskAssessments = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  riskType?: string | undefined;
  riskScore?: number | undefined;
  assessmentDetails?: string | undefined;
  mitigationSuggestions?: Array<string> | undefined;
  assessorId?: string | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesComplianceChecks = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  complianceStandard?: string | undefined;
  checkResult?: string | undefined;
  violations?: Array<string> | undefined;
  remediationSteps?: string | undefined;
  checkDate?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesIntelligence = {
  id?: string | undefined;
  contractType?: string | undefined;
  riskScores?: { [k: string]: number } | undefined;
  detectedClauses?: { [k: string]: string } | undefined;
  keyObligations?: Array<string> | undefined;
  complianceScores?: { [k: string]: number } | undefined;
  jurisdiction?: string | undefined;
  governingLaws?: Array<string> | undefined;
  semanticAnalysis?: { [k: string]: string } | undefined;
  analysisDate?: Date | undefined;
  riskAssessments?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesRiskAssessments>
    | undefined;
  complianceChecks?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesComplianceChecks>
    | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplates = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  industryType?: string | undefined;
  documentType?: string | undefined;
  baseContent?: string | undefined;
  isAdaptive?: boolean | undefined;
  metadata?: { [k: string]: string } | undefined;
  supportedLanguages?: Array<string> | undefined;
  requiredDataFields?: Array<string> | undefined;
  version?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  templateType?:
    | PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplateType
    | undefined;
  content?: string | undefined;
  detectedVariables?: Array<string> | undefined;
  variableMappings?: { [k: string]: string } | undefined;
  isContextAware?: boolean | undefined;
  supportedContexts?: Array<string> | undefined;
  formattingRules?: { [k: string]: string } | undefined;
  conditionalSections?: Array<string> | undefined;
  versions?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions>
    | undefined;
  variables?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesVariables>
    | undefined;
  instances?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesInstances>
    | undefined;
  explanations?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesExplanations>
    | undefined;
  intelligence?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesIntelligence>
    | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseSharing = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesActivities = {
  id?: string | undefined;
  activityType?: string | undefined;
  userId?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesCompliance = {
  id?: string | undefined;
  complianceType?: string | undefined;
  status?: string | undefined;
  certificationId?: string | undefined;
  validUntil?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export const PutApiWorkspaceServiceV1WorkspacesWorkspacesCategory = {
  AppCategoryUnspecified: "APP_CATEGORY_UNSPECIFIED",
  AppCategoryContractAutomation: "APP_CATEGORY_CONTRACT_AUTOMATION",
  AppCategoryContractAnalysis: "APP_CATEGORY_CONTRACT_ANALYSIS",
  AppCategoryIntegration: "APP_CATEGORY_INTEGRATION",
  AppCategoryAiPowered: "APP_CATEGORY_AI_POWERED",
  AppCategoryWorkflow: "APP_CATEGORY_WORKFLOW",
  AppCategoryCompliance: "APP_CATEGORY_COMPLIANCE",
} as const;
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesCategory = ClosedEnum<
  typeof PutApiWorkspaceServiceV1WorkspacesWorkspacesCategory
>;

export const PutApiWorkspaceServiceV1WorkspacesWorkspacesPricingModel = {
  PricingModelUnspecified: "PRICING_MODEL_UNSPECIFIED",
  PricingModelFree: "PRICING_MODEL_FREE",
  PricingModelSubscription: "PRICING_MODEL_SUBSCRIPTION",
  PricingModelUsageBased: "PRICING_MODEL_USAGE_BASED",
  PricingModelEnterprise: "PRICING_MODEL_ENTERPRISE",
} as const;
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesPricingModel =
  ClosedEnum<typeof PutApiWorkspaceServiceV1WorkspacesWorkspacesPricingModel>;

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions = {
  id?: string | undefined;
  appId?: string | undefined;
  versionNumber?: string | undefined;
  changelog?: string | undefined;
  requirements?: { [k: string]: string } | undefined;
  isPublic?: boolean | undefined;
  releaseDate?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesInstallations = {
  id?: string | undefined;
  appId?: string | undefined;
  workspaceId?: string | undefined;
  versionInstalled?: string | undefined;
  configuration?: { [k: string]: string } | undefined;
  installationStatus?: string | undefined;
  installedAt?: Date | undefined;
  lastUsed?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesAnalytics = {
  id?: string | undefined;
  appId?: string | undefined;
  metricName?: string | undefined;
  metricValue?: number | undefined;
  dimensions?: { [k: string]: string } | undefined;
  recordedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesReviews = {
  id?: string | undefined;
  appId?: string | undefined;
  reviewerId?: string | undefined;
  rating?: number | undefined;
  reviewText?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesInfo = {
  id?: string | undefined;
  appId?: string | undefined;
  supportedLanguages?: Array<string> | undefined;
  sdkFeatures?: Array<string> | undefined;
  testCoverage?: { [k: string]: number } | undefined;
  securityScans?: Array<string> | undefined;
  performanceMetrics?: { [k: string]: string } | undefined;
  developmentStatus?: string | undefined;
  knownIssues?: Array<string> | undefined;
  roadmapUrl?: string | undefined;
  lastSecurityAudit?: Date | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesWebhooks = {
  id?: string | undefined;
  appId?: string | undefined;
  url?: string | undefined;
  subscribedEvents?: Array<string> | undefined;
  secretKey?: string | undefined;
  retryCount?: number | undefined;
  timeoutSeconds?: number | undefined;
  isActive?: boolean | undefined;
  headers?: { [k: string]: string } | undefined;
  lastTriggered?: Date | undefined;
  createdAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesPermissions = {
  id?: string | undefined;
  appId?: string | undefined;
  scope?: string | undefined;
  description?: string | undefined;
  isRequired?: boolean | undefined;
  accessLevels?: Array<string> | undefined;
  constraints?: { [k: string]: string } | undefined;
  requiresApproval?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesInstalledApps = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  developerId?: string | undefined;
  category?: PutApiWorkspaceServiceV1WorkspacesWorkspacesCategory | undefined;
  supportedContractTypes?: Array<string> | undefined;
  features?: Array<string> | undefined;
  pricingModel?:
    | PutApiWorkspaceServiceV1WorkspacesWorkspacesPricingModel
    | undefined;
  pricingTiers?: { [k: string]: number } | undefined;
  supportedIntegrations?: Array<string> | undefined;
  isVerified?: boolean | undefined;
  rating?: number | undefined;
  installationCount?: number | undefined;
  requiredPermissions?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  documentationUrl?: string | undefined;
  supportEmail?: string | undefined;
  screenshots?: Array<string> | undefined;
  privacyPolicyUrl?: string | undefined;
  termsUrl?: string | undefined;
  publishedAt?: Date | undefined;
  lastUpdated?: Date | undefined;
  versions?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions>
    | undefined;
  installations?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesInstallations>
    | undefined;
  analytics?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesAnalytics>
    | undefined;
  reviews?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesReviews>
    | undefined;
  info?: PutApiWorkspaceServiceV1WorkspacesWorkspacesInfo | undefined;
  webhooks?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesWebhooks>
    | undefined;
  permissions?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesPermissions>
    | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkspace = {
  id?: string | undefined;
  name?: string | undefined;
  uniqueIdentifier?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  storageQuota?: string | undefined;
  usedStorage?: string | undefined;
  allowPublicSharing?: boolean | undefined;
  requireApproval?: boolean | undefined;
  gdprCompliant?: boolean | undefined;
  hipaaCompliant?: boolean | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  folders?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesFolders>
    | undefined;
  templates?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplates>
    | undefined;
  sharing?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseSharing>
    | undefined;
  activities?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesActivities>
    | undefined;
  compliance?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesCompliance>
    | undefined;
  installedApps?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesInstalledApps>
    | undefined;
};

export type PutApiWorkspaceServiceV1WorkspacesResponseBody = {
  workspace?: PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkspace | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesEmbeddings$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesEmbeddings,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    embeddings: z.array(z.number()).optional(),
    modelVersion: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesEmbeddings$Outbound = {
  id?: string | undefined;
  embeddings?: Array<number> | undefined;
  modelVersion?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesEmbeddings$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesEmbeddings$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesEmbeddings
  > = z.object({
    id: z.string().optional(),
    embeddings: z.array(z.number()).optional(),
    modelVersion: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesEmbeddings$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesEmbeddings$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesEmbeddings$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesEmbeddings$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesEmbeddings$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesEmbeddings$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1WorkspacesEmbeddings$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesEmbeddingsToJSON(
  putApiWorkspaceServiceV1WorkspacesEmbeddings:
    PutApiWorkspaceServiceV1WorkspacesEmbeddings,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesEmbeddings$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesEmbeddings,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesEmbeddingsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesEmbeddings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesEmbeddings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesEmbeddings' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesVersions$inboundSchema:
  z.ZodType<PutApiWorkspaceServiceV1WorkspacesVersions, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      fileId: z.string().optional(),
      versionNumber: z.number().int().optional(),
      s3Key: z.string().optional(),
      size: z.string().optional(),
      commitMessage: z.string().optional(),
      authorId: z.string().optional(),
      createdAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
    });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesVersions$Outbound = {
  id?: string | undefined;
  fileId?: string | undefined;
  versionNumber?: number | undefined;
  s3Key?: string | undefined;
  size?: string | undefined;
  commitMessage?: string | undefined;
  authorId?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesVersions$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesVersions$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesVersions
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    versionNumber: z.number().int().optional(),
    s3Key: z.string().optional(),
    size: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesVersions$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesVersions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesVersions$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesVersions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesVersions$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesVersions$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1WorkspacesVersions$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesVersionsToJSON(
  putApiWorkspaceServiceV1WorkspacesVersions:
    PutApiWorkspaceServiceV1WorkspacesVersions,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesVersions$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesVersions,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesVersions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesVersions' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesComments$inboundSchema:
  z.ZodType<PutApiWorkspaceServiceV1WorkspacesComments, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      authorId: z.string().optional(),
      content: z.string().optional(),
      startPosition: z.number().int().optional(),
      endPosition: z.number().int().optional(),
      resolved: z.boolean().optional(),
      createdAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      updatedAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
    });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesComments$Outbound = {
  id?: string | undefined;
  authorId?: string | undefined;
  content?: string | undefined;
  startPosition?: number | undefined;
  endPosition?: number | undefined;
  resolved?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesComments$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesComments$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesComments
  > = z.object({
    id: z.string().optional(),
    authorId: z.string().optional(),
    content: z.string().optional(),
    startPosition: z.number().int().optional(),
    endPosition: z.number().int().optional(),
    resolved: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesComments$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesComments$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesComments$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesComments$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesComments$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesComments$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1WorkspacesComments$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesCommentsToJSON(
  putApiWorkspaceServiceV1WorkspacesComments:
    PutApiWorkspaceServiceV1WorkspacesComments,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesComments$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesComments,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesCommentsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesComments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesComments$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesComments' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesSharing$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1WorkspacesSharing,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  sharedWithEmail: z.string().optional(),
  permissionLevel: z.string().optional(),
  expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesSharing$Outbound = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesSharing$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesSharing$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesSharing
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesSharing$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesSharing$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesSharing$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesSharing$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesSharing$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesSharing$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1WorkspacesSharing$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesSharingToJSON(
  putApiWorkspaceServiceV1WorkspacesSharing:
    PutApiWorkspaceServiceV1WorkspacesSharing,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesSharing$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesSharing,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesSharingFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesSharing,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesSharing$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesSharing' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesSnapshots$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesSnapshots,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    snapshotHash: z.string().optional(),
    content: z.string().optional(),
    authorId: z.string().optional(),
    reason: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesSnapshots$Outbound = {
  id?: string | undefined;
  fileId?: string | undefined;
  snapshotHash?: string | undefined;
  content?: string | undefined;
  authorId?: string | undefined;
  reason?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesSnapshots$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesSnapshots$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesSnapshots
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    snapshotHash: z.string().optional(),
    content: z.string().optional(),
    authorId: z.string().optional(),
    reason: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesSnapshots$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesSnapshots$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesSnapshots$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesSnapshots$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesSnapshots$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesSnapshots$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1WorkspacesSnapshots$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesSnapshotsToJSON(
  putApiWorkspaceServiceV1WorkspacesSnapshots:
    PutApiWorkspaceServiceV1WorkspacesSnapshots,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesSnapshots$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesSnapshots,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesSnapshotsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesSnapshots,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesSnapshots$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesSnapshots' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesFiles$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1WorkspacesFiles,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  size: z.string().optional(),
  s3Key: z.string().optional(),
  s3BucketName: z.string().optional(),
  isDeleted: z.boolean().optional(),
  version: z.number().int().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  embeddings: z.lazy(() =>
    PutApiWorkspaceServiceV1WorkspacesEmbeddings$inboundSchema
  ).optional(),
  versions: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1WorkspacesVersions$inboundSchema),
  ).optional(),
  comments: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1WorkspacesComments$inboundSchema),
  ).optional(),
  sharing: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1WorkspacesSharing$inboundSchema),
  ).optional(),
  snapshots: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1WorkspacesSnapshots$inboundSchema),
  ).optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesFiles$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  size?: string | undefined;
  s3Key?: string | undefined;
  s3BucketName?: string | undefined;
  isDeleted?: boolean | undefined;
  version?: number | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  embeddings?:
    | PutApiWorkspaceServiceV1WorkspacesEmbeddings$Outbound
    | undefined;
  versions?:
    | Array<PutApiWorkspaceServiceV1WorkspacesVersions$Outbound>
    | undefined;
  comments?:
    | Array<PutApiWorkspaceServiceV1WorkspacesComments$Outbound>
    | undefined;
  sharing?:
    | Array<PutApiWorkspaceServiceV1WorkspacesSharing$Outbound>
    | undefined;
  snapshots?:
    | Array<PutApiWorkspaceServiceV1WorkspacesSnapshots$Outbound>
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesFiles$outboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1WorkspacesFiles$Outbound,
  z.ZodTypeDef,
  PutApiWorkspaceServiceV1WorkspacesFiles
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  size: z.string().optional(),
  s3Key: z.string().optional(),
  s3BucketName: z.string().optional(),
  isDeleted: z.boolean().optional(),
  version: z.number().int().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  deletedAt: z.date().transform(v => v.toISOString()).optional(),
  embeddings: z.lazy(() =>
    PutApiWorkspaceServiceV1WorkspacesEmbeddings$outboundSchema
  ).optional(),
  versions: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1WorkspacesVersions$outboundSchema),
  ).optional(),
  comments: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1WorkspacesComments$outboundSchema),
  ).optional(),
  sharing: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1WorkspacesSharing$outboundSchema),
  ).optional(),
  snapshots: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1WorkspacesSnapshots$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesFiles$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesFiles$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesFiles$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesFiles$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesFiles$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesFiles$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1WorkspacesFiles$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesFilesToJSON(
  putApiWorkspaceServiceV1WorkspacesFiles:
    PutApiWorkspaceServiceV1WorkspacesFiles,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesFiles$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesFiles,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesFilesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesFiles,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesFiles$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesFiles' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesFolders$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1WorkspacesFolders,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  s3BucketName: z.string().optional(),
  s3FolderPath: z.string().optional(),
  isDeleted: z.boolean().optional(),
  parentFolderId: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  files: z.array(
    z.lazy(() => PutApiWorkspaceServiceV1WorkspacesFiles$inboundSchema),
  ).optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesFolders$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  isDeleted?: boolean | undefined;
  parentFolderId?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  files?: Array<PutApiWorkspaceServiceV1WorkspacesFiles$Outbound> | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesFolders$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesFolders$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesFolders
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    isDeleted: z.boolean().optional(),
    parentFolderId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    files: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesFiles$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesFolders$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesFolders$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesFolders$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesFolders$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesFolders$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesFolders$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1WorkspacesFolders$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesFoldersToJSON(
  putApiWorkspaceServiceV1WorkspacesFolders:
    PutApiWorkspaceServiceV1WorkspacesFolders,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesFolders$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesFolders,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesFoldersFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesFolders,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesFolders$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesFolders' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesTemplateType$inboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1WorkspacesTemplateType> = z
    .nativeEnum(PutApiWorkspaceServiceV1WorkspacesTemplateType);

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesTemplateType$outboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1WorkspacesTemplateType> =
    PutApiWorkspaceServiceV1WorkspacesTemplateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesTemplateType$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesTemplateType$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesTemplateType$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesTemplateType$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesTemplateType$outboundSchema;
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesVersions$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    version: z.string().optional(),
    baseContent: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    authorId: z.string().optional(),
    changeDescription: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesVersions$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  version?: string | undefined;
  baseContent?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  authorId?: string | undefined;
  changeDescription?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesVersions$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesVersions$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesVersions
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    version: z.string().optional(),
    baseContent: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    authorId: z.string().optional(),
    changeDescription: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesVersions$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesVersions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesVersions$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesVersions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesVersions$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesVersions$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesVersions$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesVersionsToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesVersions:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesVersions,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesVersions$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesWorkspacesVersions,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesVersions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesVersions' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesVariables$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesVariables,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    variableType: z.string().optional(),
    defaultValue: z.string().optional(),
    isRequired: z.boolean().optional(),
    validationRules: z.string().optional(),
    dataSource: z.string().optional(),
    aiExtractionRules: z.string().optional(),
    alternatives: z.array(z.string()).optional(),
    templateId: z.string().optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesVariables$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  variableType?: string | undefined;
  defaultValue?: string | undefined;
  isRequired?: boolean | undefined;
  validationRules?: string | undefined;
  dataSource?: string | undefined;
  aiExtractionRules?: string | undefined;
  alternatives?: Array<string> | undefined;
  templateId?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesVariables$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesVariables$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesVariables
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    variableType: z.string().optional(),
    defaultValue: z.string().optional(),
    isRequired: z.boolean().optional(),
    validationRules: z.string().optional(),
    dataSource: z.string().optional(),
    aiExtractionRules: z.string().optional(),
    alternatives: z.array(z.string()).optional(),
    templateId: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesVariables$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesVariables$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesVariables$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesVariables$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesVariables$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesVariables$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1WorkspacesVariables$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesVariablesToJSON(
  putApiWorkspaceServiceV1WorkspacesVariables:
    PutApiWorkspaceServiceV1WorkspacesVariables,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesVariables$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesVariables,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesVariablesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesVariables,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesVariables$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesVariables' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesStatus$inboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1WorkspacesStatus> = z
    .nativeEnum(PutApiWorkspaceServiceV1WorkspacesStatus);

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesStatus$outboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1WorkspacesStatus> =
    PutApiWorkspaceServiceV1WorkspacesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesStatus$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesStatus$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesStatus$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesStatus$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesStatus$outboundSchema;
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesStatus$inboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1WorkspacesWorkspacesStatus> = z
    .nativeEnum(PutApiWorkspaceServiceV1WorkspacesWorkspacesStatus);

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesStatus$outboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1WorkspacesWorkspacesStatus> =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesStatus$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesStatus$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesStatus$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesStatus$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesStatus$outboundSchema;
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesSignatureBlocks$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesSignatureBlocks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    blockType: z.string().optional(),
    pageNumber: z.number().int().optional(),
    xPosition: z.number().optional(),
    yPosition: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    isRequired: z.boolean().optional(),
    signatureData: z.string().optional(),
    signedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesSignatureBlocks$Outbound = {
  id?: string | undefined;
  requestId?: string | undefined;
  blockType?: string | undefined;
  pageNumber?: number | undefined;
  xPosition?: number | undefined;
  yPosition?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
  isRequired?: boolean | undefined;
  signatureData?: string | undefined;
  signedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesSignatureBlocks$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesSignatureBlocks$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesSignatureBlocks
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    blockType: z.string().optional(),
    pageNumber: z.number().int().optional(),
    xPosition: z.number().optional(),
    yPosition: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    isRequired: z.boolean().optional(),
    signatureData: z.string().optional(),
    signedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesSignatureBlocks$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesSignatureBlocks$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesSignatureBlocks$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesSignatureBlocks$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesSignatureBlocks$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesSignatureBlocks$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesSignatureBlocks$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesSignatureBlocksToJSON(
  putApiWorkspaceServiceV1WorkspacesSignatureBlocks:
    PutApiWorkspaceServiceV1WorkspacesSignatureBlocks,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesSignatureBlocks$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesSignatureBlocks,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesSignatureBlocksFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesSignatureBlocks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesSignatureBlocks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesSignatureBlocks' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkflow$inboundSchema:
  z.ZodType<PutApiWorkspaceServiceV1WorkspacesWorkflow, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      requestId: z.string().optional(),
      signingOrder: z.array(z.string()).optional(),
      currentSigner: z.string().optional(),
      workflowStatus: z.string().optional(),
      parallelSigning: z.boolean().optional(),
      requireAllSignatures: z.boolean().optional(),
      deadline: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      createdAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      updatedAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
    });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkflow$Outbound = {
  id?: string | undefined;
  requestId?: string | undefined;
  signingOrder?: Array<string> | undefined;
  currentSigner?: string | undefined;
  workflowStatus?: string | undefined;
  parallelSigning?: boolean | undefined;
  requireAllSignatures?: boolean | undefined;
  deadline?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkflow$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkflow$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkflow
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    signingOrder: z.array(z.string()).optional(),
    currentSigner: z.string().optional(),
    workflowStatus: z.string().optional(),
    parallelSigning: z.boolean().optional(),
    requireAllSignatures: z.boolean().optional(),
    deadline: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkflow$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkflow$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkflow$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkflow$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkflow$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkflow$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1WorkspacesWorkflow$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkflowToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkflow:
    PutApiWorkspaceServiceV1WorkspacesWorkflow,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkflow$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesWorkflow,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkflowFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkflow,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkflow$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkflow' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesSignatureRequests$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesSignatureRequests,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    status: PutApiWorkspaceServiceV1WorkspacesWorkspacesStatus$inboundSchema
      .default("SIGNATURE_STATUS_UNSPECIFIED"),
    signerEmail: z.string().optional(),
    signerName: z.string().optional(),
    role: z.string().optional(),
    authenticationMethod: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    requiresMfa: z.boolean().optional(),
    signatureType: z.string().optional(),
    reminderSchedule: z.array(z.string()).optional(),
    documentId: z.string().optional(),
    signatureBlocks: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesSignatureBlocks$inboundSchema
      ),
    ).optional(),
    workflow: z.lazy(() =>
      PutApiWorkspaceServiceV1WorkspacesWorkflow$inboundSchema
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesSignatureRequests$Outbound = {
  id?: string | undefined;
  status: string;
  signerEmail?: string | undefined;
  signerName?: string | undefined;
  role?: string | undefined;
  authenticationMethod?: string | undefined;
  expiresAt?: string | undefined;
  requiresMfa?: boolean | undefined;
  signatureType?: string | undefined;
  reminderSchedule?: Array<string> | undefined;
  documentId?: string | undefined;
  signatureBlocks?:
    | Array<PutApiWorkspaceServiceV1WorkspacesSignatureBlocks$Outbound>
    | undefined;
  workflow?: PutApiWorkspaceServiceV1WorkspacesWorkflow$Outbound | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesSignatureRequests$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesSignatureRequests$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesSignatureRequests
  > = z.object({
    id: z.string().optional(),
    status: PutApiWorkspaceServiceV1WorkspacesWorkspacesStatus$outboundSchema
      .default("SIGNATURE_STATUS_UNSPECIFIED"),
    signerEmail: z.string().optional(),
    signerName: z.string().optional(),
    role: z.string().optional(),
    authenticationMethod: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    requiresMfa: z.boolean().optional(),
    signatureType: z.string().optional(),
    reminderSchedule: z.array(z.string()).optional(),
    documentId: z.string().optional(),
    signatureBlocks: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesSignatureBlocks$outboundSchema
      ),
    ).optional(),
    workflow: z.lazy(() =>
      PutApiWorkspaceServiceV1WorkspacesWorkflow$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesSignatureRequests$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesSignatureRequests$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesSignatureRequests$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesSignatureRequests$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesSignatureRequests$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesSignatureRequests$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesSignatureRequests$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesSignatureRequestsToJSON(
  putApiWorkspaceServiceV1WorkspacesSignatureRequests:
    PutApiWorkspaceServiceV1WorkspacesSignatureRequests,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesSignatureRequests$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesSignatureRequests,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesSignatureRequestsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesSignatureRequests,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesSignatureRequests$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesSignatureRequests' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesAiAssistance$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesAiAssistance,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    interactionType: z.string().optional(),
    userQuery: z.string().optional(),
    aiResponse: z.string().optional(),
    context: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesAiAssistance$Outbound = {
  id?: string | undefined;
  documentId?: string | undefined;
  interactionType?: string | undefined;
  userQuery?: string | undefined;
  aiResponse?: string | undefined;
  context?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesAiAssistance$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesAiAssistance$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesAiAssistance
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    interactionType: z.string().optional(),
    userQuery: z.string().optional(),
    aiResponse: z.string().optional(),
    context: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesAiAssistance$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesAiAssistance$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesAiAssistance$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesAiAssistance$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesAiAssistance$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesAiAssistance$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesAiAssistance$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesAiAssistanceToJSON(
  putApiWorkspaceServiceV1WorkspacesAiAssistance:
    PutApiWorkspaceServiceV1WorkspacesAiAssistance,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesAiAssistance$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesAiAssistance,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesAiAssistanceFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesAiAssistance,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesAiAssistance$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesAiAssistance' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesRounds$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1WorkspacesRounds,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  historyId: z.string().optional(),
  roundNumber: z.number().int().optional(),
  proposerId: z.string().optional(),
  proposalContent: z.string().optional(),
  responseContent: z.string().optional(),
  status: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesRounds$Outbound = {
  id?: string | undefined;
  historyId?: string | undefined;
  roundNumber?: number | undefined;
  proposerId?: string | undefined;
  proposalContent?: string | undefined;
  responseContent?: string | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesRounds$outboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1WorkspacesRounds$Outbound,
  z.ZodTypeDef,
  PutApiWorkspaceServiceV1WorkspacesRounds
> = z.object({
  id: z.string().optional(),
  historyId: z.string().optional(),
  roundNumber: z.number().int().optional(),
  proposerId: z.string().optional(),
  proposalContent: z.string().optional(),
  responseContent: z.string().optional(),
  status: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesRounds$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesRounds$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesRounds$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesRounds$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesRounds$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesRounds$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1WorkspacesRounds$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesRoundsToJSON(
  putApiWorkspaceServiceV1WorkspacesRounds:
    PutApiWorkspaceServiceV1WorkspacesRounds,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesRounds$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesRounds,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesRoundsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesRounds,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesRounds$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesRounds' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesNegotiation$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesNegotiation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    rounds: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesRounds$inboundSchema),
    ).optional(),
    currentStatus: z.string().optional(),
    startedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesNegotiation$Outbound = {
  id?: string | undefined;
  documentId?: string | undefined;
  rounds?: Array<PutApiWorkspaceServiceV1WorkspacesRounds$Outbound> | undefined;
  currentStatus?: string | undefined;
  startedAt?: string | undefined;
  lastUpdated?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesNegotiation$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesNegotiation$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesNegotiation
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    rounds: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesRounds$outboundSchema),
    ).optional(),
    currentStatus: z.string().optional(),
    startedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesNegotiation$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesNegotiation$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesNegotiation$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesNegotiation$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesNegotiation$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesNegotiation$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1WorkspacesNegotiation$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesNegotiationToJSON(
  putApiWorkspaceServiceV1WorkspacesNegotiation:
    PutApiWorkspaceServiceV1WorkspacesNegotiation,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesNegotiation$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesNegotiation,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesNegotiationFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesNegotiation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesNegotiation$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesNegotiation' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesMerges$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1WorkspacesMerges,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  branchId: z.string().optional(),
  sourceBranch: z.string().optional(),
  targetBranch: z.string().optional(),
  mergeStatus: z.string().optional(),
  mergeStrategy: z.string().optional(),
  conflicts: z.array(z.string()).optional(),
  mergerId: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  completedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesMerges$Outbound = {
  id?: string | undefined;
  branchId?: string | undefined;
  sourceBranch?: string | undefined;
  targetBranch?: string | undefined;
  mergeStatus?: string | undefined;
  mergeStrategy?: string | undefined;
  conflicts?: Array<string> | undefined;
  mergerId?: string | undefined;
  createdAt?: string | undefined;
  completedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesMerges$outboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1WorkspacesMerges$Outbound,
  z.ZodTypeDef,
  PutApiWorkspaceServiceV1WorkspacesMerges
> = z.object({
  id: z.string().optional(),
  branchId: z.string().optional(),
  sourceBranch: z.string().optional(),
  targetBranch: z.string().optional(),
  mergeStatus: z.string().optional(),
  mergeStrategy: z.string().optional(),
  conflicts: z.array(z.string()).optional(),
  mergerId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  completedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesMerges$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesMerges$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesMerges$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesMerges$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesMerges$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesMerges$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1WorkspacesMerges$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesMergesToJSON(
  putApiWorkspaceServiceV1WorkspacesMerges:
    PutApiWorkspaceServiceV1WorkspacesMerges,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesMerges$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesMerges,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesMergesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesMerges,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesMerges$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesMerges' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesPolicy$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1WorkspacesPolicy,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  branchId: z.string().optional(),
  requiredApprovers: z.array(z.string()).optional(),
  minimumApprovals: z.number().int().optional(),
  enforceLinearHistory: z.boolean().optional(),
  allowForcePush: z.boolean().optional(),
  protectedPaths: z.array(z.string()).optional(),
  mergeRules: z.record(z.string()).optional(),
  automatedChecks: z.array(z.string()).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesPolicy$Outbound = {
  id?: string | undefined;
  branchId?: string | undefined;
  requiredApprovers?: Array<string> | undefined;
  minimumApprovals?: number | undefined;
  enforceLinearHistory?: boolean | undefined;
  allowForcePush?: boolean | undefined;
  protectedPaths?: Array<string> | undefined;
  mergeRules?: { [k: string]: string } | undefined;
  automatedChecks?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesPolicy$outboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1WorkspacesPolicy$Outbound,
  z.ZodTypeDef,
  PutApiWorkspaceServiceV1WorkspacesPolicy
> = z.object({
  id: z.string().optional(),
  branchId: z.string().optional(),
  requiredApprovers: z.array(z.string()).optional(),
  minimumApprovals: z.number().int().optional(),
  enforceLinearHistory: z.boolean().optional(),
  allowForcePush: z.boolean().optional(),
  protectedPaths: z.array(z.string()).optional(),
  mergeRules: z.record(z.string()).optional(),
  automatedChecks: z.array(z.string()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesPolicy$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesPolicy$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesPolicy$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesPolicy$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesPolicy$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesPolicy$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1WorkspacesPolicy$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesPolicyToJSON(
  putApiWorkspaceServiceV1WorkspacesPolicy:
    PutApiWorkspaceServiceV1WorkspacesPolicy,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesPolicy$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesPolicy,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesPolicyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesPolicy,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesPolicy$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesPolicy' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesMergeRequests$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesMergeRequests,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sourceBranchId: z.string().optional(),
    targetBranchId: z.string().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    authorId: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    status: z.string().optional(),
    labels: z.array(z.string()).optional(),
    hasConflicts: z.boolean().optional(),
    automatedCheckResults: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesMergeRequests$Outbound = {
  id?: string | undefined;
  sourceBranchId?: string | undefined;
  targetBranchId?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  authorId?: string | undefined;
  reviewers?: Array<string> | undefined;
  status?: string | undefined;
  labels?: Array<string> | undefined;
  hasConflicts?: boolean | undefined;
  automatedCheckResults?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesMergeRequests$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesMergeRequests$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesMergeRequests
  > = z.object({
    id: z.string().optional(),
    sourceBranchId: z.string().optional(),
    targetBranchId: z.string().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    authorId: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    status: z.string().optional(),
    labels: z.array(z.string()).optional(),
    hasConflicts: z.boolean().optional(),
    automatedCheckResults: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesMergeRequests$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesMergeRequests$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesMergeRequests$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesMergeRequests$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesMergeRequests$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesMergeRequests$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesMergeRequests$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesMergeRequestsToJSON(
  putApiWorkspaceServiceV1WorkspacesMergeRequests:
    PutApiWorkspaceServiceV1WorkspacesMergeRequests,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesMergeRequests$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesMergeRequests,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesMergeRequestsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesMergeRequests,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesMergeRequests$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesMergeRequests' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesBranches$inboundSchema:
  z.ZodType<PutApiWorkspaceServiceV1WorkspacesBranches, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      name: z.string().optional(),
      baseVersionHash: z.string().optional(),
      currentHeadHash: z.string().optional(),
      purpose: z.string().optional(),
      status: z.string().optional(),
      reviewers: z.array(z.string()).optional(),
      branchMetadata: z.record(z.string()).optional(),
      isLocked: z.boolean().optional(),
      lastUpdated: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      merges: z.array(
        z.lazy(() => PutApiWorkspaceServiceV1WorkspacesMerges$inboundSchema),
      ).optional(),
      policy: z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesPolicy$inboundSchema
      ).optional(),
      mergeRequests: z.array(
        z.lazy(() =>
          PutApiWorkspaceServiceV1WorkspacesMergeRequests$inboundSchema
        ),
      ).optional(),
    });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesBranches$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  baseVersionHash?: string | undefined;
  currentHeadHash?: string | undefined;
  purpose?: string | undefined;
  status?: string | undefined;
  reviewers?: Array<string> | undefined;
  branchMetadata?: { [k: string]: string } | undefined;
  isLocked?: boolean | undefined;
  lastUpdated?: string | undefined;
  merges?: Array<PutApiWorkspaceServiceV1WorkspacesMerges$Outbound> | undefined;
  policy?: PutApiWorkspaceServiceV1WorkspacesPolicy$Outbound | undefined;
  mergeRequests?:
    | Array<PutApiWorkspaceServiceV1WorkspacesMergeRequests$Outbound>
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesBranches$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesBranches$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesBranches
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    baseVersionHash: z.string().optional(),
    currentHeadHash: z.string().optional(),
    purpose: z.string().optional(),
    status: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    branchMetadata: z.record(z.string()).optional(),
    isLocked: z.boolean().optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
    merges: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesMerges$outboundSchema),
    ).optional(),
    policy: z.lazy(() =>
      PutApiWorkspaceServiceV1WorkspacesPolicy$outboundSchema
    ).optional(),
    mergeRequests: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesMergeRequests$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesBranches$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesBranches$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesBranches$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesBranches$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesBranches$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesBranches$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1WorkspacesBranches$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesBranchesToJSON(
  putApiWorkspaceServiceV1WorkspacesBranches:
    PutApiWorkspaceServiceV1WorkspacesBranches,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesBranches$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesBranches,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesBranchesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesBranches,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesBranches$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesBranches' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesChanges$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1WorkspacesChanges,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  versionId: z.string().optional(),
  changeType: z.string().optional(),
  contentBefore: z.string().optional(),
  contentAfter: z.string().optional(),
  metadata: z.record(z.string()).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesChanges$Outbound = {
  id?: string | undefined;
  versionId?: string | undefined;
  changeType?: string | undefined;
  contentBefore?: string | undefined;
  contentAfter?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesChanges$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesChanges$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesChanges
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    changeType: z.string().optional(),
    contentBefore: z.string().optional(),
    contentAfter: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesChanges$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesChanges$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesChanges$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesChanges$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesChanges$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesChanges$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1WorkspacesChanges$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesChangesToJSON(
  putApiWorkspaceServiceV1WorkspacesChanges:
    PutApiWorkspaceServiceV1WorkspacesChanges,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesChanges$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesChanges,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesChangesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesChanges,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesChanges$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesChanges' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesSummaries$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesSummaries,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    summaryType: z.string().optional(),
    content: z.string().optional(),
    targetAudience: z.string().optional(),
    keyPoints: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesSummaries$Outbound = {
  id?: string | undefined;
  versionId?: string | undefined;
  summaryType?: string | undefined;
  content?: string | undefined;
  targetAudience?: string | undefined;
  keyPoints?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesSummaries$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesSummaries$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesSummaries
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    summaryType: z.string().optional(),
    content: z.string().optional(),
    targetAudience: z.string().optional(),
    keyPoints: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesSummaries$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesSummaries$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesSummaries$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesSummaries$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesSummaries$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesSummaries$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1WorkspacesSummaries$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesSummariesToJSON(
  putApiWorkspaceServiceV1WorkspacesSummaries:
    PutApiWorkspaceServiceV1WorkspacesSummaries,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesSummaries$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesSummaries,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesSummariesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesSummaries,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesSummaries$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesSummaries' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestVersions$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionHash: z.string().optional(),
    parentHash: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    branchName: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    isApproved: z.boolean().optional(),
    approvalChain: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    branches: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesBranches$inboundSchema),
    ).optional(),
    changes: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesChanges$inboundSchema),
    ).optional(),
    summaries: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesSummaries$inboundSchema),
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestVersions$Outbound =
  {
    id?: string | undefined;
    versionHash?: string | undefined;
    parentHash?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    branchName?: string | undefined;
    metadata?: { [k: string]: string } | undefined;
    tags?: Array<string> | undefined;
    isApproved?: boolean | undefined;
    approvalChain?: string | undefined;
    createdAt?: string | undefined;
    branches?:
      | Array<PutApiWorkspaceServiceV1WorkspacesBranches$Outbound>
      | undefined;
    changes?:
      | Array<PutApiWorkspaceServiceV1WorkspacesChanges$Outbound>
      | undefined;
    summaries?:
      | Array<PutApiWorkspaceServiceV1WorkspacesSummaries$Outbound>
      | undefined;
  };

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestVersions$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestVersions$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestVersions
  > = z.object({
    id: z.string().optional(),
    versionHash: z.string().optional(),
    parentHash: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    branchName: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    isApproved: z.boolean().optional(),
    approvalChain: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    branches: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesBranches$outboundSchema),
    ).optional(),
    changes: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesChanges$outboundSchema),
    ).optional(),
    summaries: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesSummaries$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestVersions$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestVersions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestVersions$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestVersions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestVersions$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestVersions$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestVersions$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesRequestVersionsToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesRequestVersions:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestVersions,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestVersions$outboundSchema
      .parse(putApiWorkspaceServiceV1WorkspacesWorkspacesRequestVersions),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesRequestVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestVersions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestVersions' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesInstances$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesInstances,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    status: PutApiWorkspaceServiceV1WorkspacesStatus$inboundSchema.default(
      "DOCUMENT_STATUS_UNSPECIFIED",
    ),
    fieldValues: z.record(z.string()).optional(),
    signers: z.array(z.string()).optional(),
    language: z.string().optional(),
    isCompleted: z.boolean().optional(),
    dueDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    generatedContent: z.string().optional(),
    attachments: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    signatureRequests: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesSignatureRequests$inboundSchema
      ),
    ).optional(),
    aiAssistance: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesAiAssistance$inboundSchema
      ),
    ).optional(),
    negotiation: z.lazy(() =>
      PutApiWorkspaceServiceV1WorkspacesNegotiation$inboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestVersions$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesInstances$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  status: string;
  fieldValues?: { [k: string]: string } | undefined;
  signers?: Array<string> | undefined;
  language?: string | undefined;
  isCompleted?: boolean | undefined;
  dueDate?: string | undefined;
  generatedContent?: string | undefined;
  attachments?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  signatureRequests?:
    | Array<PutApiWorkspaceServiceV1WorkspacesSignatureRequests$Outbound>
    | undefined;
  aiAssistance?:
    | Array<PutApiWorkspaceServiceV1WorkspacesAiAssistance$Outbound>
    | undefined;
  negotiation?:
    | PutApiWorkspaceServiceV1WorkspacesNegotiation$Outbound
    | undefined;
  versions?:
    | Array<
      PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestVersions$Outbound
    >
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesInstances$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesInstances$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesInstances
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    status: PutApiWorkspaceServiceV1WorkspacesStatus$outboundSchema.default(
      "DOCUMENT_STATUS_UNSPECIFIED",
    ),
    fieldValues: z.record(z.string()).optional(),
    signers: z.array(z.string()).optional(),
    language: z.string().optional(),
    isCompleted: z.boolean().optional(),
    dueDate: z.date().transform(v => v.toISOString()).optional(),
    generatedContent: z.string().optional(),
    attachments: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    signatureRequests: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesSignatureRequests$outboundSchema
      ),
    ).optional(),
    aiAssistance: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesAiAssistance$outboundSchema
      ),
    ).optional(),
    negotiation: z.lazy(() =>
      PutApiWorkspaceServiceV1WorkspacesNegotiation$outboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestVersions$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesInstances$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesInstances$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesInstances$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesInstances$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesInstances$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesInstances$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1WorkspacesInstances$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesInstancesToJSON(
  putApiWorkspaceServiceV1WorkspacesInstances:
    PutApiWorkspaceServiceV1WorkspacesInstances,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesInstances$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesInstances,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesInstancesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesInstances,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesInstances$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesInstances' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesExplanations$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesExplanations,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    sectionIdentifier: z.string().optional(),
    explanationText: z.string().optional(),
    complexityLevel: z.string().optional(),
    relatedTerms: z.array(z.string()).optional(),
    legalReferences: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesExplanations$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  sectionIdentifier?: string | undefined;
  explanationText?: string | undefined;
  complexityLevel?: string | undefined;
  relatedTerms?: Array<string> | undefined;
  legalReferences?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesExplanations$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesExplanations$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesExplanations
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    sectionIdentifier: z.string().optional(),
    explanationText: z.string().optional(),
    complexityLevel: z.string().optional(),
    relatedTerms: z.array(z.string()).optional(),
    legalReferences: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesExplanations$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesExplanations$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesExplanations$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesExplanations$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesExplanations$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesExplanations$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesExplanations$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesExplanationsToJSON(
  putApiWorkspaceServiceV1WorkspacesExplanations:
    PutApiWorkspaceServiceV1WorkspacesExplanations,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesExplanations$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesExplanations,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesExplanationsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesExplanations,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesExplanations$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesExplanations' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesRiskAssessments$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesRiskAssessments,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    riskType: z.string().optional(),
    riskScore: z.number().optional(),
    assessmentDetails: z.string().optional(),
    mitigationSuggestions: z.array(z.string()).optional(),
    assessorId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesRiskAssessments$Outbound = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  riskType?: string | undefined;
  riskScore?: number | undefined;
  assessmentDetails?: string | undefined;
  mitigationSuggestions?: Array<string> | undefined;
  assessorId?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesRiskAssessments$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesRiskAssessments$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesRiskAssessments
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    riskType: z.string().optional(),
    riskScore: z.number().optional(),
    assessmentDetails: z.string().optional(),
    mitigationSuggestions: z.array(z.string()).optional(),
    assessorId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesRiskAssessments$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesRiskAssessments$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesRiskAssessments$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesRiskAssessments$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesRiskAssessments$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesRiskAssessments$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesRiskAssessments$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesRiskAssessmentsToJSON(
  putApiWorkspaceServiceV1WorkspacesRiskAssessments:
    PutApiWorkspaceServiceV1WorkspacesRiskAssessments,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesRiskAssessments$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesRiskAssessments,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesRiskAssessmentsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesRiskAssessments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesRiskAssessments$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesRiskAssessments' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesComplianceChecks$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesComplianceChecks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    complianceStandard: z.string().optional(),
    checkResult: z.string().optional(),
    violations: z.array(z.string()).optional(),
    remediationSteps: z.string().optional(),
    checkDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesComplianceChecks$Outbound = {
  id?: string | undefined;
  intelligenceId?: string | undefined;
  complianceStandard?: string | undefined;
  checkResult?: string | undefined;
  violations?: Array<string> | undefined;
  remediationSteps?: string | undefined;
  checkDate?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesComplianceChecks$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesComplianceChecks$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesComplianceChecks
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    complianceStandard: z.string().optional(),
    checkResult: z.string().optional(),
    violations: z.array(z.string()).optional(),
    remediationSteps: z.string().optional(),
    checkDate: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesComplianceChecks$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesComplianceChecks$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesComplianceChecks$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesComplianceChecks$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesComplianceChecks$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesComplianceChecks$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesComplianceChecks$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesComplianceChecksToJSON(
  putApiWorkspaceServiceV1WorkspacesComplianceChecks:
    PutApiWorkspaceServiceV1WorkspacesComplianceChecks,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesComplianceChecks$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesComplianceChecks,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesComplianceChecksFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesComplianceChecks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesComplianceChecks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesComplianceChecks' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesIntelligence$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesIntelligence,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    contractType: z.string().optional(),
    riskScores: z.record(z.number()).optional(),
    detectedClauses: z.record(z.string()).optional(),
    keyObligations: z.array(z.string()).optional(),
    complianceScores: z.record(z.number()).optional(),
    jurisdiction: z.string().optional(),
    governingLaws: z.array(z.string()).optional(),
    semanticAnalysis: z.record(z.string()).optional(),
    analysisDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    riskAssessments: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesRiskAssessments$inboundSchema
      ),
    ).optional(),
    complianceChecks: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesComplianceChecks$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesIntelligence$Outbound = {
  id?: string | undefined;
  contractType?: string | undefined;
  riskScores?: { [k: string]: number } | undefined;
  detectedClauses?: { [k: string]: string } | undefined;
  keyObligations?: Array<string> | undefined;
  complianceScores?: { [k: string]: number } | undefined;
  jurisdiction?: string | undefined;
  governingLaws?: Array<string> | undefined;
  semanticAnalysis?: { [k: string]: string } | undefined;
  analysisDate?: string | undefined;
  riskAssessments?:
    | Array<PutApiWorkspaceServiceV1WorkspacesRiskAssessments$Outbound>
    | undefined;
  complianceChecks?:
    | Array<PutApiWorkspaceServiceV1WorkspacesComplianceChecks$Outbound>
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesIntelligence$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesIntelligence$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesIntelligence
  > = z.object({
    id: z.string().optional(),
    contractType: z.string().optional(),
    riskScores: z.record(z.number()).optional(),
    detectedClauses: z.record(z.string()).optional(),
    keyObligations: z.array(z.string()).optional(),
    complianceScores: z.record(z.number()).optional(),
    jurisdiction: z.string().optional(),
    governingLaws: z.array(z.string()).optional(),
    semanticAnalysis: z.record(z.string()).optional(),
    analysisDate: z.date().transform(v => v.toISOString()).optional(),
    riskAssessments: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesRiskAssessments$outboundSchema
      ),
    ).optional(),
    complianceChecks: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesComplianceChecks$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesIntelligence$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesIntelligence$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesIntelligence$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesIntelligence$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesIntelligence$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesIntelligence$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesIntelligence$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesIntelligenceToJSON(
  putApiWorkspaceServiceV1WorkspacesIntelligence:
    PutApiWorkspaceServiceV1WorkspacesIntelligence,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesIntelligence$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesIntelligence,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesIntelligenceFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesIntelligence,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesIntelligence$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesIntelligence' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesTemplates$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesTemplates,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    industryType: z.string().optional(),
    documentType: z.string().optional(),
    baseContent: z.string().optional(),
    isAdaptive: z.boolean().optional(),
    metadata: z.record(z.string()).optional(),
    supportedLanguages: z.array(z.string()).optional(),
    requiredDataFields: z.array(z.string()).optional(),
    version: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    templateType: PutApiWorkspaceServiceV1WorkspacesTemplateType$inboundSchema
      .default("TEMPLATE_TYPE_UNSPECIFIED"),
    content: z.string().optional(),
    detectedVariables: z.array(z.string()).optional(),
    variableMappings: z.record(z.string()).optional(),
    isContextAware: z.boolean().optional(),
    supportedContexts: z.array(z.string()).optional(),
    formattingRules: z.record(z.string()).optional(),
    conditionalSections: z.array(z.string()).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesVersions$inboundSchema
      ),
    ).optional(),
    variables: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesVariables$inboundSchema),
    ).optional(),
    instances: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesInstances$inboundSchema),
    ).optional(),
    explanations: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesExplanations$inboundSchema
      ),
    ).optional(),
    intelligence: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesIntelligence$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesTemplates$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  industryType?: string | undefined;
  documentType?: string | undefined;
  baseContent?: string | undefined;
  isAdaptive?: boolean | undefined;
  metadata?: { [k: string]: string } | undefined;
  supportedLanguages?: Array<string> | undefined;
  requiredDataFields?: Array<string> | undefined;
  version?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  templateType: string;
  content?: string | undefined;
  detectedVariables?: Array<string> | undefined;
  variableMappings?: { [k: string]: string } | undefined;
  isContextAware?: boolean | undefined;
  supportedContexts?: Array<string> | undefined;
  formattingRules?: { [k: string]: string } | undefined;
  conditionalSections?: Array<string> | undefined;
  versions?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesVersions$Outbound>
    | undefined;
  variables?:
    | Array<PutApiWorkspaceServiceV1WorkspacesVariables$Outbound>
    | undefined;
  instances?:
    | Array<PutApiWorkspaceServiceV1WorkspacesInstances$Outbound>
    | undefined;
  explanations?:
    | Array<PutApiWorkspaceServiceV1WorkspacesExplanations$Outbound>
    | undefined;
  intelligence?:
    | Array<PutApiWorkspaceServiceV1WorkspacesIntelligence$Outbound>
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesTemplates$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesTemplates$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesTemplates
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    industryType: z.string().optional(),
    documentType: z.string().optional(),
    baseContent: z.string().optional(),
    isAdaptive: z.boolean().optional(),
    metadata: z.record(z.string()).optional(),
    supportedLanguages: z.array(z.string()).optional(),
    requiredDataFields: z.array(z.string()).optional(),
    version: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    templateType: PutApiWorkspaceServiceV1WorkspacesTemplateType$outboundSchema
      .default("TEMPLATE_TYPE_UNSPECIFIED"),
    content: z.string().optional(),
    detectedVariables: z.array(z.string()).optional(),
    variableMappings: z.record(z.string()).optional(),
    isContextAware: z.boolean().optional(),
    supportedContexts: z.array(z.string()).optional(),
    formattingRules: z.record(z.string()).optional(),
    conditionalSections: z.array(z.string()).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesVersions$outboundSchema
      ),
    ).optional(),
    variables: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesVariables$outboundSchema),
    ).optional(),
    instances: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesInstances$outboundSchema),
    ).optional(),
    explanations: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesExplanations$outboundSchema
      ),
    ).optional(),
    intelligence: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesIntelligence$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesTemplates$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesTemplates$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesTemplates$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesTemplates$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesTemplates$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesTemplates$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1WorkspacesTemplates$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesTemplatesToJSON(
  putApiWorkspaceServiceV1WorkspacesTemplates:
    PutApiWorkspaceServiceV1WorkspacesTemplates,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesTemplates$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesTemplates,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesTemplatesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesTemplates,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesTemplates$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesTemplates' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesSharing$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSharing,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesSharing$Outbound = {
  id?: string | undefined;
  sharedWithEmail?: string | undefined;
  permissionLevel?: string | undefined;
  expiresAt?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesSharing$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSharing$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSharing
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesSharing$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesSharing$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSharing$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesSharing$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSharing$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesSharing$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSharing$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesSharingToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesSharing:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSharing,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSharing$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesWorkspacesSharing,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesSharingFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesSharing,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesSharing$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesSharing' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesActivities$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesActivities,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    activityType: z.string().optional(),
    userId: z.string().optional(),
    description: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesActivities$Outbound = {
  id?: string | undefined;
  activityType?: string | undefined;
  userId?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesActivities$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesActivities$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesActivities
  > = z.object({
    id: z.string().optional(),
    activityType: z.string().optional(),
    userId: z.string().optional(),
    description: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesActivities$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesActivities$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesActivities$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesActivities$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesActivities$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesActivities$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1WorkspacesActivities$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesActivitiesToJSON(
  putApiWorkspaceServiceV1WorkspacesActivities:
    PutApiWorkspaceServiceV1WorkspacesActivities,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesActivities$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesActivities,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesActivitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesActivities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesActivities$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesActivities' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesCompliance$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesCompliance,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    complianceType: z.string().optional(),
    status: z.string().optional(),
    certificationId: z.string().optional(),
    validUntil: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesCompliance$Outbound = {
  id?: string | undefined;
  complianceType?: string | undefined;
  status?: string | undefined;
  certificationId?: string | undefined;
  validUntil?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesCompliance$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesCompliance$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesCompliance
  > = z.object({
    id: z.string().optional(),
    complianceType: z.string().optional(),
    status: z.string().optional(),
    certificationId: z.string().optional(),
    validUntil: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesCompliance$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesCompliance$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesCompliance$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesCompliance$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesCompliance$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesCompliance$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1WorkspacesCompliance$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesComplianceToJSON(
  putApiWorkspaceServiceV1WorkspacesCompliance:
    PutApiWorkspaceServiceV1WorkspacesCompliance,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesCompliance$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesCompliance,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesComplianceFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesCompliance,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesCompliance$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesCompliance' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesCategory$inboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1WorkspacesCategory> = z
    .nativeEnum(PutApiWorkspaceServiceV1WorkspacesCategory);

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesCategory$outboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1WorkspacesCategory> =
    PutApiWorkspaceServiceV1WorkspacesCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesCategory$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesCategory$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesCategory$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesCategory$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesCategory$outboundSchema;
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesPricingModel$inboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1WorkspacesPricingModel> = z
    .nativeEnum(PutApiWorkspaceServiceV1WorkspacesPricingModel);

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesPricingModel$outboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1WorkspacesPricingModel> =
    PutApiWorkspaceServiceV1WorkspacesPricingModel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesPricingModel$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesPricingModel$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesPricingModel$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesPricingModel$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesPricingModel$outboundSchema;
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestRequestBodyVersions$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestRequestBodyVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    versionNumber: z.string().optional(),
    changelog: z.string().optional(),
    requirements: z.record(z.string()).optional(),
    isPublic: z.boolean().optional(),
    releaseDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestRequestBodyVersions$Outbound =
  {
    id?: string | undefined;
    appId?: string | undefined;
    versionNumber?: string | undefined;
    changelog?: string | undefined;
    requirements?: { [k: string]: string } | undefined;
    isPublic?: boolean | undefined;
    releaseDate?: string | undefined;
  };

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestRequestBodyVersions$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestRequestBodyVersions$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestRequestBodyVersions
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    versionNumber: z.string().optional(),
    changelog: z.string().optional(),
    requirements: z.record(z.string()).optional(),
    isPublic: z.boolean().optional(),
    releaseDate: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestRequestBodyVersions$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestRequestBodyVersions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestRequestBodyVersions$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestRequestBodyVersions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestRequestBodyVersions$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestRequestBodyVersions$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestRequestBodyVersions$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesRequestRequestBodyVersionsToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesRequestRequestBodyVersions:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestRequestBodyVersions,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestRequestBodyVersions$outboundSchema
      .parse(
        putApiWorkspaceServiceV1WorkspacesWorkspacesRequestRequestBodyVersions,
      ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesRequestRequestBodyVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestRequestBodyVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestRequestBodyVersions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestRequestBodyVersions' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesInstallations$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesInstallations,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    workspaceId: z.string().optional(),
    versionInstalled: z.string().optional(),
    configuration: z.record(z.string()).optional(),
    installationStatus: z.string().optional(),
    installedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    lastUsed: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesInstallations$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  workspaceId?: string | undefined;
  versionInstalled?: string | undefined;
  configuration?: { [k: string]: string } | undefined;
  installationStatus?: string | undefined;
  installedAt?: string | undefined;
  lastUsed?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesInstallations$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesInstallations$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesInstallations
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    workspaceId: z.string().optional(),
    versionInstalled: z.string().optional(),
    configuration: z.record(z.string()).optional(),
    installationStatus: z.string().optional(),
    installedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUsed: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesInstallations$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesInstallations$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesInstallations$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesInstallations$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesInstallations$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesInstallations$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesInstallations$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesInstallationsToJSON(
  putApiWorkspaceServiceV1WorkspacesInstallations:
    PutApiWorkspaceServiceV1WorkspacesInstallations,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesInstallations$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesInstallations,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesInstallationsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesInstallations,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesInstallations$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesInstallations' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesAnalytics$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesAnalytics,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    metricName: z.string().optional(),
    metricValue: z.number().optional(),
    dimensions: z.record(z.string()).optional(),
    recordedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesAnalytics$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  metricName?: string | undefined;
  metricValue?: number | undefined;
  dimensions?: { [k: string]: string } | undefined;
  recordedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesAnalytics$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesAnalytics$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesAnalytics
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    metricName: z.string().optional(),
    metricValue: z.number().optional(),
    dimensions: z.record(z.string()).optional(),
    recordedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesAnalytics$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesAnalytics$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesAnalytics$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesAnalytics$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesAnalytics$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesAnalytics$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1WorkspacesAnalytics$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesAnalyticsToJSON(
  putApiWorkspaceServiceV1WorkspacesAnalytics:
    PutApiWorkspaceServiceV1WorkspacesAnalytics,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesAnalytics$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesAnalytics,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesAnalytics,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesAnalytics$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesAnalytics' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesReviews$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1WorkspacesReviews,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  appId: z.string().optional(),
  reviewerId: z.string().optional(),
  rating: z.number().optional(),
  reviewText: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesReviews$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  reviewerId?: string | undefined;
  rating?: number | undefined;
  reviewText?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesReviews$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesReviews$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesReviews
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    reviewerId: z.string().optional(),
    rating: z.number().optional(),
    reviewText: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesReviews$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesReviews$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesReviews$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesReviews$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesReviews$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesReviews$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1WorkspacesReviews$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesReviewsToJSON(
  putApiWorkspaceServiceV1WorkspacesReviews:
    PutApiWorkspaceServiceV1WorkspacesReviews,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesReviews$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesReviews,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesReviewsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesReviews,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesReviews$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesReviews' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesInfo$inboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1WorkspacesInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  appId: z.string().optional(),
  supportedLanguages: z.array(z.string()).optional(),
  sdkFeatures: z.array(z.string()).optional(),
  testCoverage: z.record(z.number()).optional(),
  securityScans: z.array(z.string()).optional(),
  performanceMetrics: z.record(z.string()).optional(),
  developmentStatus: z.string().optional(),
  knownIssues: z.array(z.string()).optional(),
  roadmapUrl: z.string().optional(),
  lastSecurityAudit: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesInfo$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  supportedLanguages?: Array<string> | undefined;
  sdkFeatures?: Array<string> | undefined;
  testCoverage?: { [k: string]: number } | undefined;
  securityScans?: Array<string> | undefined;
  performanceMetrics?: { [k: string]: string } | undefined;
  developmentStatus?: string | undefined;
  knownIssues?: Array<string> | undefined;
  roadmapUrl?: string | undefined;
  lastSecurityAudit?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesInfo$outboundSchema: z.ZodType<
  PutApiWorkspaceServiceV1WorkspacesInfo$Outbound,
  z.ZodTypeDef,
  PutApiWorkspaceServiceV1WorkspacesInfo
> = z.object({
  id: z.string().optional(),
  appId: z.string().optional(),
  supportedLanguages: z.array(z.string()).optional(),
  sdkFeatures: z.array(z.string()).optional(),
  testCoverage: z.record(z.number()).optional(),
  securityScans: z.array(z.string()).optional(),
  performanceMetrics: z.record(z.string()).optional(),
  developmentStatus: z.string().optional(),
  knownIssues: z.array(z.string()).optional(),
  roadmapUrl: z.string().optional(),
  lastSecurityAudit: z.date().transform(v => v.toISOString()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesInfo$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesInfo$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesInfo$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesInfo$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesInfo$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesInfo$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1WorkspacesInfo$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesInfoToJSON(
  putApiWorkspaceServiceV1WorkspacesInfo:
    PutApiWorkspaceServiceV1WorkspacesInfo,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesInfo$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesInfo,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesInfoFromJSON(
  jsonString: string,
): SafeParseResult<PutApiWorkspaceServiceV1WorkspacesInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesInfo' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWebhooks$inboundSchema:
  z.ZodType<PutApiWorkspaceServiceV1WorkspacesWebhooks, z.ZodTypeDef, unknown> =
    z.object({
      id: z.string().optional(),
      appId: z.string().optional(),
      url: z.string().optional(),
      subscribedEvents: z.array(z.string()).optional(),
      secretKey: z.string().optional(),
      retryCount: z.number().int().optional(),
      timeoutSeconds: z.number().int().optional(),
      isActive: z.boolean().optional(),
      headers: z.record(z.string()).optional(),
      lastTriggered: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
      createdAt: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ).optional(),
    });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWebhooks$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  url?: string | undefined;
  subscribedEvents?: Array<string> | undefined;
  secretKey?: string | undefined;
  retryCount?: number | undefined;
  timeoutSeconds?: number | undefined;
  isActive?: boolean | undefined;
  headers?: { [k: string]: string } | undefined;
  lastTriggered?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWebhooks$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWebhooks$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWebhooks
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    url: z.string().optional(),
    subscribedEvents: z.array(z.string()).optional(),
    secretKey: z.string().optional(),
    retryCount: z.number().int().optional(),
    timeoutSeconds: z.number().int().optional(),
    isActive: z.boolean().optional(),
    headers: z.record(z.string()).optional(),
    lastTriggered: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWebhooks$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWebhooks$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWebhooks$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWebhooks$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWebhooks$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWebhooks$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1WorkspacesWebhooks$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWebhooksToJSON(
  putApiWorkspaceServiceV1WorkspacesWebhooks:
    PutApiWorkspaceServiceV1WorkspacesWebhooks,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWebhooks$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesWebhooks,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWebhooksFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWebhooks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWebhooks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWebhooks' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesPermissions$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesPermissions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    scope: z.string().optional(),
    description: z.string().optional(),
    isRequired: z.boolean().optional(),
    accessLevels: z.array(z.string()).optional(),
    constraints: z.record(z.string()).optional(),
    requiresApproval: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesPermissions$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  scope?: string | undefined;
  description?: string | undefined;
  isRequired?: boolean | undefined;
  accessLevels?: Array<string> | undefined;
  constraints?: { [k: string]: string } | undefined;
  requiresApproval?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesPermissions$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesPermissions$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesPermissions
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    scope: z.string().optional(),
    description: z.string().optional(),
    isRequired: z.boolean().optional(),
    accessLevels: z.array(z.string()).optional(),
    constraints: z.record(z.string()).optional(),
    requiresApproval: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesPermissions$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesPermissions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesPermissions$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesPermissions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesPermissions$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesPermissions$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1WorkspacesPermissions$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesPermissionsToJSON(
  putApiWorkspaceServiceV1WorkspacesPermissions:
    PutApiWorkspaceServiceV1WorkspacesPermissions,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesPermissions$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesPermissions,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesPermissionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesPermissions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesPermissions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesPermissions' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesInstalledApps$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesInstalledApps,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    developerId: z.string().optional(),
    category: PutApiWorkspaceServiceV1WorkspacesCategory$inboundSchema.default(
      "APP_CATEGORY_UNSPECIFIED",
    ),
    supportedContractTypes: z.array(z.string()).optional(),
    features: z.array(z.string()).optional(),
    pricingModel: PutApiWorkspaceServiceV1WorkspacesPricingModel$inboundSchema
      .default("PRICING_MODEL_UNSPECIFIED"),
    pricingTiers: z.record(z.number()).optional(),
    supportedIntegrations: z.array(z.string()).optional(),
    isVerified: z.boolean().optional(),
    rating: z.number().optional(),
    installationCount: z.number().int().optional(),
    requiredPermissions: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    documentationUrl: z.string().optional(),
    supportEmail: z.string().optional(),
    screenshots: z.array(z.string()).optional(),
    privacyPolicyUrl: z.string().optional(),
    termsUrl: z.string().optional(),
    publishedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestRequestBodyVersions$inboundSchema
      ),
    ).optional(),
    installations: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesInstallations$inboundSchema
      ),
    ).optional(),
    analytics: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesAnalytics$inboundSchema),
    ).optional(),
    reviews: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesReviews$inboundSchema),
    ).optional(),
    info: z.lazy(() => PutApiWorkspaceServiceV1WorkspacesInfo$inboundSchema)
      .optional(),
    webhooks: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesWebhooks$inboundSchema),
    ).optional(),
    permissions: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesPermissions$inboundSchema),
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesInstalledApps$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  developerId?: string | undefined;
  category: string;
  supportedContractTypes?: Array<string> | undefined;
  features?: Array<string> | undefined;
  pricingModel: string;
  pricingTiers?: { [k: string]: number } | undefined;
  supportedIntegrations?: Array<string> | undefined;
  isVerified?: boolean | undefined;
  rating?: number | undefined;
  installationCount?: number | undefined;
  requiredPermissions?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  documentationUrl?: string | undefined;
  supportEmail?: string | undefined;
  screenshots?: Array<string> | undefined;
  privacyPolicyUrl?: string | undefined;
  termsUrl?: string | undefined;
  publishedAt?: string | undefined;
  lastUpdated?: string | undefined;
  versions?:
    | Array<
      PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestRequestBodyVersions$Outbound
    >
    | undefined;
  installations?:
    | Array<PutApiWorkspaceServiceV1WorkspacesInstallations$Outbound>
    | undefined;
  analytics?:
    | Array<PutApiWorkspaceServiceV1WorkspacesAnalytics$Outbound>
    | undefined;
  reviews?:
    | Array<PutApiWorkspaceServiceV1WorkspacesReviews$Outbound>
    | undefined;
  info?: PutApiWorkspaceServiceV1WorkspacesInfo$Outbound | undefined;
  webhooks?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWebhooks$Outbound>
    | undefined;
  permissions?:
    | Array<PutApiWorkspaceServiceV1WorkspacesPermissions$Outbound>
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesInstalledApps$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesInstalledApps$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesInstalledApps
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    developerId: z.string().optional(),
    category: PutApiWorkspaceServiceV1WorkspacesCategory$outboundSchema.default(
      "APP_CATEGORY_UNSPECIFIED",
    ),
    supportedContractTypes: z.array(z.string()).optional(),
    features: z.array(z.string()).optional(),
    pricingModel: PutApiWorkspaceServiceV1WorkspacesPricingModel$outboundSchema
      .default("PRICING_MODEL_UNSPECIFIED"),
    pricingTiers: z.record(z.number()).optional(),
    supportedIntegrations: z.array(z.string()).optional(),
    isVerified: z.boolean().optional(),
    rating: z.number().optional(),
    installationCount: z.number().int().optional(),
    requiredPermissions: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    documentationUrl: z.string().optional(),
    supportEmail: z.string().optional(),
    screenshots: z.array(z.string()).optional(),
    privacyPolicyUrl: z.string().optional(),
    termsUrl: z.string().optional(),
    publishedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesRequestRequestBodyVersions$outboundSchema
      ),
    ).optional(),
    installations: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesInstallations$outboundSchema
      ),
    ).optional(),
    analytics: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesAnalytics$outboundSchema),
    ).optional(),
    reviews: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesReviews$outboundSchema),
    ).optional(),
    info: z.lazy(() => PutApiWorkspaceServiceV1WorkspacesInfo$outboundSchema)
      .optional(),
    webhooks: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesWebhooks$outboundSchema),
    ).optional(),
    permissions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesPermissions$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesInstalledApps$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesInstalledApps$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesInstalledApps$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesInstalledApps$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesInstalledApps$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesInstalledApps$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesInstalledApps$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesInstalledAppsToJSON(
  putApiWorkspaceServiceV1WorkspacesInstalledApps:
    PutApiWorkspaceServiceV1WorkspacesInstalledApps,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesInstalledApps$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesInstalledApps,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesInstalledAppsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesInstalledApps,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesInstalledApps$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesInstalledApps' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspace$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspace,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    uniqueIdentifier: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    storageQuota: z.string().optional(),
    usedStorage: z.string().optional(),
    allowPublicSharing: z.boolean().optional(),
    requireApproval: z.boolean().optional(),
    gdprCompliant: z.boolean().optional(),
    hipaaCompliant: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    folders: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesFolders$inboundSchema),
    ).optional(),
    templates: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesTemplates$inboundSchema),
    ).optional(),
    sharing: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesSharing$inboundSchema
      ),
    ).optional(),
    activities: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesActivities$inboundSchema),
    ).optional(),
    compliance: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesCompliance$inboundSchema),
    ).optional(),
    installedApps: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesInstalledApps$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspace$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  uniqueIdentifier?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  storageQuota?: string | undefined;
  usedStorage?: string | undefined;
  allowPublicSharing?: boolean | undefined;
  requireApproval?: boolean | undefined;
  gdprCompliant?: boolean | undefined;
  hipaaCompliant?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  folders?:
    | Array<PutApiWorkspaceServiceV1WorkspacesFolders$Outbound>
    | undefined;
  templates?:
    | Array<PutApiWorkspaceServiceV1WorkspacesTemplates$Outbound>
    | undefined;
  sharing?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesSharing$Outbound>
    | undefined;
  activities?:
    | Array<PutApiWorkspaceServiceV1WorkspacesActivities$Outbound>
    | undefined;
  compliance?:
    | Array<PutApiWorkspaceServiceV1WorkspacesCompliance$Outbound>
    | undefined;
  installedApps?:
    | Array<PutApiWorkspaceServiceV1WorkspacesInstalledApps$Outbound>
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspace$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspace$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspace
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    uniqueIdentifier: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    storageQuota: z.string().optional(),
    usedStorage: z.string().optional(),
    allowPublicSharing: z.boolean().optional(),
    requireApproval: z.boolean().optional(),
    gdprCompliant: z.boolean().optional(),
    hipaaCompliant: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    folders: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesFolders$outboundSchema),
    ).optional(),
    templates: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesTemplates$outboundSchema),
    ).optional(),
    sharing: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesSharing$outboundSchema
      ),
    ).optional(),
    activities: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesActivities$outboundSchema),
    ).optional(),
    compliance: z.array(
      z.lazy(() => PutApiWorkspaceServiceV1WorkspacesCompliance$outboundSchema),
    ).optional(),
    installedApps: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesInstalledApps$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspace$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspace$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspace$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspace$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspace$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspace$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1WorkspacesWorkspace$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspaceToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspace:
    PutApiWorkspaceServiceV1WorkspacesWorkspace,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspace$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesWorkspace,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspaceFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspace,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspace$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspace' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesRequestBody$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    workspace: z.lazy(() =>
      PutApiWorkspaceServiceV1WorkspacesWorkspace$inboundSchema
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesRequestBody$Outbound = {
  workspace?: PutApiWorkspaceServiceV1WorkspacesWorkspace$Outbound | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesRequestBody$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesRequestBody$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesRequestBody
  > = z.object({
    workspace: z.lazy(() =>
      PutApiWorkspaceServiceV1WorkspacesWorkspace$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesRequestBody$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesRequestBody$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesRequestBody$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesRequestBody$Outbound` instead. */
  export type Outbound = PutApiWorkspaceServiceV1WorkspacesRequestBody$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesRequestBodyToJSON(
  putApiWorkspaceServiceV1WorkspacesRequestBody:
    PutApiWorkspaceServiceV1WorkspacesRequestBody,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesRequestBody$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesRequestBody,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesRequestBody' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesEmbeddings$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesEmbeddings,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    embeddings: z.array(z.number()).optional(),
    modelVersion: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesEmbeddings$Outbound = {
  id?: string | undefined;
  embeddings?: Array<number> | undefined;
  modelVersion?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesEmbeddings$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesEmbeddings$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesEmbeddings
  > = z.object({
    id: z.string().optional(),
    embeddings: z.array(z.number()).optional(),
    modelVersion: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesEmbeddings$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesEmbeddings$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesEmbeddings$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesEmbeddings$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesEmbeddings$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesEmbeddings$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesEmbeddings$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesEmbeddingsToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesEmbeddings:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesEmbeddings,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesEmbeddings$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesWorkspacesEmbeddings,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesEmbeddingsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesEmbeddings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesEmbeddings$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesEmbeddings' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONResponseBodyVersions$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONResponseBodyVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    versionNumber: z.number().int().optional(),
    s3Key: z.string().optional(),
    size: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONResponseBodyVersions$Outbound =
  {
    id?: string | undefined;
    fileId?: string | undefined;
    versionNumber?: number | undefined;
    s3Key?: string | undefined;
    size?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    createdAt?: string | undefined;
  };

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONResponseBodyVersions$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONResponseBodyVersions$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONResponseBodyVersions
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    versionNumber: z.number().int().optional(),
    s3Key: z.string().optional(),
    size: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONResponseBodyVersions$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONResponseBodyVersions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONResponseBodyVersions$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONResponseBodyVersions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONResponseBodyVersions$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONResponseBodyVersions$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONResponseBodyVersions$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONResponseBodyVersionsToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONResponseBodyVersions:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONResponseBodyVersions,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONResponseBodyVersions$outboundSchema
      .parse(
        putApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONResponseBodyVersions,
      ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONResponseBodyVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONResponseBodyVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONResponseBodyVersions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONResponseBodyVersions' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesComments$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesComments,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    authorId: z.string().optional(),
    content: z.string().optional(),
    startPosition: z.number().int().optional(),
    endPosition: z.number().int().optional(),
    resolved: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesComments$Outbound = {
  id?: string | undefined;
  authorId?: string | undefined;
  content?: string | undefined;
  startPosition?: number | undefined;
  endPosition?: number | undefined;
  resolved?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesComments$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesComments$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesComments
  > = z.object({
    id: z.string().optional(),
    authorId: z.string().optional(),
    content: z.string().optional(),
    startPosition: z.number().int().optional(),
    endPosition: z.number().int().optional(),
    resolved: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesComments$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesComments$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesComments$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesComments$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesComments$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesComments$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesComments$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesCommentsToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesComments:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesComments,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesComments$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesWorkspacesComments,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesCommentsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesComments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesComments$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesComments' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Sharing$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Sharing,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Sharing$Outbound =
  {
    id?: string | undefined;
    sharedWithEmail?: string | undefined;
    permissionLevel?: string | undefined;
    expiresAt?: string | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
  };

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Sharing$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Sharing$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Sharing
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Sharing$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Sharing$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Sharing$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Sharing$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Sharing$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Sharing$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Sharing$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesResponse200SharingToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Sharing:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Sharing,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Sharing$outboundSchema
      .parse(putApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Sharing),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesResponse200SharingFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Sharing,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Sharing$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Sharing' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesSnapshots$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSnapshots,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    snapshotHash: z.string().optional(),
    content: z.string().optional(),
    authorId: z.string().optional(),
    reason: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesSnapshots$Outbound = {
  id?: string | undefined;
  fileId?: string | undefined;
  snapshotHash?: string | undefined;
  content?: string | undefined;
  authorId?: string | undefined;
  reason?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesSnapshots$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSnapshots$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSnapshots
  > = z.object({
    id: z.string().optional(),
    fileId: z.string().optional(),
    snapshotHash: z.string().optional(),
    content: z.string().optional(),
    authorId: z.string().optional(),
    reason: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesSnapshots$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesSnapshots$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSnapshots$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesSnapshots$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSnapshots$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesSnapshots$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSnapshots$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesSnapshotsToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesSnapshots:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSnapshots,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSnapshots$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesWorkspacesSnapshots,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesSnapshotsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesSnapshots,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesSnapshots$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesSnapshots' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesFiles$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesFiles,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    size: z.string().optional(),
    s3Key: z.string().optional(),
    s3BucketName: z.string().optional(),
    isDeleted: z.boolean().optional(),
    version: z.number().int().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    embeddings: z.lazy(() =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesEmbeddings$inboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONResponseBodyVersions$inboundSchema
      ),
    ).optional(),
    comments: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesComments$inboundSchema
      ),
    ).optional(),
    sharing: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Sharing$inboundSchema
      ),
    ).optional(),
    snapshots: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesSnapshots$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesFiles$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  size?: string | undefined;
  s3Key?: string | undefined;
  s3BucketName?: string | undefined;
  isDeleted?: boolean | undefined;
  version?: number | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  embeddings?:
    | PutApiWorkspaceServiceV1WorkspacesWorkspacesEmbeddings$Outbound
    | undefined;
  versions?:
    | Array<
      PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONResponseBodyVersions$Outbound
    >
    | undefined;
  comments?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesComments$Outbound>
    | undefined;
  sharing?:
    | Array<
      PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Sharing$Outbound
    >
    | undefined;
  snapshots?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesSnapshots$Outbound>
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesFiles$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesFiles$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesFiles
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    size: z.string().optional(),
    s3Key: z.string().optional(),
    s3BucketName: z.string().optional(),
    isDeleted: z.boolean().optional(),
    version: z.number().int().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    embeddings: z.lazy(() =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesEmbeddings$outboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONResponseBodyVersions$outboundSchema
      ),
    ).optional(),
    comments: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesComments$outboundSchema
      ),
    ).optional(),
    sharing: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Sharing$outboundSchema
      ),
    ).optional(),
    snapshots: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesSnapshots$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesFiles$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesFiles$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesFiles$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesFiles$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesFiles$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesFiles$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesFiles$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesFilesToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesFiles:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesFiles,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesFiles$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesWorkspacesFiles,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesFilesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesFiles,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesFiles$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesFiles' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesFolders$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesFolders,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    isDeleted: z.boolean().optional(),
    parentFolderId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    files: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesFiles$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesFolders$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  isDeleted?: boolean | undefined;
  parentFolderId?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  files?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesFiles$Outbound>
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesFolders$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesFolders$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesFolders
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    isDeleted: z.boolean().optional(),
    parentFolderId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    files: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesFiles$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesFolders$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesFolders$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesFolders$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesFolders$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesFolders$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesFolders$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesFolders$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesFoldersToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesFolders:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesFolders,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesFolders$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesWorkspacesFolders,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesFoldersFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesFolders,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesFolders$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesFolders' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplateType$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplateType
  > = z.nativeEnum(PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplateType);

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplateType$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplateType
  > = PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplateType$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplateType$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplateType$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplateType$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplateType$outboundSchema;
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    version: z.string().optional(),
    baseContent: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    authorId: z.string().optional(),
    changeDescription: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$Outbound =
  {
    id?: string | undefined;
    templateId?: string | undefined;
    version?: string | undefined;
    baseContent?: string | undefined;
    metadata?: { [k: string]: string } | undefined;
    authorId?: string | undefined;
    changeDescription?: string | undefined;
    createdAt?: string | undefined;
  };

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    version: z.string().optional(),
    baseContent: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    authorId: z.string().optional(),
    changeDescription: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersionsToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$outboundSchema
      .parse(putApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesVariables$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesVariables,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    variableType: z.string().optional(),
    defaultValue: z.string().optional(),
    isRequired: z.boolean().optional(),
    validationRules: z.string().optional(),
    dataSource: z.string().optional(),
    aiExtractionRules: z.string().optional(),
    alternatives: z.array(z.string()).optional(),
    templateId: z.string().optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesVariables$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  variableType?: string | undefined;
  defaultValue?: string | undefined;
  isRequired?: boolean | undefined;
  validationRules?: string | undefined;
  dataSource?: string | undefined;
  aiExtractionRules?: string | undefined;
  alternatives?: Array<string> | undefined;
  templateId?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesVariables$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesVariables$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesVariables
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    variableType: z.string().optional(),
    defaultValue: z.string().optional(),
    isRequired: z.boolean().optional(),
    validationRules: z.string().optional(),
    dataSource: z.string().optional(),
    aiExtractionRules: z.string().optional(),
    alternatives: z.array(z.string()).optional(),
    templateId: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesVariables$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesVariables$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesVariables$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesVariables$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesVariables$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesVariables$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesVariables$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesVariablesToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesVariables:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesVariables,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesVariables$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesWorkspacesVariables,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesVariablesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesVariables,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesVariables$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesVariables' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseStatus
  > = z.nativeEnum(PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseStatus);

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseStatus
  > = PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseStatus$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseStatus$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseStatus$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseStatus$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseStatus$outboundSchema;
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Status$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Status
  > = z.nativeEnum(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Status,
  );

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Status$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Status
  > =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Status$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Status$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Status$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Status$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Status$outboundSchema;
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureBlocks$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureBlocks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    blockType: z.string().optional(),
    pageNumber: z.number().int().optional(),
    xPosition: z.number().optional(),
    yPosition: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    isRequired: z.boolean().optional(),
    signatureData: z.string().optional(),
    signedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureBlocks$Outbound =
  {
    id?: string | undefined;
    requestId?: string | undefined;
    blockType?: string | undefined;
    pageNumber?: number | undefined;
    xPosition?: number | undefined;
    yPosition?: number | undefined;
    width?: number | undefined;
    height?: number | undefined;
    isRequired?: boolean | undefined;
    signatureData?: string | undefined;
    signedAt?: string | undefined;
  };

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureBlocks$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureBlocks$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureBlocks
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    blockType: z.string().optional(),
    pageNumber: z.number().int().optional(),
    xPosition: z.number().optional(),
    yPosition: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
    isRequired: z.boolean().optional(),
    signatureData: z.string().optional(),
    signedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureBlocks$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureBlocks$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureBlocks$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureBlocks$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureBlocks$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureBlocks$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureBlocks$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesSignatureBlocksToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesSignatureBlocks:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureBlocks,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureBlocks$outboundSchema
      .parse(putApiWorkspaceServiceV1WorkspacesWorkspacesSignatureBlocks),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesSignatureBlocksFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureBlocks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureBlocks$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureBlocks' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkflow$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkflow,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    signingOrder: z.array(z.string()).optional(),
    currentSigner: z.string().optional(),
    workflowStatus: z.string().optional(),
    parallelSigning: z.boolean().optional(),
    requireAllSignatures: z.boolean().optional(),
    deadline: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkflow$Outbound = {
  id?: string | undefined;
  requestId?: string | undefined;
  signingOrder?: Array<string> | undefined;
  currentSigner?: string | undefined;
  workflowStatus?: string | undefined;
  parallelSigning?: boolean | undefined;
  requireAllSignatures?: boolean | undefined;
  deadline?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkflow$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkflow$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkflow
  > = z.object({
    id: z.string().optional(),
    requestId: z.string().optional(),
    signingOrder: z.array(z.string()).optional(),
    currentSigner: z.string().optional(),
    workflowStatus: z.string().optional(),
    parallelSigning: z.boolean().optional(),
    requireAllSignatures: z.boolean().optional(),
    deadline: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkflow$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkflow$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkflow$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkflow$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkflow$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkflow$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkflow$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesWorkflowToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesWorkflow:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkflow,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkflow$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesWorkspacesWorkflow,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesWorkflowFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkflow,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkflow$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkflow' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureRequests$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureRequests,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    status:
      PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Status$inboundSchema
        .default("SIGNATURE_STATUS_UNSPECIFIED"),
    signerEmail: z.string().optional(),
    signerName: z.string().optional(),
    role: z.string().optional(),
    authenticationMethod: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    requiresMfa: z.boolean().optional(),
    signatureType: z.string().optional(),
    reminderSchedule: z.array(z.string()).optional(),
    documentId: z.string().optional(),
    signatureBlocks: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureBlocks$inboundSchema
      ),
    ).optional(),
    workflow: z.lazy(() =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkflow$inboundSchema
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureRequests$Outbound =
  {
    id?: string | undefined;
    status: string;
    signerEmail?: string | undefined;
    signerName?: string | undefined;
    role?: string | undefined;
    authenticationMethod?: string | undefined;
    expiresAt?: string | undefined;
    requiresMfa?: boolean | undefined;
    signatureType?: string | undefined;
    reminderSchedule?: Array<string> | undefined;
    documentId?: string | undefined;
    signatureBlocks?:
      | Array<
        PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureBlocks$Outbound
      >
      | undefined;
    workflow?:
      | PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkflow$Outbound
      | undefined;
  };

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureRequests$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureRequests$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureRequests
  > = z.object({
    id: z.string().optional(),
    status:
      PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Status$outboundSchema
        .default("SIGNATURE_STATUS_UNSPECIFIED"),
    signerEmail: z.string().optional(),
    signerName: z.string().optional(),
    role: z.string().optional(),
    authenticationMethod: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    requiresMfa: z.boolean().optional(),
    signatureType: z.string().optional(),
    reminderSchedule: z.array(z.string()).optional(),
    documentId: z.string().optional(),
    signatureBlocks: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureBlocks$outboundSchema
      ),
    ).optional(),
    workflow: z.lazy(() =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkflow$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureRequests$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureRequests$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureRequests$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureRequests$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureRequests$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureRequests$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureRequests$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesSignatureRequestsToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesSignatureRequests:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureRequests,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureRequests$outboundSchema
      .parse(putApiWorkspaceServiceV1WorkspacesWorkspacesSignatureRequests),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesSignatureRequestsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureRequests,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureRequests$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureRequests' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesAiAssistance$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesAiAssistance,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    interactionType: z.string().optional(),
    userQuery: z.string().optional(),
    aiResponse: z.string().optional(),
    context: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesAiAssistance$Outbound =
  {
    id?: string | undefined;
    documentId?: string | undefined;
    interactionType?: string | undefined;
    userQuery?: string | undefined;
    aiResponse?: string | undefined;
    context?: { [k: string]: string } | undefined;
    createdAt?: string | undefined;
  };

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesAiAssistance$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesAiAssistance$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesAiAssistance
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    interactionType: z.string().optional(),
    userQuery: z.string().optional(),
    aiResponse: z.string().optional(),
    context: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesAiAssistance$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesAiAssistance$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesAiAssistance$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesAiAssistance$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesAiAssistance$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesAiAssistance$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesAiAssistance$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesAiAssistanceToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesAiAssistance:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesAiAssistance,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesAiAssistance$outboundSchema
      .parse(putApiWorkspaceServiceV1WorkspacesWorkspacesAiAssistance),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesAiAssistanceFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesAiAssistance,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesAiAssistance$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesAiAssistance' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesRounds$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRounds,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    historyId: z.string().optional(),
    roundNumber: z.number().int().optional(),
    proposerId: z.string().optional(),
    proposalContent: z.string().optional(),
    responseContent: z.string().optional(),
    status: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesRounds$Outbound = {
  id?: string | undefined;
  historyId?: string | undefined;
  roundNumber?: number | undefined;
  proposerId?: string | undefined;
  proposalContent?: string | undefined;
  responseContent?: string | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesRounds$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRounds$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRounds
  > = z.object({
    id: z.string().optional(),
    historyId: z.string().optional(),
    roundNumber: z.number().int().optional(),
    proposerId: z.string().optional(),
    proposalContent: z.string().optional(),
    responseContent: z.string().optional(),
    status: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesRounds$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesRounds$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRounds$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesRounds$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRounds$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesRounds$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRounds$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesRoundsToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesRounds:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRounds,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRounds$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesWorkspacesRounds,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesRoundsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesRounds,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesRounds$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesRounds' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesNegotiation$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesNegotiation,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    rounds: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesRounds$inboundSchema
      ),
    ).optional(),
    currentStatus: z.string().optional(),
    startedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesNegotiation$Outbound = {
  id?: string | undefined;
  documentId?: string | undefined;
  rounds?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesRounds$Outbound>
    | undefined;
  currentStatus?: string | undefined;
  startedAt?: string | undefined;
  lastUpdated?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesNegotiation$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesNegotiation$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesNegotiation
  > = z.object({
    id: z.string().optional(),
    documentId: z.string().optional(),
    rounds: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesRounds$outboundSchema
      ),
    ).optional(),
    currentStatus: z.string().optional(),
    startedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesNegotiation$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesNegotiation$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesNegotiation$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesNegotiation$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesNegotiation$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesNegotiation$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesNegotiation$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesNegotiationToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesNegotiation:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesNegotiation,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesNegotiation$outboundSchema
      .parse(putApiWorkspaceServiceV1WorkspacesWorkspacesNegotiation),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesNegotiationFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesNegotiation,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesNegotiation$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesNegotiation' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesMerges$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesMerges,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    sourceBranch: z.string().optional(),
    targetBranch: z.string().optional(),
    mergeStatus: z.string().optional(),
    mergeStrategy: z.string().optional(),
    conflicts: z.array(z.string()).optional(),
    mergerId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    completedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesMerges$Outbound = {
  id?: string | undefined;
  branchId?: string | undefined;
  sourceBranch?: string | undefined;
  targetBranch?: string | undefined;
  mergeStatus?: string | undefined;
  mergeStrategy?: string | undefined;
  conflicts?: Array<string> | undefined;
  mergerId?: string | undefined;
  createdAt?: string | undefined;
  completedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesMerges$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesMerges$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesMerges
  > = z.object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    sourceBranch: z.string().optional(),
    targetBranch: z.string().optional(),
    mergeStatus: z.string().optional(),
    mergeStrategy: z.string().optional(),
    conflicts: z.array(z.string()).optional(),
    mergerId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    completedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesMerges$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesMerges$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesMerges$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesMerges$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesMerges$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesMerges$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesMerges$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesMergesToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesMerges:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesMerges,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesMerges$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesWorkspacesMerges,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesMergesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesMerges,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesMerges$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesMerges' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesPolicy$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesPolicy,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    requiredApprovers: z.array(z.string()).optional(),
    minimumApprovals: z.number().int().optional(),
    enforceLinearHistory: z.boolean().optional(),
    allowForcePush: z.boolean().optional(),
    protectedPaths: z.array(z.string()).optional(),
    mergeRules: z.record(z.string()).optional(),
    automatedChecks: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesPolicy$Outbound = {
  id?: string | undefined;
  branchId?: string | undefined;
  requiredApprovers?: Array<string> | undefined;
  minimumApprovals?: number | undefined;
  enforceLinearHistory?: boolean | undefined;
  allowForcePush?: boolean | undefined;
  protectedPaths?: Array<string> | undefined;
  mergeRules?: { [k: string]: string } | undefined;
  automatedChecks?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesPolicy$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesPolicy$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesPolicy
  > = z.object({
    id: z.string().optional(),
    branchId: z.string().optional(),
    requiredApprovers: z.array(z.string()).optional(),
    minimumApprovals: z.number().int().optional(),
    enforceLinearHistory: z.boolean().optional(),
    allowForcePush: z.boolean().optional(),
    protectedPaths: z.array(z.string()).optional(),
    mergeRules: z.record(z.string()).optional(),
    automatedChecks: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesPolicy$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesPolicy$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesPolicy$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesPolicy$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesPolicy$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesPolicy$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesPolicy$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesPolicyToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesPolicy:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesPolicy,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesPolicy$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesWorkspacesPolicy,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesPolicyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesPolicy,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesPolicy$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesPolicy' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesMergeRequests$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesMergeRequests,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sourceBranchId: z.string().optional(),
    targetBranchId: z.string().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    authorId: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    status: z.string().optional(),
    labels: z.array(z.string()).optional(),
    hasConflicts: z.boolean().optional(),
    automatedCheckResults: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesMergeRequests$Outbound =
  {
    id?: string | undefined;
    sourceBranchId?: string | undefined;
    targetBranchId?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    authorId?: string | undefined;
    reviewers?: Array<string> | undefined;
    status?: string | undefined;
    labels?: Array<string> | undefined;
    hasConflicts?: boolean | undefined;
    automatedCheckResults?: Array<string> | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
  };

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesMergeRequests$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesMergeRequests$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesMergeRequests
  > = z.object({
    id: z.string().optional(),
    sourceBranchId: z.string().optional(),
    targetBranchId: z.string().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    authorId: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    status: z.string().optional(),
    labels: z.array(z.string()).optional(),
    hasConflicts: z.boolean().optional(),
    automatedCheckResults: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesMergeRequests$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesMergeRequests$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesMergeRequests$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesMergeRequests$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesMergeRequests$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesMergeRequests$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesMergeRequests$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesMergeRequestsToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesMergeRequests:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesMergeRequests,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesMergeRequests$outboundSchema
      .parse(putApiWorkspaceServiceV1WorkspacesWorkspacesMergeRequests),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesMergeRequestsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesMergeRequests,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesMergeRequests$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesMergeRequests' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesBranches$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesBranches,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    baseVersionHash: z.string().optional(),
    currentHeadHash: z.string().optional(),
    purpose: z.string().optional(),
    status: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    branchMetadata: z.record(z.string()).optional(),
    isLocked: z.boolean().optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    merges: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesMerges$inboundSchema
      ),
    ).optional(),
    policy: z.lazy(() =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesPolicy$inboundSchema
    ).optional(),
    mergeRequests: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesMergeRequests$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesBranches$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  baseVersionHash?: string | undefined;
  currentHeadHash?: string | undefined;
  purpose?: string | undefined;
  status?: string | undefined;
  reviewers?: Array<string> | undefined;
  branchMetadata?: { [k: string]: string } | undefined;
  isLocked?: boolean | undefined;
  lastUpdated?: string | undefined;
  merges?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesMerges$Outbound>
    | undefined;
  policy?:
    | PutApiWorkspaceServiceV1WorkspacesWorkspacesPolicy$Outbound
    | undefined;
  mergeRequests?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesMergeRequests$Outbound>
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesBranches$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesBranches$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesBranches
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    baseVersionHash: z.string().optional(),
    currentHeadHash: z.string().optional(),
    purpose: z.string().optional(),
    status: z.string().optional(),
    reviewers: z.array(z.string()).optional(),
    branchMetadata: z.record(z.string()).optional(),
    isLocked: z.boolean().optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
    merges: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesMerges$outboundSchema
      ),
    ).optional(),
    policy: z.lazy(() =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesPolicy$outboundSchema
    ).optional(),
    mergeRequests: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesMergeRequests$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesBranches$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesBranches$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesBranches$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesBranches$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesBranches$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesBranches$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesBranches$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesBranchesToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesBranches:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesBranches,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesBranches$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesWorkspacesBranches,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesBranchesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesBranches,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesBranches$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesBranches' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesChanges$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesChanges,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    changeType: z.string().optional(),
    contentBefore: z.string().optional(),
    contentAfter: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesChanges$Outbound = {
  id?: string | undefined;
  versionId?: string | undefined;
  changeType?: string | undefined;
  contentBefore?: string | undefined;
  contentAfter?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesChanges$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesChanges$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesChanges
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    changeType: z.string().optional(),
    contentBefore: z.string().optional(),
    contentAfter: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesChanges$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesChanges$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesChanges$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesChanges$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesChanges$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesChanges$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesChanges$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesChangesToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesChanges:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesChanges,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesChanges$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesWorkspacesChanges,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesChangesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesChanges,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesChanges$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesChanges' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesSummaries$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSummaries,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    summaryType: z.string().optional(),
    content: z.string().optional(),
    targetAudience: z.string().optional(),
    keyPoints: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesSummaries$Outbound = {
  id?: string | undefined;
  versionId?: string | undefined;
  summaryType?: string | undefined;
  content?: string | undefined;
  targetAudience?: string | undefined;
  keyPoints?: Array<string> | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesSummaries$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSummaries$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSummaries
  > = z.object({
    id: z.string().optional(),
    versionId: z.string().optional(),
    summaryType: z.string().optional(),
    content: z.string().optional(),
    targetAudience: z.string().optional(),
    keyPoints: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesSummaries$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesSummaries$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSummaries$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesSummaries$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSummaries$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesSummaries$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSummaries$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesSummariesToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesSummaries:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSummaries,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesSummaries$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesWorkspacesSummaries,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesSummariesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesSummaries,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesSummaries$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesSummaries' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONVersions$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONVersions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    versionHash: z.string().optional(),
    parentHash: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    branchName: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    isApproved: z.boolean().optional(),
    approvalChain: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    branches: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesBranches$inboundSchema
      ),
    ).optional(),
    changes: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesChanges$inboundSchema
      ),
    ).optional(),
    summaries: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesSummaries$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONVersions$Outbound =
  {
    id?: string | undefined;
    versionHash?: string | undefined;
    parentHash?: string | undefined;
    commitMessage?: string | undefined;
    authorId?: string | undefined;
    branchName?: string | undefined;
    metadata?: { [k: string]: string } | undefined;
    tags?: Array<string> | undefined;
    isApproved?: boolean | undefined;
    approvalChain?: string | undefined;
    createdAt?: string | undefined;
    branches?:
      | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesBranches$Outbound>
      | undefined;
    changes?:
      | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesChanges$Outbound>
      | undefined;
    summaries?:
      | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesSummaries$Outbound>
      | undefined;
  };

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONVersions$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONVersions$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONVersions
  > = z.object({
    id: z.string().optional(),
    versionHash: z.string().optional(),
    parentHash: z.string().optional(),
    commitMessage: z.string().optional(),
    authorId: z.string().optional(),
    branchName: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    tags: z.array(z.string()).optional(),
    isApproved: z.boolean().optional(),
    approvalChain: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    branches: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesBranches$outboundSchema
      ),
    ).optional(),
    changes: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesChanges$outboundSchema
      ),
    ).optional(),
    summaries: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesSummaries$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONVersions$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONVersions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONVersions$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONVersions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONVersions$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONVersions$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONVersions$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONVersionsToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONVersions:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONVersions,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONVersions$outboundSchema
      .parse(
        putApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONVersions,
      ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONVersions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONVersions' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesInstances$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInstances,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    status:
      PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseStatus$inboundSchema
        .default("DOCUMENT_STATUS_UNSPECIFIED"),
    fieldValues: z.record(z.string()).optional(),
    signers: z.array(z.string()).optional(),
    language: z.string().optional(),
    isCompleted: z.boolean().optional(),
    dueDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    generatedContent: z.string().optional(),
    attachments: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    signatureRequests: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureRequests$inboundSchema
      ),
    ).optional(),
    aiAssistance: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesAiAssistance$inboundSchema
      ),
    ).optional(),
    negotiation: z.lazy(() =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesNegotiation$inboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONVersions$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesInstances$Outbound = {
  id?: string | undefined;
  templateId?: string | undefined;
  status: string;
  fieldValues?: { [k: string]: string } | undefined;
  signers?: Array<string> | undefined;
  language?: string | undefined;
  isCompleted?: boolean | undefined;
  dueDate?: string | undefined;
  generatedContent?: string | undefined;
  attachments?: Array<string> | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  signatureRequests?:
    | Array<
      PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureRequests$Outbound
    >
    | undefined;
  aiAssistance?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesAiAssistance$Outbound>
    | undefined;
  negotiation?:
    | PutApiWorkspaceServiceV1WorkspacesWorkspacesNegotiation$Outbound
    | undefined;
  versions?:
    | Array<
      PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONVersions$Outbound
    >
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesInstances$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInstances$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInstances
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    status:
      PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseStatus$outboundSchema
        .default("DOCUMENT_STATUS_UNSPECIFIED"),
    fieldValues: z.record(z.string()).optional(),
    signers: z.array(z.string()).optional(),
    language: z.string().optional(),
    isCompleted: z.boolean().optional(),
    dueDate: z.date().transform(v => v.toISOString()).optional(),
    generatedContent: z.string().optional(),
    attachments: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    signatureRequests: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesSignatureRequests$outboundSchema
      ),
    ).optional(),
    aiAssistance: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesAiAssistance$outboundSchema
      ),
    ).optional(),
    negotiation: z.lazy(() =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesNegotiation$outboundSchema
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200ApplicationJSONVersions$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesInstances$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesInstances$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInstances$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesInstances$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInstances$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesInstances$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInstances$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesInstancesToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesInstances:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInstances,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInstances$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesWorkspacesInstances,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesInstancesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesInstances,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesInstances$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesInstances' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesExplanations$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesExplanations,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    sectionIdentifier: z.string().optional(),
    explanationText: z.string().optional(),
    complexityLevel: z.string().optional(),
    relatedTerms: z.array(z.string()).optional(),
    legalReferences: z.array(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesExplanations$Outbound =
  {
    id?: string | undefined;
    templateId?: string | undefined;
    sectionIdentifier?: string | undefined;
    explanationText?: string | undefined;
    complexityLevel?: string | undefined;
    relatedTerms?: Array<string> | undefined;
    legalReferences?: Array<string> | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
  };

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesExplanations$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesExplanations$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesExplanations
  > = z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    sectionIdentifier: z.string().optional(),
    explanationText: z.string().optional(),
    complexityLevel: z.string().optional(),
    relatedTerms: z.array(z.string()).optional(),
    legalReferences: z.array(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesExplanations$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesExplanations$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesExplanations$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesExplanations$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesExplanations$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesExplanations$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesExplanations$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesExplanationsToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesExplanations:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesExplanations,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesExplanations$outboundSchema
      .parse(putApiWorkspaceServiceV1WorkspacesWorkspacesExplanations),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesExplanationsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesExplanations,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesExplanations$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesExplanations' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesRiskAssessments$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRiskAssessments,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    riskType: z.string().optional(),
    riskScore: z.number().optional(),
    assessmentDetails: z.string().optional(),
    mitigationSuggestions: z.array(z.string()).optional(),
    assessorId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesRiskAssessments$Outbound =
  {
    id?: string | undefined;
    intelligenceId?: string | undefined;
    riskType?: string | undefined;
    riskScore?: number | undefined;
    assessmentDetails?: string | undefined;
    mitigationSuggestions?: Array<string> | undefined;
    assessorId?: string | undefined;
    createdAt?: string | undefined;
  };

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesRiskAssessments$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRiskAssessments$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRiskAssessments
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    riskType: z.string().optional(),
    riskScore: z.number().optional(),
    assessmentDetails: z.string().optional(),
    mitigationSuggestions: z.array(z.string()).optional(),
    assessorId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesRiskAssessments$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesRiskAssessments$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRiskAssessments$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesRiskAssessments$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRiskAssessments$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesRiskAssessments$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRiskAssessments$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesRiskAssessmentsToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesRiskAssessments:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRiskAssessments,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesRiskAssessments$outboundSchema
      .parse(putApiWorkspaceServiceV1WorkspacesWorkspacesRiskAssessments),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesRiskAssessmentsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesRiskAssessments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesRiskAssessments$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesRiskAssessments' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesComplianceChecks$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesComplianceChecks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    complianceStandard: z.string().optional(),
    checkResult: z.string().optional(),
    violations: z.array(z.string()).optional(),
    remediationSteps: z.string().optional(),
    checkDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesComplianceChecks$Outbound =
  {
    id?: string | undefined;
    intelligenceId?: string | undefined;
    complianceStandard?: string | undefined;
    checkResult?: string | undefined;
    violations?: Array<string> | undefined;
    remediationSteps?: string | undefined;
    checkDate?: string | undefined;
  };

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesComplianceChecks$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesComplianceChecks$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesComplianceChecks
  > = z.object({
    id: z.string().optional(),
    intelligenceId: z.string().optional(),
    complianceStandard: z.string().optional(),
    checkResult: z.string().optional(),
    violations: z.array(z.string()).optional(),
    remediationSteps: z.string().optional(),
    checkDate: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesComplianceChecks$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesComplianceChecks$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesComplianceChecks$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesComplianceChecks$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesComplianceChecks$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesComplianceChecks$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesComplianceChecks$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesComplianceChecksToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesComplianceChecks:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesComplianceChecks,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesComplianceChecks$outboundSchema
      .parse(putApiWorkspaceServiceV1WorkspacesWorkspacesComplianceChecks),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesComplianceChecksFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesComplianceChecks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesComplianceChecks$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesComplianceChecks' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesIntelligence$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesIntelligence,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    contractType: z.string().optional(),
    riskScores: z.record(z.number()).optional(),
    detectedClauses: z.record(z.string()).optional(),
    keyObligations: z.array(z.string()).optional(),
    complianceScores: z.record(z.number()).optional(),
    jurisdiction: z.string().optional(),
    governingLaws: z.array(z.string()).optional(),
    semanticAnalysis: z.record(z.string()).optional(),
    analysisDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    riskAssessments: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesRiskAssessments$inboundSchema
      ),
    ).optional(),
    complianceChecks: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesComplianceChecks$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesIntelligence$Outbound =
  {
    id?: string | undefined;
    contractType?: string | undefined;
    riskScores?: { [k: string]: number } | undefined;
    detectedClauses?: { [k: string]: string } | undefined;
    keyObligations?: Array<string> | undefined;
    complianceScores?: { [k: string]: number } | undefined;
    jurisdiction?: string | undefined;
    governingLaws?: Array<string> | undefined;
    semanticAnalysis?: { [k: string]: string } | undefined;
    analysisDate?: string | undefined;
    riskAssessments?:
      | Array<
        PutApiWorkspaceServiceV1WorkspacesWorkspacesRiskAssessments$Outbound
      >
      | undefined;
    complianceChecks?:
      | Array<
        PutApiWorkspaceServiceV1WorkspacesWorkspacesComplianceChecks$Outbound
      >
      | undefined;
  };

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesIntelligence$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesIntelligence$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesIntelligence
  > = z.object({
    id: z.string().optional(),
    contractType: z.string().optional(),
    riskScores: z.record(z.number()).optional(),
    detectedClauses: z.record(z.string()).optional(),
    keyObligations: z.array(z.string()).optional(),
    complianceScores: z.record(z.number()).optional(),
    jurisdiction: z.string().optional(),
    governingLaws: z.array(z.string()).optional(),
    semanticAnalysis: z.record(z.string()).optional(),
    analysisDate: z.date().transform(v => v.toISOString()).optional(),
    riskAssessments: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesRiskAssessments$outboundSchema
      ),
    ).optional(),
    complianceChecks: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesComplianceChecks$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesIntelligence$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesIntelligence$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesIntelligence$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesIntelligence$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesIntelligence$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesIntelligence$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesIntelligence$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesIntelligenceToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesIntelligence:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesIntelligence,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesIntelligence$outboundSchema
      .parse(putApiWorkspaceServiceV1WorkspacesWorkspacesIntelligence),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesIntelligenceFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesIntelligence,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesIntelligence$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesIntelligence' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplates$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplates,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    industryType: z.string().optional(),
    documentType: z.string().optional(),
    baseContent: z.string().optional(),
    isAdaptive: z.boolean().optional(),
    metadata: z.record(z.string()).optional(),
    supportedLanguages: z.array(z.string()).optional(),
    requiredDataFields: z.array(z.string()).optional(),
    version: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    templateType:
      PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplateType$inboundSchema
        .default("TEMPLATE_TYPE_UNSPECIFIED"),
    content: z.string().optional(),
    detectedVariables: z.array(z.string()).optional(),
    variableMappings: z.record(z.string()).optional(),
    isContextAware: z.boolean().optional(),
    supportedContexts: z.array(z.string()).optional(),
    formattingRules: z.record(z.string()).optional(),
    conditionalSections: z.array(z.string()).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$inboundSchema
      ),
    ).optional(),
    variables: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesVariables$inboundSchema
      ),
    ).optional(),
    instances: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesInstances$inboundSchema
      ),
    ).optional(),
    explanations: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesExplanations$inboundSchema
      ),
    ).optional(),
    intelligence: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesIntelligence$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplates$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  industryType?: string | undefined;
  documentType?: string | undefined;
  baseContent?: string | undefined;
  isAdaptive?: boolean | undefined;
  metadata?: { [k: string]: string } | undefined;
  supportedLanguages?: Array<string> | undefined;
  requiredDataFields?: Array<string> | undefined;
  version?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  templateType: string;
  content?: string | undefined;
  detectedVariables?: Array<string> | undefined;
  variableMappings?: { [k: string]: string } | undefined;
  isContextAware?: boolean | undefined;
  supportedContexts?: Array<string> | undefined;
  formattingRules?: { [k: string]: string } | undefined;
  conditionalSections?: Array<string> | undefined;
  versions?:
    | Array<
      PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$Outbound
    >
    | undefined;
  variables?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesVariables$Outbound>
    | undefined;
  instances?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesInstances$Outbound>
    | undefined;
  explanations?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesExplanations$Outbound>
    | undefined;
  intelligence?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesIntelligence$Outbound>
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplates$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplates$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplates
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    industryType: z.string().optional(),
    documentType: z.string().optional(),
    baseContent: z.string().optional(),
    isAdaptive: z.boolean().optional(),
    metadata: z.record(z.string()).optional(),
    supportedLanguages: z.array(z.string()).optional(),
    requiredDataFields: z.array(z.string()).optional(),
    version: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    templateType:
      PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplateType$outboundSchema
        .default("TEMPLATE_TYPE_UNSPECIFIED"),
    content: z.string().optional(),
    detectedVariables: z.array(z.string()).optional(),
    variableMappings: z.record(z.string()).optional(),
    isContextAware: z.boolean().optional(),
    supportedContexts: z.array(z.string()).optional(),
    formattingRules: z.record(z.string()).optional(),
    conditionalSections: z.array(z.string()).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseVersions$outboundSchema
      ),
    ).optional(),
    variables: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesVariables$outboundSchema
      ),
    ).optional(),
    instances: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesInstances$outboundSchema
      ),
    ).optional(),
    explanations: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesExplanations$outboundSchema
      ),
    ).optional(),
    intelligence: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesIntelligence$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplates$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplates$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplates$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplates$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplates$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplates$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplates$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesTemplatesToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesTemplates:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplates,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplates$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesWorkspacesTemplates,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesTemplatesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplates,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplates$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplates' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseSharing$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseSharing,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseSharing$Outbound =
  {
    id?: string | undefined;
    sharedWithEmail?: string | undefined;
    permissionLevel?: string | undefined;
    expiresAt?: string | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
  };

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseSharing$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseSharing$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseSharing
  > = z.object({
    id: z.string().optional(),
    sharedWithEmail: z.string().optional(),
    permissionLevel: z.string().optional(),
    expiresAt: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseSharing$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseSharing$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseSharing$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseSharing$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseSharing$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseSharing$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseSharing$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesResponseSharingToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesResponseSharing:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseSharing,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseSharing$outboundSchema
      .parse(putApiWorkspaceServiceV1WorkspacesWorkspacesResponseSharing),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesResponseSharingFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseSharing,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseSharing$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseSharing' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesActivities$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesActivities,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    activityType: z.string().optional(),
    userId: z.string().optional(),
    description: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesActivities$Outbound = {
  id?: string | undefined;
  activityType?: string | undefined;
  userId?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesActivities$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesActivities$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesActivities
  > = z.object({
    id: z.string().optional(),
    activityType: z.string().optional(),
    userId: z.string().optional(),
    description: z.string().optional(),
    metadata: z.record(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesActivities$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesActivities$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesActivities$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesActivities$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesActivities$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesActivities$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesActivities$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesActivitiesToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesActivities:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesActivities,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesActivities$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesWorkspacesActivities,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesActivitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesActivities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesActivities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesActivities' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesCompliance$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesCompliance,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    complianceType: z.string().optional(),
    status: z.string().optional(),
    certificationId: z.string().optional(),
    validUntil: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesCompliance$Outbound = {
  id?: string | undefined;
  complianceType?: string | undefined;
  status?: string | undefined;
  certificationId?: string | undefined;
  validUntil?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesCompliance$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesCompliance$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesCompliance
  > = z.object({
    id: z.string().optional(),
    complianceType: z.string().optional(),
    status: z.string().optional(),
    certificationId: z.string().optional(),
    validUntil: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesCompliance$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesCompliance$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesCompliance$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesCompliance$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesCompliance$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesCompliance$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesCompliance$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesComplianceToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesCompliance:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesCompliance,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesCompliance$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesWorkspacesCompliance,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesComplianceFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesCompliance,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesCompliance$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesCompliance' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesCategory$inboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1WorkspacesWorkspacesCategory> =
    z.nativeEnum(PutApiWorkspaceServiceV1WorkspacesWorkspacesCategory);

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesCategory$outboundSchema:
  z.ZodNativeEnum<typeof PutApiWorkspaceServiceV1WorkspacesWorkspacesCategory> =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesCategory$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesCategory$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesCategory$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesCategory$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesCategory$outboundSchema;
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesPricingModel$inboundSchema:
  z.ZodNativeEnum<
    typeof PutApiWorkspaceServiceV1WorkspacesWorkspacesPricingModel
  > = z.nativeEnum(PutApiWorkspaceServiceV1WorkspacesWorkspacesPricingModel);

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesPricingModel$outboundSchema:
  z.ZodNativeEnum<
    typeof PutApiWorkspaceServiceV1WorkspacesWorkspacesPricingModel
  > = PutApiWorkspaceServiceV1WorkspacesWorkspacesPricingModel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesPricingModel$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesPricingModel$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesPricingModel$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesPricingModel$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesPricingModel$outboundSchema;
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    versionNumber: z.string().optional(),
    changelog: z.string().optional(),
    requirements: z.record(z.string()).optional(),
    isPublic: z.boolean().optional(),
    releaseDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$Outbound =
  {
    id?: string | undefined;
    appId?: string | undefined;
    versionNumber?: string | undefined;
    changelog?: string | undefined;
    requirements?: { [k: string]: string } | undefined;
    isPublic?: boolean | undefined;
    releaseDate?: string | undefined;
  };

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    versionNumber: z.string().optional(),
    changelog: z.string().optional(),
    requirements: z.record(z.string()).optional(),
    isPublic: z.boolean().optional(),
    releaseDate: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesResponse200VersionsToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$outboundSchema
      .parse(putApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesResponse200VersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesInstallations$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInstallations,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    workspaceId: z.string().optional(),
    versionInstalled: z.string().optional(),
    configuration: z.record(z.string()).optional(),
    installationStatus: z.string().optional(),
    installedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    lastUsed: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesInstallations$Outbound =
  {
    id?: string | undefined;
    appId?: string | undefined;
    workspaceId?: string | undefined;
    versionInstalled?: string | undefined;
    configuration?: { [k: string]: string } | undefined;
    installationStatus?: string | undefined;
    installedAt?: string | undefined;
    lastUsed?: string | undefined;
  };

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesInstallations$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInstallations$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInstallations
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    workspaceId: z.string().optional(),
    versionInstalled: z.string().optional(),
    configuration: z.record(z.string()).optional(),
    installationStatus: z.string().optional(),
    installedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUsed: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesInstallations$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesInstallations$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInstallations$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesInstallations$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInstallations$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesInstallations$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInstallations$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesInstallationsToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesInstallations:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInstallations,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInstallations$outboundSchema
      .parse(putApiWorkspaceServiceV1WorkspacesWorkspacesInstallations),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesInstallationsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesInstallations,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesInstallations$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesInstallations' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesAnalytics$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesAnalytics,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    metricName: z.string().optional(),
    metricValue: z.number().optional(),
    dimensions: z.record(z.string()).optional(),
    recordedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesAnalytics$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  metricName?: string | undefined;
  metricValue?: number | undefined;
  dimensions?: { [k: string]: string } | undefined;
  recordedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesAnalytics$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesAnalytics$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesAnalytics
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    metricName: z.string().optional(),
    metricValue: z.number().optional(),
    dimensions: z.record(z.string()).optional(),
    recordedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesAnalytics$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesAnalytics$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesAnalytics$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesAnalytics$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesAnalytics$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesAnalytics$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesAnalytics$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesAnalyticsToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesAnalytics:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesAnalytics,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesAnalytics$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesWorkspacesAnalytics,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesAnalytics,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesAnalytics$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesAnalytics' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesReviews$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesReviews,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    reviewerId: z.string().optional(),
    rating: z.number().optional(),
    reviewText: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesReviews$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  reviewerId?: string | undefined;
  rating?: number | undefined;
  reviewText?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesReviews$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesReviews$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesReviews
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    reviewerId: z.string().optional(),
    rating: z.number().optional(),
    reviewText: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesReviews$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesReviews$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesReviews$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesReviews$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesReviews$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesReviews$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesReviews$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesReviewsToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesReviews:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesReviews,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesReviews$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesWorkspacesReviews,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesReviewsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesReviews,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesReviews$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesReviews' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesInfo$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInfo,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    supportedLanguages: z.array(z.string()).optional(),
    sdkFeatures: z.array(z.string()).optional(),
    testCoverage: z.record(z.number()).optional(),
    securityScans: z.array(z.string()).optional(),
    performanceMetrics: z.record(z.string()).optional(),
    developmentStatus: z.string().optional(),
    knownIssues: z.array(z.string()).optional(),
    roadmapUrl: z.string().optional(),
    lastSecurityAudit: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesInfo$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  supportedLanguages?: Array<string> | undefined;
  sdkFeatures?: Array<string> | undefined;
  testCoverage?: { [k: string]: number } | undefined;
  securityScans?: Array<string> | undefined;
  performanceMetrics?: { [k: string]: string } | undefined;
  developmentStatus?: string | undefined;
  knownIssues?: Array<string> | undefined;
  roadmapUrl?: string | undefined;
  lastSecurityAudit?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesInfo$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInfo$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInfo
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    supportedLanguages: z.array(z.string()).optional(),
    sdkFeatures: z.array(z.string()).optional(),
    testCoverage: z.record(z.number()).optional(),
    securityScans: z.array(z.string()).optional(),
    performanceMetrics: z.record(z.string()).optional(),
    developmentStatus: z.string().optional(),
    knownIssues: z.array(z.string()).optional(),
    roadmapUrl: z.string().optional(),
    lastSecurityAudit: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesInfo$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesInfo$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInfo$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesInfo$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInfo$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesInfo$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInfo$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesInfoToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesInfo:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInfo,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInfo$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesWorkspacesInfo,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesInfoFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesInfo,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesInfo$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesInfo' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesWebhooks$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesWebhooks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    url: z.string().optional(),
    subscribedEvents: z.array(z.string()).optional(),
    secretKey: z.string().optional(),
    retryCount: z.number().int().optional(),
    timeoutSeconds: z.number().int().optional(),
    isActive: z.boolean().optional(),
    headers: z.record(z.string()).optional(),
    lastTriggered: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesWebhooks$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  url?: string | undefined;
  subscribedEvents?: Array<string> | undefined;
  secretKey?: string | undefined;
  retryCount?: number | undefined;
  timeoutSeconds?: number | undefined;
  isActive?: boolean | undefined;
  headers?: { [k: string]: string } | undefined;
  lastTriggered?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesWebhooks$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesWebhooks$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesWebhooks
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    url: z.string().optional(),
    subscribedEvents: z.array(z.string()).optional(),
    secretKey: z.string().optional(),
    retryCount: z.number().int().optional(),
    timeoutSeconds: z.number().int().optional(),
    isActive: z.boolean().optional(),
    headers: z.record(z.string()).optional(),
    lastTriggered: z.date().transform(v => v.toISOString()).optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesWebhooks$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesWebhooks$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesWebhooks$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesWebhooks$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesWebhooks$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesWebhooks$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesWebhooks$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesWebhooksToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesWebhooks:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesWebhooks,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesWebhooks$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesWorkspacesWebhooks,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesWebhooksFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesWebhooks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesWebhooks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesWebhooks' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesPermissions$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesPermissions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    scope: z.string().optional(),
    description: z.string().optional(),
    isRequired: z.boolean().optional(),
    accessLevels: z.array(z.string()).optional(),
    constraints: z.record(z.string()).optional(),
    requiresApproval: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesPermissions$Outbound = {
  id?: string | undefined;
  appId?: string | undefined;
  scope?: string | undefined;
  description?: string | undefined;
  isRequired?: boolean | undefined;
  accessLevels?: Array<string> | undefined;
  constraints?: { [k: string]: string } | undefined;
  requiresApproval?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesPermissions$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesPermissions$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesPermissions
  > = z.object({
    id: z.string().optional(),
    appId: z.string().optional(),
    scope: z.string().optional(),
    description: z.string().optional(),
    isRequired: z.boolean().optional(),
    accessLevels: z.array(z.string()).optional(),
    constraints: z.record(z.string()).optional(),
    requiresApproval: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesPermissions$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesPermissions$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesPermissions$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesPermissions$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesPermissions$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesPermissions$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesPermissions$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesPermissionsToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesPermissions:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesPermissions,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesPermissions$outboundSchema
      .parse(putApiWorkspaceServiceV1WorkspacesWorkspacesPermissions),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesPermissionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesPermissions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesPermissions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesPermissions' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesInstalledApps$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInstalledApps,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    developerId: z.string().optional(),
    category: PutApiWorkspaceServiceV1WorkspacesWorkspacesCategory$inboundSchema
      .default("APP_CATEGORY_UNSPECIFIED"),
    supportedContractTypes: z.array(z.string()).optional(),
    features: z.array(z.string()).optional(),
    pricingModel:
      PutApiWorkspaceServiceV1WorkspacesWorkspacesPricingModel$inboundSchema
        .default("PRICING_MODEL_UNSPECIFIED"),
    pricingTiers: z.record(z.number()).optional(),
    supportedIntegrations: z.array(z.string()).optional(),
    isVerified: z.boolean().optional(),
    rating: z.number().optional(),
    installationCount: z.number().int().optional(),
    requiredPermissions: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    documentationUrl: z.string().optional(),
    supportEmail: z.string().optional(),
    screenshots: z.array(z.string()).optional(),
    privacyPolicyUrl: z.string().optional(),
    termsUrl: z.string().optional(),
    publishedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$inboundSchema
      ),
    ).optional(),
    installations: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesInstallations$inboundSchema
      ),
    ).optional(),
    analytics: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesAnalytics$inboundSchema
      ),
    ).optional(),
    reviews: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesReviews$inboundSchema
      ),
    ).optional(),
    info: z.lazy(() =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesInfo$inboundSchema
    ).optional(),
    webhooks: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesWebhooks$inboundSchema
      ),
    ).optional(),
    permissions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesPermissions$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesInstalledApps$Outbound =
  {
    id?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    developerId?: string | undefined;
    category: string;
    supportedContractTypes?: Array<string> | undefined;
    features?: Array<string> | undefined;
    pricingModel: string;
    pricingTiers?: { [k: string]: number } | undefined;
    supportedIntegrations?: Array<string> | undefined;
    isVerified?: boolean | undefined;
    rating?: number | undefined;
    installationCount?: number | undefined;
    requiredPermissions?: Array<string> | undefined;
    metadata?: { [k: string]: string } | undefined;
    documentationUrl?: string | undefined;
    supportEmail?: string | undefined;
    screenshots?: Array<string> | undefined;
    privacyPolicyUrl?: string | undefined;
    termsUrl?: string | undefined;
    publishedAt?: string | undefined;
    lastUpdated?: string | undefined;
    versions?:
      | Array<
        PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$Outbound
      >
      | undefined;
    installations?:
      | Array<
        PutApiWorkspaceServiceV1WorkspacesWorkspacesInstallations$Outbound
      >
      | undefined;
    analytics?:
      | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesAnalytics$Outbound>
      | undefined;
    reviews?:
      | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesReviews$Outbound>
      | undefined;
    info?:
      | PutApiWorkspaceServiceV1WorkspacesWorkspacesInfo$Outbound
      | undefined;
    webhooks?:
      | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesWebhooks$Outbound>
      | undefined;
    permissions?:
      | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesPermissions$Outbound>
      | undefined;
  };

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesInstalledApps$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInstalledApps$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInstalledApps
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    developerId: z.string().optional(),
    category:
      PutApiWorkspaceServiceV1WorkspacesWorkspacesCategory$outboundSchema
        .default("APP_CATEGORY_UNSPECIFIED"),
    supportedContractTypes: z.array(z.string()).optional(),
    features: z.array(z.string()).optional(),
    pricingModel:
      PutApiWorkspaceServiceV1WorkspacesWorkspacesPricingModel$outboundSchema
        .default("PRICING_MODEL_UNSPECIFIED"),
    pricingTiers: z.record(z.number()).optional(),
    supportedIntegrations: z.array(z.string()).optional(),
    isVerified: z.boolean().optional(),
    rating: z.number().optional(),
    installationCount: z.number().int().optional(),
    requiredPermissions: z.array(z.string()).optional(),
    metadata: z.record(z.string()).optional(),
    documentationUrl: z.string().optional(),
    supportEmail: z.string().optional(),
    screenshots: z.array(z.string()).optional(),
    privacyPolicyUrl: z.string().optional(),
    termsUrl: z.string().optional(),
    publishedAt: z.date().transform(v => v.toISOString()).optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
    versions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesResponse200Versions$outboundSchema
      ),
    ).optional(),
    installations: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesInstallations$outboundSchema
      ),
    ).optional(),
    analytics: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesAnalytics$outboundSchema
      ),
    ).optional(),
    reviews: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesReviews$outboundSchema
      ),
    ).optional(),
    info: z.lazy(() =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesInfo$outboundSchema
    ).optional(),
    webhooks: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesWebhooks$outboundSchema
      ),
    ).optional(),
    permissions: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesPermissions$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesInstalledApps$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesInstalledApps$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInstalledApps$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesInstalledApps$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInstalledApps$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesInstalledApps$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInstalledApps$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesInstalledAppsToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesInstalledApps:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInstalledApps,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesInstalledApps$outboundSchema
      .parse(putApiWorkspaceServiceV1WorkspacesWorkspacesInstalledApps),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesInstalledAppsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesInstalledApps,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesInstalledApps$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesInstalledApps' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkspace$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkspace,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    uniqueIdentifier: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    storageQuota: z.string().optional(),
    usedStorage: z.string().optional(),
    allowPublicSharing: z.boolean().optional(),
    requireApproval: z.boolean().optional(),
    gdprCompliant: z.boolean().optional(),
    hipaaCompliant: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    deletedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    folders: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesFolders$inboundSchema
      ),
    ).optional(),
    templates: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplates$inboundSchema
      ),
    ).optional(),
    sharing: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseSharing$inboundSchema
      ),
    ).optional(),
    activities: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesActivities$inboundSchema
      ),
    ).optional(),
    compliance: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesCompliance$inboundSchema
      ),
    ).optional(),
    installedApps: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesInstalledApps$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkspace$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  uniqueIdentifier?: string | undefined;
  s3BucketName?: string | undefined;
  s3FolderPath?: string | undefined;
  storageQuota?: string | undefined;
  usedStorage?: string | undefined;
  allowPublicSharing?: boolean | undefined;
  requireApproval?: boolean | undefined;
  gdprCompliant?: boolean | undefined;
  hipaaCompliant?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  deletedAt?: string | undefined;
  folders?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesFolders$Outbound>
    | undefined;
  templates?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplates$Outbound>
    | undefined;
  sharing?:
    | Array<
      PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseSharing$Outbound
    >
    | undefined;
  activities?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesActivities$Outbound>
    | undefined;
  compliance?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesCompliance$Outbound>
    | undefined;
  installedApps?:
    | Array<PutApiWorkspaceServiceV1WorkspacesWorkspacesInstalledApps$Outbound>
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkspace$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkspace$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkspace
  > = z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    uniqueIdentifier: z.string().optional(),
    s3BucketName: z.string().optional(),
    s3FolderPath: z.string().optional(),
    storageQuota: z.string().optional(),
    usedStorage: z.string().optional(),
    allowPublicSharing: z.boolean().optional(),
    requireApproval: z.boolean().optional(),
    gdprCompliant: z.boolean().optional(),
    hipaaCompliant: z.boolean().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    updatedAt: z.date().transform(v => v.toISOString()).optional(),
    deletedAt: z.date().transform(v => v.toISOString()).optional(),
    folders: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesFolders$outboundSchema
      ),
    ).optional(),
    templates: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesTemplates$outboundSchema
      ),
    ).optional(),
    sharing: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesResponseSharing$outboundSchema
      ),
    ).optional(),
    activities: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesActivities$outboundSchema
      ),
    ).optional(),
    compliance: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesCompliance$outboundSchema
      ),
    ).optional(),
    installedApps: z.array(
      z.lazy(() =>
        PutApiWorkspaceServiceV1WorkspacesWorkspacesInstalledApps$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkspace$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkspace$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkspace$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkspace$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkspace$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkspace$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkspace$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesWorkspaceToJSON(
  putApiWorkspaceServiceV1WorkspacesWorkspacesWorkspace:
    PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkspace,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkspace$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesWorkspacesWorkspace,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesWorkspacesWorkspaceFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkspace,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkspace$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkspace' from JSON`,
  );
}

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesResponseBody$inboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    workspace: z.lazy(() =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkspace$inboundSchema
    ).optional(),
  });

/** @internal */
export type PutApiWorkspaceServiceV1WorkspacesResponseBody$Outbound = {
  workspace?:
    | PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkspace$Outbound
    | undefined;
};

/** @internal */
export const PutApiWorkspaceServiceV1WorkspacesResponseBody$outboundSchema:
  z.ZodType<
    PutApiWorkspaceServiceV1WorkspacesResponseBody$Outbound,
    z.ZodTypeDef,
    PutApiWorkspaceServiceV1WorkspacesResponseBody
  > = z.object({
    workspace: z.lazy(() =>
      PutApiWorkspaceServiceV1WorkspacesWorkspacesWorkspace$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiWorkspaceServiceV1WorkspacesResponseBody$ {
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PutApiWorkspaceServiceV1WorkspacesResponseBody$inboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PutApiWorkspaceServiceV1WorkspacesResponseBody$outboundSchema;
  /** @deprecated use `PutApiWorkspaceServiceV1WorkspacesResponseBody$Outbound` instead. */
  export type Outbound =
    PutApiWorkspaceServiceV1WorkspacesResponseBody$Outbound;
}

export function putApiWorkspaceServiceV1WorkspacesResponseBodyToJSON(
  putApiWorkspaceServiceV1WorkspacesResponseBody:
    PutApiWorkspaceServiceV1WorkspacesResponseBody,
): string {
  return JSON.stringify(
    PutApiWorkspaceServiceV1WorkspacesResponseBody$outboundSchema.parse(
      putApiWorkspaceServiceV1WorkspacesResponseBody,
    ),
  );
}

export function putApiWorkspaceServiceV1WorkspacesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiWorkspaceServiceV1WorkspacesResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiWorkspaceServiceV1WorkspacesResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutApiWorkspaceServiceV1WorkspacesResponseBody' from JSON`,
  );
}
