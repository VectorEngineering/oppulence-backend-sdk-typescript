/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { jobsCreate } from "../funcs/jobsCreate.js";
import { jobsDelete } from "../funcs/jobsDelete.js";
import { jobsDownload } from "../funcs/jobsDownload.js";
import { jobsGet } from "../funcs/jobsGet.js";
import { jobsGetAll } from "../funcs/jobsGetAll.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Jobs extends ClientSDK {
  /**
   * Get all jobs
   *
   * @remarks
   * This endpoint retrieves all Google Maps scraping jobs
   */
  async getAll(
    request: operations.GetApiLeadScraperMicroserviceApiV1JobsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetApiLeadScraperMicroserviceApiV1JobsResponseBody> {
    return unwrapAsync(jobsGetAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new job scraping task
   *
   * @remarks
   * This endpoint creates a new Google Maps scraping job
   */
  async create(
    request: operations.PostApiLeadScraperMicroserviceApiV1JobsRequestBody,
    options?: RequestOptions,
  ): Promise<operations.PostApiLeadScraperMicroserviceApiV1JobsResponseBody> {
    return unwrapAsync(jobsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific job
   *
   * @remarks
   * This endpoint retrieves a specific Google Maps scraping job
   */
  async get(
    request: operations.GetApiLeadScraperMicroserviceApiV1JobsJobIdRequest,
    options?: RequestOptions,
  ): Promise<
    operations.GetApiLeadScraperMicroserviceApiV1JobsJobIdResponseBody
  > {
    return unwrapAsync(jobsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a specific job
   *
   * @remarks
   * This endpoint deletes a specific Google Maps scraping job
   */
  async delete(
    request: operations.DeleteApiLeadScraperMicroserviceApiV1JobsJobIdRequest,
    options?: RequestOptions,
  ): Promise<
    operations.DeleteApiLeadScraperMicroserviceApiV1JobsJobIdResponseBody
  > {
    return unwrapAsync(jobsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Download job results as CSV
   *
   * @remarks
   * This endpoint downloads the results of a Google Maps scraping job as CSV
   */
  async download(
    request:
      operations.GetApiLeadScraperMicroserviceApiV1JobsJobIdDownloadRequest,
    options?: RequestOptions,
  ): Promise<
    operations.GetApiLeadScraperMicroserviceApiV1JobsJobIdDownloadResponseBody
  > {
    return unwrapAsync(jobsDownload(
      this,
      request,
      options,
    ));
  }
}
