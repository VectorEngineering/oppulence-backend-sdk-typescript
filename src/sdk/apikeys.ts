/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { apiKeysCreate } from "../funcs/apiKeysCreate.js";
import { apiKeysDelete } from "../funcs/apiKeysDelete.js";
import { apiKeysGet } from "../funcs/apiKeysGet.js";
import { apiKeysGetTenantDetails } from "../funcs/apiKeysGetTenantDetails.js";
import { apiKeysList } from "../funcs/apiKeysList.js";
import { apiKeysRotate } from "../funcs/apiKeysRotate.js";
import { apiKeysUpdate } from "../funcs/apiKeysUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ApiKeys extends ClientSDK {
  /**
   * Create a new API key
   *
   * @remarks
   * Creates a new API key with specified permissions and settings
   */
  async create(
    request: operations.PostApiLeadScraperMicroserviceApiV1ApiKeysRequestBody,
    options?: RequestOptions,
  ): Promise<
    operations.PostApiLeadScraperMicroserviceApiV1ApiKeysResponseBody
  > {
    return unwrapAsync(apiKeysCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update API key
   *
   * @remarks
   * Updates an existing API key&#x27;s configuration
   */
  async update(
    request: operations.PutApiLeadScraperMicroserviceApiV1ApiKeysRequestBody,
    options?: RequestOptions,
  ): Promise<operations.PutApiLeadScraperMicroserviceApiV1ApiKeysResponseBody> {
    return unwrapAsync(apiKeysUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * List API keys
   *
   * @remarks
   * Retrieves a list of API keys with optional filtering
   */
  async list(
    request: operations.GetApiLeadScraperMicroserviceApiV1ApiKeysListRequest,
    options?: RequestOptions,
  ): Promise<
    operations.GetApiLeadScraperMicroserviceApiV1ApiKeysListResponseBody
  > {
    return unwrapAsync(apiKeysList(
      this,
      request,
      options,
    ));
  }

  /**
   * Rotate API key
   *
   * @remarks
   * Rotates an API key while maintaining its configuration
   */
  async rotate(
    request:
      operations.PostApiLeadScraperMicroserviceApiV1ApiKeysRotateRequestBody,
    options?: RequestOptions,
  ): Promise<
    operations.PostApiLeadScraperMicroserviceApiV1ApiKeysRotateResponseBody
  > {
    return unwrapAsync(apiKeysRotate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get API key details
   *
   * @remarks
   * Retrieves details of a specific API key
   */
  async get(
    request: operations.GetApiLeadScraperMicroserviceApiV1ApiKeysKeyIdRequest,
    options?: RequestOptions,
  ): Promise<
    operations.GetApiLeadScraperMicroserviceApiV1ApiKeysKeyIdResponseBody
  > {
    return unwrapAsync(apiKeysGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete API key
   *
   * @remarks
   * Permanently deletes an API key
   */
  async delete(
    request:
      operations.DeleteApiLeadScraperMicroserviceApiV1ApiKeysKeyIdRequest,
    options?: RequestOptions,
  ): Promise<
    operations.DeleteApiLeadScraperMicroserviceApiV1ApiKeysKeyIdResponseBody
  > {
    return unwrapAsync(apiKeysDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get tenant API key details
   *
   * @remarks
   * Retrieves details of a specific tenant API key
   */
  async getTenantDetails(
    request:
      operations.GetApiLeadScraperMicroserviceApiV1OrganizationsTenantsApiKeysKeyIdRequest,
    options?: RequestOptions,
  ): Promise<
    operations.GetApiLeadScraperMicroserviceApiV1OrganizationsTenantsApiKeysKeyIdResponseBody
  > {
    return unwrapAsync(apiKeysGetTenantDetails(
      this,
      request,
      options,
    ));
  }
}
