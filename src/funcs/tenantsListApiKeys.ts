/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { OppulenceBackendSDKCore } from "../core.js";
import { encodeFormQuery } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { pathToFunc } from "../lib/url.js";
import { APIError } from "../models/errors/apierror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * List tenant API keys
 *
 * @remarks
 * Retrieves all API keys for a specific tenant
 */
export function tenantsListApiKeys(
  client: OppulenceBackendSDKCore,
  request:
    operations.GetApiLeadScraperMicroserviceApiV1OrganizationsTenantsApiKeysListRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    operations.GetApiLeadScraperMicroserviceApiV1OrganizationsTenantsApiKeysListResponseBody,
    | errors.GetApiLeadScraperMicroserviceApiV1OrganizationsTenantsApiKeysListErrorResponse
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: OppulenceBackendSDKCore,
  request:
    operations.GetApiLeadScraperMicroserviceApiV1OrganizationsTenantsApiKeysListRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      operations.GetApiLeadScraperMicroserviceApiV1OrganizationsTenantsApiKeysListResponseBody,
      | errors.GetApiLeadScraperMicroserviceApiV1OrganizationsTenantsApiKeysListErrorResponse
      | APIError
      | SDKValidationError
      | UnexpectedClientError
      | InvalidRequestError
      | RequestAbortedError
      | RequestTimeoutError
      | ConnectionError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) =>
      operations
        .GetApiLeadScraperMicroserviceApiV1OrganizationsTenantsApiKeysListRequest$outboundSchema
        .parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = null;

  const path = pathToFunc(
    "/api/lead-scraper-microservice/api/v1/organizations/tenants/api-keys/list",
  )();

  const query = encodeFormQuery({
    "organizationId": payload.organizationId,
    "pageNumber": payload.pageNumber,
    "pageSize": payload.pageSize,
    "status": payload.status,
    "tenantId": payload.tenantId,
  });

  const headers = new Headers(compactMap({
    Accept: "application/json",
  }));

  const context = {
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID:
      "get_/api/lead-scraper-microservice/api/v1/organizations/tenants/api-keys/list",
    oAuth2Scopes: [],

    resolvedSecurity: null,

    securitySource: null,
    retryConfig: options?.retries
      || client._options.retryConfig
      || {
        strategy: "backoff",
        backoff: {
          initialInterval: 500,
          maxInterval: 60000,
          exponent: 1.5,
          maxElapsedTime: 1200000,
        },
        retryConnectionErrors: true,
      }
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["5XX"],
  };

  const requestRes = client._createRequest(context, {
    method: "GET",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    query: query,
    body: body,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    operations.GetApiLeadScraperMicroserviceApiV1OrganizationsTenantsApiKeysListResponseBody,
    | errors.GetApiLeadScraperMicroserviceApiV1OrganizationsTenantsApiKeysListErrorResponse
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(
      200,
      operations
        .GetApiLeadScraperMicroserviceApiV1OrganizationsTenantsApiKeysListResponseBody$inboundSchema,
    ),
    M.jsonErr(
      400,
      errors
        .GetApiLeadScraperMicroserviceApiV1OrganizationsTenantsApiKeysListErrorResponse$inboundSchema,
    ),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
